{"title": "JavaScript Geolocation API Tutorial \u2013 How to Get a User's Location in JS", "byline": "Israel Mitolu", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>JavaScript Geolocation API Tutorial \u2013 How to Get a User's Location in JS</h1>\n<section>\n<section data-test-label=\"post-content\">\n<p>Some applications require you to know your user's location, like food delivery or eCommerce apps. So you'll need an efficient way to get this info.</p>\n<p>The Geolocation API, which we will look at today, is a simple solution. You can use it to determine your users' location, local currency, language, and other useful information. You can then use this to provide them with the most relevant content based on their location.</p>\n<p>In this article, we'll go over what the Geolocation API is, why it's useful, and how to use it in your apps.</p>\n<h2 id=\"whatisthegeolocationapi\">What Is the Geolocation API?</h2>\n<p>The JavaScript Geolocation API provides access to geographical location data associated with a user's device. This can be determined using GPS, WIFI, IP Geolocation and so on.</p>\n<p>To protect the user's privacy, it requests permission to locate the device. If the user grants permission, you will gain access to location data such as latitude, longitude, altitude, and speed. You'll also get the accuracy of the acquired location data and the approximate time when the position was acquired.</p>\n<p>Here are a few uses for geolocation:</p>\n<ul>\n<li>Show user's position on a map</li>\n<li>Get up-to-date local information</li>\n<li>Show local Points-of-interest (POI) near the user</li>\n<li>Enable Turn-by-turn navigation (GPS)</li>\n<li>Track a fleet or delivery vehicle</li>\n<li>Tag photographs with a location</li>\n</ul>\n<p>You can access the Geolocation API by calling the <code>navigator.geolocation</code> object. It grants the app access to the device's location.</p>\n<p>This object provides the methods listed below for working with the device's position:</p>\n<ol>\n<li>getCurrentPosition: Returns the current location of the device.</li>\n<li>watchPosition: A handler function that is automatically invoked when the device's location changes.</li>\n</ol>\n<p>There are three possible arguments with these methods:</p>\n<ul>\n<li>A success callback (required)</li>\n<li>An error callback (optional)</li>\n<li>An options object (optional)</li>\n</ul>\n<h3 id=\"howtogetuserlocationwithgetcurrentposition\">How to Get User Location with <code>getCurrentPosition()</code></h3>\n<p>You can use the <code>getCurrentPosition</code> method to get the user's current location. It sends an asynchronous request to the browser, asking for consent to share their location.</p>\n<p>Here is the syntax for getting a user's location:</p>\n<pre tabindex=\"0\"><code>const successCallback = (position) =&gt; {\n  console.log(position);\n};\n\nconst errorCallback = (error) =&gt; {\n  console.log(error);\n};\n\nnavigator.geolocation.getCurrentPosition(successCallback, errorCallback);\n</code></pre>\n<p>When you run this, you'll get a popup in the browser requesting permission:</p>\n<!--kg-card-end: markdown--><figure><img alt=\"popup\" height=\"148\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2022/09/popup.PNG\" width=\"379\"/></figure><!--kg-card-begin: markdown--><p>Click <strong>Allow</strong>, and open up the developer console. You'll see that the successful call returns two things:</p>\n<ol>\n<li><code>GeolocationPosition.coords</code> object: represents the position, altitude and the accuracy at which the device calculates these properties.</li>\n<li><code>timestamp</code>: represents the time at which the location was gotten.</li>\n</ol>\n<p>You should see something like this in your console:</p>\n<pre><code>GeolocationPosition {coords: GeolocationCoordinates, timestamp: 1662499816712}\n    coords: GeolocationCoordinates\n        accuracy: 7173.528443511279\n        altitude: null\n        altitudeAccuracy: null\n        heading: null\n        latitude: 6.5568768\n        longitude: 3.3488896\n        speed: null\n        [[Prototype]]: GeolocationCoordinates\ntimestamp: 1662499816712\n</code></pre>\n<!--kg-card-end: markdown--><!--kg-card-begin: markdown--><p>With this simple request, we've successfully gotten the location. But that's not all. We can also track the user by watching their location.</p>\n<h3 id=\"howtotrackuserlocationwithwatchposition\">How to Track User Location with <code>watchPosition()</code></h3>\n<p>The <code>watchPosition()</code> method allows the app to continually track the user, and get updated as their position changes. It does this by installing a handler function that will be called automatically whenever the user's device position changes.</p>\n<p>Here is the syntax below, where <code>id</code> is basically used to manage or reference the method:</p>\n<pre tabindex=\"0\"><code>const id = navigator.geolocation.watchPosition(successCallback, errorCallback);\n</code></pre>\n<h3 id=\"howtostoptrackingpositionwithclearwatch\">How to Stop Tracking Position with <code>clearWatch()</code></h3>\n<p>We use the <code>clearWatch()</code> method to cancel the handler functions that were previously installed using the <code>watchPosition</code>.</p>\n<pre tabindex=\"0\"><code>navigator.geolocation.clearWatch(id);\n</code></pre>\n<h3 id=\"howtousetheoptionsobject\">How to Use the <code>options</code> Object</h3>\n<p>Although the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/getCurrentPosition#parameters\"><code>options</code></a> object is optional, it provides parameters that can help you get more accurate results, for example:</p>\n<pre tabindex=\"0\"><code>const options = {\n  enableHighAccuracy: true,\n  timeout: 10000,\n};\n\nnavigator.geolocation.getCurrentPosition(\n  successCallback,\n  errorCallback,\n  options\n);\n</code></pre>\n<p>In the code above, we specified in out options object that:</p>\n<ul>\n<li>The response should provide a more accurate position, by setting enableHighAccuracy to true.</li>\n<li>The maximum length of time (in milliseconds) the device is allowed to take in order to return a position. In this case, 10 seconds.</li>\n</ul>\n<h2 id=\"wrappingup\">Wrapping Up</h2>\n<p>In this article, we learned about the JavaScript Geolocation API, how to use it to get a user's location and also track the user using the watchPosition() method.</p>\n<p>You can go further to explore this API by building a Weather app, Search App or Map app. Thanks for reading!</p>\n<!--kg-card-end: markdown-->\n</section>\n<hr/>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nSome applications require you to know your user's location, like food delivery or eCommerce apps. So you'll need an efficient way to get this info.\nThe Geolocation API, which we will look at today, is a simple solution. You can use it to determine your users' location, local currency, language, and other useful information. You can then use this to provide them with the most relevant content based on their location.\nIn this article, we'll go over what the Geolocation API is, why it's useful, and how to use it in your apps.\nWhat Is the Geolocation API?\nThe JavaScript Geolocation API provides access to geographical location data associated with a user's device. This can be determined using GPS, WIFI, IP Geolocation and so on.\nTo protect the user's privacy, it requests permission to locate the device. If the user grants permission, you will gain access to location data such as latitude, longitude, altitude, and speed. You'll also get the accuracy of the acquired location data and the approximate time when the position was acquired.\nHere are a few uses for geolocation:\n\nShow user's position on a map\nGet up-to-date local information\nShow local Points-of-interest (POI) near the user\nEnable Turn-by-turn navigation (GPS)\nTrack a fleet or delivery vehicle\nTag photographs with a location\n\n\nYou can access the Geolocation API by calling the navigator.geolocation object. It grants the app access to the device's location.\nThis object provides the methods listed below for working with the device's position:\n\ngetCurrentPosition: Returns the current location of the device.\nwatchPosition: A handler function that is automatically invoked when the device's location changes.\n\nThere are three possible arguments with these methods:\n\nA success callback (required)\nAn error callback (optional)\nAn options object (optional)\n\nHow to Get User Location with getCurrentPosition()\nYou can use the getCurrentPosition method to get the user's current location. It sends an asynchronous request to the browser, asking for consent to share their location.\nHere is the syntax for getting a user's location:\nconst successCallback = (position) => {\n  console.log(position);\n};\n\nconst errorCallback = (error) => {\n  console.log(error);\n};\n\nnavigator.geolocation.getCurrentPosition(successCallback, errorCallback);\n\nWhen you run this, you'll get a popup in the browser requesting permission:\nClick Allow, and open up the developer console. You'll see that the successful call returns two things:\n\nGeolocationPosition.coords object: represents the position, altitude and the accuracy at which the device calculates these properties.\ntimestamp: represents the time at which the location was gotten.\n\nYou should see something like this in your console:\nGeolocationPosition {coords: GeolocationCoordinates, timestamp: 1662499816712}\n    coords: GeolocationCoordinates\n        accuracy: 7173.528443511279\n        altitude: null\n        altitudeAccuracy: null\n        heading: null\n        latitude: 6.5568768\n        longitude: 3.3488896\n        speed: null\n        [[Prototype]]: GeolocationCoordinates\ntimestamp: 1662499816712\n\nWith this simple request, we've successfully gotten the location. But that's not all. We can also track the user by watching their location.\nHow to Track User Location with watchPosition()\nThe watchPosition() method allows the app to continually track the user, and get updated as their position changes. It does this by installing a handler function that will be called automatically whenever the user's device position changes.\nHere is the syntax below, where id is basically used to manage or reference the method:\nconst id = navigator.geolocation.watchPosition(successCallback, errorCallback);\n\nHow to Stop Tracking Position with clearWatch()\nWe use the clearWatch() method to cancel the handler functions that were previously installed using the watchPosition.\nnavigator.geolocation.clearWatch(id);\n\nHow to Use the options Object\nAlthough the options object is optional, it provides parameters that can help you get more accurate results, for example:\nconst options = {\n  enableHighAccuracy: true,\n  timeout: 10000,\n};\n\nnavigator.geolocation.getCurrentPosition(\n  successCallback,\n  errorCallback,\n  options\n);\n\nIn the code above, we specified in out options object that:\n\nThe response should provide a more accurate position, by setting enableHighAccuracy to true.\nThe maximum length of time (in milliseconds) the device is allowed to take in order to return a position. In this case, 10 seconds.\n\nWrapping Up\nIn this article, we learned about the JavaScript Geolocation API, how to use it to get a user's location and also track the user using the watchPosition() method.\nYou can go further to explore this API by building a Weather app, Search App or Map app. Thanks for reading!\n\n\n                        \n                    \n                    \n                        \n                        \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 5491, "excerpt": "Some applications require you to know your user's location, like food delivery\nor eCommerce apps. So you'll need an efficient way to get this info.\n\nThe Geolocation API, which we will look at today, is a simple solution. You can\nuse it to determine your users' location, local currency, language, and other\nuseful information. You can then use this to provide them with the most relevant\ncontent based on their location.\n\nIn this article, we'll go over what the Geolocation API is, why it's useful, a", "siteName": "freeCodeCamp.org", "publishedTime": "2022-09-07T18:29:36.000Z", "id": "f8c325c8a689df32aca1a68a71040ff2732838c1", "url": "https://www.freecodecamp.org/news/how-to-get-user-location-with-javascript-geolocation-api/", "domain": "freecodecamp.org", "date": "2023-12-27T18:05:18.425456", "resultUri": "http://localhost:3000/result/f8c325c8a689df32aca1a68a71040ff2732838c1", "query": {"url": ["https://www.freecodecamp.org/news/how-to-get-user-location-with-javascript-geolocation-api/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "JavaScript Geolocation API Tutorial \u2013 How to Get a User's Location in JS", "description": "Some applications require you to know your user's location, like food delivery or eCommerce apps. So you'll need an efficient way to get this info. The Geolocation API, which we will look at today, is a simple solution. You can use it to determine your users' location, local currency, language,", "url": "https://www.freecodecamp.org/news/how-to-get-user-location-with-javascript-geolocation-api/", "image": "https://www.freecodecamp.org/news/content/images/2022/09/Blog-article-cover-images--4---1-.png", "image:width": "1600", "image:height": "840"}, "twitter": {"card": "summary_large_image", "title": "JavaScript Geolocation API Tutorial \u2013 How to Get a User's Location in JS", "description": "Some applications require you to know your user's location, like food delivery or eCommerce apps. So you'll need an efficient way to get this info. The Geolocation API, which we will look at today, is a simple solution. You can use it to determine your users' location, local currency, language,", "url": "https://www.freecodecamp.org/news/how-to-get-user-location-with-javascript-geolocation-api/", "image": "https://www.freecodecamp.org/news/content/images/2022/09/Blog-article-cover-images--4---1-.png", "label1": "Written by", "data1": "Israel Mitolu", "label2": "Filed under", "data2": "JavaScript, Web Development, Programming, API", "site": "@freecodecamp", "creator": "@israelmitolu"}}}