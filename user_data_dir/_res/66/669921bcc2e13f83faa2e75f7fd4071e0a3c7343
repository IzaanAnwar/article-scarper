{"title": "What is Coding? Computer Coding Definition", "byline": "Dionysia Lemonaki", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>What is Coding? Computer Coding Definition</h1>\n<section>\n<section data-test-label=\"post-content\">\n<p>When you're starting your coding journey, one of the most exciting \u2013 and at times overwhelming \u2013 things about it is just how much there is to learn.</p>\n<p>You'll discover different languages, frameworks, libraries, inventions and conventions.</p>\n<p>One technology often requires knowledge of another one, and everything seems to be interconnected and intertwined.</p>\n<p>With new technologies coming out often in such a fast paced and ever-changing industry, it can quickly get confusing for beginner coders.</p>\n<p>When learning how to code, instead of just focusing on learning a specific technology, it can also help to learn the foundations \u2013 the building blocks \u2013 and to peel back the layers of abstraction to get to know the underlying principles that all these technologies have in common.</p>\n<p>Understanding what coding is at a fundamental level will make solving problems easier and will give you a better understanding of how these technologies work underneath the hood.</p>\n<p>In this article we will learn what coding is so you have a solid foundation on which to build.</p>\n<h2 id=\"howdocomputerswork\">How Do Computers Work?</h2>\n<p>Computers, when powered off, are just costly electronic machines. They're objects consisting of a bunch of metals, plastics, and other materials.</p>\n<p>However, once you press the power button and they have gone through their power-up process, called <em>booting up</em>, they come to life.</p>\n<p>Your computer turns into this extremely powerful machine. It's this electronic device that gets to do complicated tasks at mind boggling speeds that would be difficult, if not impossible, for humans to do.</p>\n<p>Their screens are vibrant and active and there's a variety of buttons and icons ready to be clicked.</p>\n<h3 id=\"computersandelectricity\">Computers and Electricity</h3>\n<p>Computers are powered and function with the help of electricity.</p>\n<p>Electricity has only two states \u2013 it can be <strong>either turned on or off.</strong></p>\n<p>Electricity being turned on and flowing represents true, it has the 'on' state. On the other hand, when it's turned off and not flowing this represents false and the 'off' state.</p>\n<p>It can only ever have one state at each point in time.</p>\n<p>The two states of electricity are called <em>Binary States</em>, the prefix bi- meaning two.</p>\n<h3 id=\"whatisbinarycode\">What is Binary Code?</h3>\n<p>This concept of electrical charges and the existence of only two possible states ties in nicely with the numerical system computers use in their hardware. They use it to complete every single task they are given. It's called binary code and is made up of sequences of <code>0</code>s and <code>1</code>s.</p>\n<p>Binary code by design corresponds directly with specific machine instructions, commands, and locations in the computer's memory. The computer then reads and interprets these instructions and then carries out particular tasks.</p>\n<p>Computers are made up of a combination of thousands of tiny physical devices that act as electrical switches, called <strong>transistors.</strong></p>\n<p><a href=\"https://commons.wikimedia.org/wiki/File:Transistors.agr.jpg\"><img alt=\"Screenshot-2021-08-10-at-3.11.05-PM\" height=\"1186\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2021/08/Screenshot-2021-08-10-at-3.11.05-PM.png\" width=\"1426\"/></a></p>\n<p>These little electrical hardware components, the transistors, enable or disable the flow of electricity.</p>\n<p>They can have either a positive or a negative electric charge depending on their state \u2013 that is, whether they carry electricity or don\u2019t.</p>\n<p>Those thousands of tiny little switches can either be on or off.</p>\n<h3 id=\"howbinaryworks\">How Binary Works</h3>\n<p>You may have heard that <em>\u2018Computers work in 1s and 0s\u2019</em> but what does that actually mean? We might not deal with binary code directly anymore, but it is the only thing that the computer's CPU understands.</p>\n<p>Are there literally 0s and 1s stored in our physical devices flowing and moving around? Not really.</p>\n<p>However, our CPU's consist of many microscopic digital circuits that carry information.</p>\n<p>With the help of the transistors that come together to form these circuits and their tiny sequences of electrical signals that are switched either on (<code>1</code>) or off (<code>0</code>), there can only be only be two types of voltages \u2013 a high and a low. And that results in the representation of different values, that is different instructions or calculations being performed.</p>\n<p>When these electrical signals from the transistor circuits and other electrical components are linked and combined/modified in a certain way, they can create a wide range of possible tasks and operations the computer can perform and see through.</p>\n<h2 id=\"computersandtheirrelationshipwithhumans\">Computers and Their Relationship with Humans</h2>\n<p>This machine-level programming language is the only language that computers can directly understand and are capable of making sense of.</p>\n<p>The binary code can vary from computer to computer and from machine to machine. When it comes to this level of programming a computer, there is no portability. This means that programs and software can't be transferred to different systems.</p>\n<h3 id=\"limitationsofmachinelanguages\">Limitations of Machine Languages</h3>\n<p>Machine languages can vary depending on the operating system they are implemented on.</p>\n<p>This is, of course, very limiting.</p>\n<p>Machine code or binary code may run very fast, they may be the computer's native language, and they may be extremely efficient because the instructions are executed directly by the CPU. But it's a very dull and monotonous \u2013 not to mention extremely error-prone \u2013 way to use a computer.</p>\n<p>Attempting to use a computer by manually typing binary codes for each transitor is a cumbersome process.</p>\n<p>Making an error while directly managing the computer's data storage and operations is very hard to fix.</p>\n<p>Machine-level languages are hard for humans to read, write, learn and understand. So programmers and computer scientists found a better and arguably easier way to solve problems.</p>\n<p>The things a computer can do by itself are on a very primitive level and are limited in scope.</p>\n<p>They are good at performing arithmetic calculations like adding numbers or checking if a number is equal to zero.</p>\n<h3 id=\"thehumanelementincomputing\">The Human Element in Computing</h3>\n<p>Humans created these machines that have revolutionized our way of life, but when it comes down to it, computers are really not that smart and have limited capabilities by themselves.</p>\n<p>They only do exactly what they are told to do. They don\u2019t make assumptions or have any common sense like humans do.</p>\n<p>Computers at their core are machines that perform mathematical operations. But they are also good at displaying some text on the screen or repeating a task over and over again.</p>\n<p>Those operations are basic and don\u2019t go much further than that. They're known as the computer\u2019s <strong>instruction set</strong>.</p>\n<p>Even though at their core computers can only do very basic tasks, they are able to perform extremely complex actions and follow and execute instructions from programs they are given. This is thanks to the many layers of abstraction they have.</p>\n<p>The true power however, lies in the hands of humans. Whatever we want to achieve and whatever we imagine, we can use this machine as a tool to do complicated calculations, conduct research to find and extract a document among billions of other documents, or keep in touch with friends and family far away.</p>\n<p>Whatever we can think of, we can now create it by coding a program.</p>\n<p>Computers and programs can improve our lives collectively all around the world. But how do we make them do what we want?</p>\n<h2 id=\"whatiscomputerprogramming\">What is computer programming?</h2>\n<p>Computer coding and computer programming are terms that are often used interchangeably. They do have some differences though.</p>\n<h3 id=\"programmingvscoding\">Programming vs coding</h3>\n<p>Programming means telling a computer what to do and how to do that thing you told it to do.</p>\n<p>It involves providing well thought-out, methodogical instructions for your computer to read and execute.</p>\n<p>You have to break down large tasks into smaller ones. And you keep repeating that process of breaking something down into smaller tasks until you reach a point where you don\u2019t need to tell the computer what to do anymore \u2013 it already knows how to do that task.</p>\n<p>The essence of programming is the process of problem solving, complex thinking, attention to detail, and reasoning \u2013 all using a computer.</p>\n<p>Programming involves thinking of all the different steps a user could take and considering all the different things that could go wrong. Once you've thought of all potential problems a user may encounter you have to find solutions before you code anything.</p>\n<p>We can think of problem solving as taking an input (the information and details about our problem that we want to solve) and generating an output (the end goal or the solution to our problem).</p>\n<p>Outputs can be complicated and millions can run per second.</p>\n<h3 id=\"problemsolvingwithalgorithms\">Problem Solving with Algorithms</h3>\n<p>When you're problem solving using a computer, you need to express the solution to that problem according to the instruction set of the computer.</p>\n<p>For that purpose, we use <strong>algorithms</strong> \u2013 a systematic approach to solving problems.</p>\n<p>Algorithms are an idea or method that's expressed in a very concise and precise set of rules and step by step instructions. The computer needs to follow these instructions in order to solve the problem.</p>\n<p>When we think of algorithms, they don\u2019t only apply to computers. They are also machine independent.</p>\n<p>We humans follow algorithms too \u2013 sets of instructions for completing tasks in our daily lives.</p>\n<p>Some examples could be:</p>\n<ul>\n<li>counting people in a room</li>\n<li>doing arithmetic calculations</li>\n<li>trying to figure out the correct route to take to reach a particular destination</li>\n<li>following a cooking recipe</li>\n</ul>\n<p>In the last example, we can think of the recipe as the instructions that we use, and we're the computer that has to read and then execute them correctly.</p>\n<p>An algorithm is a plan that presents the steps you need to follow in order to get a desired result.</p>\n<h3 id=\"howcomputersusealgorithms\">How Computers Use Algorithms</h3>\n<p>When it comes to computers, algorithms need to be precise as computers take everything literally. They don\u2019t read between the lines or make any assumptions.</p>\n<p>There is no room for ambiguity, so algorithms not only need to be precise but also organized, correct, free from errors, efficient, and well-designed. All this helps minimize the time and effort the computer needs to spend to complete a task.</p>\n<p>Computers execute algorithms in a mechanical way without putting much thought into each step. And they should work in the exact way we intended them to work.</p>\n<p>A computer program is a collection of those instructions \u2013 or algorithms \u2013 in a text file which serves as an instruction manual.</p>\n<p>It describes a very precise sequence of steps for the computer to follow. The computer performs a particular task, its hardrive executes the instructions, and you get the final desired result in the end.</p>\n<p>Aside from the thinking, research, design, and in-depth planning, programming also involves testing, debugging, deployment, and maintanance of the finished result.</p>\n<p>When you're developing a program to solve a particular problem, you typically express the idea for the solution using an algorithm. Then developers code the program by implementing that algorithm. You use a language that has particular syntax and that both humans and computers can understand.</p>\n<p>This is where the actual coding comes in.</p>\n<p>Coding is the process of transforming ideas, solutions, and instructions into the language that the computer can understand \u2013 that is, binary-machine code.</p>\n<p>Coding is how humans are able to talk with computers.</p>\n<p>Coding involves communicating and giving instructions for different actions we want our computers to perform using a computer programming language.</p>\n<p><strong>Programming languages</strong>, like JavaSctipt, Java, C/C++, or Python, act as the translator between humans and machines.</p>\n<p>These languages bridge the communication gap between computers and humans by representing, expressing, and putting algorithms into practice. They do this using a specific sequence of statements that machines understand and can follow.</p>\n<p>Programming languages are similar to human languages in the sense that they are made up of basic syntactical elements like nouns, verbs, and phrases. And you group these elements together to form something that resembles a sentence to create meaning.</p>\n<p>These languages actually resemble and look a lot like English. But they offer a shorter, more precise and less verbose way to create instructions that the computer can understand.</p>\n<p>A spoken/natural language like English, on the other hand, leaves a lot of room for ambiguity and different interpretations from different people.</p>\n<p>Programming languages are a set of rules that define how you write computer code.</p>\n<p>We use computer code to create  all the web applications, websites, games, operating systems, and all the other software programs and technologies we use on a daily basis.</p>\n<p>You can look at the code that makes up your favorite websites by hitting <code>Control and clicking your touchpad/mouse </code> then selecting <code>View Page Source</code> (or <code>inspect</code>) from the menu that pops up (or you can use the shortcut <code>Option Command U</code>):</p>\n<p><img alt=\"Screenshot-2021-08-10-at-8.36.15-PM\" height=\"1148\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2021/08/Screenshot-2021-08-10-at-8.36.15-PM.png\" width=\"2064\"/></p>\n<p>You'll then see the HTML, CSS, and JavaScript that make up the frontend code of the website you're using:</p>\n<p><img alt=\"Screenshot-2021-08-10-at-8.37.47-PM\" height=\"1488\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2021/08/Screenshot-2021-08-10-at-8.37.47-PM.png\" width=\"1570\"/></p>\n<p>In a nutshell, coding is the act of translating problems that are first in a natural, human language to a machine readable language. And that translation happens thanks to programming languages and coding.</p>\n<p>Coding requires that you understand the intricacies, the particular syntax, and the specific keywords that make up a programming language. Once you know these features of a language, you can start developing applications.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>In this article we learned how computers work at a high level. We then definied what programming is, what coding is, and the differences between them.</p>\n<p>Remember that coding is only the process of writing code to develop programs and applications.</p>\n<p>Coding is a subset of programming, which entails the logical reasoning, analysis, and planning out a sequence of instructions for a computer program or application before any coding is done.</p>\n<p>Programming is the bigger picture in the process. Coding is a part of that process, but should always come after the programming, or problem-solving and planning stage.</p>\n<p>I hoped this helped you understsand programming and coding basics. Thanks for reading!</p>\n<!--kg-card-end: markdown-->\n</section>\n<hr/>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nWhen you're starting your coding journey, one of the most exciting \u2013 and at times overwhelming \u2013 things about it is just how much there is to learn.\nYou'll discover different languages, frameworks, libraries, inventions and conventions.\nOne technology often requires knowledge of another one, and everything seems to be interconnected and intertwined.\nWith new technologies coming out often in such a fast paced and ever-changing industry, it can quickly get confusing for beginner coders.\nWhen learning how to code, instead of just focusing on learning a specific technology, it can also help to learn the foundations \u2013 the building blocks \u2013 and to peel back the layers of abstraction to get to know the underlying principles that all these technologies have in common.\nUnderstanding what coding is at a fundamental level will make solving problems easier and will give you a better understanding of how these technologies work underneath the hood.\nIn this article we will learn what coding is so you have a solid foundation on which to build.\nHow Do Computers Work?\nComputers, when powered off, are just costly electronic machines. They're objects consisting of a bunch of metals, plastics, and other materials.\nHowever, once you press the power button and they have gone through their power-up process, called booting up, they come to life.\nYour computer turns into this extremely powerful machine. It's this electronic device that gets to do complicated tasks at mind boggling speeds that would be difficult, if not impossible, for humans to do.\nTheir screens are vibrant and active and there's a variety of buttons and icons ready to be clicked.\nComputers and Electricity\nComputers are powered and function with the help of electricity.\nElectricity has only two states \u2013 it can be either turned on or off.\nElectricity being turned on and flowing represents true, it has the 'on' state. On the other hand, when it's turned off and not flowing this represents false and the 'off' state.\nIt can only ever have one state at each point in time.\nThe two states of electricity are called Binary States, the prefix bi- meaning two.\nWhat is Binary Code?\nThis concept of electrical charges and the existence of only two possible states ties in nicely with the numerical system computers use in their hardware. They use it to complete every single task they are given. It's called binary code and is made up of sequences of 0s and 1s.\nBinary code by design corresponds directly with specific machine instructions, commands, and locations in the computer's memory. The computer then reads and interprets these instructions and then carries out particular tasks.\nComputers are made up of a combination of thousands of tiny physical devices that act as electrical switches, called transistors.\n\nThese little electrical hardware components, the transistors, enable or disable the flow of electricity.\nThey can have either a positive or a negative electric charge depending on their state \u2013 that is, whether they carry electricity or don\u2019t.\nThose thousands of tiny little switches can either be on or off.\nHow Binary Works\nYou may have heard that \u2018Computers work in 1s and 0s\u2019 but what does that actually mean? We might not deal with binary code directly anymore, but it is the only thing that the computer's CPU understands.\nAre there literally 0s and 1s stored in our physical devices flowing and moving around? Not really.\nHowever, our CPU's consist of many microscopic digital circuits that carry information.\nWith the help of the transistors that come together to form these circuits and their tiny sequences of electrical signals that are switched either on (1) or off (0), there can only be only be two types of voltages \u2013 a high and a low. And that results in the representation of different values, that is different instructions or calculations being performed.\nWhen these electrical signals from the transistor circuits and other electrical components are linked and combined/modified in a certain way, they can create a wide range of possible tasks and operations the computer can perform and see through.\nComputers and Their Relationship with Humans\nThis machine-level programming language is the only language that computers can directly understand and are capable of making sense of.\nThe binary code can vary from computer to computer and from machine to machine. When it comes to this level of programming a computer, there is no portability. This means that programs and software can't be transferred to different systems.\nLimitations of Machine Languages\nMachine languages can vary depending on the operating system they are implemented on.\nThis is, of course, very limiting.\nMachine code or binary code may run very fast, they may be the computer's native language, and they may be extremely efficient because the instructions are executed directly by the CPU. But it's a very dull and monotonous \u2013 not to mention extremely error-prone \u2013 way to use a computer.\nAttempting to use a computer by manually typing binary codes for each transitor is a cumbersome process.\nMaking an error while directly managing the computer's data storage and operations is very hard to fix.\nMachine-level languages are hard for humans to read, write, learn and understand. So programmers and computer scientists found a better and arguably easier way to solve problems.\nThe things a computer can do by itself are on a very primitive level and are limited in scope.\nThey are good at performing arithmetic calculations like adding numbers or checking if a number is equal to zero.\nThe Human Element in Computing\nHumans created these machines that have revolutionized our way of life, but when it comes down to it, computers are really not that smart and have limited capabilities by themselves.\nThey only do exactly what they are told to do. They don\u2019t make assumptions or have any common sense like humans do.\nComputers at their core are machines that perform mathematical operations. But they are also good at displaying some text on the screen or repeating a task over and over again.\nThose operations are basic and don\u2019t go much further than that. They're known as the computer\u2019s instruction set.\nEven though at their core computers can only do very basic tasks, they are able to perform extremely complex actions and follow and execute instructions from programs they are given. This is thanks to the many layers of abstraction they have.\nThe true power however, lies in the hands of humans. Whatever we want to achieve and whatever we imagine, we can use this machine as a tool to do complicated calculations, conduct research to find and extract a document among billions of other documents, or keep in touch with friends and family far away.\nWhatever we can think of, we can now create it by coding a program.\nComputers and programs can improve our lives collectively all around the world. But how do we make them do what we want?\nWhat is computer programming?\nComputer coding and computer programming are terms that are often used interchangeably. They do have some differences though.\nProgramming vs coding\nProgramming means telling a computer what to do and how to do that thing you told it to do.\nIt involves providing well thought-out, methodogical instructions for your computer to read and execute.\nYou have to break down large tasks into smaller ones. And you keep repeating that process of breaking something down into smaller tasks until you reach a point where you don\u2019t need to tell the computer what to do anymore \u2013 it already knows how to do that task.\nThe essence of programming is the process of problem solving, complex thinking, attention to detail, and reasoning \u2013 all using a computer.\nProgramming involves thinking of all the different steps a user could take and considering all the different things that could go wrong. Once you've thought of all potential problems a user may encounter you have to find solutions before you code anything.\nWe can think of problem solving as taking an input (the information and details about our problem that we want to solve) and generating an output (the end goal or the solution to our problem).\nOutputs can be complicated and millions can run per second.\nProblem Solving with Algorithms\nWhen you're problem solving using a computer, you need to express the solution to that problem according to the instruction set of the computer.\nFor that purpose, we use algorithms \u2013 a systematic approach to solving problems.\nAlgorithms are an idea or method that's expressed in a very concise and precise set of rules and step by step instructions. The computer needs to follow these instructions in order to solve the problem.\nWhen we think of algorithms, they don\u2019t only apply to computers. They are also machine independent.\nWe humans follow algorithms too \u2013 sets of instructions for completing tasks in our daily lives.\nSome examples could be:\n\ncounting people in a room\ndoing arithmetic calculations\ntrying to figure out the correct route to take to reach a particular destination\nfollowing a cooking recipe\n\nIn the last example, we can think of the recipe as the instructions that we use, and we're the computer that has to read and then execute them correctly.\nAn algorithm is a plan that presents the steps you need to follow in order to get a desired result.\nHow Computers Use Algorithms\nWhen it comes to computers, algorithms need to be precise as computers take everything literally. They don\u2019t read between the lines or make any assumptions.\nThere is no room for ambiguity, so algorithms not only need to be precise but also organized, correct, free from errors, efficient, and well-designed. All this helps minimize the time and effort the computer needs to spend to complete a task.\nComputers execute algorithms in a mechanical way without putting much thought into each step. And they should work in the exact way we intended them to work.\nA computer program is a collection of those instructions \u2013 or algorithms \u2013 in a text file which serves as an instruction manual.\nIt describes a very precise sequence of steps for the computer to follow. The computer performs a particular task, its hardrive executes the instructions, and you get the final desired result in the end.\nAside from the thinking, research, design, and in-depth planning, programming also involves testing, debugging, deployment, and maintanance of the finished result.\nWhen you're developing a program to solve a particular problem, you typically express the idea for the solution using an algorithm. Then developers code the program by implementing that algorithm. You use a language that has particular syntax and that both humans and computers can understand.\nThis is where the actual coding comes in.\n\nCoding is the process of transforming ideas, solutions, and instructions into the language that the computer can understand \u2013 that is, binary-machine code.\nCoding is how humans are able to talk with computers.\nCoding involves communicating and giving instructions for different actions we want our computers to perform using a computer programming language.\nProgramming languages, like JavaSctipt, Java, C/C++, or Python, act as the translator between humans and machines.\nThese languages bridge the communication gap between computers and humans by representing, expressing, and putting algorithms into practice. They do this using a specific sequence of statements that machines understand and can follow.\nProgramming languages are similar to human languages in the sense that they are made up of basic syntactical elements like nouns, verbs, and phrases. And you group these elements together to form something that resembles a sentence to create meaning.\nThese languages actually resemble and look a lot like English. But they offer a shorter, more precise and less verbose way to create instructions that the computer can understand.\nA spoken/natural language like English, on the other hand, leaves a lot of room for ambiguity and different interpretations from different people.\nProgramming languages are a set of rules that define how you write computer code.\nWe use computer code to create  all the web applications, websites, games, operating systems, and all the other software programs and technologies we use on a daily basis.\nYou can look at the code that makes up your favorite websites by hitting Control and clicking your touchpad/mouse  then selecting View Page Source (or inspect) from the menu that pops up (or you can use the shortcut Option Command U):\n\nYou'll then see the HTML, CSS, and JavaScript that make up the frontend code of the website you're using:\n\nIn a nutshell, coding is the act of translating problems that are first in a natural, human language to a machine readable language. And that translation happens thanks to programming languages and coding.\nCoding requires that you understand the intricacies, the particular syntax, and the specific keywords that make up a programming language. Once you know these features of a language, you can start developing applications.\nConclusion\nIn this article we learned how computers work at a high level. We then definied what programming is, what coding is, and the differences between them.\nRemember that coding is only the process of writing code to develop programs and applications.\nCoding is a subset of programming, which entails the logical reasoning, analysis, and planning out a sequence of instructions for a computer program or application before any coding is done.\nProgramming is the bigger picture in the process. Coding is a part of that process, but should always come after the programming, or problem-solving and planning stage.\nI hoped this helped you understsand programming and coding basics. Thanks for reading!\n\n\n                        \n                    \n                    \n                        \n                        \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 14434, "excerpt": "When you're starting your coding journey, one of the most exciting \u2013 and at\ntimes overwhelming \u2013 things about it is just how much there is to learn.\n\nYou'll discover different languages, frameworks, libraries, inventions and\nconventions.\n\nOne technology often requires knowledge of another one, and everything seems to\nbe interconnected and intertwined.\n\nWith new technologies coming out often in such a fast paced and ever-changing\nindustry, it can quickly get confusing for beginner coders.\n\nWhen l", "siteName": "freeCodeCamp.org", "publishedTime": "2021-08-10T19:54:45.000Z", "id": "669921bcc2e13f83faa2e75f7fd4071e0a3c7343", "url": "https://www.freecodecamp.org/news/what-is-coding/", "domain": "freecodecamp.org", "date": "2023-12-27T18:05:53.525415", "resultUri": "http://localhost:3000/result/669921bcc2e13f83faa2e75f7fd4071e0a3c7343", "query": {"url": ["https://www.freecodecamp.org/news/what-is-coding/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "What is Coding? Computer Coding Definition", "description": "When you're starting your coding journey, one of the most exciting \u2013 and at times overwhelming \u2013 things about it is just how much there is to learn. You'll discover different languages, frameworks, libraries, inventions and conventions. One technology often requires knowledge of another one, and everything seems to be", "url": "https://www.freecodecamp.org/news/what-is-coding/", "image": "https://www.freecodecamp.org/news/content/images/2021/08/hope-house-press-leather-diary-studio-h3sAF1cVURw-unsplash.jpg", "image:width": "2000", "image:height": "2667"}, "twitter": {"card": "summary_large_image", "title": "What is Coding? Computer Coding Definition", "description": "When you're starting your coding journey, one of the most exciting \u2013 and at times overwhelming \u2013 things about it is just how much there is to learn. You'll discover different languages, frameworks, libraries, inventions and conventions. One technology often requires knowledge of another one, and everything seems to be", "url": "https://www.freecodecamp.org/news/what-is-coding/", "image": "https://www.freecodecamp.org/news/content/images/2021/08/hope-house-press-leather-diary-studio-h3sAF1cVURw-unsplash.jpg", "label1": "Written by", "data1": "Dionysia Lemonaki", "label2": "Filed under", "data2": "Coding, Programming, Binary, Beginners Guide", "site": "@freecodecamp"}}}