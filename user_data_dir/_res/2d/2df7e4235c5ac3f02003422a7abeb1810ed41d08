{"title": "Two ways to deploy a public GitHub Pages site from a private Hugo repository", "byline": "Victoria Drake", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>Two ways to deploy a public GitHub Pages site from a private Hugo repository</h1>\n<section>\n<section data-test-label=\"post-content\">\n<h4 id=\"keep-your-drafts-out-of-the-public-eye-by-making-use-of-continuous-deployment-tools-to-publish-your-public-github-pages-site-from-a-separate-private-repository-\">Keep your drafts out of the public eye by making use of continuous deployment tools to publish your public GitHub Pages site \u2014 from a separate private repository.</h4><p>Tools like Travis CI and Netlify offer some pretty nifty features, like seamlessly deploying your GitHub Pages site when changes are pushed to its repository. Along with a static site generator like Hugo, keeping a blog up to date is pretty painless.</p><p>I\u2019ve used Hugo to build my site for years, but until this past week I\u2019d never hooked up my Pages repository to any deployment service. Why? Because using a tool that built my site before deploying it seemed to require having the whole recipe in one place \u2014 and if you\u2019re using GitHub Pages with the free version of GitHub, <a href=\"https://help.github.com/en/articles/configuring-a-publishing-source-for-github-pages\" rel=\"noopener\">that place is public</a>. That means that all my three-in-the-morning bright ideas and messy unfinished (and unfunny) drafts would be publicly available \u2014 and no amount of continuous convenience was going to convince me to do that.</p><p>So I kept things separated, with Hugo\u2019s messy behind-the-scenes stuff in a local Git repository, and the generated <code>public/</code> folder pushing to my GitHub Pages remote repository. Each time I wanted to deploy my site, I\u2019d have to get on my laptop and <code>hugo</code> to build my site, then <code>cd public/ &amp;&amp; git add . &amp;&amp; git commit</code>\u2026 etc etc. And all was well, except for the nagging feeling that there was a better way to do this.</p><p>I wrote another article a little while back about <a href=\"https://victoria.dev/verbose/a-remote-sync-solution-for-ios-and-linux-git-and-working-copy/\" rel=\"noopener\">using GitHub and Working Copy</a> to make changes to my repositories on my iPad whenever I\u2019m out and about. It seemed off to me that I could do everything except deploy my site from my iPad, so I set out to change that.</p><p>A couple three-in-the-morning bright ideas and a revoked access token later (oops), I now have not one but <em>two</em> ways to deploy to my public GitHub Pages repository from an entirely separated, private GitHub repository. In this post, I\u2019ll take you through achieving this with <a href=\"https://travis-ci.com/\" rel=\"noopener\">Travis CI</a> or using <a href=\"http://netlify.com/\" rel=\"noopener\">Netlify</a> and <a href=\"https://www.gnu.org/software/make/\" rel=\"noopener\">Make</a>.</p><p>There\u2019s nothing hackish about it \u2014 my public GitHub Pages repository still looks the same as it does when I pushed to it locally from my terminal. Only now, I\u2019m able to take advantage of a couple great deployment tools to have the site update whenever I push to my private repo, whether I\u2019m on my laptop or out and about with my iPad.</p><figure><img alt=\"BWGFKiySx83s7T-PKOSYkuokL5FLBYVDLZ10\" height=\"400\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/BWGFKiySx83s7T-PKOSYkuokL5FLBYVDLZ10\" width=\"600\"/><figcaption>#YouDidNotPushFromThere</figcaption></figure><p>This article assumes you have working knowledge of Git and GitHub Pages. If not, you may like to spin off some browser tabs from my articles on <a href=\"https://victoria.dev/verbose/a-remote-sync-solution-for-ios-and-linux-git-and-working-copy/\" rel=\"noopener\">using GitHub and Working Copy</a> and <a href=\"https://victoria.dev/verbose/how-i-ditched-wordpress-and-set-up-my-custom-domain-https-site-for-almost-free/\" rel=\"noopener\">building a site with Hugo and GitHub Pages</a> first.</p><p>Let\u2019s do it!</p><h3 id=\"private-to-public-github-pages-deployment-with-travis-ci\">Private-to-public GitHub Pages deployment with Travis CI</h3><p>Travis CI has the built-in ability (\u266a) to <a href=\"https://docs.travis-ci.com/user/deployment/pages/\" rel=\"noopener\">deploy to GitHub Pages</a> following a successful build. They do a decent job in the docs of explaining how to add this feature, especially if you\u2019ve used Travis CI before\u2026 which I haven\u2019t. Don\u2019t worry, I did the bulk of the figuring-things-out for you.</p><ul><li>Travis CI gets all its instructions from a configuration file in the root of your repository called <code>.travis.yml</code></li><li>You need to provide a <a href=\"https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line\" rel=\"noopener\">GitHub personal access token</a> as a secure encrypted variable, which you can generate using <code>travis</code> on the command line</li><li>Once your script successfully finishes doing what you\u2019ve told it to do (not necessarily what you <em>want</em> it to do but that\u2019s a whole other blog post), Travis will deploy your build directory to a repository you can specify with the <code>repo</code> configuration variable.</li></ul><h4 id=\"setting-up-the-travis-configuration-file\">Setting up the Travis configuration file</h4><p>Create a new configuration file for Travis with the filename <code>.travis.yml</code> (note the leading \u201c.\u201d). These scripts are very customizable and I struggled to find a relevant example to use as a starting point - luckily, you don\u2019t have that problem!</p><p>Here\u2019s my basic <code>.travis.yml</code>:</p><pre><code>git:\n depth: false\n\nenv:\n global:\n - HUGO_VERSION=\"0.54.0\"\n matrix:\n - YOUR_ENCRYPTED_VARIABLE\n\ninstall:\n - wget -q https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_${HUGO_VERSION}_Linux-64bit.tar.gz\n - tar xf hugo_${HUGO_VERSION}_Linux-64bit.tar.gz\n - mv hugo ~/bin/\n\nscript:\n - hugo --gc --minify\n\ndeploy:\n provider: pages\n skip-cleanup: true\n github-token: $GITHUB_TOKEN\n keep-history: true\n local-dir: public\n repo: gh-username/gh-username.github.io\n target-branch: master\n verbose: true\n on:\n branch: master</code></pre><p>This script downloads and installs Hugo, builds the site with the garbage collection and minify <a href=\"https://gohugo.io/commands/hugo/#synopsis\" rel=\"noopener\">flags</a>, then deploys the <code>public/</code> directory to the specified <code>repo</code> - in this example, your public GitHub Pages repository. You can read about each of the <code>deploy</code> configuration options <a href=\"https://docs.travis-ci.com/user/deployment/pages/#further-configuration\" rel=\"noopener\">here</a>.</p><p>To <a href=\"https://docs.travis-ci.com/user/environment-variables#defining-encrypted-variables-in-travisyml\" rel=\"noopener\">add the GitHub personal access token as an encrypted variable</a>, you don\u2019t need to manually edit your <code>.travis.yml</code>. The <code>travis</code> gem commands below will encrypt and add the variable for you when you run them in your repository directory.</p><p>First, install <code>travis</code> with <code>sudo gem install travis</code>.</p><p>Then <a href=\"https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line\" rel=\"noopener\">generate your GitHub personal access token</a>, copy it (it only shows up once!) and run the commands below in your repository root, substituting your token for the kisses:</p><pre><code>travis login --pro --github-token xxxxxxxxxxxxxxxxxxxxxxxxxxx\ntravis encrypt GITHUB_TOKEN=xxxxxxxxxxxxxxxxxxxxxxxxxxx --add env.matrix</code></pre><p>Your encrypted token magically appears in the file. Once you\u2019ve committed <code>.travis.yml</code> to your private Hugo repository, Travis CI will run the script and if the build succeeds, will deploy your site to your public GitHub Pages repo. Magic!</p><p>Travis will always run a build each time you push to your private repository. If you don\u2019t want to trigger this behavior with a particular commit, <a href=\"https://docs.travis-ci.com/user/customizing-the-build/#skipping-a-build\" rel=\"noopener\">add the <code>skip</code> command to your commit message</a>.</p><p><em>Yo that\u2019s cool but I like Netlify.</em></p><p>Okay fine.</p><h3 id=\"deploying-to-a-separate-repository-with-netlify-and-make\">Deploying to a separate repository with Netlify and Make</h3><p>We can get Netlify to do our bidding by using a Makefile, which we\u2019ll run with Netlify\u2019s build command.</p><p>Here\u2019s what our <code>Makefile</code> looks like:</p><pre><code>SHELL:=/bin/bash\nBASEDIR=$(CURDIR)\nOUTPUTDIR=public\n.PHONY: all\nall: clean get_repository build deploy\n.PHONY: clean\nclean:\n@echo \"Removing public directory\"\nrm -rf $(BASEDIR)/$(OUTPUTDIR)\n.PHONY: get_repository\nget_repository:\n@echo \"Getting public repository\"\ngit clone https://github.com/gh-username/gh-username.github.io.git public\n.PHONY: build\nbuild:\n@echo \"Generating site\"\nhugo --gc --minify\n.PHONY: deploy\ndeploy:\n@echo \"Preparing commit\"\n@cd $(OUTPUTDIR) \\\n &amp;&amp; git config user.email \"you@youremail.com\" \\\n &amp;&amp; git config user.name \"Your Name\" \\\n &amp;&amp; git add . \\\n &amp;&amp; git status \\\n &amp;&amp; git commit -m \"Deploy via Makefile\" \\\n &amp;&amp; git push -f -q https://$(GITHUB_TOKEN)@github.com/gh-username/gh-username.github.io.git master\n@echo \"Pushed to remote\"</code></pre><p>To preserve the Git history of our separate GitHub Pages repository, we\u2019ll first clone it, build our new Hugo site to it, and then push it back to the Pages repository. This script first removes any existing <code>public/</code> folder that might contain files or a Git history. It then clones our Pages repository to <code>public/</code>, builds our Hugo site (essentially updating the files in <code>public/</code>), then takes care of committing the new site to the Pages repository.</p><p>In the <code>deploy</code> section, you\u2019ll notice lines starting with <code>&amp;&amp;</code>. These are chained commands. Since Make <a href=\"https://www.gnu.org/software/make/manual/html_node/Execution.html#Execution\" rel=\"noopener\">invokes a new sub-shell for each line</a>, it starts over with every new line from our root directory. To get our <code>cd</code> to stick and avoid running our Git commands in the project root directory, we\u2019re chaining the commands and using the backslash character to <a href=\"http://clarkgrubb.com/makefile-style-guide#breaking-long-lines\" rel=\"noopener\">break long lines</a> for readability.</p><p>By chaining our commands, we\u2019re able to <a href=\"https://stackoverflow.com/questions/6116548/how-to-tell-git-to-use-the-correct-identity-name-and-email-for-a-given-project\" rel=\"noopener\">configure our Git identity</a>, add all our updated files, and create a commit for our Pages repository.</p><p>Similarly to using Travis CI, we\u2019ll need to pass in a <a href=\"https://github.com/settings/tokens\" rel=\"noopener\">GitHub personal access token</a> to push to our public GitHub Pages repository \u2014 only Netlify doesn\u2019t provide a straightforward way to encrypt the token in our Makefile.</p><p>Instead, we\u2019ll use Netlify\u2019s <a href=\"https://www.netlify.com/docs/continuous-deployment/#build-environment-variables\" rel=\"noopener\">Build Environment Variables</a>, which live safely in our site settings in the Netlify app. We can then call our token variable in the Makefile. We use it to push (quietly, to avoid printing the token in logs) to our Pages repository by <a href=\"https://stackoverflow.com/questions/44773415/how-to-push-a-commit-to-github-from-a-circleci-build-using-a-personal-access-tok\" rel=\"noopener\">passing it in the remote URL</a>.</p><p>To avoid printing the token in Netlify\u2019s logs, we suppress <a href=\"https://www.gnu.org/software/make/manual/html_node/Echoing.html#Echoing\" rel=\"noopener\">recipe echoing</a> for that line with the leading <code>@</code> character.</p><p>With your Makefile in the root of your private GitHub repository, you can set up Netlify to run it for you.</p><h4 id=\"setting-up-netlify\">Setting up Netlify</h4><p>Getting set up with Netlify via the <a href=\"https://app.netlify.com/\" rel=\"noopener\">web UI</a> is straightforward. Once you sign in with GitHub, choose the private GitHub repository where your Hugo site lives. The next page Netlify takes you to lets you enter deploy settings:</p><figure><img alt=\"w6TKS71OtIM1jgkarOqfuRpAu-WnEQzz4ZoM\" height=\"781\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/w6TKS71OtIM1jgkarOqfuRpAu-WnEQzz4ZoM\" width=\"800\"/><figcaption>Create a new site page on Netlify</figcaption></figure><p>You can specify the build command that will run your Makefile (<code>make all</code> for this example). The branch to deploy and the publish directory don\u2019t matter too much in our specific case, since we\u2019re only concerned with pushing to a separate repository. You can enter the typical <code>master</code> deploy branch and <code>public</code> publish directory.</p><p>Under \u201cAdvanced build settings\u201d click \u201cNew variable\u201d to add your GitHub personal access token as a Build Environment Variable. In our example, the variable name is <code>GITHUB_TOKEN</code>. Click \u201cDeploy site\u201d to make the magic happen.</p><p>If you\u2019ve already previously set up your repository with Netlify, find the settings for Continuous Deployment under Settings &gt; Build &amp; deploy.</p><p>Netlify will build your site each time you push to the private repository. If you don\u2019t want a particular commit to trigger a build, <a href=\"https://www.netlify.com/docs/continuous-deployment/#skipping-a-deploy\" rel=\"noopener\">add <code>[skip ci]</code> in your Git commit message</a>.</p><h4 id=\"same-same-but-different\">Same same but different</h4><p>One effect of using Netlify this way is that your site will be built in two places: one is the separate, public GitHub Pages repository that the Makefile pushes to, and the other is your Netlify site that deploys on their CDN from your linked private GitHub repository. The latter is useful if you\u2019re going to play with <a href=\"https://www.netlify.com/blog/2016/07/20/introducing-deploy-previews-in-netlify/\" rel=\"noopener\">Deploy Previews</a> and other Netlify features, but those are outside the scope of this post.</p><p>The main point is that your GitHub Pages site is now updated in your public repo. Yay!</p><h3 id=\"go-forth-and-deploy-fearlessly\">Go forth and deploy fearlessly</h3><p>I hope the effect of this new information is that you feel more able to update your sites, wherever you happen to be. The possibilities are endless \u2014 at home on your couch with your laptop, out cafe-hopping with your iPad, or in the middle of a first date on your phone. Endless!</p><figure><img alt=\"HXM8dI8xKrzd7oA9wLXqjdOSzrWdXKOWmAt8\" height=\"400\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/HXM8dI8xKrzd7oA9wLXqjdOSzrWdXKOWmAt8\" width=\"600\"/><figcaption>Don\u2019t do stuff on your phone when you\u2019re on a date. Not if you want a second one, anyway.</figcaption></figure>\n</section>\n<hr/>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nKeep your drafts out of the public eye by making use of continuous deployment tools to publish your public GitHub Pages site \u2014 from a separate private repository.Tools like Travis CI and Netlify offer some pretty nifty features, like seamlessly deploying your GitHub Pages site when changes are pushed to its repository. Along with a static site generator like Hugo, keeping a blog up to date is pretty painless.I\u2019ve used Hugo to build my site for years, but until this past week I\u2019d never hooked up my Pages repository to any deployment service. Why? Because using a tool that built my site before deploying it seemed to require having the whole recipe in one place \u2014 and if you\u2019re using GitHub Pages with the free version of GitHub, that place is public. That means that all my three-in-the-morning bright ideas and messy unfinished (and unfunny) drafts would be publicly available \u2014 and no amount of continuous convenience was going to convince me to do that.So I kept things separated, with Hugo\u2019s messy behind-the-scenes stuff in a local Git repository, and the generated public/ folder pushing to my GitHub Pages remote repository. Each time I wanted to deploy my site, I\u2019d have to get on my laptop and hugo to build my site, then cd public/ && git add . && git commit\u2026 etc etc. And all was well, except for the nagging feeling that there was a better way to do this.I wrote another article a little while back about using GitHub and Working Copy to make changes to my repositories on my iPad whenever I\u2019m out and about. It seemed off to me that I could do everything except deploy my site from my iPad, so I set out to change that.A couple three-in-the-morning bright ideas and a revoked access token later (oops), I now have not one but two ways to deploy to my public GitHub Pages repository from an entirely separated, private GitHub repository. In this post, I\u2019ll take you through achieving this with Travis CI or using Netlify and Make.There\u2019s nothing hackish about it \u2014 my public GitHub Pages repository still looks the same as it does when I pushed to it locally from my terminal. Only now, I\u2019m able to take advantage of a couple great deployment tools to have the site update whenever I push to my private repo, whether I\u2019m on my laptop or out and about with my iPad.#YouDidNotPushFromThereThis article assumes you have working knowledge of Git and GitHub Pages. If not, you may like to spin off some browser tabs from my articles on using GitHub and Working Copy and building a site with Hugo and GitHub Pages first.Let\u2019s do it!Private-to-public GitHub Pages deployment with Travis CITravis CI has the built-in ability (\u266a) to deploy to GitHub Pages following a successful build. They do a decent job in the docs of explaining how to add this feature, especially if you\u2019ve used Travis CI before\u2026 which I haven\u2019t. Don\u2019t worry, I did the bulk of the figuring-things-out for you.Travis CI gets all its instructions from a configuration file in the root of your repository called .travis.ymlYou need to provide a GitHub personal access token as a secure encrypted variable, which you can generate using travis on the command lineOnce your script successfully finishes doing what you\u2019ve told it to do (not necessarily what you want it to do but that\u2019s a whole other blog post), Travis will deploy your build directory to a repository you can specify with the repo configuration variable.Setting up the Travis configuration fileCreate a new configuration file for Travis with the filename .travis.yml (note the leading \u201c.\u201d). These scripts are very customizable and I struggled to find a relevant example to use as a starting point - luckily, you don\u2019t have that problem!Here\u2019s my basic .travis.yml:git:\n depth: false\n\nenv:\n global:\n - HUGO_VERSION=\"0.54.0\"\n matrix:\n - YOUR_ENCRYPTED_VARIABLE\n\ninstall:\n - wget -q https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_${HUGO_VERSION}_Linux-64bit.tar.gz\n - tar xf hugo_${HUGO_VERSION}_Linux-64bit.tar.gz\n - mv hugo ~/bin/\n\nscript:\n - hugo --gc --minify\n\ndeploy:\n provider: pages\n skip-cleanup: true\n github-token: $GITHUB_TOKEN\n keep-history: true\n local-dir: public\n repo: gh-username/gh-username.github.io\n target-branch: master\n verbose: true\n on:\n branch: masterThis script downloads and installs Hugo, builds the site with the garbage collection and minify flags, then deploys the public/ directory to the specified repo - in this example, your public GitHub Pages repository. You can read about each of the deploy configuration options here.To add the GitHub personal access token as an encrypted variable, you don\u2019t need to manually edit your .travis.yml. The travis gem commands below will encrypt and add the variable for you when you run them in your repository directory.First, install travis with sudo gem install travis.Then generate your GitHub personal access token, copy it (it only shows up once!) and run the commands below in your repository root, substituting your token for the kisses:travis login --pro --github-token xxxxxxxxxxxxxxxxxxxxxxxxxxx\ntravis encrypt GITHUB_TOKEN=xxxxxxxxxxxxxxxxxxxxxxxxxxx --add env.matrixYour encrypted token magically appears in the file. Once you\u2019ve committed .travis.yml to your private Hugo repository, Travis CI will run the script and if the build succeeds, will deploy your site to your public GitHub Pages repo. Magic!Travis will always run a build each time you push to your private repository. If you don\u2019t want to trigger this behavior with a particular commit, add the skip command to your commit message.Yo that\u2019s cool but I like Netlify.Okay fine.Deploying to a separate repository with Netlify and MakeWe can get Netlify to do our bidding by using a Makefile, which we\u2019ll run with Netlify\u2019s build command.Here\u2019s what our Makefile looks like:SHELL:=/bin/bash\nBASEDIR=$(CURDIR)\nOUTPUTDIR=public\n.PHONY: all\nall: clean get_repository build deploy\n.PHONY: clean\nclean:\n@echo \"Removing public directory\"\nrm -rf $(BASEDIR)/$(OUTPUTDIR)\n.PHONY: get_repository\nget_repository:\n@echo \"Getting public repository\"\ngit clone https://github.com/gh-username/gh-username.github.io.git public\n.PHONY: build\nbuild:\n@echo \"Generating site\"\nhugo --gc --minify\n.PHONY: deploy\ndeploy:\n@echo \"Preparing commit\"\n@cd $(OUTPUTDIR) \\\n && git config user.email \"you@youremail.com\" \\\n && git config user.name \"Your Name\" \\\n && git add . \\\n && git status \\\n && git commit -m \"Deploy via Makefile\" \\\n && git push -f -q https://$(GITHUB_TOKEN)@github.com/gh-username/gh-username.github.io.git master\n@echo \"Pushed to remote\"To preserve the Git history of our separate GitHub Pages repository, we\u2019ll first clone it, build our new Hugo site to it, and then push it back to the Pages repository. This script first removes any existing public/ folder that might contain files or a Git history. It then clones our Pages repository to public/, builds our Hugo site (essentially updating the files in public/), then takes care of committing the new site to the Pages repository.In the deploy section, you\u2019ll notice lines starting with &&. These are chained commands. Since Make invokes a new sub-shell for each line, it starts over with every new line from our root directory. To get our cd to stick and avoid running our Git commands in the project root directory, we\u2019re chaining the commands and using the backslash character to break long lines for readability.By chaining our commands, we\u2019re able to configure our Git identity, add all our updated files, and create a commit for our Pages repository.Similarly to using Travis CI, we\u2019ll need to pass in a GitHub personal access token to push to our public GitHub Pages repository \u2014 only Netlify doesn\u2019t provide a straightforward way to encrypt the token in our Makefile.Instead, we\u2019ll use Netlify\u2019s Build Environment Variables, which live safely in our site settings in the Netlify app. We can then call our token variable in the Makefile. We use it to push (quietly, to avoid printing the token in logs) to our Pages repository by passing it in the remote URL.To avoid printing the token in Netlify\u2019s logs, we suppress recipe echoing for that line with the leading @ character.With your Makefile in the root of your private GitHub repository, you can set up Netlify to run it for you.Setting up NetlifyGetting set up with Netlify via the web UI is straightforward. Once you sign in with GitHub, choose the private GitHub repository where your Hugo site lives. The next page Netlify takes you to lets you enter deploy settings:Create a new site page on NetlifyYou can specify the build command that will run your Makefile (make all for this example). The branch to deploy and the publish directory don\u2019t matter too much in our specific case, since we\u2019re only concerned with pushing to a separate repository. You can enter the typical master deploy branch and public publish directory.Under \u201cAdvanced build settings\u201d click \u201cNew variable\u201d to add your GitHub personal access token as a Build Environment Variable. In our example, the variable name is GITHUB_TOKEN. Click \u201cDeploy site\u201d to make the magic happen.If you\u2019ve already previously set up your repository with Netlify, find the settings for Continuous Deployment under Settings > Build & deploy.Netlify will build your site each time you push to the private repository. If you don\u2019t want a particular commit to trigger a build, add [skip ci] in your Git commit message.Same same but differentOne effect of using Netlify this way is that your site will be built in two places: one is the separate, public GitHub Pages repository that the Makefile pushes to, and the other is your Netlify site that deploys on their CDN from your linked private GitHub repository. The latter is useful if you\u2019re going to play with Deploy Previews and other Netlify features, but those are outside the scope of this post.The main point is that your GitHub Pages site is now updated in your public repo. Yay!Go forth and deploy fearlesslyI hope the effect of this new information is that you feel more able to update your sites, wherever you happen to be. The possibilities are endless \u2014 at home on your couch with your laptop, out cafe-hopping with your iPad, or in the middle of a first date on your phone. Endless!Don\u2019t do stuff on your phone when you\u2019re on a date. Not if you want a second one, anyway.\n\n                        \n                    \n                    \n                        \n                        \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 10986, "excerpt": "Keep your drafts out of the public eye by making use of continuous deployment\ntools to publish your public GitHub Pages site \u2014 from a separate private\nrepository.\nTools like Travis CI and Netlify offer some pretty nifty features, like\nseamlessly deploying your GitHub Pages site when changes are pushed to its\nrepository. Along with a static site generator like Hugo, keeping a blog up to\ndate is pretty painless.\n\nI\u2019ve used Hugo to build my site for years, but until this past week I\u2019d never\nhooked", "siteName": "freeCodeCamp.org", "publishedTime": "2019-04-30T22:19:46.000Z", "id": "2df7e4235c5ac3f02003422a7abeb1810ed41d08", "url": "https://www.freecodecamp.org/news/two-ways-to-deploy-a-public-github-pages-site-from-a-private-hugo-repository-627312ec63b9/", "domain": "freecodecamp.org", "date": "2023-12-27T18:10:55.631266", "resultUri": "http://localhost:3000/result/2df7e4235c5ac3f02003422a7abeb1810ed41d08", "query": {"url": ["https://www.freecodecamp.org/news/two-ways-to-deploy-a-public-github-pages-site-from-a-private-hugo-repository-627312ec63b9/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "Two ways to deploy a public GitHub Pages site from a private Hugo repository", "description": "Keep your drafts out of the public eye by making use of continuous deployment tools to publish your public GitHub Pages site \u2014 from a separate private repository. Tools like Travis CI and Netlify offer some pretty nifty features, like seamlessly deploying your GitHub Pages site when changes are pushed", "url": "https://www.freecodecamp.org/news/two-ways-to-deploy-a-public-github-pages-site-from-a-private-hugo-repository-627312ec63b9/", "image": "https://cdn-media-1.freecodecamp.org/images/0*PIWDprt12aR7QsJ8.jpg", "image:width": "640", "image:height": "370"}, "twitter": {"card": "summary_large_image", "title": "Two ways to deploy a public GitHub Pages site from a private Hugo repository", "description": "Keep your drafts out of the public eye by making use of continuous deployment tools to publish your public GitHub Pages site \u2014 from a separate private repository. Tools like Travis CI and Netlify offer some pretty nifty features, like seamlessly deploying your GitHub Pages site when changes are pushed", "url": "https://www.freecodecamp.org/news/two-ways-to-deploy-a-public-github-pages-site-from-a-private-hugo-repository-627312ec63b9/", "image": "https://cdn-media-1.freecodecamp.org/images/0*PIWDprt12aR7QsJ8.jpg", "label1": "Written by", "data1": "Victoria Drake", "label2": "Filed under", "data2": "Coding, Programming, Technology, Tech, Productivity", "site": "@freecodecamp", "creator": "@victoriadotdev"}}}