{"title": "Easy date manipulation in Golang with Godate", "byline": "freeCodeCamp.org", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>Easy date manipulation in Golang with Godate</h1>\n<section>\n<section data-test-label=\"post-content\">\n<p>by Kofo Okesola</p><p>I have always been and always will be a fan of <a href=\"https://carbon.nesbot.com/\" rel=\"noopener\">Carbon</a> and how easy it is to get date manipulation done so efficiently. Being a fan of Carbon and also being a fan of Golang I thought why not write a <a href=\"https://github.com/kofoworola/godate\" rel=\"noopener\">library called godate</a>. It will do for golang what carbon does for Php, and in this article I will explain how to use it.</p><h3 id=\"package-breakdown\">Package Breakdown</h3><p>The package is mostly a <code>GoDate</code> struct with its available helper methods, which acts as a wrapper to a <code>Time</code> struct. It also includes some functions for initializing, e.g. <code>Now</code> <code>Tomorrow</code>.</p><h3 id=\"usage\">Usage</h3><h4 id=\"installation\">Installation</h4><pre><code>go get github.com/kofoworola/godate</code></pre><p>It also supports <a href=\"https://github.com/golang/go/wiki/Modules\" rel=\"noopener\">go\u2019s new module system</a>. You can simply import it into your project and run. Go will attempt to install the latest version of the package, which is v1.2.0 as of the time of writing this.</p><h4 id=\"usage-1\">Usage</h4><p>Create a new GoDate struct with any of the methods currently available</p><p>Note the difference in Timezone, which is why I recommend creating a GoDate struct with a <code>time.Location</code> object passed.</p><p>Once you have a struct you can easily chain methods on the struct to achieve your result like so:</p><h3 id=\"available-methods\">Available Methods</h3><h4 id=\"compare\">Compare</h4><p>The available compare methods are <code>IsBefore</code> , <code>IsBefore</code> and <code>IsWeekend</code> . The method names explain what they do:</p><h4 id=\"difference\">Difference</h4><p>The most important Difference methods are highlighted below. Although there are more methods included that are also used in the logic of these:</p><p>The <code>Difference</code> methods that take another <code>goDate</code> as a parameter calculates the difference as <code>methodOwner \u2014 parameter</code> . A negative difference means the parameter occurs after the <code>methodOwner</code>.</p><h4 id=\"string-formatting\">String Formatting</h4><p>These are the current available String formatting methods. You can also <a href=\"https://yourbasic.org/golang/format-parse-string-time-date-example/\" rel=\"noopener\">format</a>(you might want to read that if you\u2019re new to dates in golang) this your way by calling the <code>Format()</code> method</p><h4 id=\"helper\">Helper</h4><p>Some of the extra helper methods and their outputs are listed below:</p><p>Note the <code>EndOfWeek</code> and <code>StartOfWeek</code> methods use <code>time.Sunday</code> as the default start of the week. This behavior can be changed for the current godate struct by calling <code>now.SetFirstDay(time.Monday)</code> .</p><h3 id=\"conclusion\">Conclusion</h3><p>The package is far from complete (and probably never will be). The aim is to provide a robust date handling API similar to and even better (someone\u2019s ambitious here\u2026) than <a href=\"https://carbon.nesbot.com/\" rel=\"noopener\">Carbon</a>. So you Go lovers out there like me should make it rain PRs on the <a href=\"https://github.com/kofoworola/godate\" rel=\"noopener\">repo</a> (and stars :)</p>\n</section>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nby Kofo OkesolaI have always been and always will be a fan of Carbon and how easy it is to get date manipulation done so efficiently. Being a fan of Carbon and also being a fan of Golang I thought why not write a library called godate. It will do for golang what carbon does for Php, and in this article I will explain how to use it.Package BreakdownThe package is mostly a GoDate struct with its available helper methods, which acts as a wrapper to a Time struct. It also includes some functions for initializing, e.g. Now Tomorrow.UsageInstallationgo get github.com/kofoworola/godateIt also supports go\u2019s new module system. You can simply import it into your project and run. Go will attempt to install the latest version of the package, which is v1.2.0 as of the time of writing this.UsageCreate a new GoDate struct with any of the methods currently availableNote the difference in Timezone, which is why I recommend creating a GoDate struct with a time.Location object passed.Once you have a struct you can easily chain methods on the struct to achieve your result like so:Available MethodsCompareThe available compare methods are IsBefore , IsBefore and IsWeekend . The method names explain what they do:DifferenceThe most important Difference methods are highlighted below. Although there are more methods included that are also used in the logic of these:The Difference methods that take another goDate as a parameter calculates the difference as methodOwner \u2014 parameter . A negative difference means the parameter occurs after the methodOwner.String FormattingThese are the current available String formatting methods. You can also format(you might want to read that if you\u2019re new to dates in golang) this your way by calling the Format() methodHelperSome of the extra helper methods and their outputs are listed below:Note the EndOfWeek and StartOfWeek methods use time.Sunday as the default start of the week. This behavior can be changed for the current godate struct by calling now.SetFirstDay(time.Monday) .ConclusionThe package is far from complete (and probably never will be). The aim is to provide a robust date handling API similar to and even better (someone\u2019s ambitious here\u2026) than Carbon. So you Go lovers out there like me should make it rain PRs on the repo (and stars :)\n\n                        \n                    \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 2911, "excerpt": "by Kofo Okesola\n\nEasy date manipulation in Golang with Godate\nI have always been and always will be a fan of Carbon\n[https://carbon.nesbot.com/] and how easy it is to get date manipulation done so\nefficiently. Being a fan of Carbon and also being a fan of Golang I thought why\nnot write a library called godate [https://github.com/kofoworola/godate]. It\nwill do for golang what carbon does for Php, and in this article I will explain\nhow to use it.\n\nPackage Breakdown\nThe package is mostly a GoDate s", "siteName": "freeCodeCamp.org", "publishedTime": "2019-04-30T16:31:17.000Z", "id": "aa81bf85ca5be8b1154488b914a22a721e4f47a9", "url": "https://www.freecodecamp.org/news/easy-date-manipulation-in-golang-with-godate-485eef7254a0/", "domain": "freecodecamp.org", "date": "2023-12-27T18:11:02.988015", "resultUri": "http://localhost:3000/result/aa81bf85ca5be8b1154488b914a22a721e4f47a9", "query": {"url": ["https://www.freecodecamp.org/news/easy-date-manipulation-in-golang-with-godate-485eef7254a0/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "Easy date manipulation in Golang with Godate", "description": "by Kofo Okesola Easy date manipulation in Golang with Godate I have always been and always will be a fan of Carbon [https://carbon.nesbot.com/] and how easy it is to get date manipulation done so efficiently. Being a fan of Carbon and also being a fan of Golang I thought why", "url": "https://www.freecodecamp.org/news/easy-date-manipulation-in-golang-with-godate-485eef7254a0/", "image": "https://cdn-media-1.freecodecamp.org/images/1*6iBVfeqbc8V9MEuhlYOTdQ.jpeg", "image:width": "700", "image:height": "338"}, "twitter": {"card": "summary_large_image", "title": "Easy date manipulation in Golang with Godate", "description": "by Kofo Okesola Easy date manipulation in Golang with Godate I have always been and always will be a fan of Carbon [https://carbon.nesbot.com/] and how easy it is to get date manipulation done so efficiently. Being a fan of Carbon and also being a fan of Golang I thought why", "url": "https://www.freecodecamp.org/news/easy-date-manipulation-in-golang-with-godate-485eef7254a0/", "image": "https://cdn-media-1.freecodecamp.org/images/1*6iBVfeqbc8V9MEuhlYOTdQ.jpeg", "label1": "Written by", "data1": "freeCodeCamp.org", "label2": "Filed under", "data2": "Golang, Tech, Programming, Coding, Technology", "site": "@freecodecamp"}}}