{"title": "How to Organize Your Code with Functions", "byline": "Deborah Kurata", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>How to Organize Your Code with Functions</h1>\n<section>\n<section data-test-label=\"post-content\">\n<p>Functions are a fundamental building block of programming. They help us organize our code into manageable and reusable pieces. </p><p>Let's explore the basics of functions by way of a burger joint.</p><p>A burger joint may seem like an odd place to learn about code organization...but let's see where this goes. And you can view the associated video here.</p><figure data-test-label=\"fitted\">\n\n</figure><p>Are you hungry for some knowledge? Or maybe a burger?</p><p>Tackling any large set of tasks requires some amount of organization. Say we work at a burger restaurant. We could define a simplified view of the process as shown below:</p><!--kg-card-begin: markdown--><ol>\n<li>Take a customer's order</li>\n<li>If the customer ordered fries, make fries:\n<ul>\n<li>Dump fries into the fryer</li>\n<li>Set a timer</li>\n<li>Etc.</li>\n</ul>\n</li>\n<li>If the customer ordered a burger, make the burger:\n<ul>\n<li>Select the appropriate type of patty (veggie, chicken, fish, beef)</li>\n<li>Fry the burger</li>\n<li>Toast the bun</li>\n<li>Etc.</li>\n</ul>\n</li>\n<li>Put the items in a box</li>\n<li>Repeat at step 1</li>\n</ol>\n<!--kg-card-end: markdown--><p>A worker takes a customer's order. If the customer ordered fries, they make fries. Notice the \"sub-list\" describing how to make the fries. And if the customer ordered a burger, they make the burger. And there's another \"sub-list\" describing how to make the burger.</p><p>To keep our main list of instructions straightforward and easier to follow, we can move these sub-lists to separate sets of instructions.</p><figure><img alt=\"Make Fries sub-steps shown in one box. Make a Burger sub-steps shown in a second box. Steps without the sub-steps shown on the right.\" height=\"831\" loading=\"lazy\" sizes=\"(min-width: 1200px) 1200px\" src=\"https://www.freecodecamp.org/news/content/images/2023/01/figure3.jpg\" srcset=\"https://www.freecodecamp.org/news/content/images/size/w600/2023/01/figure3.jpg 600w, https://www.freecodecamp.org/news/content/images/size/w1000/2023/01/figure3.jpg 1000w, https://www.freecodecamp.org/news/content/images/size/w1600/2023/01/figure3.jpg 1600w, https://www.freecodecamp.org/news/content/images/2023/01/figure3.jpg 1602w\" width=\"1602\"/><figcaption>Figure 1. Defining functions</figcaption></figure><p>The left side of Figure 1 shows the list of steps for making fries, and the list for making a burger. We reference those instructions in the main flow, as shown on the right side of Figure 1. </p><p>The result is that each separate list of instructions is clearly defined. And the main flow on the right is easier to see without all of the sub-lists.</p><p>In programming, we call each of these self-contained sets of instructions a <strong>function</strong>.</p><p>Let's stop at this point and think about this. What are some benefits of breaking out some of the instructions into functions? Thoughts?</p><p>Separating our code into functions has several advantages:</p><ul><li>When building or maintaining the function, we can focus just on that function: what information it needs, what steps it performs, and what result it provides.</li><li>We can simplify the main set of instructions, making it easier to read and maintain over time.</li><li>It helps us separate work for a team, assigning each independent function to a member of the team. Jesse can be making fries, Chris making the burgers, and Sandhya follows the main flow, taking orders.</li><li>And we can more easily reuse the function in multiple places in the application.</li></ul><p>Did you think of other benefits?</p><h2 id=\"what-is-a-function\">What Is a Function?</h2><p>In programming:</p><ul><li>A <strong>function </strong>is a self-contained set of instructions to accomplish a chunk of a larger task.</li><li>A function separates responsibilities for a specific part of a task, making the main task easier to work with and read.</li><li>Functions add structure to our programs, and make them easier to read and modify over time.</li></ul><p>Here is a tip: Code is often read much more often than it's written, so make your code readable.</p><h2 id=\"anatomy-of-a-function\">Anatomy of a Function</h2><p>When writing code, functions look something like this:</p><h3 id=\"make-fries\">Make Fries</h3><pre><code>function makeFries(fries) {\n  ... instructions go here ...\n  return cookedFries\n}</code></pre><h3 id=\"make-a-burger\">Make a Burger</h3><pre><code>function makeBurger(patty, bun, condiments) {\n  ... instructions go here ...\n  return cookedBurger\n}</code></pre><p>Note that the details of the functions may look a bit different depending on the programming language you use.</p><p>A function often takes in some information, performs the set of instructions using that information, and gives back (or \"returns\") a result. At the burger joint we can say: \"Hey Chris, here is a patty, bun, and condiments, go make the burger, and bring it back to me when it's done.\"</p><p>Functions are often named with the task they perform following a verbObject style naming convention: makeFries and makeBurger.</p><p>The name is followed by a list of the information that the function needs. In this example, this information is enclosed in parenthesis and separated with commas. For our makeFries, we need the fries. And for the burger, we need a patty, bun, and condiments.</p><p>The function body contains the set of instructions required for this function.</p><p>In many cases, a function performs its set of steps and returns a result. So lastly, we return that result. The result is often indicated with a return statement. In this example, when the fries are made or the burger is done, we pass them back to the main flow and they are boxed for the customer.</p><h2 id=\"how-to-create-a-function\">How to Create a Function</h2><p>Let's look at another example from a simple virtual pet adoption website as shown in Figure 2.</p><figure><img alt='Screen shot of a web page that asks for the type of pet (cat) and how many (3), then displays \"meow\" three times.' height=\"617\" loading=\"lazy\" sizes=\"(min-width: 720px) 720px\" src=\"https://www.freecodecamp.org/news/content/images/2023/01/figure5.jpg\" srcset=\"https://www.freecodecamp.org/news/content/images/size/w600/2023/01/figure5.jpg 600w, https://www.freecodecamp.org/news/content/images/2023/01/figure5.jpg 799w\" width=\"799\"/><figcaption>Figure 2. Virtual pet adoption website</figcaption></figure><p>The user enters the type and number of pets, and clicks Adopt. The application then displays a message and a greeting from each of the virtually adopted pets.</p><p>When writing the code for this website, we want to simplify the main set of instructions by separating out the feature that prepares the pet greeting. We define a function for those instructions like this:</p><pre tabindex=\"0\"><code>function prepareGreeting(typeOfPet, numberOfPets) { \n  var greeting = '';\n  for (let i = 0; i &lt; numberOfPets; i++) {\n    if (typeOfPet === 'cat') { \n      greeting += 'meow' + '&lt;br/&gt;';\n    }\n    if (typeOfPet === 'dog') { \n      greeting += 'woof' + '&lt;br/&gt;';\n    }\n  }\n  return greeting;\n}</code></pre><p>This function is named \"prepareGreeting\" following our verbObject convention. It's best practice to give every function a meaningful name.</p><p>For a function to perform its set of instructions, it often needs some information. In this case, it needs the type of pet and the number of pets. When creating a function, we identify that needed information using parameters. </p><p>A <strong>parameter </strong>is a placeholder for the information the function needs. We give each placeholder a descriptive name, such as typeOfPet and numberOfPets. We add the parameters after the function name, often within parentheses and separated with commas.</p><p>The function name with its set of parameters is called a <strong>function signature</strong>. The function signature uniquely identifies the function.</p><p>The <strong>function body</strong> is where we write the code to perform the set of instructions. In this example, it's where we prepare the greeting. </p><p>In programming languages that use curly braces, the function body is defined between the first and last curly brace. In some languages, the function body is defined simply by its indentation.</p><p>In this function body, we prepare the pet's greeting. First, we initialize a greeting variable to an empty string. This ensures that we have a string (or text) variable we can use for the greeting text.</p><p>Then we loop for each pet. We use a counter represented by \"i\", repeat the loop while our counter is less than the total number of pets, and increment \"i\" at the end of each loop. Notice that in most programming languages, counting is zero-based, meaning it counts the iterations of the loop starting at 0: 0, 1, 2 for three pets.</p><p>Within the loop, if the passed-in pet type is a cat, we add a \"meow\" for each pet to the greeting variable. If the passed in pet type is a dog, we append \"woof\" for each pet. We then return that resulting greeting to the main set of instructions.</p><h2 id=\"how-to-call-a-function\">How to Call a Function</h2><p>Code in a function won't do anything until we call that function from some other code, such as our main set of instructions. The exact syntax for calling a function depends on the programming language you use. But it will look something like this:</p><pre tabindex=\"0\"><code>greetingForDisplay = prepareGreeting(\"cat\", 3)</code></pre><p>We use the name of the function to identify which function we want to call. Then pass a value in for each parameter placeholder. In this example, we pass in a string (or text) using quotation marks and a number.</p><p>The result of the function's instructions are returned to the code that called it. In this example, the value is assigned to the greetingForDisplay variable. The main code could then display the contents of this variable to the user.</p><p>When working with functions, be sure to keep these two terms clear:</p><ul><li><strong>Parameter</strong>: The placeholder in the function signature where we define what kind of information the function needs.</li><li><strong>Argument</strong>: The value(s) passed in when calling the function, giving the function the information it needs to perform its instructions</li></ul><h2 id=\"wrapping-up\">Wrapping Up</h2><p>We use a function to define a self-contained set of instructions for a chunk of a larger task. Using functions helps break up long code into manageable pieces. Just like building blocks, we combine functions to create simple to complex applications and websites.</p><!--kg-card-begin: markdown--><p>For more information on general programming concepts, check out my course: <a href=\"https://www.youtube.com/playlist?list=PLErOmyzRKOCrO9bwM1931IY8S3iWfhrr8\">\"Gentle Introduction to Programming for Beginners\"</a>. And for information on web development, GitHub, Angular, and C#, subscribe to <a href=\"https://www.youtube.com/@deborah_kurata\">my YouTube channel</a>.</p>\n<!--kg-card-end: markdown--><p>Now, let's go order that burger!</p>\n</section>\n<hr/>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nFunctions are a fundamental building block of programming. They help us organize our code into manageable and reusable pieces. Let's explore the basics of functions by way of a burger joint.A burger joint may seem like an odd place to learn about code organization...but let's see where this goes. And you can view the associated video here.\n        \n          \n            \n          \n        \n      Are you hungry for some knowledge? Or maybe a burger?Tackling any large set of tasks requires some amount of organization. Say we work at a burger restaurant. We could define a simplified view of the process as shown below:\nTake a customer's order\nIf the customer ordered fries, make fries:\n\nDump fries into the fryer\nSet a timer\nEtc.\n\n\nIf the customer ordered a burger, make the burger:\n\nSelect the appropriate type of patty (veggie, chicken, fish, beef)\nFry the burger\nToast the bun\nEtc.\n\n\nPut the items in a box\nRepeat at step 1\n\nA worker takes a customer's order. If the customer ordered fries, they make fries. Notice the \"sub-list\" describing how to make the fries. And if the customer ordered a burger, they make the burger. And there's another \"sub-list\" describing how to make the burger.To keep our main list of instructions straightforward and easier to follow, we can move these sub-lists to separate sets of instructions.Figure 1. Defining functionsThe left side of Figure 1 shows the list of steps for making fries, and the list for making a burger. We reference those instructions in the main flow, as shown on the right side of Figure 1. The result is that each separate list of instructions is clearly defined. And the main flow on the right is easier to see without all of the sub-lists.In programming, we call each of these self-contained sets of instructions a function.Let's stop at this point and think about this. What are some benefits of breaking out some of the instructions into functions? Thoughts?Separating our code into functions has several advantages:When building or maintaining the function, we can focus just on that function: what information it needs, what steps it performs, and what result it provides.We can simplify the main set of instructions, making it easier to read and maintain over time.It helps us separate work for a team, assigning each independent function to a member of the team. Jesse can be making fries, Chris making the burgers, and Sandhya follows the main flow, taking orders.And we can more easily reuse the function in multiple places in the application.Did you think of other benefits?What Is a Function?In programming:A function is a self-contained set of instructions to accomplish a chunk of a larger task.A function separates responsibilities for a specific part of a task, making the main task easier to work with and read.Functions add structure to our programs, and make them easier to read and modify over time.Here is a tip: Code is often read much more often than it's written, so make your code readable.Anatomy of a FunctionWhen writing code, functions look something like this:Make Friesfunction makeFries(fries) {\n  ... instructions go here ...\n  return cookedFries\n}Make a Burgerfunction makeBurger(patty, bun, condiments) {\n  ... instructions go here ...\n  return cookedBurger\n}Note that the details of the functions may look a bit different depending on the programming language you use.A function often takes in some information, performs the set of instructions using that information, and gives back (or \"returns\") a result. At the burger joint we can say: \"Hey Chris, here is a patty, bun, and condiments, go make the burger, and bring it back to me when it's done.\"Functions are often named with the task they perform following a verbObject style naming convention: makeFries and makeBurger.The name is followed by a list of the information that the function needs. In this example, this information is enclosed in parenthesis and separated with commas. For our makeFries, we need the fries. And for the burger, we need a patty, bun, and condiments.The function body contains the set of instructions required for this function.In many cases, a function performs its set of steps and returns a result. So lastly, we return that result. The result is often indicated with a return statement. In this example, when the fries are made or the burger is done, we pass them back to the main flow and they are boxed for the customer.How to Create a FunctionLet's look at another example from a simple virtual pet adoption website as shown in Figure 2.Figure 2. Virtual pet adoption websiteThe user enters the type and number of pets, and clicks Adopt. The application then displays a message and a greeting from each of the virtually adopted pets.When writing the code for this website, we want to simplify the main set of instructions by separating out the feature that prepares the pet greeting. We define a function for those instructions like this:function prepareGreeting(typeOfPet, numberOfPets) { \n  var greeting = '';\n  for (let i = 0; i < numberOfPets; i++) {\n    if (typeOfPet === 'cat') { \n      greeting += 'meow' + '<br/>';\n    }\n    if (typeOfPet === 'dog') { \n      greeting += 'woof' + '<br/>';\n    }\n  }\n  return greeting;\n}This function is named \"prepareGreeting\" following our verbObject convention. It's best practice to give every function a meaningful name.For a function to perform its set of instructions, it often needs some information. In this case, it needs the type of pet and the number of pets. When creating a function, we identify that needed information using parameters. A parameter is a placeholder for the information the function needs. We give each placeholder a descriptive name, such as typeOfPet and numberOfPets. We add the parameters after the function name, often within parentheses and separated with commas.The function name with its set of parameters is called a function signature. The function signature uniquely identifies the function.The function body is where we write the code to perform the set of instructions. In this example, it's where we prepare the greeting. In programming languages that use curly braces, the function body is defined between the first and last curly brace. In some languages, the function body is defined simply by its indentation.In this function body, we prepare the pet's greeting. First, we initialize a greeting variable to an empty string. This ensures that we have a string (or text) variable we can use for the greeting text.Then we loop for each pet. We use a counter represented by \"i\", repeat the loop while our counter is less than the total number of pets, and increment \"i\" at the end of each loop. Notice that in most programming languages, counting is zero-based, meaning it counts the iterations of the loop starting at 0: 0, 1, 2 for three pets.Within the loop, if the passed-in pet type is a cat, we add a \"meow\" for each pet to the greeting variable. If the passed in pet type is a dog, we append \"woof\" for each pet. We then return that resulting greeting to the main set of instructions.How to Call a FunctionCode in a function won't do anything until we call that function from some other code, such as our main set of instructions. The exact syntax for calling a function depends on the programming language you use. But it will look something like this:greetingForDisplay = prepareGreeting(\"cat\", 3)We use the name of the function to identify which function we want to call. Then pass a value in for each parameter placeholder. In this example, we pass in a string (or text) using quotation marks and a number.The result of the function's instructions are returned to the code that called it. In this example, the value is assigned to the greetingForDisplay variable. The main code could then display the contents of this variable to the user.When working with functions, be sure to keep these two terms clear:Parameter: The placeholder in the function signature where we define what kind of information the function needs.Argument: The value(s) passed in when calling the function, giving the function the information it needs to perform its instructionsWrapping UpWe use a function to define a self-contained set of instructions for a chunk of a larger task. Using functions helps break up long code into manageable pieces. Just like building blocks, we combine functions to create simple to complex applications and websites.For more information on general programming concepts, check out my course: \"Gentle Introduction to Programming for Beginners\". And for information on web development, GitHub, Angular, and C#, subscribe to my YouTube channel.\nNow, let's go order that burger!\n\n                        \n                    \n                    \n                        \n                        \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 9358, "excerpt": "Functions are a fundamental building block of programming. They help us organize\nour code into manageable and reusable pieces. \n\nLet's explore the basics of functions by way of a burger joint.\n\nA burger joint may seem like an odd place to learn about code organization...but\nlet's see where this goes. And you can view the associated video here.\n\nAre you hungry for some knowledge? Or maybe a burger?\n\nTackling any large set of tasks requires some amount of organization. Say we\nwork at a burger rest", "siteName": "freeCodeCamp.org", "publishedTime": "2023-01-19T17:29:50.000Z", "id": "96700cf62647daea3d280a9a9f382b0729ce9196", "url": "https://www.freecodecamp.org/news/organizing-code-with-functions/", "domain": "freecodecamp.org", "date": "2023-12-27T18:05:04.399971", "resultUri": "http://localhost:3000/result/96700cf62647daea3d280a9a9f382b0729ce9196", "query": {"url": ["https://www.freecodecamp.org/news/organizing-code-with-functions/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "How to Organize Your Code with Functions", "description": "Functions are a fundamental building block of programming. They help us organize our code into manageable and reusable pieces.  Let's explore the basics of functions by way of a burger joint. A burger joint may seem like an odd place to learn about code organization...but let's see where this", "url": "https://www.freecodecamp.org/news/organizing-code-with-functions/", "image": "https://www.freecodecamp.org/news/content/images/2023/01/organizing-code-with-functions-thumbnail.jpg", "image:width": "2000", "image:height": "1059"}, "twitter": {"card": "summary_large_image", "title": "How to Organize Your Code with Functions", "description": "Functions are a fundamental building block of programming. They help us organize our code into manageable and reusable pieces.  Let's explore the basics of functions by way of a burger joint. A burger joint may seem like an odd place to learn about code organization...but let's see where this", "url": "https://www.freecodecamp.org/news/organizing-code-with-functions/", "image": "https://www.freecodecamp.org/news/content/images/2023/01/organizing-code-with-functions-thumbnail.jpg", "label1": "Written by", "data1": "Deborah Kurata", "label2": "Filed under", "data2": "Programming, Web Development, Coding, functions, Learning To Code, Beginner", "site": "@freecodecamp", "creator": "@DeborahKurata"}}}