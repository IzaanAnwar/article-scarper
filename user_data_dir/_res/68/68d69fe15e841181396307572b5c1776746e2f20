{"title": "How to create a Countdown component using React & MomentJS", "byline": "Florin Pop", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>How to create a Countdown component using React &amp; MomentJS</h1>\n<section>\n<section data-test-label=\"post-content\">\n<p>Recently I had to create a Countdown for one of my other projects, and I thought that it could also make a good tutorial. So in this post we\u2019re going to create this component using React and a little bit of <code>SVG</code>. ?</p><p>You can find the final result in this <a href=\"https://codepen.io/FlorinPop17/pen/YbpwyG\" rel=\"noopener\">Codepen example</a>:</p><figure></figure><p>First we will create the countdown functionality and then we will look into how to create the animated arc using <code>SVG</code> with some fancy functions. ?</p><h3 id=\"creating-the-countdown-functionality\">Creating the Countdown functionality</h3><p>For this we\u2019re going to use <a href=\"https://momentjs.com/\" rel=\"noopener\">MomentJS</a> library which will help us <em>parse, validate, manipulate, </em>and<em> display </em>dates and times.</p><p>Basically what we\u2019re going to need is to have 2 dates:</p><ul><li>the current date or <code>now</code></li><li>the final date or <code>then</code></li></ul><p>When we have these 2 dates, we can subtract <code>now</code> from <code>then</code> using <code>moment</code> and we'll get the remaining time (or the <code>countdown</code> value).</p><p>For the <code>then</code> date, we'll need to pass 2 strings:</p><ul><li>one, the <code>timeTillDate</code> string containing the final date until which we want to count (e.g: <strong>05 26 2019, 6:00 am</strong>)</li><li>two, the <code>timeFormat</code> string that is used by <code>moment</code> in order to validate the time format (in our example would be: <strong>MM DD YYYY, h:mm a</strong>)</li></ul><p>You can find out more about parsing strings and formatting them in the <a href=\"https://momentjs.com/docs/#/parsing/string/\" rel=\"noopener\">documentation</a>.</p><p>Let\u2019s see how this looks in code:</p><pre tabindex=\"0\"><code>import moment from 'moment';\n\nconst then = moment(timeTillDate, timeFormat);\nconst now = moment();\nconst countdown = moment(then - now);</code></pre><p><strong>Note</strong>: the <code>timeTillDate</code>, <code>timeFormat</code> values will be provided inside the React component. For now we're using them as examples.</p><p>From the <code>countdown</code> object we can get all the values that we want to display in our component - <code>days</code>, <code>hours</code>, <code>minutes</code> and <code>seconds</code> left until we reach the <code>then</code> time.</p><pre tabindex=\"0\"><code>import moment from 'moment';\n\nconst then = moment(timeTillDate, timeFormat);\nconst now = moment();\nconst countdown = moment(then - now);\nconst days = countdown.format('D');\nconst hours = countdown.format('HH');\nconst minutes = countdown.format('mm');\nconst seconds = countdown.format('ss');</code></pre><p>Later we\u2019ll add this code in a JS <code>interval</code> that would be called every second, but before that let's set up the react component for it.</p><h3 id=\"the-countdown-component\">The Countdown Component</h3><p>For this we\u2019re going to create a <em>class</em> based component, as we need access to the <code>state</code> of the component because we'll save these 4 values (<code>days</code>, <code>hours</code>, <code>minutes</code>, <code>seconds</code>) in it. By default these values are <code>undefined</code>.</p><pre tabindex=\"0\"><code>import React from 'react';\n\nclass Countdown extends React.Component {\n    state = {\n        days: undefined,\n        hours: undefined,\n        minutes: undefined,\n        seconds: undefined\n    };\n\n    render() {\n        const { days, hours, minutes, seconds } = this.state;\n      \n        return (\n            &lt;div&gt;\n                &lt;h1&gt;Countdown&lt;/h1&gt;\n                &lt;div className=\"countdown-wrapper\"&gt;\n                    &lt;div className=\"countdown-item\"&gt;\n                        {days}\n                        &lt;span&gt;days&lt;/span&gt;\n                    &lt;/div&gt;\n                    &lt;div className=\"countdown-item\"&gt;\n                        {hours}\n                        &lt;span&gt;hours&lt;/span&gt;\n                    &lt;/div&gt;\n                    &lt;div className=\"countdown-item\"&gt;\n                        {minutes}\n                        &lt;span&gt;minutes&lt;/span&gt;\n                    &lt;/div&gt;\n                    &lt;div className=\"countdown-item\"&gt;\n                        {seconds}\n                        &lt;span&gt;seconds&lt;/span&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        );\n    }\n}</code></pre><p>Next, let\u2019s create the <code>interval</code> that runs every second and saves the values in the <code>state</code> of the component. We'll do this <code>interval</code> inside the <code>componentDidMount</code> lifecycle method. We are going to <code>clear</code> the interval in the <code>componentWillUnmount</code> lifecycle method, as we don't want to keep it running after the component is removed from the DOM.</p><pre tabindex=\"0\"><code>import React from 'react';\nimport moment from 'moment';\n\nclass Countdown extends React.Component {\n    state = {\n        days: undefined,\n        hours: undefined,\n        minutes: undefined,\n        seconds: undefined\n    };\n\n    componentDidMount() {\n        this.interval = setInterval(() =&gt; {\n            const { timeTillDate, timeFormat } = this.props;\n            const then = moment(timeTillDate, timeFormat);\n            const now = moment();\n            const countdown = moment(then - now);\n            const days = countdown.format('D');\n            const hours = countdown.format('HH');\n            const minutes = countdown.format('mm');\n            const seconds = countdown.format('ss');\n            this.setState({ days, hours, minutes, seconds });\n        }, 1000);\n    }\n\n    componentWillUnmount() {\n        if (this.interval) {\n            clearInterval(this.interval);\n        }\n    }\n\n    render() {\n        const { days, hours, minutes, seconds } = this.state;\n      \n        return (\n            &lt;div&gt;\n                &lt;h1&gt;Countdown&lt;/h1&gt;\n                &lt;div className=\"countdown-wrapper\"&gt;\n                    &lt;div className=\"countdown-item\"&gt;\n                        {days}\n                        &lt;span&gt;days&lt;/span&gt;\n                    &lt;/div&gt;\n                    &lt;div className=\"countdown-item\"&gt;\n                        {hours}\n                        &lt;span&gt;hours&lt;/span&gt;\n                    &lt;/div&gt;\n                    &lt;div className=\"countdown-item\"&gt;\n                        {minutes}\n                        &lt;span&gt;minutes&lt;/span&gt;\n                    &lt;/div&gt;\n                    &lt;div className=\"countdown-item\"&gt;\n                        {seconds}\n                        &lt;span&gt;seconds&lt;/span&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        );\n    }\n}</code></pre><h3 id=\"the-css\">The CSS</h3><p>We have the countdown functionality all up and running now, so let\u2019s style it a little bit:</p><pre tabindex=\"0\"><code>@import url('https://fonts.googleapis.com/css?family=Lato');\n\n* {\n    box-sizing: border-box;\n}\n\nbody {\n    font-family: 'Lato', sans-serif;\n}\n\nh1 {\n    letter-spacing: 2px;\n    text-align: center;\n    text-transform: uppercase;\n}\n\n.countdown-wrapper {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-wrap: wrap;\n}\n\n.countdown-item {\n    color: #111;\n    font-size: 40px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    line-height: 30px;\n    margin: 10px;\n    padding-top: 10px;\n    position: relative;\n    width: 100px;\n    height: 100px;\n}\n\n.countdown-item span {\n    color: #333;\n    font-size: 12px;\n    font-weight: 600;\n    text-transform: uppercase;\n}</code></pre><p>Nothing fancy in the CSS; we\u2019re using <code>flexbox</code> to position the items within the wrapper.</p><p>Lastly, let\u2019s create the <code>SVG</code> arc that will be surrounding each item in our countdown.</p><h3 id=\"the-svgcircle-component\">The SVGCircle Component</h3><p>Before we do that, there are a couple of functions that we need in order to create the customizable <code>SVG</code> arc. I found these on <a href=\"https://stackoverflow.com/questions/5736398/how-to-calculate-the-svg-path-for-an-arc-of-a-circle\" rel=\"noopener\">StackOverflow</a>. For more information you should go there and read the detailed explanation of the functions.</p><pre tabindex=\"0\"><code>function polarToCartesian(centerX, centerY, radius, angleInDegrees) {\n    var angleInRadians = ((angleInDegrees - 90) * Math.PI) / 180.0;\n  \n    return {\n        x: centerX + radius * Math.cos(angleInRadians),\n        y: centerY + radius * Math.sin(angleInRadians)\n    };\n}\n\nfunction describeArc(x, y, radius, startAngle, endAngle) {\n    var start = polarToCartesian(x, y, radius, endAngle);\n    var end = polarToCartesian(x, y, radius, startAngle);\n    var largeArcFlag = endAngle - startAngle &lt;= 180 ? '0' : '1';\n    var d = [\n        'M',\n        start.x,\n        start.y,\n        'A',\n        radius,\n        radius,\n        0,\n        largeArcFlag,\n        0,\n        end.x,\n        end.y\n    ].join(' ');\n  \n    return d;\n}</code></pre><p>Basically the above function calculates how the arc should be drawn by providing a set of values as: the start and ending points, the radius and the angles.</p><p>Back to our React Component: we\u2019re going to create the <code>svg</code> and we'll have a <code>path</code> tag within it which will draw the arc (the <code>d</code> prop) by giving it a <code>radius</code> property. The other 4 values within the <code>describeArc</code> function are fixed, as we don't want to modify it and we are customizing it to look good for our example.</p><pre tabindex=\"0\"><code>const SVGCircle = ({ radius }) =&gt; (\n    &lt;svg className=\"countdown-svg\"&gt;\n        &lt;path\n            fill=\"none\"\n            stroke=\"#333\"\n            stroke-width=\"4\"\n            d={describeArc(50, 50, 48, 0, radius)}\n        /&gt;\n    &lt;/svg&gt;\n);</code></pre><p>And we also need a little bit of CSS to position it inside the <code>.countdown-item</code> (See where this component goes in the final result section):</p><pre tabindex=\"0\"><code>.countdown-svg {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100px;\n    height: 100px;\n}</code></pre><p>Before adding this component inside the <code>Countdown</code> component, we need to convert the values that we have (<code>days</code>, <code>hours</code>, <code>minutes</code> and <code>seconds</code>) to their corresponding radius values.</p><p>For this we\u2019ll need another simple function that will map a number within a range (in our case the date values) to another range of numbers (in our case, the radius). This function is also from <a href=\"https://stackoverflow.com/questions/10756313/javascript-jquery-map-a-range-of-numbers-to-another-range-of-numbers\" rel=\"noopener\">StackOverflow</a>:</p><pre tabindex=\"0\"><code>function mapNumber(number, in_min, in_max, out_min, out_max) {\n    return (\n        ((number - in_min) * (out_max - out_min)) / (in_max - in_min) + out_min\n    );\n}</code></pre><h3 id=\"the-final-result\">The final result</h3><p>Finally, let\u2019s add the new <code>SVGCircle</code> component inside each of the <code>.countdown-item</code>s and put everything together:</p><pre tabindex=\"0\"><code>import React from 'react';\nimport moment from 'moment';\n\nclass Countdown extends React.Component {\n    state = {\n        days: undefined,\n        hours: undefined,\n        minutes: undefined,\n        seconds: undefined\n    };\n    \n    componentDidMount() {\n        this.interval = setInterval(() =&gt; {\n            const { timeTillDate, timeFormat } = this.props;\n            const then = moment(timeTillDate, timeFormat);\n            const now = moment();\n            const countdown = moment(then - now);\n            const days = countdown.format('D');\n            const hours = countdown.format('HH');\n            const minutes = countdown.format('mm');\n            const seconds = countdown.format('ss');\n            this.setState({ days, hours, minutes, seconds });\n        }, 1000);\n    }\n    \n    componentWillUnmount() {\n        if (this.interval) {\n            clearInterval(this.interval);\n        }\n    }\n    \n    render() {\n        const { days, hours, minutes, seconds } = this.state;\n        \n        // Mapping the date values to radius values\n        const daysRadius = mapNumber(days, 30, 0, 0, 360);\n        const hoursRadius = mapNumber(hours, 24, 0, 0, 360);\n        const minutesRadius = mapNumber(minutes, 60, 0, 0, 360);\n        const secondsRadius = mapNumber(seconds, 60, 0, 0, 360);\n        \n        if (!seconds) {\n            return null;\n        }\n        \n        return (\n            &lt;div&gt;\n                &lt;h1&gt;Countdown&lt;/h1&gt;\n                &lt;div className=\"countdown-wrapper\"&gt;\n                    {days &amp;&amp; (\n                        &lt;div className=\"countdown-item\"&gt;\n                            &lt;SVGCircle radius={daysRadius} /&gt;\n                            {days}\n                            &lt;span&gt;days&lt;/span&gt;\n                        &lt;/div&gt;\n                    )}\n                    {hours &amp;&amp; (\n                        &lt;div className=\"countdown-item\"&gt;\n                            &lt;SVGCircle radius={hoursRadius} /&gt;\n                            {hours}\n                            &lt;span&gt;hours&lt;/span&gt;\n                        &lt;/div&gt;\n                    )}\n                    {minutes &amp;&amp; (\n                        &lt;div className=\"countdown-item\"&gt;\n                            &lt;SVGCircle radius={minutesRadius} /&gt;\n                            {minutes}\n                            &lt;span&gt;minutes&lt;/span&gt;\n                        &lt;/div&gt;\n                    )}\n                    {seconds &amp;&amp; (\n                        &lt;div className=\"countdown-item\"&gt;\n                            &lt;SVGCircle radius={secondsRadius} /&gt;\n                            {seconds}\n                            &lt;span&gt;seconds&lt;/span&gt;\n                        &lt;/div&gt;\n                    )}\n                &lt;/div&gt;\n            &lt;/div&gt;\n        );\n    }\n}\n\nconst SVGCircle = ({ radius }) =&gt; (\n    &lt;svg className=\"countdown-svg\"&gt;\n        &lt;path\n            fill=\"none\"\n            stroke=\"#333\"\n            stroke-width=\"4\"\n            d={describeArc(50, 50, 48, 0, radius)}\n        /&gt;\n    &lt;/svg&gt;\n);\n\n// From StackOverflow: https://stackoverflow.com/questions/5736398/how-to-calculate-the-svg-path-for-an-arc-of-a-circle\n\nfunction polarToCartesian(centerX, centerY, radius, angleInDegrees) {\n    var angleInRadians = ((angleInDegrees - 90) * Math.PI) / 180.0;\n    \n    return {\n        x: centerX + radius * Math.cos(angleInRadians),\n        y: centerY + radius * Math.sin(angleInRadians)\n    };\n}\n\nfunction describeArc(x, y, radius, startAngle, endAngle) {\n    var start = polarToCartesian(x, y, radius, endAngle);\n    var end = polarToCartesian(x, y, radius, startAngle);\n    var largeArcFlag = endAngle - startAngle &lt;= 180 ? '0' : '1';\n    var d = [\n        'M',\n        start.x,\n        start.y,\n        'A',\n        radius,\n        radius,\n        0,\n        largeArcFlag,\n        0,\n        end.x,\n        end.y\n    ].join(' ');\n    \n    return d;\n}\n\n// From StackOverflow: https://stackoverflow.com/questions/10756313/javascript-jquery-map-a-range-of-numbers-to-another-range-of-numbers\n\nfunction mapNumber(number, in_min, in_max, out_min, out_max) {\n    return (\n        ((number - in_min) * (out_max - out_min)) / (in_max - in_min) + out_min\n    );\n}</code></pre><p>All you have to do now to use the <code>Countdown</code> component is to pass it the two props (<code>timeTillDate</code> and <code>timeFormat</code>) and you're golden ?:</p><pre tabindex=\"0\"><code>&lt;Countdown \n    timeTillDate=\"05 26 2019, 6:00 am\" \n    timeFormat=\"MM DD YYYY, h:mm a\" \n/&gt;</code></pre><h3 id=\"conclusion\">Conclusion</h3><p>It was a fun little project with React, wasn\u2019t it? ?</p><p>When I built this I learned a little bit more about how to work with the <code>momentjs</code> library and also with <code>svg</code>s to draw an arc.</p><p>Let me know if you have any questions regarding this tutorial.</p><p>Happy Coding! ?</p><p><em>Originally posted on <a href=\"https://www.florin-pop.com/blog/2019/05/countdown-built-with-react/\" rel=\"noopener\">www.florin-pop.com</a></em></p>\n</section>\n<hr/>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nRecently I had to create a Countdown for one of my other projects, and I thought that it could also make a good tutorial. So in this post we\u2019re going to create this component using React and a little bit of SVG. ?You can find the final result in this Codepen example:First we will create the countdown functionality and then we will look into how to create the animated arc using SVG with some fancy functions. ?Creating the Countdown functionalityFor this we\u2019re going to use MomentJS library which will help us parse, validate, manipulate, and display dates and times.Basically what we\u2019re going to need is to have 2 dates:the current date or nowthe final date or thenWhen we have these 2 dates, we can subtract now from then using moment and we'll get the remaining time (or the countdown value).For the then date, we'll need to pass 2 strings:one, the timeTillDate string containing the final date until which we want to count (e.g: 05 26 2019, 6:00 am)two, the timeFormat string that is used by moment in order to validate the time format (in our example would be: MM DD YYYY, h:mm a)You can find out more about parsing strings and formatting them in the documentation.Let\u2019s see how this looks in code:import moment from 'moment';\n\nconst then = moment(timeTillDate, timeFormat);\nconst now = moment();\nconst countdown = moment(then - now);Note: the timeTillDate, timeFormat values will be provided inside the React component. For now we're using them as examples.From the countdown object we can get all the values that we want to display in our component - days, hours, minutes and seconds left until we reach the then time.import moment from 'moment';\n\nconst then = moment(timeTillDate, timeFormat);\nconst now = moment();\nconst countdown = moment(then - now);\nconst days = countdown.format('D');\nconst hours = countdown.format('HH');\nconst minutes = countdown.format('mm');\nconst seconds = countdown.format('ss');Later we\u2019ll add this code in a JS interval that would be called every second, but before that let's set up the react component for it.The Countdown ComponentFor this we\u2019re going to create a class based component, as we need access to the state of the component because we'll save these 4 values (days, hours, minutes, seconds) in it. By default these values are undefined.import React from 'react';\n\nclass Countdown extends React.Component {\n    state = {\n        days: undefined,\n        hours: undefined,\n        minutes: undefined,\n        seconds: undefined\n    };\n\n    render() {\n        const { days, hours, minutes, seconds } = this.state;\n      \n        return (\n            <div>\n                <h1>Countdown</h1>\n                <div className=\"countdown-wrapper\">\n                    <div className=\"countdown-item\">\n                        {days}\n                        <span>days</span>\n                    </div>\n                    <div className=\"countdown-item\">\n                        {hours}\n                        <span>hours</span>\n                    </div>\n                    <div className=\"countdown-item\">\n                        {minutes}\n                        <span>minutes</span>\n                    </div>\n                    <div className=\"countdown-item\">\n                        {seconds}\n                        <span>seconds</span>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}Next, let\u2019s create the interval that runs every second and saves the values in the state of the component. We'll do this interval inside the componentDidMount lifecycle method. We are going to clear the interval in the componentWillUnmount lifecycle method, as we don't want to keep it running after the component is removed from the DOM.import React from 'react';\nimport moment from 'moment';\n\nclass Countdown extends React.Component {\n    state = {\n        days: undefined,\n        hours: undefined,\n        minutes: undefined,\n        seconds: undefined\n    };\n\n    componentDidMount() {\n        this.interval = setInterval(() => {\n            const { timeTillDate, timeFormat } = this.props;\n            const then = moment(timeTillDate, timeFormat);\n            const now = moment();\n            const countdown = moment(then - now);\n            const days = countdown.format('D');\n            const hours = countdown.format('HH');\n            const minutes = countdown.format('mm');\n            const seconds = countdown.format('ss');\n            this.setState({ days, hours, minutes, seconds });\n        }, 1000);\n    }\n\n    componentWillUnmount() {\n        if (this.interval) {\n            clearInterval(this.interval);\n        }\n    }\n\n    render() {\n        const { days, hours, minutes, seconds } = this.state;\n      \n        return (\n            <div>\n                <h1>Countdown</h1>\n                <div className=\"countdown-wrapper\">\n                    <div className=\"countdown-item\">\n                        {days}\n                        <span>days</span>\n                    </div>\n                    <div className=\"countdown-item\">\n                        {hours}\n                        <span>hours</span>\n                    </div>\n                    <div className=\"countdown-item\">\n                        {minutes}\n                        <span>minutes</span>\n                    </div>\n                    <div className=\"countdown-item\">\n                        {seconds}\n                        <span>seconds</span>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}The CSSWe have the countdown functionality all up and running now, so let\u2019s style it a little bit:@import url('https://fonts.googleapis.com/css?family=Lato');\n\n* {\n    box-sizing: border-box;\n}\n\nbody {\n    font-family: 'Lato', sans-serif;\n}\n\nh1 {\n    letter-spacing: 2px;\n    text-align: center;\n    text-transform: uppercase;\n}\n\n.countdown-wrapper {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-wrap: wrap;\n}\n\n.countdown-item {\n    color: #111;\n    font-size: 40px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    line-height: 30px;\n    margin: 10px;\n    padding-top: 10px;\n    position: relative;\n    width: 100px;\n    height: 100px;\n}\n\n.countdown-item span {\n    color: #333;\n    font-size: 12px;\n    font-weight: 600;\n    text-transform: uppercase;\n}Nothing fancy in the CSS; we\u2019re using flexbox to position the items within the wrapper.Lastly, let\u2019s create the SVG arc that will be surrounding each item in our countdown.The SVGCircle ComponentBefore we do that, there are a couple of functions that we need in order to create the customizable SVG arc. I found these on StackOverflow. For more information you should go there and read the detailed explanation of the functions.function polarToCartesian(centerX, centerY, radius, angleInDegrees) {\n    var angleInRadians = ((angleInDegrees - 90) * Math.PI) / 180.0;\n  \n    return {\n        x: centerX + radius * Math.cos(angleInRadians),\n        y: centerY + radius * Math.sin(angleInRadians)\n    };\n}\n\nfunction describeArc(x, y, radius, startAngle, endAngle) {\n    var start = polarToCartesian(x, y, radius, endAngle);\n    var end = polarToCartesian(x, y, radius, startAngle);\n    var largeArcFlag = endAngle - startAngle <= 180 ? '0' : '1';\n    var d = [\n        'M',\n        start.x,\n        start.y,\n        'A',\n        radius,\n        radius,\n        0,\n        largeArcFlag,\n        0,\n        end.x,\n        end.y\n    ].join(' ');\n  \n    return d;\n}Basically the above function calculates how the arc should be drawn by providing a set of values as: the start and ending points, the radius and the angles.Back to our React Component: we\u2019re going to create the svg and we'll have a path tag within it which will draw the arc (the d prop) by giving it a radius property. The other 4 values within the describeArc function are fixed, as we don't want to modify it and we are customizing it to look good for our example.const SVGCircle = ({ radius }) => (\n    <svg className=\"countdown-svg\">\n        <path\n            fill=\"none\"\n            stroke=\"#333\"\n            stroke-width=\"4\"\n            d={describeArc(50, 50, 48, 0, radius)}\n        />\n    </svg>\n);And we also need a little bit of CSS to position it inside the .countdown-item (See where this component goes in the final result section):.countdown-svg {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100px;\n    height: 100px;\n}Before adding this component inside the Countdown component, we need to convert the values that we have (days, hours, minutes and seconds) to their corresponding radius values.For this we\u2019ll need another simple function that will map a number within a range (in our case the date values) to another range of numbers (in our case, the radius). This function is also from StackOverflow:function mapNumber(number, in_min, in_max, out_min, out_max) {\n    return (\n        ((number - in_min) * (out_max - out_min)) / (in_max - in_min) + out_min\n    );\n}The final resultFinally, let\u2019s add the new SVGCircle component inside each of the .countdown-items and put everything together:import React from 'react';\nimport moment from 'moment';\n\nclass Countdown extends React.Component {\n    state = {\n        days: undefined,\n        hours: undefined,\n        minutes: undefined,\n        seconds: undefined\n    };\n    \n    componentDidMount() {\n        this.interval = setInterval(() => {\n            const { timeTillDate, timeFormat } = this.props;\n            const then = moment(timeTillDate, timeFormat);\n            const now = moment();\n            const countdown = moment(then - now);\n            const days = countdown.format('D');\n            const hours = countdown.format('HH');\n            const minutes = countdown.format('mm');\n            const seconds = countdown.format('ss');\n            this.setState({ days, hours, minutes, seconds });\n        }, 1000);\n    }\n    \n    componentWillUnmount() {\n        if (this.interval) {\n            clearInterval(this.interval);\n        }\n    }\n    \n    render() {\n        const { days, hours, minutes, seconds } = this.state;\n        \n        // Mapping the date values to radius values\n        const daysRadius = mapNumber(days, 30, 0, 0, 360);\n        const hoursRadius = mapNumber(hours, 24, 0, 0, 360);\n        const minutesRadius = mapNumber(minutes, 60, 0, 0, 360);\n        const secondsRadius = mapNumber(seconds, 60, 0, 0, 360);\n        \n        if (!seconds) {\n            return null;\n        }\n        \n        return (\n            <div>\n                <h1>Countdown</h1>\n                <div className=\"countdown-wrapper\">\n                    {days && (\n                        <div className=\"countdown-item\">\n                            <SVGCircle radius={daysRadius} />\n                            {days}\n                            <span>days</span>\n                        </div>\n                    )}\n                    {hours && (\n                        <div className=\"countdown-item\">\n                            <SVGCircle radius={hoursRadius} />\n                            {hours}\n                            <span>hours</span>\n                        </div>\n                    )}\n                    {minutes && (\n                        <div className=\"countdown-item\">\n                            <SVGCircle radius={minutesRadius} />\n                            {minutes}\n                            <span>minutes</span>\n                        </div>\n                    )}\n                    {seconds && (\n                        <div className=\"countdown-item\">\n                            <SVGCircle radius={secondsRadius} />\n                            {seconds}\n                            <span>seconds</span>\n                        </div>\n                    )}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst SVGCircle = ({ radius }) => (\n    <svg className=\"countdown-svg\">\n        <path\n            fill=\"none\"\n            stroke=\"#333\"\n            stroke-width=\"4\"\n            d={describeArc(50, 50, 48, 0, radius)}\n        />\n    </svg>\n);\n\n// From StackOverflow: https://stackoverflow.com/questions/5736398/how-to-calculate-the-svg-path-for-an-arc-of-a-circle\n\nfunction polarToCartesian(centerX, centerY, radius, angleInDegrees) {\n    var angleInRadians = ((angleInDegrees - 90) * Math.PI) / 180.0;\n    \n    return {\n        x: centerX + radius * Math.cos(angleInRadians),\n        y: centerY + radius * Math.sin(angleInRadians)\n    };\n}\n\nfunction describeArc(x, y, radius, startAngle, endAngle) {\n    var start = polarToCartesian(x, y, radius, endAngle);\n    var end = polarToCartesian(x, y, radius, startAngle);\n    var largeArcFlag = endAngle - startAngle <= 180 ? '0' : '1';\n    var d = [\n        'M',\n        start.x,\n        start.y,\n        'A',\n        radius,\n        radius,\n        0,\n        largeArcFlag,\n        0,\n        end.x,\n        end.y\n    ].join(' ');\n    \n    return d;\n}\n\n// From StackOverflow: https://stackoverflow.com/questions/10756313/javascript-jquery-map-a-range-of-numbers-to-another-range-of-numbers\n\nfunction mapNumber(number, in_min, in_max, out_min, out_max) {\n    return (\n        ((number - in_min) * (out_max - out_min)) / (in_max - in_min) + out_min\n    );\n}All you have to do now to use the Countdown component is to pass it the two props (timeTillDate and timeFormat) and you're golden ?:<Countdown \n    timeTillDate=\"05 26 2019, 6:00 am\" \n    timeFormat=\"MM DD YYYY, h:mm a\" \n/>ConclusionIt was a fun little project with React, wasn\u2019t it? ?When I built this I learned a little bit more about how to work with the momentjs library and also with svgs to draw an arc.Let me know if you have any questions regarding this tutorial.Happy Coding! ?Originally posted on www.florin-pop.com\n\n                        \n                    \n                    \n                        \n                        \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 14495, "excerpt": "Recently I had to create a Countdown for one of my other projects, and I thought\nthat it could also make a good tutorial. So in this post we\u2019re going to create\nthis component using React and a little bit of SVG. ?\n\nYou can find the final result in this Codepen example\n[https://codepen.io/FlorinPop17/pen/YbpwyG]:\n\nFirst we will create the countdown functionality and then we will look into how\nto create the animated arc using SVG with some fancy functions. ?\n\nCreating the Countdown functionality\nF", "siteName": "freeCodeCamp.org", "publishedTime": "2019-05-16T16:41:47.000Z", "id": "68d69fe15e841181396307572b5c1776746e2f20", "url": "https://www.freecodecamp.org/news/how-to-create-a-countdown-component-using-react-momentjs-4717edc4ac3/", "domain": "freecodecamp.org", "date": "2023-12-27T18:09:44.342847", "resultUri": "http://localhost:3000/result/68d69fe15e841181396307572b5c1776746e2f20", "query": {"url": ["https://www.freecodecamp.org/news/how-to-create-a-countdown-component-using-react-momentjs-4717edc4ac3/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "How to create a Countdown component using React & MomentJS", "description": "Recently I had to create a Countdown for one of my other projects, and I thought that it could also make a good tutorial. So in this post we\u2019re going to create this component using React and a little bit of SVG. ? You can find the final result in", "url": "https://www.freecodecamp.org/news/how-to-create-a-countdown-component-using-react-momentjs-4717edc4ac3/", "image": "https://cdn-media-1.freecodecamp.org/images/0*uxd3eEv1EyIUdvNi.png", "image:width": "650", "image:height": "302"}, "twitter": {"card": "summary_large_image", "title": "How to create a Countdown component using React & MomentJS", "description": "Recently I had to create a Countdown for one of my other projects, and I thought that it could also make a good tutorial. So in this post we\u2019re going to create this component using React and a little bit of SVG. ? You can find the final result in", "url": "https://www.freecodecamp.org/news/how-to-create-a-countdown-component-using-react-momentjs-4717edc4ac3/", "image": "https://cdn-media-1.freecodecamp.org/images/0*uxd3eEv1EyIUdvNi.png", "label1": "Written by", "data1": "Florin Pop", "label2": "Filed under", "data2": "React, JavaScript, Technology, Tech, Programming", "site": "@freecodecamp", "creator": "@florinpop1705"}}}