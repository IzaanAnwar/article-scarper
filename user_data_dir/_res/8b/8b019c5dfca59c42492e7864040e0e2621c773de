{"title": "Format Specifiers in C", "byline": "freeCodeCamp.org", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>Format Specifiers in C</h1>\n<section>\n<section data-test-label=\"post-content\">\n<p>Format specifiers define the type of data to be printed on standard output. You need to use format specifiers whether you're printing formatted output with <code>printf()</code> or \u00a0accepting input with <code>scanf()</code>.</p><p>Some of the % specifiers that you can use in ANSI C are as follows:</p><!--kg-card-begin: markdown--><table>\n<thead>\n<tr>\n<th>Specifier</th>\n<th>Used For</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>%c</td>\n<td>a single character</td>\n</tr>\n<tr>\n<td>%s</td>\n<td>a string</td>\n</tr>\n<tr>\n<td>%hi</td>\n<td>short (signed)</td>\n</tr>\n<tr>\n<td>%hu</td>\n<td>short (unsigned)</td>\n</tr>\n<tr>\n<td>%Lf</td>\n<td>long double</td>\n</tr>\n<tr>\n<td>%n</td>\n<td>prints nothing</td>\n</tr>\n<tr>\n<td>%d</td>\n<td>a decimal integer (assumes base 10)</td>\n</tr>\n<tr>\n<td>%i</td>\n<td>a decimal integer (detects the base automatically)</td>\n</tr>\n<tr>\n<td>%o</td>\n<td>an octal (base 8) integer</td>\n</tr>\n<tr>\n<td>%x</td>\n<td>a hexadecimal (base 16) integer</td>\n</tr>\n<tr>\n<td>%p</td>\n<td>an address (or pointer)</td>\n</tr>\n<tr>\n<td>%f</td>\n<td>a floating point number for floats</td>\n</tr>\n<tr>\n<td>%u</td>\n<td>int unsigned decimal</td>\n</tr>\n<tr>\n<td>%e</td>\n<td>a floating point number in scientific notation</td>\n</tr>\n<tr>\n<td>%E</td>\n<td>a floating point number in scientific notation</td>\n</tr>\n<tr>\n<td>%%</td>\n<td>the % symbol</td>\n</tr>\n</tbody>\n</table>\n<!--kg-card-end: markdown--><h2 id=\"examples-\">Examples:</h2><h3 id=\"-c-single-character-format-specifier-\"><code>%c</code> single character format specifier:</h3><pre tabindex=\"0\"><code>#include &lt;stdio.h&gt; \n\nint main() { \n  char first_ch = 'f'; \n  printf(\"%c\\n\", first_ch); \n  return 0; \n} </code></pre><pre><code>f</code></pre><h3 id=\"-s-string-format-specifier-\"><code>%s</code> string format specifier:</h3><pre tabindex=\"0\"><code>#include &lt;stdio.h&gt; \n\nint main() { \n  char str[] = \"freeCodeCamp\"; \n  printf(\"%s\\n\", str); \n  return 0; \n} </code></pre><pre><code>freeCodeCamp</code></pre><h3 id=\"character-input-with-the-c-format-specifier-\">Character input with the <code>%c</code> format specifier:</h3><pre tabindex=\"0\"><code>#include &lt;stdio.h&gt; \n\nint main() { \n  char user_ch; \n  scanf(\"%c\", &amp;user_ch); // user inputs Y\n  printf(\"%c\\n\", user_ch); \n  return 0; \n} </code></pre><pre><code>Y</code></pre><h3 id=\"string-input-with-the-s-format-specifier-\">String input with the <code>%s</code> format specifier:</h3><pre tabindex=\"0\"><code>#include &lt;stdio.h&gt; \n\nint main() { \n  char user_str[20]; \n  scanf(\"%s\", user_str); // user inputs fCC\n  printf(\"%s\\n\", user_str); \n  return 0; \n} </code></pre><pre><code>fCC</code></pre><h3 id=\"-d-and-i-decimal-integer-format-specifiers-\"><code>%d</code> and <code>%i</code> decimal integer format specifiers:</h3><pre tabindex=\"0\"><code>#include &lt;stdio.h&gt; \n\nint main() { \n  int found = 2015, curr = 2020; \n  printf(\"%d\\n\", found); \n  printf(\"%i\\n\", curr); \n  return 0; \n} </code></pre><pre><code>2015\n2020</code></pre><h3 id=\"-f-and-e-floating-point-number-format-specifiers-\"><code>%f</code> and <code>%e</code> floating point number format specifiers:</h3><pre tabindex=\"0\"><code>#include &lt;stdio.h&gt;\n\nint main() { \n  float num = 19.99; \n  printf(\"%f\\n\", num); \n  printf(\"%e\\n\", num); \n  return 0; \n}</code></pre><pre><code>19.990000\n1.999000e+01</code></pre><h3 id=\"-o-octal-integer-format-specifier-\"><code>%o</code> octal integer format specifier:</h3><pre><code>#include &lt;stdio.h&gt; \n\nint main() { \n  int num = 31; \n  printf(\"%o\\n\", num); \n  return 0; \n}</code></pre><pre><code>37</code></pre><h3 id=\"-x-hexadecimal-integer-format-specifier-\"><code>%x</code> hexadecimal integer format specifier:</h3><pre tabindex=\"0\"><code>#include &lt;stdio.h&gt; \n\nint main() { \n  int c = 28; \n  printf(\"%x\\n\", c); \n  return 0; \n} </code></pre><pre><code>1c</code></pre>\n</section>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nFormat specifiers define the type of data to be printed on standard output. You need to use format specifiers whether you're printing formatted output with printf() or \u00a0accepting input with scanf().Some of the % specifiers that you can use in ANSI C are as follows:\n\n\nSpecifier\nUsed For\n\n\n\n\n%c\na single character\n\n\n%s\na string\n\n\n%hi\nshort (signed)\n\n\n%hu\nshort (unsigned)\n\n\n%Lf\nlong double\n\n\n%n\nprints nothing\n\n\n%d\na decimal integer (assumes base 10)\n\n\n%i\na decimal integer (detects the base automatically)\n\n\n%o\nan octal (base 8) integer\n\n\n%x\na hexadecimal (base 16) integer\n\n\n%p\nan address (or pointer)\n\n\n%f\na floating point number for floats\n\n\n%u\nint unsigned decimal\n\n\n%e\na floating point number in scientific notation\n\n\n%E\na floating point number in scientific notation\n\n\n%%\nthe % symbol\n\n\n\nExamples:%c single character format specifier:#include <stdio.h> \n\nint main() { \n  char first_ch = 'f'; \n  printf(\"%c\\n\", first_ch); \n  return 0; \n} Output:f%s string format specifier:#include <stdio.h> \n\nint main() { \n  char str[] = \"freeCodeCamp\"; \n  printf(\"%s\\n\", str); \n  return 0; \n} Output:freeCodeCampCharacter input with the %c format specifier:#include <stdio.h> \n\nint main() { \n  char user_ch; \n  scanf(\"%c\", &user_ch); // user inputs Y\n  printf(\"%c\\n\", user_ch); \n  return 0; \n} Output:YString input with the %s format specifier:#include <stdio.h> \n\nint main() { \n  char user_str[20]; \n  scanf(\"%s\", user_str); // user inputs fCC\n  printf(\"%s\\n\", user_str); \n  return 0; \n} Output:fCC%d and %i decimal integer format specifiers:#include <stdio.h> \n\nint main() { \n  int found = 2015, curr = 2020; \n  printf(\"%d\\n\", found); \n  printf(\"%i\\n\", curr); \n  return 0; \n} Output:2015\n2020%f and %e floating point number format specifiers:#include <stdio.h>\n\nint main() { \n  float num = 19.99; \n  printf(\"%f\\n\", num); \n  printf(\"%e\\n\", num); \n  return 0; \n}Output:19.990000\n1.999000e+01%o octal integer format specifier:#include <stdio.h> \n\nint main() { \n  int num = 31; \n  printf(\"%o\\n\", num); \n  return 0; \n}Output:37%x hexadecimal integer format specifier:#include <stdio.h> \n\nint main() { \n  int c = 28; \n  printf(\"%x\\n\", c); \n  return 0; \n} Output:1c\n\n                        \n                    \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 2768, "excerpt": "Format specifiers define the type of data to be printed on standard output. You\nneed to use format specifiers whether you're printing formatted output with \nprintf() or \u00a0accepting input with scanf().\n\nSome of the % specifiers that you can use in ANSI C are as follows:\n\nSpecifierUsed For%ca single character%sa string%hishort (signed)%hushort\n(unsigned)%Lflong double%nprints nothing%da decimal integer (assumes base 10)%ia\ndecimal integer (detects the base automatically)%oan octal (base 8) integer%", "siteName": "freeCodeCamp.org", "publishedTime": "2020-01-22T21:32:00.000Z", "id": "8b019c5dfca59c42492e7864040e0e2621c773de", "url": "https://www.freecodecamp.org/news/format-specifiers-in-c/", "domain": "freecodecamp.org", "date": "2023-12-27T18:07:07.657278", "resultUri": "http://localhost:3000/result/8b019c5dfca59c42492e7864040e0e2621c773de", "query": {"url": ["https://www.freecodecamp.org/news/format-specifiers-in-c/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "Format Specifiers in C", "description": "Format specifiers define the type of data to be printed on standard output. You need to use format specifiers whether you're printing formatted output with  printf() or \u00a0accepting input with scanf(). Some of the % specifiers that you can use in ANSI C are as follows: SpecifierUsed For%ca single", "url": "https://www.freecodecamp.org/news/format-specifiers-in-c/", "image": "https://cdn-media-2.freecodecamp.org/w1280/5f9c9d9c740569d1a4ca38a4.jpg", "image:width": "1280", "image:height": "720"}, "twitter": {"card": "summary_large_image", "title": "Format Specifiers in C", "description": "Format specifiers define the type of data to be printed on standard output. You need to use format specifiers whether you're printing formatted output with  printf() or \u00a0accepting input with scanf(). Some of the % specifiers that you can use in ANSI C are as follows: SpecifierUsed For%ca single", "url": "https://www.freecodecamp.org/news/format-specifiers-in-c/", "image": "https://cdn-media-2.freecodecamp.org/w1280/5f9c9d9c740569d1a4ca38a4.jpg", "label1": "Written by", "data1": "freeCodeCamp.org", "label2": "Filed under", "data2": "C, Programming, Programming Languages", "site": "@freecodecamp"}}}