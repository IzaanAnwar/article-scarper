{"title": "How to become a rockstar engineer", "byline": "freeCodeCamp.org", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>How to become a rockstar engineer</h1>\n<section>\n<section data-test-label=\"post-content\">\n<p>by Zhia Hwa Chong</p><p>Being a software engineer is no walk in the park, but being a rockstar software engineer, or the elusive \u201c<a href=\"https://www.quora.com/topic/10X-Engineers\" rel=\"noopener\">10x engineer</a>\u201d, is even harder. In my experience, the best engineers I\u2019ve worked with share some common traits that I\u2019ll put forth in this article.</p><p>If you\u2019d like to learn more about passing technical interviews, you can check out my <a href=\"https://docs.google.com/document/u/1/d/1PeK69h4H82rwKjhactiE_sAIorCcZgXgXTY7k-nXpnE/edit\" rel=\"noopener\">courses here</a> where I coach software engineers on how to prepare and ace coding interviews.</p><p>(If you\u2019d like to watch instead, here\u2019s the video version)</p><h3 id=\"1-build-lasting-relationships\">1: Build Lasting Relationships</h3><p>A rockstar engineer is made, not born. Contrary to what others might think, intelligence alone simply isn\u2019t enough to be a rockstar engineer. A rockstar engineer is able to uplevel all those around them, and helps increase the overall productivity of the team.</p><p>One of the most critical skills for a rockstar engineer is <strong>building lasting relationships.</strong></p><p>Building lasting relationships requires soft skills \u2014 something that often doesn\u2019t come naturally to software engineers. Most engineers I know care about facts, details, and precision. As such, sometimes they come across as confrontational and disagreeable.</p><p>Yet a lone wolf <em>cannot survive on its own.</em></p><p>Try talking to your customers \u2014 clients, PMs, sales reps \u2014 as much as possible. Build a personal connection. Know what their pain points are. Understand why they do the things they do. Once you have a deep understanding of what your end users actually care about, you will be able to solve issues beyond the superficial and, ultimately, bring 10x value to the team.</p><h3 id=\"2-understand-why-\">2: Understand \u201cWhy\u201d</h3><p><strong>Understand the scope of your work and why it matters</strong>. I\u2019ve met many engineers who struggle to tell me <em>why they work on the things they\u2019re working on, and how their work fits into the bigger picture.</em></p><p>A rockstar engineer understands why their work matters. This will guide you to learn how to prioritize work because you have a deep understanding of how your work fits into the bigger picture. Thus, you\u2019ll be able to prioritize work accordingly and find out the high-leverage projects.</p><p>As you become a more senior engineer, you\u2019re expected to understand your work\u2019s impact, scope and how it fits into the bigger picture. At some point, you\u2019ll be the person driving and advocating for those changes yourself, and you\u2019ll need to rally others around your cause.</p><h3 id=\"3-expand-your-scope\">3: Expand Your Scope</h3><p>Newcomers to a team typically have a well-defined scope of work. However, what you should learn early on here is that you <em>always want to expand your scope.</em></p><p>As you\u2019re working on projects, you should think proactively about how you can improve things, like how you could be improving the hiring process, documentation, or maybe code style.</p><p>I like to think of this as the <em>onion analogy</em> (one of my mentors taught me this). Your area of competency is the core layer of the onion, and then you have a layer outside of that, which consists of external factors that could potentially affect you.</p><p>Now the <em>gap in between your core competency and the outer layer \u2014 </em>that\u2019s where uncertainty and anxiety lie. As you grow as an engineer, you want to learn how to expand your set of core competencies so that you can minimize that gap.</p><p>When you are actively thinking about how to improve things and making things better, that\u2019s where you grow your skills not just as an engineer but also as a leader.</p><p>A practice you might try today is to sit in and participate in more meetings. Learn about what your coworkers are concerned about, and offer your insights and solutions \u2014 it never hurts to try.</p><p>If you\u2019re looking to improve your coding or system design skills, check out the courses <a href=\"http://bit.ly/interviewcourses\" rel=\"noopener\">here</a> where graduates have gained valuable skills that helped them land jobs at Facebook, Google and so on. Classes are limited, so if you\u2019re interested, <a href=\"https://forms.gle/EfqUeKAXJPz8ABnX8\" rel=\"noopener\">fill in this form</a> and I\u2019ll reach out to you with more details!</p><h3 id=\"4-offer-to-help\">4: Offer to Help</h3><p>In most companies, there are always broken things laying around within the company. Due to shifting priorities, limited time and resources, most things remain broken.</p><p>That\u2019s where you can come in to help.</p><p>First, offering to help gives you insights and exposure to codebases that you might not otherwise learn about.</p><p>Secondly, offering to help others with solving their problems allows you to build relationships (see Tip#1) and also grow your expertise in the long run. And if you\u2019re also able to demonstrate your ability to jump in and make lasting improvements, that\u2019s even better.</p><p>I call these people the Passionate Executors \u2014 people who have strong execution abilities and also have a strong passion for helping others around them. Passionate Executors are like your neighborhood Spiderman \u2014 they have superhuman abilities and aren\u2019t afraid to jump into the stickiest (pun-intended) situations without expecting any reward.</p><h3 id=\"5-read-profusely\">5: Read Profusely</h3><p>Reading is one of the highest leverage activities any newcomer can do. Many junior engineers are heads-down focused on writing code all day; they\u2019re not really spending time to read and understand what they\u2019re working on.</p><p>My advice is that if you\u2019re joining a new team, take your time to find and read <strong>documentation</strong>, design docs, meeting notes, anything and everything that you can find that is lay around your company.</p><p>Reading documentation allows you to understand the context and history of how things became the way they are today. You can learn about why certain components are designed in a certain way, what were the requirements the engineers had to adhere to, what trade-offs were made in the design and many more.</p><p>If you put in the time to read, I assure you that you can be the subject matter expert in no time.</p><h3 id=\"books-for-further-reading\">Books for further reading</h3><ul><li><a href=\"https://amzn.to/2XUfR5F\" rel=\"noopener\">The Senior Software Engineer</a></li><li><a href=\"https://amzn.to/2VAWYXL\" rel=\"noopener\">The Effective Engineer</a></li><li><a href=\"https://amzn.to/2J7VSfJ\" rel=\"noopener\">7 Habits of Highly Effective People</a></li><li><a href=\"https://amzn.to/2VFTx20\" rel=\"noopener\">How to Win Friends &amp; Influence</a></li></ul><p>Check out the tools ? I recommend for every aspiring software engineer on my website here: z<a href=\"http://zhiachong.com/resources\" rel=\"noopener\">hiachong.com/resources</a></p><p>Go to <a href=\"https://www.youtube.com/redirect?redir_token=VyUWnpQkfsA5uouuEjr-IGN2Fvx8MTU0MDQyMTc1NkAxNTQwMzM1MzU2&amp;v=K5z0d1DJuP4&amp;q=http%3A%2F%2Fbit.ly%2Finterviewcourses&amp;event=video_description\" rel=\"noopener\">http://bit.ly/interviewcourses</a> to read more about courses available for technical coding, system designs and more.</p>\n</section>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nby Zhia Hwa ChongBeing a software engineer is no walk in the park, but being a rockstar software engineer, or the elusive \u201c10x engineer\u201d, is even harder. In my experience, the best engineers I\u2019ve worked with share some common traits that I\u2019ll put forth in this article.If you\u2019d like to learn more about passing technical interviews, you can check out my courses here where I coach software engineers on how to prepare and ace coding interviews.(If you\u2019d like to watch instead, here\u2019s the video version)1: Build Lasting RelationshipsA rockstar engineer is made, not born. Contrary to what others might think, intelligence alone simply isn\u2019t enough to be a rockstar engineer. A rockstar engineer is able to uplevel all those around them, and helps increase the overall productivity of the team.One of the most critical skills for a rockstar engineer is building lasting relationships.Building lasting relationships requires soft skills \u2014 something that often doesn\u2019t come naturally to software engineers. Most engineers I know care about facts, details, and precision. As such, sometimes they come across as confrontational and disagreeable.Yet a lone wolf cannot survive on its own.Try talking to your customers \u2014 clients, PMs, sales reps \u2014 as much as possible. Build a personal connection. Know what their pain points are. Understand why they do the things they do. Once you have a deep understanding of what your end users actually care about, you will be able to solve issues beyond the superficial and, ultimately, bring 10x value to the team.2: Understand \u201cWhy\u201dUnderstand the scope of your work and why it matters. I\u2019ve met many engineers who struggle to tell me why they work on the things they\u2019re working on, and how their work fits into the bigger picture.A rockstar engineer understands why their work matters. This will guide you to learn how to prioritize work because you have a deep understanding of how your work fits into the bigger picture. Thus, you\u2019ll be able to prioritize work accordingly and find out the high-leverage projects.As you become a more senior engineer, you\u2019re expected to understand your work\u2019s impact, scope and how it fits into the bigger picture. At some point, you\u2019ll be the person driving and advocating for those changes yourself, and you\u2019ll need to rally others around your cause.3: Expand Your ScopeNewcomers to a team typically have a well-defined scope of work. However, what you should learn early on here is that you always want to expand your scope.As you\u2019re working on projects, you should think proactively about how you can improve things, like how you could be improving the hiring process, documentation, or maybe code style.I like to think of this as the onion analogy (one of my mentors taught me this). Your area of competency is the core layer of the onion, and then you have a layer outside of that, which consists of external factors that could potentially affect you.Now the gap in between your core competency and the outer layer \u2014 that\u2019s where uncertainty and anxiety lie. As you grow as an engineer, you want to learn how to expand your set of core competencies so that you can minimize that gap.When you are actively thinking about how to improve things and making things better, that\u2019s where you grow your skills not just as an engineer but also as a leader.A practice you might try today is to sit in and participate in more meetings. Learn about what your coworkers are concerned about, and offer your insights and solutions \u2014 it never hurts to try.If you\u2019re looking to improve your coding or system design skills, check out the courses here where graduates have gained valuable skills that helped them land jobs at Facebook, Google and so on. Classes are limited, so if you\u2019re interested, fill in this form and I\u2019ll reach out to you with more details!4: Offer to HelpIn most companies, there are always broken things laying around within the company. Due to shifting priorities, limited time and resources, most things remain broken.That\u2019s where you can come in to help.First, offering to help gives you insights and exposure to codebases that you might not otherwise learn about.Secondly, offering to help others with solving their problems allows you to build relationships (see Tip#1) and also grow your expertise in the long run. And if you\u2019re also able to demonstrate your ability to jump in and make lasting improvements, that\u2019s even better.I call these people the Passionate Executors \u2014 people who have strong execution abilities and also have a strong passion for helping others around them. Passionate Executors are like your neighborhood Spiderman \u2014 they have superhuman abilities and aren\u2019t afraid to jump into the stickiest (pun-intended) situations without expecting any reward.5: Read ProfuselyReading is one of the highest leverage activities any newcomer can do. Many junior engineers are heads-down focused on writing code all day; they\u2019re not really spending time to read and understand what they\u2019re working on.My advice is that if you\u2019re joining a new team, take your time to find and read documentation, design docs, meeting notes, anything and everything that you can find that is lay around your company.Reading documentation allows you to understand the context and history of how things became the way they are today. You can learn about why certain components are designed in a certain way, what were the requirements the engineers had to adhere to, what trade-offs were made in the design and many more.If you put in the time to read, I assure you that you can be the subject matter expert in no time.Books for further readingThe Senior Software EngineerThe Effective Engineer7 Habits of Highly Effective PeopleHow to Win Friends & InfluenceCheck out the tools ? I recommend for every aspiring software engineer on my website here: zhiachong.com/resourcesGo to http://bit.ly/interviewcourses to read more about courses available for technical coding, system designs and more.\n\n                        \n                    \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 6584, "excerpt": "by Zhia Hwa Chong\n\nHow to become a rockstar engineer\nBeing a software engineer is no walk in the park, but being a rockstar software\nengineer, or the elusive \u201c10x engineer\n[https://www.quora.com/topic/10X-Engineers]\u201d, is even harder. In my experience,\nthe best engineers I\u2019ve worked with share some common traits that I\u2019ll put forth\nin this article.\n\nIf you\u2019d like to learn more about passing technical interviews, you can check\nout my courses here\n[https://docs.google.com/document/u/1/d/1PeK69h4H82", "siteName": "freeCodeCamp.org", "publishedTime": "2019-05-07T16:53:53.000Z", "id": "8be3af42703adf624ed88c6112a28ced636072dd", "url": "https://www.freecodecamp.org/news/how-to-become-a-rockstar-engineer-e785b09cc104/", "domain": "freecodecamp.org", "date": "2023-12-27T18:10:26.174960", "resultUri": "http://localhost:3000/result/8be3af42703adf624ed88c6112a28ced636072dd", "query": {"url": ["https://www.freecodecamp.org/news/how-to-become-a-rockstar-engineer-e785b09cc104/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "How to become a rockstar engineer", "description": "by Zhia Hwa Chong How to become a rockstar engineer Being a software engineer is no walk in the park, but being a rockstar software engineer, or the elusive \u201c10x engineer [https://www.quora.com/topic/10X-Engineers]\u201d, is even harder. In my experience, the best engineers I\u2019ve worked with share some common traits that I\u2019ll", "url": "https://www.freecodecamp.org/news/how-to-become-a-rockstar-engineer-e785b09cc104/", "image": "https://cdn-media-1.freecodecamp.org/images/1*hjQA5CG4IH5p0qs30Ci0ig.png", "image:width": "800", "image:height": "572"}, "twitter": {"card": "summary_large_image", "title": "How to become a rockstar engineer", "description": "by Zhia Hwa Chong How to become a rockstar engineer Being a software engineer is no walk in the park, but being a rockstar software engineer, or the elusive \u201c10x engineer [https://www.quora.com/topic/10X-Engineers]\u201d, is even harder. In my experience, the best engineers I\u2019ve worked with share some common traits that I\u2019ll", "url": "https://www.freecodecamp.org/news/how-to-become-a-rockstar-engineer-e785b09cc104/", "image": "https://cdn-media-1.freecodecamp.org/images/1*hjQA5CG4IH5p0qs30Ci0ig.png", "label1": "Written by", "data1": "freeCodeCamp.org", "label2": "Filed under", "data2": "Software Development, Self Improvement, Programming, Computer Science, Technology", "site": "@freecodecamp"}}}