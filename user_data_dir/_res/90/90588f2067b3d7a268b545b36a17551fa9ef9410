{"title": "How to Add Search to a React App with Fuse.js", "byline": "Colby Fayock", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>How to Add Search to a React App with Fuse.js</h1>\n<section>\n<section data-test-label=\"post-content\">\n<p>Search is a powerful way help people visiting your site find the content that's most important to them. But often it's really challenging to figure out the rules and logic to make that happen. In this article, we'll see how can we can use fuse.js to add search to our apps.</p><ul><li><a href=\"#what-is-fuse-js\">What is fuse.js?</a></li><li><a href=\"#why-is-search-important\">Why is search important?</a></li><li><a href=\"#what-are-we-going-to-build\">What are we going to build?</a></li><li><a href=\"#step-0-bootstrapping-our-app\">Step 0: Bootstrapping our app</a></li><li><a href=\"#step-1-installing-fuse-js\">Step 1: Installing Fuse.js</a></li><li><a href=\"#step-2-creating-a-new-fuse-search-instance\">Step 2: Creating a new Fuse search instance</a></li><li><a href=\"#step-3-setting-up-dynamic-search-based-on-user-input\">Step 3: Setting up dynamic search based on user input</a></li></ul><figure data-test-label=\"fitted\">\n\n</figure><h2 id=\"what-is-fuse-js\">What is fuse.js?</h2><p><a href=\"https://fusejs.io/\">Fuse.js</a> is a JavaScript library that provides fuzzy search capabilities for applications and websites. It's nice and easy to use out of the box, but also includes configuration options that allow you to tweak and create powerful solutions.</p><h2 id=\"why-is-search-important\">Why is search important?</h2><p>Whether you're a content creator or are trying to sell a product with your website, it's important to help your visitors actually find what they're looking for. </p><p>If you're building an ecommerce website, you want someone to be able to easily find your Bender vinyl figures rather than having to dig through the entire catalog first.</p><h2 id=\"what-are-we-going-to-build\">What are we going to build?</h2><p>We're going to start off with a basic Create React App example. It's going to include some character info as structured data for one of my favorite shows Futurama that's simply dumped out into an HTML list.</p><p>With that list, we're going to use fuse.js to provide client-side search capabilities, allowing us to demonstrate searching for the character we're looking for by their name and other details.</p><h2 id=\"step-0-bootstrapping-our-app\">Step 0: Bootstrapping our app</h2><p>To get started, we're going to need content to work with. I got started by building a list of characters from Futurama as structured json data that I put in a list with a fresh Create React App.</p><figure><img alt=\"futurama-character-search-demo\" height=\"842\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2020/05/futurama-character-search-demo.jpg\" width=\"2000\"/><figcaption>Futurama character search demo</figcaption></figure><p>You'll also notice I've already added an input for our search. It's not yet functional but we'll use that to get started.</p><p>If you'd like to start off at the same place, I created a branch with my demo repo that you can clone locally to walk through the project with me!</p><pre tabindex=\"0\"><code><span>git</span> clone --single-branch <span>--branch</span> start git@github.com:colbyfayock/my-futurama-characters.git\n</code></pre><p><a href=\"https://github.com/colbyfayock/my-futurama-characters/tree/start\">Git branch \"start\"</a></p><p>Or <a href=\"https://github.com/colbyfayock/my-futurama-characters/commit/20d4e42aaf69e214b63e684e012cd2f8c95d427b\">follow along with the commit</a>.</p><h2 id=\"step-1-installing-fuse-js\">Step 1: Installing Fuse.js</h2><p>First thing we'll want to do is actually add Fuse.js to our app. In your project, run:</p><pre tabindex=\"0\"><code>yarn add fuse.js\n# or\nnpm install --save fuse.js\n</code></pre><p>This will save the dependency to our project so that we'll be able to use it in our project.</p><p>Next we'll want to import the dependency to our app so that we can start building with it. At the top of your file, in our case <code>src/App.js</code> if you're following along with me in a new Create React App project, add:</p><pre tabindex=\"0\"><code>import Fuse from 'fuse.js';\n</code></pre><p>If you want to test that it's working, you can <code>console.log(Fuse)</code> and see our <code>Fuse</code> class we'll use to create our search capabilities.</p><figure><img alt=\"fusejs-class\" height=\"383\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2020/05/fusejs-class.jpg\" width=\"2000\"/><figcaption>Imported fuse.js class</figcaption></figure><p>And with that, we're ready to get started!</p><p><a href=\"https://github.com/colbyfayock/my-futurama-characters/commit/54720daffa6ff415997c319b12f8f44d7ec8b748\">Follow along with the commit</a></p><h2 id=\"step-2-creating-a-new-fuse-search-instance\">Step 2: Creating a new Fuse search instance</h2><p>To use Fuse.js, we'll want to first create a new instance of it.</p><p>At the top of your component, add:</p><pre tabindex=\"0\"><code>const fuse = new Fuse(characters, {\n  keys: [\n    'name',\n    'company',\n    'species'\n  ]\n});\n</code></pre><p>With this does:</p><ul><li>Creates a new instance of Fuse</li><li>Passes in our <code>characters</code> array of objects</li><li>Specifies the 3 keys in our data that we want to search on</li></ul><p>Next, to perform the search, we can add:</p><pre tabindex=\"0\"><code>const results = fuse.search('bender');\n</code></pre><p>And if we console log out the results, we can see:</p><figure><img alt=\"basic-fusejs-search-results\" height=\"676\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2020/05/basic-fusejs-search-results.jpg\" width=\"2000\"/><figcaption>Basic fuse.js search results</figcaption></figure><p>You'll notice that we have more results than our friend Bender though. Fuse.js provides a \"fuzzy search\" meaning it tries to help you in case you're not sure what you're looking for or if you're misspelling your query.</p><p>To get an idea of how this works, let's add the <code>includeScore</code> option to our search:</p><pre tabindex=\"0\"><code>const fuse = new Fuse(characters, {\n  keys: [\n    'name',\n    'company',\n    'species'\n  ],\n  includeScore: true\n});\n</code></pre><p>Now we can see the <code>score</code> attribute in our results object.</p><figure><img alt=\"fusejs-search-results-with-score\" height=\"746\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2020/05/fusejs-search-results-with-score.jpg\" width=\"2000\"/><figcaption>Fuse.js search results with score</figcaption></figure><p>You'll notice that our first result has a really low score. With fuse.js, a lower score means it's closer to an exact match.</p><p>A score of 0 indicates a perfect match, while a score of 1 indicates a complete mismatch.</p><p>It's saying that is incredibly likely that the first result is what we're looking for, but it's not confident in the others.</p><p>So with our results, we want to actually connect that to our UI. If you notice our array output is different than what we are mapping through for the HTML list, so let's create a new variable that we can change it to:</p><pre tabindex=\"0\"><code>const results = fuse.search('bender');\nconst characterResults = results.map(character =&gt; character.item);\n</code></pre><p>What this is doing is creating a new array using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\">map</a> method that will only include the <code>item</code> property from each array object.</p><p>Then if we replace our <code>characters</code> map inside of our list with <code>characterResults.map</code>:</p><pre tabindex=\"0\"><code>&lt;ul className=\"characters\"&gt;\n  {characterResults.map(character =&gt; {\n    const { name, company, species, thumb } = character;\n</code></pre><p>We can now see that our page only shows the results for \"bender\"!</p><figure><img alt=\"futurama-character-search-filtered-results\" height=\"786\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2020/05/futurama-character-search-filtered-results.jpg\" width=\"2000\"/><figcaption>Demo with filtered results</figcaption></figure><p><a href=\"https://github.com/colbyfayock/my-futurama-characters/commit/adbf30a872fa134cfca4e142ba479877b9665e9a\">Follow along with the commit!</a></p><h2 id=\"step-3-setting-up-dynamic-search-based-on-user-input\">Step 3: Setting up dynamic search based on user input</h2><p>Now that we have a hard-coded search working, we want someone to actually be able to use the search input to search!</p><p>To achieve this, we're going to use the <code>useState</code> hook and listen for changes to the <code>input</code> field, which will dynamically create a search for our data.</p><p>First, import the <code>useState</code> hook from React:</p><pre tabindex=\"0\"><code>import React, { useState } from 'react';\n</code></pre><p>Next, let's use that hook to create a state instance:</p><pre tabindex=\"0\"><code>const [query, updateQuery] = useState('');\n</code></pre><p>Here, we're creating a new state of <code>query</code> that we can update with <code>updateQuery</code> that defaults to an empty string (<code>''</code>).</p><p>With that, let's tell our search input to use that <code>query</code> value as it's value:</p><pre tabindex=\"0\"><code>&lt;input type=\"text\" value={query} /&gt;\n</code></pre><p>At this point, nothing should be different, as we are using a blank query.</p><figure><img alt=\"futurama-character-search-filtered-results\" height=\"786\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2020/05/futurama-character-search-filtered-results.jpg\" width=\"2000\"/><figcaption>Demo with filtered results - nothing changed</figcaption></figure><p>Now let's add an event handler to our input that we can use to update our state:</p><pre tabindex=\"0\"><code>&lt;input type=\"text\" value={query} onChange={onSearch} /&gt;\n</code></pre><p>And we'll want to create that function so we can use it:</p><pre tabindex=\"0\"><code>function onSearch({ currentTarget }) {\n  updateQuery(currentTarget.value);\n}\n</code></pre><p>This will update our <code>query</code> with the input's value any time it changes.</p><p>Now that our <code>query</code> \u00a0will have what we want to search for, we can update our search instance:</p><pre tabindex=\"0\"><code>const results = fuse.search(query);\n</code></pre><p>And now if you reload the page, it's blank! ?</p><figure><img alt=\"futurama-character-search-no-results\" height=\"454\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2020/05/futurama-character-search-no-results.jpg\" width=\"2000\"/><figcaption>Demo with no results</figcaption></figure><p>That's because by default, Fuse sees our empty query and doesn't match it to anything. If we now search for something like <code>slurms</code>, we can see our search dynamically update with results!</p><figure><img alt=\"futurama-character-search-results\" height=\"563\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2020/05/futurama-character-search-results.jpg\" width=\"2000\"/><figcaption>Demo with results for \"slurms\"</figcaption></figure><p>If we wanted to fix this though so that all of our results show when there's no query, we can do so with an <code>if</code> statement or in my example, a ternary, that will show all of the characters if there is no query:</p><pre tabindex=\"0\"><code>const characterResults = query ? results.map(character =&gt; character.item) : characters;\n</code></pre><figure><img alt=\"futurama-character-search-demo\" height=\"842\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2020/05/futurama-character-search-demo.jpg\" width=\"2000\"/><figcaption>Demo with all results</figcaption></figure><p>And with that, we have our basic search!</p><figure><img alt=\"futurama-character-search-results-query\" height=\"675\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2020/05/futurama-character-search-results-query.jpg\" width=\"2000\"/><figcaption>Demo with filtered results for \"zoidberg\"</figcaption></figure><p><a href=\"https://github.com/colbyfayock/my-futurama-characters/commit/1b8918fc56f31517686a6c73f1969787728736ac\">Follow along with the commit!</a></p><h2 id=\"what-can-i-do-next\">What can I do next?</h2><h3 id=\"tuning-your-search\">Tuning your search</h3><p>Fuse.js comes with a lot of options that you can use to tune your search to however you'd like. Want to only show confident results? Use the <code>threshold</code> option! Want case sensitive queries? Use the <code>isCaseSensitive</code> option!</p><h3 id=\"setting-the-default-query-with-url-parameters\">Setting the default query with URL parameters</h3><p>Sometimes you want someone to be able to link to a particular set of results. To do this, we might want to be able to add a new URL parameter like <code>?q=bender</code>.</p><p>To make this work, you can grab that URL parameter with javascript and use that value to set our <code>query</code> state.</p><h2 id=\"join-the-conversation-\">Join the conversation!</h2><figure><blockquote><div dir=\"ltr\" lang=\"en\"><p>Ever wanted to add fuzzy, dynamic search to your <a href=\"https://twitter.com/reactjs?ref_src=twsrc%5Etfw\">@reactjs</a> app but didn\u2019t know how? ?</p><p>This guide walks you through how to use Fuse.js to add powerful client-side search to your React app \u269b\ufe0f</p><p>Check it out!?<a href=\"https://t.co/EMlvXaOCat\">https://t.co/EMlvXaOCat</a></p></div>\u2014 Colby Fayock (@colbyfayock) <a href=\"https://twitter.com/colbyfayock/status/1265298322891378688?ref_src=twsrc%5Etfw\">May 26, 2020</a></blockquote>\n</figure><!--kg-card-begin: html--><div id=\"colbyfayock-author-card\">\n<p>\n<a href=\"https://twitter.com/colbyfayock\">\n<img alt=\"Follow me for more Javascript, UX, and other interesting things!\" height=\"400\" loading=\"lazy\" src=\"https://res.cloudinary.com/fay/image/upload/w_2000,h_400,c_fill,q_auto,f_auto/w_1020,c_fit,co_rgb:007079,g_north_west,x_635,y_70,l_text:Source%20Sans%20Pro_64_line_spacing_-10_bold:Colby%20Fayock/w_1020,c_fit,co_rgb:383f43,g_west,x_635,y_6,l_text:Source%20Sans%20Pro_44_line_spacing_0_normal:Follow%20me%20for%20more%20JavaScript%252c%20UX%252c%20and%20other%20interesting%20things!/w_1020,c_fit,co_rgb:007079,g_south_west,x_635,y_70,l_text:Source%20Sans%20Pro_40_line_spacing_-10_semibold:colbyfayock.com/w_300,c_fit,co_rgb:7c848a,g_north_west,x_1725,y_68,l_text:Source%20Sans%20Pro_40_line_spacing_-10_normal:colbyfayock/w_300,c_fit,co_rgb:7c848a,g_north_west,x_1725,y_145,l_text:Source%20Sans%20Pro_40_line_spacing_-10_normal:colbyfayock/w_300,c_fit,co_rgb:7c848a,g_north_west,x_1725,y_222,l_text:Source%20Sans%20Pro_40_line_spacing_-10_normal:colbyfayock/w_300,c_fit,co_rgb:7c848a,g_north_west,x_1725,y_295,l_text:Source%20Sans%20Pro_40_line_spacing_-10_normal:colbyfayock/v1/social-footer-card\" width=\"2000\"/>\n</a>\n</p>\n<ul>\n<li>\n<a href=\"https://twitter.com/colbyfayock\">? Follow Me On Twitter</a>\n</li>\n<li>\n<a href=\"https://youtube.com/colbyfayock\">?\ufe0f Subscribe To My Youtube</a>\n</li>\n<li>\n<a href=\"https://www.colbyfayock.com/newsletter/\">\u2709\ufe0f Sign Up For My Newsletter</a>\n</li>\n</ul>\n</div><!--kg-card-end: html-->\n</section>\n<hr/>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nSearch is a powerful way help people visiting your site find the content that's most important to them. But often it's really challenging to figure out the rules and logic to make that happen. In this article, we'll see how can we can use fuse.js to add search to our apps.What is fuse.js?Why is search important?What are we going to build?Step 0: Bootstrapping our appStep 1: Installing Fuse.jsStep 2: Creating a new Fuse search instanceStep 3: Setting up dynamic search based on user input\n        \n          \n            \n          \n        \n      What is fuse.js?Fuse.js is a JavaScript library that provides fuzzy search capabilities for applications and websites. It's nice and easy to use out of the box, but also includes configuration options that allow you to tweak and create powerful solutions.Why is search important?Whether you're a content creator or are trying to sell a product with your website, it's important to help your visitors actually find what they're looking for. If you're building an ecommerce website, you want someone to be able to easily find your Bender vinyl figures rather than having to dig through the entire catalog first.What are we going to build?We're going to start off with a basic Create React App example. It's going to include some character info as structured data for one of my favorite shows Futurama that's simply dumped out into an HTML list.With that list, we're going to use fuse.js to provide client-side search capabilities, allowing us to demonstrate searching for the character we're looking for by their name and other details.Step 0: Bootstrapping our appTo get started, we're going to need content to work with. I got started by building a list of characters from Futurama as structured json data that I put in a list with a fresh Create React App.Futurama character search demoYou'll also notice I've already added an input for our search. It's not yet functional but we'll use that to get started.If you'd like to start off at the same place, I created a branch with my demo repo that you can clone locally to walk through the project with me!git clone --single-branch --branch start git@github.com:colbyfayock/my-futurama-characters.git\nGit branch \"start\"Or follow along with the commit.Step 1: Installing Fuse.jsFirst thing we'll want to do is actually add Fuse.js to our app. In your project, run:yarn add fuse.js\n# or\nnpm install --save fuse.js\nThis will save the dependency to our project so that we'll be able to use it in our project.Next we'll want to import the dependency to our app so that we can start building with it. At the top of your file, in our case src/App.js if you're following along with me in a new Create React App project, add:import Fuse from 'fuse.js';\nIf you want to test that it's working, you can console.log(Fuse) and see our Fuse class we'll use to create our search capabilities.Imported fuse.js classAnd with that, we're ready to get started!Follow along with the commitStep 2: Creating a new Fuse search instanceTo use Fuse.js, we'll want to first create a new instance of it.At the top of your component, add:const fuse = new Fuse(characters, {\n  keys: [\n    'name',\n    'company',\n    'species'\n  ]\n});\nWith this does:Creates a new instance of FusePasses in our characters array of objectsSpecifies the 3 keys in our data that we want to search onNext, to perform the search, we can add:const results = fuse.search('bender');\nAnd if we console log out the results, we can see:Basic fuse.js search resultsYou'll notice that we have more results than our friend Bender though. Fuse.js provides a \"fuzzy search\" meaning it tries to help you in case you're not sure what you're looking for or if you're misspelling your query.To get an idea of how this works, let's add the includeScore option to our search:const fuse = new Fuse(characters, {\n  keys: [\n    'name',\n    'company',\n    'species'\n  ],\n  includeScore: true\n});\nNow we can see the score attribute in our results object.Fuse.js search results with scoreYou'll notice that our first result has a really low score. With fuse.js, a lower score means it's closer to an exact match.A score of 0 indicates a perfect match, while a score of 1 indicates a complete mismatch.It's saying that is incredibly likely that the first result is what we're looking for, but it's not confident in the others.So with our results, we want to actually connect that to our UI. If you notice our array output is different than what we are mapping through for the HTML list, so let's create a new variable that we can change it to:const results = fuse.search('bender');\nconst characterResults = results.map(character => character.item);\nWhat this is doing is creating a new array using the map method that will only include the item property from each array object.Then if we replace our characters map inside of our list with characterResults.map:<ul className=\"characters\">\n  {characterResults.map(character => {\n    const { name, company, species, thumb } = character;\nWe can now see that our page only shows the results for \"bender\"!Demo with filtered resultsFollow along with the commit!Step 3: Setting up dynamic search based on user inputNow that we have a hard-coded search working, we want someone to actually be able to use the search input to search!To achieve this, we're going to use the useState hook and listen for changes to the input field, which will dynamically create a search for our data.First, import the useState hook from React:import React, { useState } from 'react';\nNext, let's use that hook to create a state instance:const [query, updateQuery] = useState('');\nHere, we're creating a new state of query that we can update with updateQuery that defaults to an empty string ('').With that, let's tell our search input to use that query value as it's value:<input type=\"text\" value={query} />\nAt this point, nothing should be different, as we are using a blank query.Demo with filtered results - nothing changedNow let's add an event handler to our input that we can use to update our state:<input type=\"text\" value={query} onChange={onSearch} />\nAnd we'll want to create that function so we can use it:function onSearch({ currentTarget }) {\n  updateQuery(currentTarget.value);\n}\nThis will update our query with the input's value any time it changes.Now that our query \u00a0will have what we want to search for, we can update our search instance:const results = fuse.search(query);\nAnd now if you reload the page, it's blank! ?Demo with no resultsThat's because by default, Fuse sees our empty query and doesn't match it to anything. If we now search for something like slurms, we can see our search dynamically update with results!Demo with results for \"slurms\"If we wanted to fix this though so that all of our results show when there's no query, we can do so with an if statement or in my example, a ternary, that will show all of the characters if there is no query:const characterResults = query ? results.map(character => character.item) : characters;\nDemo with all resultsAnd with that, we have our basic search!Demo with filtered results for \"zoidberg\"Follow along with the commit!What can I do next?Tuning your searchFuse.js comes with a lot of options that you can use to tune your search to however you'd like. Want to only show confident results? Use the threshold option! Want case sensitive queries? Use the isCaseSensitive option!https://fusejs.io/api/options.htmlSetting the default query with URL parametersSometimes you want someone to be able to link to a particular set of results. To do this, we might want to be able to add a new URL parameter like ?q=bender.To make this work, you can grab that URL parameter with javascript and use that value to set our query state.Join the conversation!Ever wanted to add fuzzy, dynamic search to your @reactjs app but didn\u2019t know how? ?This guide walks you through how to use Fuse.js to add powerful client-side search to your React app \u269b\ufe0fCheck it out!?https://t.co/EMlvXaOCat\u2014 Colby Fayock (@colbyfayock) May 26, 2020\n\n\n  \n    \n      \n    \n  \n  \n    \n      ? Follow Me On Twitter\n    \n    \n      ?\ufe0f Subscribe To My Youtube\n    \n    \n      \u2709\ufe0f Sign Up For My Newsletter\n    \n  \n\n\n                        \n                    \n                    \n                        \n                        \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 8881, "excerpt": "Search is a powerful way help people visiting your site find the content that's\nmost important to them. But often it's really challenging to figure out the\nrules and logic to make that happen. In this article, we'll see how can we can\nuse fuse.js to add search to our apps.\n\n * What is fuse.js?\n * Why is search important?\n * What are we going to build?\n * Step 0: Bootstrapping our app\n * Step 1: Installing Fuse.js\n * Step 2: Creating a new Fuse search instance\n * Step 3: Setting up dynamic search", "siteName": "freeCodeCamp.org", "publishedTime": "2020-05-26T14:45:00.000Z", "id": "90588f2067b3d7a268b545b36a17551fa9ef9410", "url": "https://www.freecodecamp.org/news/how-to-add-search-to-a-react-app-with-fuse-js/", "domain": "freecodecamp.org", "date": "2023-12-27T18:06:53.828033", "resultUri": "http://localhost:3000/result/90588f2067b3d7a268b545b36a17551fa9ef9410", "query": {"url": ["https://www.freecodecamp.org/news/how-to-add-search-to-a-react-app-with-fuse-js/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "How to Add Search to a React App with Fuse.js", "description": "Search is a powerful way help people visiting your site find the content that's most important to them. But often it's really challenging to figure out the rules and logic to make that happen. In this article, we'll see how can we can use fuse.js to add search to our", "url": "https://www.freecodecamp.org/news/how-to-add-search-to-a-react-app-with-fuse-js/", "image": "https://www.freecodecamp.org/news/content/images/2020/05/fusejs-1.jpg", "image:width": "2000", "image:height": "769"}, "twitter": {"card": "summary_large_image", "title": "How to Add Search to a React App with Fuse.js", "description": "Search is a powerful way help people visiting your site find the content that's most important to them. But often it's really challenging to figure out the rules and logic to make that happen. In this article, we'll see how can we can use fuse.js to add search to our", "url": "https://www.freecodecamp.org/news/how-to-add-search-to-a-react-app-with-fuse-js/", "image": "https://www.freecodecamp.org/news/content/images/2020/05/fusejs-1.jpg", "label1": "Written by", "data1": "Colby Fayock", "label2": "Filed under", "data2": "JavaScript, Technology, Tech, Programming, Frontend, Front End, Front End Development, JS, JSON, fuse.js, Search, Reactjs, React Hooks, React", "site": "@freecodecamp", "creator": "@colbyfayock"}}}