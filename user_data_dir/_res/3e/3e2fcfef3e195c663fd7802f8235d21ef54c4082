{"title": "How to generate an HTML table and a PDF with Node & Google Puppeteer", "byline": "Adeel Imran", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>How to generate an HTML table and a PDF with Node &amp; Google Puppeteer</h1>\n<section>\n<section data-test-label=\"post-content\">\n<figure><img alt=\"image-244\" height=\"607\" loading=\"lazy\" sizes=\"(min-width: 720px) 720px\" src=\"https://www.freecodecamp.org/news/content/images/2021/04/image-244.png\" srcset=\"https://www.freecodecamp.org/news/content/images/size/w600/2021/04/image-244.png 600w, https://www.freecodecamp.org/news/content/images/size/w1000/2021/04/image-244.png 1000w, https://www.freecodecamp.org/news/content/images/2021/04/image-244.png 1080w\" width=\"1080\"/><figcaption>Photo by <a href=\"https://unsplash.com/@lobosnico?utm_source=ghost&amp;utm_medium=referral&amp;utm_campaign=api-credit\">Nicolas Lobos</a> / <a href=\"https://unsplash.com/?utm_source=ghost&amp;utm_medium=referral&amp;utm_campaign=api-credit\">Unsplash</a></figcaption></figure><p>Understanding NodeJS internally can be a little bit daunting (I know it was for me once). Node is a very powerful language and it can do a lot of things.</p><p>Today I wanted to uncover the power of Node\u2019s built-in utility tool called <a href=\"https://nodejs.org/api/fs.html\" rel=\"noopener\">fs</a> (<a href=\"https://nodejs.org/api/fs.html\" rel=\"noopener\">file system</a>)</p><p>As per the <a href=\"https://nodejs.org/api/fs.html\" rel=\"noopener\">fs </a>docs:</p><blockquote>The <code>fs</code> module provides an API for interacting with the file system in a manner closely modeled around standard POSIX functions.</blockquote><p>Which is just a fancy way of saying that <a href=\"https://nodejs.org/api/fs.html\" rel=\"noopener\">file system</a> is a way in Node to interact with files for both read and write operations.</p><p>Now <a href=\"https://nodejs.org/api/fs.html\" rel=\"noopener\">file system</a> is a humongous utility in NodeJS that has a lot of fancy features. In this article, however I will only discuss 3:</p><ul><li>Getting file information: <strong><em>fs.statSync</em></strong></li><li>Deleting a file: <strong><em>fs.unlinkSync</em></strong></li><li>Writing data to a file: <strong><em>fs.writeFileSync</em></strong></li></ul><p>Another thing we will cover in this article is <a href=\"https://developers.google.com/web/tools/puppeteer/\" rel=\"noopener\">Google Puppeteer</a> which is this really cool, slick tool created by some awesome folks at Google.</p><p>So what is puppeteer? Well as per the docs, they say:</p><blockquote>Puppeteer is a Node library which provides a high-level API to control <a href=\"https://developers.google.com/web/updates/2017/04/headless-chrome\" rel=\"noopener\">headless</a> Chrome or Chromium over the <a href=\"https://chromedevtools.github.io/devtools-protocol/\" rel=\"noopener\">DevTools Protocol</a>. It can also be configured to use full (non-headless) Chrome or Chromium.</blockquote><p>So it\u2019s basically a tool that lets you do all the cool browser related things on server. Like getting a website\u2019s screenshots, crawling websites, and generating pre-render content for single page applications. You can even do form submissions via your NodeJS server.</p><p>Again puppeteer is a huge tool, so we will cover just a small but a very cool feature of puppeteer. We\u2019ll look at how to generate a nice PDF file based on our generated HTML table file. In the process we\u2019ll learn about puppeteer.launch() and understand a bit about page() &amp; pdf().</p><h4 id=\"so-to-again-give-a-brief-overview-things-we-will-cover-\">So to again give a brief overview, things we will cover:</h4><ul><li>Generating stub data (for invoices) using an online tool.</li><li>Creating an HTML table with a little bit of styling with generated data in it, using an automated node script.</li><li>Learning about checking if a file exists or not using fs.statSync</li><li>Learning about deleting a file by using fs.unlinkSync</li><li>Learning about writing a file using fs.writeFileSync</li><li>Creating a PDF file of that HTML file generated using Google puppeteer</li><li>Making them into npm scripts, to be used later ? ?</li></ul><blockquote>Also before we begin here is the entire <a href=\"https://github.com/adeelibr/understaning-node-fs-and-puppeteer\" rel=\"noopener\">source code of the tutorial</a>, for everyone to follow along. You don\u2019t have to write anything, but you should write code along with this tutorial. That will prove more useful &amp; you\u2019ll understand more. <a href=\"https://github.com/adeelibr/understaning-node-fs-and-puppeteer\" rel=\"noopener\"><strong><em>SOURCE CODE OF TUTORIAL</em></strong></a></blockquote><p>Before we begin, please ensure that you have at least the following installed on your machine</p><ul><li>Node version 8.11.2</li><li>Node Package Manager (NPM) version 6.9.0</li></ul><p>You don\u2019t need to, but you can also watch an introductory video (my first ever made) that talks about the basics in reading, writing, and deleting a file in NodeJS. This will help you understand this tutorial. (Please do give me feedback). ?</p><figure data-test-label=\"fitted\">\n\n</figure><h3 id=\"let-s-get-started\">Let\u2019s get started</h3><h4 id=\"step-1-\"><strong>Step 1:</strong></h4><p>In your terminal type in the following:</p><pre><code>npm init -y</code></pre><p>This will initialize an empty project for you.</p><h4 id=\"step-2-\">Step 2:</h4><p>Second, in the same folder, create a new file called <code>data.json</code> and have some mocked data in it. You can use the following JSON sample.</p><p>You can get the mocked JSON stub data from <a href=\"https://gist.github.com/adeelibr/69d2ca9d40642aaf99721796da0aaa64\" rel=\"noopener\"><strong>here</strong></a><strong>.</strong> For generating this data I have used an awesome tool called <a href=\"https://mockaroo.com/\" rel=\"noopener\">https://mockaroo.com/</a> It is an online data generator tool.</p><p>The JSON data I am going with has a structure like this:</p><pre tabindex=\"0\"><code>[\n  {},\n  {},\n  {\n   \"invoiceId\": 1,\n   \"createdDate\": \"3/27/2018\",\n   \"dueDate\": \"5/24/2019\",\n   \"address\": \"28058 Hazelcrest Center\",\n   \"companyName\": \"Eayo\",\n   \"invoiceName\": \"Carbonated Water - Peach\",\n   \"price\": 376\n  },\n  {\n   \"invoiceId\": 2,\n   \"createdDate\": \"6/14/2018\",\n   \"dueDate\": \"11/14/2018\",\n   \"address\": \"6205 Shopko Court\",\n   \"companyName\": \"Ozu\",\n   \"invoiceName\": \"Pasta - Fusili Tri - Coloured\",\n   \"price\": 285\n  },\n  {},\n  {}\n]</code></pre><blockquote>You can download the complete JSON array for this tutorial from <a href=\"https://gist.github.com/adeelibr/69d2ca9d40642aaf99721796da0aaa64\" rel=\"noopener\"><strong>here</strong></a><strong>.</strong></blockquote><h4 id=\"step-3-\">Step 3:</h4><p>Next create a new file called <code>buildPaths.js</code></p><pre tabindex=\"0\"><code>const path = require('path');\nconst buildPaths = {\n   buildPathHtml: path.resolve('./build.html'),\n   buildPathPdf: path.resolve('./build.pdf')\n};\nmodule.exports = buildPaths;</code></pre><p>So <code>path.resolve</code> will take in a relative path and return us the absolute path of that particular directory.</p><p>So <code>path.resolve('./build.html');</code> will for example return something like this:</p><pre><code>$ C:\\\\Users\\\\Adeel\\\\Desktop\\\\articles\\\\tutorial\\\\build.html</code></pre><h4 id=\"step-4-\"><strong>Step 4:</strong></h4><p>In the same folder create a file called <code>createTable.js</code> and add the following code:</p><figure><pre tabindex=\"0\"><code>const fs = require('fs');\n// JSON data\nconst data = require('./data.json');\n// Build paths\nconst { buildPathHtml } = require('./buildPaths');\n\n/**\n * Take an object which has the following model\n * @param {Object} item \n * @model\n * {\n *   \"invoiceId\": `Number`,\n *   \"createdDate\": `String`,\n *   \"dueDate\": `String`,\n *   \"address\": `String`,\n *   \"companyName\": `String`,\n *   \"invoiceName\": `String`,\n *   \"price\": `Number`,\n * }\n * \n * @returns {String}\n */\nconst createRow = (item) =&gt; `\n  &lt;tr&gt;\n    &lt;td&gt;${item.invoiceId}&lt;/td&gt;\n    &lt;td&gt;${item.invoiceName}&lt;/td&gt;\n    &lt;td&gt;${item.price}&lt;/td&gt;\n    &lt;td&gt;${item.createdDate}&lt;/td&gt;\n    &lt;td&gt;${item.dueDate}&lt;/td&gt;\n    &lt;td&gt;${item.address}&lt;/td&gt;\n    &lt;td&gt;${item.companyName}&lt;/td&gt;\n  &lt;/tr&gt;\n`;\n\n/**\n * @description Generates an `html` table with all the table rows\n * @param {String} rows\n * @returns {String}\n */\nconst createTable = (rows) =&gt; `\n  &lt;table&gt;\n    &lt;tr&gt;\n        &lt;th&gt;Invoice Id&lt;/td&gt;\n        &lt;th&gt;Invoice Name&lt;/td&gt;\n        &lt;th&gt;Price&lt;/td&gt;\n        &lt;th&gt;Invoice Created&lt;/td&gt;\n        &lt;th&gt;Due Date&lt;/td&gt;\n        &lt;th&gt;Vendor Address&lt;/td&gt;\n        &lt;th&gt;Vendor Name&lt;/td&gt;\n    &lt;/tr&gt;\n    ${rows}\n  &lt;/table&gt;\n`;\n\n/**\n * @description Generate an `html` page with a populated table\n * @param {String} table\n * @returns {String}\n */\nconst createHtml = (table) =&gt; `\n  &lt;html&gt;\n    &lt;head&gt;\n      &lt;style&gt;\n        table {\n          width: 100%;\n        }\n        tr {\n          text-align: left;\n          border: 1px solid black;\n        }\n        th, td {\n          padding: 15px;\n        }\n        tr:nth-child(odd) {\n          background: #CCC\n        }\n        tr:nth-child(even) {\n          background: #FFF\n        }\n        .no-content {\n          background-color: red;\n        }\n      &lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n      ${table}\n    &lt;/body&gt;\n  &lt;/html&gt;\n`;\n\n/**\n * @description this method takes in a path as a string &amp; returns true/false\n * as to if the specified file path exists in the system or not.\n * @param {String} filePath \n * @returns {Boolean}\n */\nconst doesFileExist = (filePath) =&gt; {\n\ttry {\n\t\tfs.statSync(filePath); // get information of the specified file path.\n\t\treturn true;\n\t} catch (error) {\n\t\treturn false;\n\t}\n};\n\ntry {\n\t/* Check if the file for `html` build exists in system or not */\n\tif (doesFileExist(buildPathHtml)) {\n\t\tconsole.log('Deleting old build file');\n\t\t/* If the file exists delete the file from system */\n\t\tfs.unlinkSync(buildPathHtml);\n\t}\n\t/* generate rows */\n\tconst rows = data.map(createRow).join('');\n\t/* generate table */\n\tconst table = createTable(rows);\n\t/* generate html */\n\tconst html = createHtml(table);\n\t/* write the generated html to file */\n\tfs.writeFileSync(buildPathHtml, html);\n\tconsole.log('Succesfully created an HTML table');\n} catch (error) {\n\tconsole.log('Error generating table', error);\n}</code></pre><figcaption><strong>createTable.js script (github gist: </strong><a href=\"https://gist.github.com/adeelibr/70936277d38f3c77d3910e417581e98a#file-createtable-js\">https://gist.github.com/adeelibr/70936277d38f3c77d3910e417581e98a#file-createtable-js</a><strong>)</strong></figcaption></figure><p>I know that is a lot of code, but let\u2019s divide it into chunks and start understanding it piece by piece.</p><p>Go to <strong><em>line 106 </em></strong><em>(<a href=\"https://gist.github.com/adeelibr/70936277d38f3c77d3910e417581e98a#file-createtable-js\">github gist</a>)</em></p><p>In our <code>try/catch</code> block we first check if the build file for HTML exists in the system or not. This is the path of the file where our NodeJS script will generate our HTML.</p><p><code>if (doesFileExist(buildPathHtml){}</code> calls doesFileExist() method which simply returns true/false. For this we use</p><pre><code>fs.statSync(filePath);</code></pre><p>This method actually returns information about the file like the size of the file, when the file was created, and so on. However if we provide it an invalid file path, this method returns as a null error. Which we use here to our benefit and wrap the <code>fs.statSync()</code> method in a <code>try/catch</code>. If Node is successfully able to read the file in our try block, we return <code>true</code> \u2014 otherwise it throws an error which we get in our catch block and returns <code>false</code>.</p><p>If the file exists in the system we end up deleting the file using</p><pre><code>fs.unlinkSync(filePath); // takes in a file path &amp; deletes it</code></pre><p>After deleting the file, we need to generate rows to put in the table.</p><h4 id=\"step-5-\">Step 5:</h4><p>So first we import <code>data.json</code> which we do at <strong><em>line 3 </em></strong>&amp; then on <strong><em>line 115 </em></strong>we iterate each item using map(). You can read more about <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\" rel=\"noopener\">Array.prototype.map() here.</a></p><p>The map method takes a method <code>createRow</code> which takes in an object through each iteration and returns a string which has content like this:</p><pre tabindex=\"0\"><code>\"&lt;tr&gt;\n  &lt;td&gt;invoice id&lt;/td&gt;\n  &lt;td&gt;invoice name&lt;/td&gt;\n  &lt;td&gt;invoice price&lt;/td&gt;\n  &lt;td&gt;invoice created date&lt;/td&gt;\n  &lt;td&gt;invoice due date&lt;/td&gt;\n  &lt;td&gt;invoice address&lt;/td&gt;\n  &lt;td&gt;invoice sender company name&lt;/td&gt;\n&lt;/tr&gt;\"</code></pre><blockquote><code>const row = data.map(createdRow).join('');</code></blockquote><p>The <code>join('')</code> part is important here, because I want to concatenate all of my array into a string.</p><p>An almost similar principle is used for generating a table on <strong><em>line 117</em></strong> &amp; then the html table on <strong><em>line 119.</em></strong></p><h4 id=\"step-6-\"><strong>Step 6:</strong></h4><p>The important part is where we write to our file on<strong><em> line 121</em></strong>:</p><pre><code>fs.writeFileSync(buildPathHtml, html); </code></pre><p>It takes in 2 parameters: one is the build path (string) and the html content (string) and generates a file (if not created; and if it is created, it overwrites the already existing file).</p><blockquote>One thing to note here we might not need Step 4, where we check if the file exists &amp; if it does then delete it. This is because writeFileSync does that for us. I just added that in the code for learning purposes.</blockquote><h4 id=\"step-7-\">Step 7:</h4><p>In your terminal, go in the folder path where you have the <code>createTable.js</code> and type</p><pre><code>$ npm run ./createTable.js</code></pre><p>As soon as you run this script, it will create a new file in the same folder called <code>build.html</code> You can open that file in your browser and it will look something like this.</p><figure><img alt=\"lnYaAbNKig8Zhhuqh1QQDnMGFcQ1KNcHAA2I\" height=\"411\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/lnYaAbNKig8Zhhuqh1QQDnMGFcQ1KNcHAA2I\" width=\"800\"/><figcaption>Generated HTML table.</figcaption></figure><blockquote>Cool right? So far so good. <em>?</em></blockquote><p>Also you can add an <code>npm script</code> in your package.json like this:</p><pre tabindex=\"0\"><code>\"scripts\": {\n  \"build:table\": \"node ./createTable.js\"\n},</code></pre><p>This way instead of writing <code>npm run ./createTable.js</code>, you can just type in <code>npm run build:table</code>.</p><p>Next up: generating a PDF from the generated <code>HTML</code> file.</p><h4 id=\"step-8-\">Step 8:</h4><p>First things first we need to install a fancy tool, so go in your terminal in your application folder and type in</p><pre><code>npm install puppeteer</code></pre><h4 id=\"step-9-\"><strong>Step 9:</strong></h4><p>In the same folder where you have files <code>createTable.js</code> , <code>buildPaths.js</code> &amp; <code>data.json</code>, create a new file called <code>createPdf.js</code> and add content to it like below:</p><figure><pre tabindex=\"0\"><code>\nconst fs = require('fs');\nconst puppeteer = require('puppeteer');\n// Build paths\nconst { buildPathHtml, buildPathPdf } = require('./buildPaths');\n\nconst printPdf = async () =&gt; {\n\tconsole.log('Starting: Generating PDF Process, Kindly wait ..');\n\t/** Launch a headleass browser */\n\tconst browser = await puppeteer.launch();\n\t/* 1- Ccreate a newPage() object. It is created in default browser context. */\n\tconst page = await browser.newPage();\n\t/* 2- Will open our generated `.html` file in the new Page instance. */\n\tawait page.goto(buildPathHtml, { waitUntil: 'networkidle0' });\n\t/* 3- Take a snapshot of the PDF */\n\tconst pdf = await page.pdf({\n\t\tformat: 'A4',\n\t\tmargin: {\n\t\t\ttop: '20px',\n\t\t\tright: '20px',\n\t\t\tbottom: '20px',\n\t\t\tleft: '20px'\n\t\t}\n\t});\n\t/* 4- Cleanup: close browser. */\n\tawait browser.close();\n\tconsole.log('Ending: Generating PDF Process');\n\treturn pdf;\n};\n\nconst init = async () =&gt; {\n\ttry {\n\t\tconst pdf = await printPdf();\n\t\tfs.writeFileSync(buildPathPdf, pdf);\n\t\tconsole.log('Succesfully created an PDF table');\n\t} catch (error) {\n\t\tconsole.log('Error generating PDF', error);\n\t}\n};\n\ninit();</code></pre><figcaption><a href=\"https://gist.github.com/adeelibr/57081ec24b634b4d161e405ae3bf6d78#file-createpdf-js\">createPdf.js github gist</a>\u00a0</figcaption></figure><p>As we did with <code>createTable.js</code> script, let\u2019s break this down into chunks and start understanding this script step by step.</p><p>Let\u2019s start with <strong><a href=\"https://gist.github.com/adeelibr/57081ec24b634b4d161e405ae3bf6d78#file-createpdf-js-L40\">line 40:</a></strong> here we call a method <strong><em>init() </em></strong>which calls the method on <strong><a href=\"https://gist.github.com/adeelibr/57081ec24b634b4d161e405ae3bf6d78#file-createpdf-js-L30\">line 30</a>. </strong>One<strong> </strong>thing to focus on is that our init() method is an async method. Read more on this <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\" rel=\"noopener\">async function</a>.</p><p>First in the init() method we call <strong><em>printPdf() </em></strong>method which is again an async method, so we have to wait for its response. The printPdf() method returns us a PDF instance which we then write to a file on <strong><a href=\"https://gist.github.com/adeelibr/57081ec24b634b4d161e405ae3bf6d78#file-createpdf-js-L33\">line 33</a>.</strong></p><p>So what does the <code>printPdf()</code> method do? Let\u2019s dig deep in it.</p><pre tabindex=\"0\"><code>const browser = await puppeteer.launch();\nconst page = await browser.newPage();\nawait page.goto(buildPathHtml, { waitUntil: 'networkidle0' });\nconst pdf = await page.pdf({\n  format: 'A4',\n  margin: {\n   top: '20px', right: '20px', bottom: '20px', left: '20px'}\n});\nawait browser.close();\nreturn pdf;</code></pre><p>We first launch a headless browser instance using puppeteer by doing the following:</p><pre><code>await puppeteer.launch(); // this returns us headless browser</code></pre><p>which we then use to open a web page:</p><pre><code>await browser.newPage(); // open a blank page in headless browser</code></pre><p>Once we have a blank page open we can navigate to a page. Since our web page is locally in our system, we simply</p><pre><code>page.goto(buildPathHtml, { waitUntil: 'networkidle0' });</code></pre><p>Here <code>waitUntil: 'networkidle0;</code> is important, because it tells puppeteer to wait for 500/ms until there are no more network connections.</p><blockquote><strong><em>Note:</em> </strong>This is why we used path.resolve() to get absolute paths, because in order to open the web page with puppeteer, we need an absolute path.</blockquote><p>After we have a web page opened in the headless browser on the server, we save that page as a pdf:</p><pre><code>await page.pdf({ });</code></pre><p>As soon as we have a pdf version of the web page, we need to close the browser instance opened by puppeteer to save resources by doing this:</p><pre><code>await browser.close();</code></pre><p>&amp; then we return the <code>pdf</code> saved, which we then write to the file.</p><h4 id=\"step-10-\">Step 10:</h4><p>In your terminal type</p><pre><code>$ npm ./createPdf.js</code></pre><p>Note: Before running the above script, ensure that you the <code>build.html</code> file generated by <code>createTable.js</code> script. This ensures we always have the <code>build.html</code> prior to running the <code>createPdf.js</code> script. In your <code>package,json</code> do the following.</p><pre><code>\"scripts\": {\n  \"build:table\": \"node ./createTable.js\",\n  \"prebuild:pdf\": \"npm run build:table\",\n  \"build:pdf\": \"node ./createPdf.js\"\n},</code></pre><p>Now if you run <code><strong>$</strong> npm run build:pdf</code> it will execute the <code>createTable.js</code> script first and then <code>createPdf.js</code> script. You can read more on <a href=\"https://docs.npmjs.com/misc/scripts\" rel=\"noopener\">NPM scripts</a> on their official <a href=\"https://docs.npmjs.com/misc/scripts\" rel=\"noopener\">docs</a>.</p><p>When you run</p><pre><code>$ npm run build:pdf</code></pre><p>It will run and create a <code>build.pdf</code> which will look like this:</p><figure><img alt=\"UOMwXytU2JyC8VlsgaM-wXF-9D9icvPpLlnC\" height=\"376\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/UOMwXytU2JyC8VlsgaM-wXF-9D9icvPpLlnC\" width=\"800\"/><figcaption>Generated .pdf file on running <strong>createPdf.js</strong> script</figcaption></figure><p>And that is it, we are done.</p><p>You have learned the following:</p><ul><li>How to check if a file exists / tet file information (in Node)</li><li>How to delete a file in Node</li><li>How to write to a file</li><li>How to use Google Puppeteer to generate a PDF file</li></ul><p>Happy learning, I would love to hear your thoughts on this article. You can reach me on <a href=\"https://twitter.com/adeelibr\" rel=\"noopener\"><strong><em>twitter</em></strong></a><strong><em> </em></strong>as well.</p>\n</section>\n<hr/>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nPhoto by Nicolas Lobos / UnsplashUnderstanding NodeJS internally can be a little bit daunting (I know it was for me once). Node is a very powerful language and it can do a lot of things.Today I wanted to uncover the power of Node\u2019s built-in utility tool called fs (file system)As per the fs docs:The fs module provides an API for interacting with the file system in a manner closely modeled around standard POSIX functions.Which is just a fancy way of saying that file system is a way in Node to interact with files for both read and write operations.Now file system is a humongous utility in NodeJS that has a lot of fancy features. In this article, however I will only discuss 3:Getting file information: fs.statSyncDeleting a file: fs.unlinkSyncWriting data to a file: fs.writeFileSyncAnother thing we will cover in this article is Google Puppeteer which is this really cool, slick tool created by some awesome folks at Google.So what is puppeteer? Well as per the docs, they say:Puppeteer is a Node library which provides a high-level API to control headless Chrome or Chromium over the DevTools Protocol. It can also be configured to use full (non-headless) Chrome or Chromium.So it\u2019s basically a tool that lets you do all the cool browser related things on server. Like getting a website\u2019s screenshots, crawling websites, and generating pre-render content for single page applications. You can even do form submissions via your NodeJS server.Again puppeteer is a huge tool, so we will cover just a small but a very cool feature of puppeteer. We\u2019ll look at how to generate a nice PDF file based on our generated HTML table file. In the process we\u2019ll learn about puppeteer.launch() and understand a bit about page() & pdf().So to again give a brief overview, things we will cover:Generating stub data (for invoices) using an online tool.Creating an HTML table with a little bit of styling with generated data in it, using an automated node script.Learning about checking if a file exists or not using fs.statSyncLearning about deleting a file by using fs.unlinkSyncLearning about writing a file using fs.writeFileSyncCreating a PDF file of that HTML file generated using Google puppeteerMaking them into npm scripts, to be used later ? ?Also before we begin here is the entire source code of the tutorial, for everyone to follow along. You don\u2019t have to write anything, but you should write code along with this tutorial. That will prove more useful & you\u2019ll understand more. SOURCE CODE OF TUTORIALBefore we begin, please ensure that you have at least the following installed on your machineNode version 8.11.2Node Package Manager (NPM) version 6.9.0You don\u2019t need to, but you can also watch an introductory video (my first ever made) that talks about the basics in reading, writing, and deleting a file in NodeJS. This will help you understand this tutorial. (Please do give me feedback). ?\n        \n          \n            \n          \n        \n      Let\u2019s get startedStep 1:In your terminal type in the following:npm init -yThis will initialize an empty project for you.Step 2:Second, in the same folder, create a new file called data.json and have some mocked data in it. You can use the following JSON sample.You can get the mocked JSON stub data from here. For generating this data I have used an awesome tool called https://mockaroo.com/ It is an online data generator tool.The JSON data I am going with has a structure like this:[\n  {},\n  {},\n  {\n   \"invoiceId\": 1,\n   \"createdDate\": \"3/27/2018\",\n   \"dueDate\": \"5/24/2019\",\n   \"address\": \"28058 Hazelcrest Center\",\n   \"companyName\": \"Eayo\",\n   \"invoiceName\": \"Carbonated Water - Peach\",\n   \"price\": 376\n  },\n  {\n   \"invoiceId\": 2,\n   \"createdDate\": \"6/14/2018\",\n   \"dueDate\": \"11/14/2018\",\n   \"address\": \"6205 Shopko Court\",\n   \"companyName\": \"Ozu\",\n   \"invoiceName\": \"Pasta - Fusili Tri - Coloured\",\n   \"price\": 285\n  },\n  {},\n  {}\n]You can download the complete JSON array for this tutorial from here.Step 3:Next create a new file called buildPaths.jsconst path = require('path');\nconst buildPaths = {\n   buildPathHtml: path.resolve('./build.html'),\n   buildPathPdf: path.resolve('./build.pdf')\n};\nmodule.exports = buildPaths;So path.resolve will take in a relative path and return us the absolute path of that particular directory.So path.resolve('./build.html'); will for example return something like this:$ C:\\\\Users\\\\Adeel\\\\Desktop\\\\articles\\\\tutorial\\\\build.htmlStep 4:In the same folder create a file called createTable.js and add the following code:const fs = require('fs');\n// JSON data\nconst data = require('./data.json');\n// Build paths\nconst { buildPathHtml } = require('./buildPaths');\n\n/**\n * Take an object which has the following model\n * @param {Object} item \n * @model\n * {\n *   \"invoiceId\": `Number`,\n *   \"createdDate\": `String`,\n *   \"dueDate\": `String`,\n *   \"address\": `String`,\n *   \"companyName\": `String`,\n *   \"invoiceName\": `String`,\n *   \"price\": `Number`,\n * }\n * \n * @returns {String}\n */\nconst createRow = (item) => `\n  <tr>\n    <td>${item.invoiceId}</td>\n    <td>${item.invoiceName}</td>\n    <td>${item.price}</td>\n    <td>${item.createdDate}</td>\n    <td>${item.dueDate}</td>\n    <td>${item.address}</td>\n    <td>${item.companyName}</td>\n  </tr>\n`;\n\n/**\n * @description Generates an `html` table with all the table rows\n * @param {String} rows\n * @returns {String}\n */\nconst createTable = (rows) => `\n  <table>\n    <tr>\n        <th>Invoice Id</td>\n        <th>Invoice Name</td>\n        <th>Price</td>\n        <th>Invoice Created</td>\n        <th>Due Date</td>\n        <th>Vendor Address</td>\n        <th>Vendor Name</td>\n    </tr>\n    ${rows}\n  </table>\n`;\n\n/**\n * @description Generate an `html` page with a populated table\n * @param {String} table\n * @returns {String}\n */\nconst createHtml = (table) => `\n  <html>\n    <head>\n      <style>\n        table {\n          width: 100%;\n        }\n        tr {\n          text-align: left;\n          border: 1px solid black;\n        }\n        th, td {\n          padding: 15px;\n        }\n        tr:nth-child(odd) {\n          background: #CCC\n        }\n        tr:nth-child(even) {\n          background: #FFF\n        }\n        .no-content {\n          background-color: red;\n        }\n      </style>\n    </head>\n    <body>\n      ${table}\n    </body>\n  </html>\n`;\n\n/**\n * @description this method takes in a path as a string & returns true/false\n * as to if the specified file path exists in the system or not.\n * @param {String} filePath \n * @returns {Boolean}\n */\nconst doesFileExist = (filePath) => {\n\ttry {\n\t\tfs.statSync(filePath); // get information of the specified file path.\n\t\treturn true;\n\t} catch (error) {\n\t\treturn false;\n\t}\n};\n\ntry {\n\t/* Check if the file for `html` build exists in system or not */\n\tif (doesFileExist(buildPathHtml)) {\n\t\tconsole.log('Deleting old build file');\n\t\t/* If the file exists delete the file from system */\n\t\tfs.unlinkSync(buildPathHtml);\n\t}\n\t/* generate rows */\n\tconst rows = data.map(createRow).join('');\n\t/* generate table */\n\tconst table = createTable(rows);\n\t/* generate html */\n\tconst html = createHtml(table);\n\t/* write the generated html to file */\n\tfs.writeFileSync(buildPathHtml, html);\n\tconsole.log('Succesfully created an HTML table');\n} catch (error) {\n\tconsole.log('Error generating table', error);\n}createTable.js script (github gist: https://gist.github.com/adeelibr/70936277d38f3c77d3910e417581e98a#file-createtable-js)I know that is a lot of code, but let\u2019s divide it into chunks and start understanding it piece by piece.Go to line 106 (github gist)In our try/catch block we first check if the build file for HTML exists in the system or not. This is the path of the file where our NodeJS script will generate our HTML.if (doesFileExist(buildPathHtml){} calls doesFileExist() method which simply returns true/false. For this we usefs.statSync(filePath);This method actually returns information about the file like the size of the file, when the file was created, and so on. However if we provide it an invalid file path, this method returns as a null error. Which we use here to our benefit and wrap the fs.statSync() method in a try/catch. If Node is successfully able to read the file in our try block, we return true \u2014 otherwise it throws an error which we get in our catch block and returns false.If the file exists in the system we end up deleting the file usingfs.unlinkSync(filePath); // takes in a file path & deletes itAfter deleting the file, we need to generate rows to put in the table.Step 5:So first we import data.json which we do at line 3 & then on line 115 we iterate each item using map(). You can read more about Array.prototype.map() here.The map method takes a method createRow which takes in an object through each iteration and returns a string which has content like this:\"<tr>\n  <td>invoice id</td>\n  <td>invoice name</td>\n  <td>invoice price</td>\n  <td>invoice created date</td>\n  <td>invoice due date</td>\n  <td>invoice address</td>\n  <td>invoice sender company name</td>\n</tr>\"const row = data.map(createdRow).join('');The join('') part is important here, because I want to concatenate all of my array into a string.An almost similar principle is used for generating a table on line 117 & then the html table on line 119.Step 6:The important part is where we write to our file on line 121:fs.writeFileSync(buildPathHtml, html); It takes in 2 parameters: one is the build path (string) and the html content (string) and generates a file (if not created; and if it is created, it overwrites the already existing file).One thing to note here we might not need Step 4, where we check if the file exists & if it does then delete it. This is because writeFileSync does that for us. I just added that in the code for learning purposes.Step 7:In your terminal, go in the folder path where you have the createTable.js and type$ npm run ./createTable.jsAs soon as you run this script, it will create a new file in the same folder called build.html You can open that file in your browser and it will look something like this.Generated HTML table.Cool right? So far so good. ?Also you can add an npm script in your package.json like this:\"scripts\": {\n  \"build:table\": \"node ./createTable.js\"\n},This way instead of writing npm run ./createTable.js, you can just type in npm run build:table.Next up: generating a PDF from the generated HTML file.Step 8:First things first we need to install a fancy tool, so go in your terminal in your application folder and type innpm install puppeteerStep 9:In the same folder where you have files createTable.js , buildPaths.js & data.json, create a new file called createPdf.js and add content to it like below:\nconst fs = require('fs');\nconst puppeteer = require('puppeteer');\n// Build paths\nconst { buildPathHtml, buildPathPdf } = require('./buildPaths');\n\nconst printPdf = async () => {\n\tconsole.log('Starting: Generating PDF Process, Kindly wait ..');\n\t/** Launch a headleass browser */\n\tconst browser = await puppeteer.launch();\n\t/* 1- Ccreate a newPage() object. It is created in default browser context. */\n\tconst page = await browser.newPage();\n\t/* 2- Will open our generated `.html` file in the new Page instance. */\n\tawait page.goto(buildPathHtml, { waitUntil: 'networkidle0' });\n\t/* 3- Take a snapshot of the PDF */\n\tconst pdf = await page.pdf({\n\t\tformat: 'A4',\n\t\tmargin: {\n\t\t\ttop: '20px',\n\t\t\tright: '20px',\n\t\t\tbottom: '20px',\n\t\t\tleft: '20px'\n\t\t}\n\t});\n\t/* 4- Cleanup: close browser. */\n\tawait browser.close();\n\tconsole.log('Ending: Generating PDF Process');\n\treturn pdf;\n};\n\nconst init = async () => {\n\ttry {\n\t\tconst pdf = await printPdf();\n\t\tfs.writeFileSync(buildPathPdf, pdf);\n\t\tconsole.log('Succesfully created an PDF table');\n\t} catch (error) {\n\t\tconsole.log('Error generating PDF', error);\n\t}\n};\n\ninit();createPdf.js github gist\u00a0As we did with createTable.js script, let\u2019s break this down into chunks and start understanding this script step by step.Let\u2019s start with line 40: here we call a method init() which calls the method on line 30. One thing to focus on is that our init() method is an async method. Read more on this async function.First in the init() method we call printPdf() method which is again an async method, so we have to wait for its response. The printPdf() method returns us a PDF instance which we then write to a file on line 33.So what does the printPdf() method do? Let\u2019s dig deep in it.const browser = await puppeteer.launch();\nconst page = await browser.newPage();\nawait page.goto(buildPathHtml, { waitUntil: 'networkidle0' });\nconst pdf = await page.pdf({\n  format: 'A4',\n  margin: {\n   top: '20px', right: '20px', bottom: '20px', left: '20px'}\n});\nawait browser.close();\nreturn pdf;We first launch a headless browser instance using puppeteer by doing the following:await puppeteer.launch(); // this returns us headless browserwhich we then use to open a web page:await browser.newPage(); // open a blank page in headless browserOnce we have a blank page open we can navigate to a page. Since our web page is locally in our system, we simplypage.goto(buildPathHtml, { waitUntil: 'networkidle0' });Here waitUntil: 'networkidle0; is important, because it tells puppeteer to wait for 500/ms until there are no more network connections.Note: This is why we used path.resolve() to get absolute paths, because in order to open the web page with puppeteer, we need an absolute path.After we have a web page opened in the headless browser on the server, we save that page as a pdf:await page.pdf({ });As soon as we have a pdf version of the web page, we need to close the browser instance opened by puppeteer to save resources by doing this:await browser.close();& then we return the pdf saved, which we then write to the file.Step 10:In your terminal type$ npm ./createPdf.jsNote: Before running the above script, ensure that you the build.html file generated by createTable.js script. This ensures we always have the build.html prior to running the createPdf.js script. In your package,json do the following.\"scripts\": {\n  \"build:table\": \"node ./createTable.js\",\n  \"prebuild:pdf\": \"npm run build:table\",\n  \"build:pdf\": \"node ./createPdf.js\"\n},Now if you run $ npm run build:pdf it will execute the createTable.js script first and then createPdf.js script. You can read more on NPM scripts on their official docs.When you run$ npm run build:pdfIt will run and create a build.pdf which will look like this:Generated .pdf file on running createPdf.js scriptAnd that is it, we are done.You have learned the following:How to check if a file exists / tet file information (in Node)How to delete a file in NodeHow to write to a fileHow to use Google Puppeteer to generate a PDF fileHappy learning, I would love to hear your thoughts on this article. You can reach me on twitter as well.\n\n                        \n                    \n                    \n                        \n                        \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 15452, "excerpt": "Photo by Nicolas Lobos\n[https://unsplash.com/@lobosnico?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit] \n/ Unsplash\n[https://unsplash.com/?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit]\nUnderstanding NodeJS internally can be a little bit daunting (I know it was for\nme once). Node is a very powerful language and it can do a lot of things.\n\nToday I wanted to uncover the power of Node\u2019s built-in utility tool called fs\n[https://nodejs.org/api/fs.html] (file system [https", "siteName": "freeCodeCamp.org", "publishedTime": "2019-05-15T21:53:56.000Z", "id": "3e2fcfef3e195c663fd7802f8235d21ef54c4082", "url": "https://www.freecodecamp.org/news/how-to-generate-an-html-table-and-a-pdf-with-node-google-puppeteer-32f94d9e39f6/", "domain": "freecodecamp.org", "date": "2023-12-27T18:09:46.217172", "resultUri": "http://localhost:3000/result/3e2fcfef3e195c663fd7802f8235d21ef54c4082", "query": {"url": ["https://www.freecodecamp.org/news/how-to-generate-an-html-table-and-a-pdf-with-node-google-puppeteer-32f94d9e39f6/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "How to generate an HTML table and a PDF with Node & Google Puppeteer", "description": "Photo by Nicolas Lobos [https://unsplash.com/@lobosnico?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit]  / Unsplash [https://unsplash.com/?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit] Understanding NodeJS internally can be a little bit daunting (I know it was for me once). Node is a very powerful language and it can do a lot of things. Today I wanted to uncover the power of Node\u2019s built-in utility", "url": "https://www.freecodecamp.org/news/how-to-generate-an-html-table-and-a-pdf-with-node-google-puppeteer-32f94d9e39f6/", "image": "https://cdn-media-1.freecodecamp.org/images/1*vmoUk8zB0XXR2l203rw7fQ.jpeg", "image:width": "800", "image:height": "533"}, "twitter": {"card": "summary_large_image", "title": "How to generate an HTML table and a PDF with Node & Google Puppeteer", "description": "Photo by Nicolas Lobos [https://unsplash.com/@lobosnico?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit]  / Unsplash [https://unsplash.com/?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit] Understanding NodeJS internally can be a little bit daunting (I know it was for me once). Node is a very powerful language and it can do a lot of things. Today I wanted to uncover the power of Node\u2019s built-in utility", "url": "https://www.freecodecamp.org/news/how-to-generate-an-html-table-and-a-pdf-with-node-google-puppeteer-32f94d9e39f6/", "image": "https://cdn-media-1.freecodecamp.org/images/1*vmoUk8zB0XXR2l203rw7fQ.jpeg", "label1": "Written by", "data1": "Adeel Imran", "label2": "Filed under", "data2": "JavaScript, Node, Coding, Tech, Programming", "site": "@freecodecamp", "creator": "@adeelibr"}}}