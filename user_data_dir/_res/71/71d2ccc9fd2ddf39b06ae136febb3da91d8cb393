{"title": "What is Pseudocode? How to Use Pseudocode to Solve Coding Problems", "byline": "Kingsley Ubah", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>What is Pseudocode? How to Use Pseudocode to Solve Coding Problems</h1>\n<section>\n<section data-test-label=\"post-content\">\n<p>You might be wondering what pseudocode is and why it's so useful for writing computer programs.</p><p>But before we jump into pseudocode, let's refresh our memories about what programming and coding are, in the simplest sense.</p><p>Programming is the manifestation of logic. A program is a set of instructions that defines the behaviour of your software application. Writing code is how you implement it for the machine. </p><p>Pseudocode literally means \u2018fake code\u2019. It is an <strong>informal </strong>and <strong>contrived </strong>way of writing programs in which you represent the sequence of actions and instructions (aka algorithms) in a form that humans can easily understand.</p><p>You see, computers and human beings are quite different, and therein lies the problem. </p><p>The language of a computer is very rigid: you are not allowed to make any mistakes or deviate from the rules. Even with the invention of high-level, human-readable languages like JavaScript and Python, it\u2019s still pretty hard for an average human developer to reason and program in those coding languages. </p><p>With pseudocode, however, it\u2019s the exact opposite. You make the rules. It doesn\u2019t matter what language you use to write your pseudocode. All that matters is comprehension. </p><p>In pseudocode, you don't have to think about semi-colons, curly braces, the syntax for arrow functions, how to define promises, DOM methods and other core language principles. You just have to be able to explain what you're thinking and doing.</p><h2 id=\"benefits-of-writing-pseudocode\">Benefits of Writing Pseudocode</h2><p>When you're writing code in a programming language, you\u2019ll have to battle with strict syntax and rigid coding patterns. But you write pseudocode in a language or form with which you're very familiar. \u00a0</p><p>Since pseudocode is an informal method of program design, you don\u2019t have to obey any set-out rules. <strong>You make the rules yourself.</strong></p><p>Pseudocode acts as the bridge between your brain and computer\u2019s code executor. It allows you to plan instructions which follow a logical pattern, without including all of the technical details.</p><p>Pseudocode is a great way of getting started with software programming as a beginner. You won\u2019t have to overwhelm your brain with coding syntax. </p><p>In fact, many companies organize programming tests for their interviewees in pseudocode. This is because the importance of problem solving supersedes the ability to \u2018hack\u2019 computer code. </p><p>You can get quality code from many platforms online, but you have to learn problem solving and practice it a lot.</p><p>Planning computer algorithms with pseudocode makes you meticulous. It helps you explain exactly what each line in a software program should do. This is possible because you are in full control of everything, which is one of the great features of pseudocode.</p><h2 id=\"example-of-pseudocode\">Example of Pseudocode</h2><p>Pseudocode is a very intuitive way to develop software programs. To illustrate this, I am going to refer back to a very simple program I wrote in my <a href=\"https://www.freecodecamp.org/news/programming-coding-developement-whats-the-difference/\">last article</a>:</p><p>When a user fills in a form and clicks the submit button, execute a ValidateEmail function. What should the function do?</p><ol><li>Derive an email regular expression (regex) to test the user's email address against.</li><li>Access the user's email from the DOM and store it in a variable. Find and use the right DOM method for that task.</li><li>With the email value now accessed and stored, create a conditional statement:</li></ol><ul><li>If the email format doesn\u2019t match the rule specified by the regex, access the element with the <code>myAlert</code> id attribute and pass in the \u201cInvalid Email\u201d message for the user to see.</li><li>Else, if the above condition isn\u2019t true and the email address format actually matches with the regex, check to see if the database already has such an email address. If it already does, access the element with the <code>myAlert</code> id attribute and pass in the \u201cEmail exists!\u201d message for the user to see.</li><li>Now, if both of these conditions aren\u2019t met, (that is the email format matches the regex and the database doesn\u2019t have such an email address stored yet), push the users email address into the database and pass in the \u201cSuccessful!\u201d message for the user to see.</li></ul><p>Once you are done outlining the various steps you want your code to take, everything becomes easier and clearer. Now, let\u2019s turn that psedocode into real JavaScript code:</p><pre tabindex=\"0\"><code>let database = ['test1@gmail.com', 'test2@gmail.com', 'test3@gmail.com'];\n\nfunction validateEmail() {\n    let regexEmail = /^\\w+([.-]?\\w+)@\\w+([.-]?\\w+)(.\\w{2,3})+$/;\n    let emailAddress = document.getElementbyID('emailFld').value;\n    if (!emailAddress.match(regexEmail)) {\n        document.getElementbyID('myAlert').innerHTML = \"Invalid Email!\";\n    } else if (database.includes(emailAddress)) {\n        document.getElementbyID('myAlert').innerHTML = \"Email exists!\";\n      else {\n        database.push(emailAddress);\n        document.getElementbyID('myAlert').innerHTML = \"Successful!\";\n        return true;\n      }\n}\n    \ndocument.getElementById(\"myBtn\").addEventListener(\"click\", validateEmail);</code></pre><p>All you have to do at this stage is find the programming language constructs that will help you achieve each of your steps. Noticed how seamless the transition from pseudocode to actual code became? That\u2019s how effective writing pseudocode can be for program design.</p><p>Pseudocode is also a great way to solve programming-related problems when you're struggling with them. For those practising programming in coding challenge platforms like <a href=\"https://www.codewars.com/dashboard\">CodeWars</a>, pseudocode can be of immense help.</p><h2 id=\"how-to-solve-programming-problems-with-pseudocode\">How to Solve Programming Problems with Pseudocode</h2><p>Solving programming problems can be hard. Not only do you have the logical part to reckon with, but also the technical (code forming) part as well. I recently uncovered a brilliant and effective formula for solving tricky coding problems.</p><p>Here are the steps you can follow to solving programming problems with pseudocode:</p><h3 id=\"step-1-understand-what-the-function-does\">Step 1: Understand what the function does</h3><p>First, you need to understand that all a function does is (optionally) accept data as input, work on the data little by little, and finally return an output. The body of the function is what actually solves the problem and it does so line by line.</p><h3 id=\"step-2-make-sure-you-understand-the-question\">Step 2: Make sure you understand the question</h3><p>Next, you need to read and understand the question properly. This is arguably the most important step in the process. </p><p>If you fail to properly understand the question, you won\u2019t be able to work through the problem and figure out the possible steps to take. Once you identify the main problem to be solved you'll be ready to tackle it.</p><h3 id=\"step-3-break-the-problem-down-\">Step 3: Break the problem down.</h3><p>Now you need to break down the problem into smaller parts and sub-problems. With each smaller problem you solve, you'll get closer to solving the main problem. </p><p>It helps to represent these problem solving steps in the clearest and most easily understandable way you can \u2013 which is psedocode!</p><ul><li>Start solving: open and use tools like Google, Stack Overflow, MDN, and of course freeCodeCamp! :)</li><li>For every step of the problem that you solve, test the output to make sure you\u2019re on the right path. Keep solving these small problems until you arrive at the final solution.</li></ul><p>I picked up this highly effective formula from Aaron Jack and I think you\u2019ll benefit from it. Check out his video about how to solve coding problems:</p><figure data-test-label=\"fitted\">\n\n</figure><h2 id=\"conclusion\">Conclusion</h2><p>As you can see, pseudocode is a very useful strategy for planning computer programs. </p><p>Of course, you have to remember that pseudocode is <strong>not a true representation</strong> of a computer program. While using pseudocode to plan your algorithm is great, you will ultimately have to translate it into an actual computer-readable program. This means that you'll eventually need to learn how to program in a real programming language.</p><p>Taking up coding challenges online is a great way to learn how to program because, as they say, practice makes perfect. But when you try your next challenge, don\u2019t forget to implement pseudocode in the process!</p><p>You can check out some of my other programming-related posts on my personal <a href=\"https://ubahthebuilder.tech/\">blog</a>. I am also available on <a href=\"https://twitter.com/ubahthebuilder\">Twitter</a>.</p><p>Thank you for reading and see you soon.</p><blockquote>P/S: If you are learning JavaScript, I created an eBook which teaches 50 topics in JavaScript with hand-drawn digital notes. <a href=\"https://ubahthebuilder.gumroad.com/l/js-50\">Check it out here</a>.</blockquote>\n</section>\n<hr/>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nYou might be wondering what pseudocode is and why it's so useful for writing computer programs.But before we jump into pseudocode, let's refresh our memories about what programming and coding are, in the simplest sense.Programming is the manifestation of logic. A program is a set of instructions that defines the behaviour of your software application. Writing code is how you implement it for the machine. Pseudocode literally means \u2018fake code\u2019. It is an informal and contrived way of writing programs in which you represent the sequence of actions and instructions (aka algorithms) in a form that humans can easily understand.You see, computers and human beings are quite different, and therein lies the problem. The language of a computer is very rigid: you are not allowed to make any mistakes or deviate from the rules. Even with the invention of high-level, human-readable languages like JavaScript and Python, it\u2019s still pretty hard for an average human developer to reason and program in those coding languages. With pseudocode, however, it\u2019s the exact opposite. You make the rules. It doesn\u2019t matter what language you use to write your pseudocode. All that matters is comprehension. In pseudocode, you don't have to think about semi-colons, curly braces, the syntax for arrow functions, how to define promises, DOM methods and other core language principles. You just have to be able to explain what you're thinking and doing.Benefits of Writing PseudocodeWhen you're writing code in a programming language, you\u2019ll have to battle with strict syntax and rigid coding patterns. But you write pseudocode in a language or form with which you're very familiar. \u00a0Since pseudocode is an informal method of program design, you don\u2019t have to obey any set-out rules. You make the rules yourself.Pseudocode acts as the bridge between your brain and computer\u2019s code executor. It allows you to plan instructions which follow a logical pattern, without including all of the technical details.Pseudocode is a great way of getting started with software programming as a beginner. You won\u2019t have to overwhelm your brain with coding syntax. In fact, many companies organize programming tests for their interviewees in pseudocode. This is because the importance of problem solving supersedes the ability to \u2018hack\u2019 computer code. You can get quality code from many platforms online, but you have to learn problem solving and practice it a lot.Planning computer algorithms with pseudocode makes you meticulous. It helps you explain exactly what each line in a software program should do. This is possible because you are in full control of everything, which is one of the great features of pseudocode.Example of PseudocodePseudocode is a very intuitive way to develop software programs. To illustrate this, I am going to refer back to a very simple program I wrote in my last article:When a user fills in a form and clicks the submit button, execute a ValidateEmail function. What should the function do?Derive an email regular expression (regex) to test the user's email address against.Access the user's email from the DOM and store it in a variable. Find and use the right DOM method for that task.With the email value now accessed and stored, create a conditional statement:If the email format doesn\u2019t match the rule specified by the regex, access the element with the myAlert id attribute and pass in the \u201cInvalid Email\u201d message for the user to see.Else, if the above condition isn\u2019t true and the email address format actually matches with the regex, check to see if the database already has such an email address. If it already does, access the element with the myAlert id attribute and pass in the \u201cEmail exists!\u201d message for the user to see.Now, if both of these conditions aren\u2019t met, (that is the email format matches the regex and the database doesn\u2019t have such an email address stored yet), push the users email address into the database and pass in the \u201cSuccessful!\u201d message for the user to see.Once you are done outlining the various steps you want your code to take, everything becomes easier and clearer. Now, let\u2019s turn that psedocode into real JavaScript code:let database = ['test1@gmail.com', 'test2@gmail.com', 'test3@gmail.com'];\n\nfunction validateEmail() {\n    let regexEmail = /^\\w+([.-]?\\w+)@\\w+([.-]?\\w+)(.\\w{2,3})+$/;\n    let emailAddress = document.getElementbyID('emailFld').value;\n    if (!emailAddress.match(regexEmail)) {\n        document.getElementbyID('myAlert').innerHTML = \"Invalid Email!\";\n    } else if (database.includes(emailAddress)) {\n        document.getElementbyID('myAlert').innerHTML = \"Email exists!\";\n      else {\n        database.push(emailAddress);\n        document.getElementbyID('myAlert').innerHTML = \"Successful!\";\n        return true;\n      }\n}\n    \ndocument.getElementById(\"myBtn\").addEventListener(\"click\", validateEmail);All you have to do at this stage is find the programming language constructs that will help you achieve each of your steps. Noticed how seamless the transition from pseudocode to actual code became? That\u2019s how effective writing pseudocode can be for program design.Pseudocode is also a great way to solve programming-related problems when you're struggling with them. For those practising programming in coding challenge platforms like CodeWars, pseudocode can be of immense help.How to Solve Programming Problems with PseudocodeSolving programming problems can be hard. Not only do you have the logical part to reckon with, but also the technical (code forming) part as well. I recently uncovered a brilliant and effective formula for solving tricky coding problems.Here are the steps you can follow to solving programming problems with pseudocode:Step 1: Understand what the function doesFirst, you need to understand that all a function does is (optionally) accept data as input, work on the data little by little, and finally return an output. The body of the function is what actually solves the problem and it does so line by line.Step 2: Make sure you understand the questionNext, you need to read and understand the question properly. This is arguably the most important step in the process. If you fail to properly understand the question, you won\u2019t be able to work through the problem and figure out the possible steps to take. Once you identify the main problem to be solved you'll be ready to tackle it.Step 3: Break the problem down.Now you need to break down the problem into smaller parts and sub-problems. With each smaller problem you solve, you'll get closer to solving the main problem. It helps to represent these problem solving steps in the clearest and most easily understandable way you can \u2013 which is psedocode!Start solving: open and use tools like Google, Stack Overflow, MDN, and of course freeCodeCamp! :)For every step of the problem that you solve, test the output to make sure you\u2019re on the right path. Keep solving these small problems until you arrive at the final solution.I picked up this highly effective formula from Aaron Jack and I think you\u2019ll benefit from it. Check out his video about how to solve coding problems:\n        \n          \n            \n          \n        \n      ConclusionAs you can see, pseudocode is a very useful strategy for planning computer programs. Of course, you have to remember that pseudocode is not a true representation of a computer program. While using pseudocode to plan your algorithm is great, you will ultimately have to translate it into an actual computer-readable program. This means that you'll eventually need to learn how to program in a real programming language.Taking up coding challenges online is a great way to learn how to program because, as they say, practice makes perfect. But when you try your next challenge, don\u2019t forget to implement pseudocode in the process!You can check out some of my other programming-related posts on my personal blog. I am also available on Twitter.Thank you for reading and see you soon.P/S: If you are learning JavaScript, I created an eBook which teaches 50 topics in JavaScript with hand-drawn digital notes. Check it out here.\n\n                        \n                    \n                    \n                        \n                        \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 8806, "excerpt": "You might be wondering what pseudocode is and why it's so useful for writing\ncomputer programs.\n\nBut before we jump into pseudocode, let's refresh our memories about what\nprogramming and coding are, in the simplest sense.\n\nProgramming is the manifestation of logic. A program is a set of instructions\nthat defines the behaviour of your software application. Writing code is how you\nimplement it for the machine. \n\nWhat is Pseudocode?\nPseudocode literally means \u2018fake code\u2019. It is an informal and cont", "siteName": "freeCodeCamp.org", "publishedTime": "2021-07-26T19:23:37.000Z", "id": "71d2ccc9fd2ddf39b06ae136febb3da91d8cb393", "url": "https://www.freecodecamp.org/news/what-is-pseudocode-in-programming/", "domain": "freecodecamp.org", "date": "2023-12-27T18:05:56.458392", "resultUri": "http://localhost:3000/result/71d2ccc9fd2ddf39b06ae136febb3da91d8cb393", "query": {"url": ["https://www.freecodecamp.org/news/what-is-pseudocode-in-programming/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "What is Pseudocode? How to Use Pseudocode to Solve Coding Problems", "description": "You might be wondering what pseudocode is and why it's so useful for writing computer programs. But before we jump into pseudocode, let's refresh our memories about what programming and coding are, in the simplest sense. Programming is the manifestation of logic. A program is a set of instructions that", "url": "https://www.freecodecamp.org/news/what-is-pseudocode-in-programming/", "image": "https://www.freecodecamp.org/news/content/images/2021/07/Pseudocode.png", "image:width": "800", "image:height": "420"}, "twitter": {"card": "summary_large_image", "title": "What is Pseudocode? How to Use Pseudocode to Solve Coding Problems", "description": "You might be wondering what pseudocode is and why it's so useful for writing computer programs. But before we jump into pseudocode, let's refresh our memories about what programming and coding are, in the simplest sense. Programming is the manifestation of logic. A program is a set of instructions that", "url": "https://www.freecodecamp.org/news/what-is-pseudocode-in-programming/", "image": "https://www.freecodecamp.org/news/content/images/2021/07/Pseudocode.png", "label1": "Written by", "data1": "Kingsley Ubah", "label2": "Filed under", "data2": "Programming, Problem Solving", "site": "@freecodecamp", "creator": "@kingchuuks"}}}