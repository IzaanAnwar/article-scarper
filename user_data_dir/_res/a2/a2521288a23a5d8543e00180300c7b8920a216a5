{"title": "How to Make Your Own VS Code Extension", "byline": "Pramono Winata", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>How to Make Your Own VS Code Extension</h1>\n<section>\n<section data-test-label=\"post-content\">\n<p>I just made my first VS Code extension. And it felt good! This article will cover basic steps to help you create your own VS Code extension. Along the way I'll share what I learned from making one for the first time. </p><p>I am not an expert at this yet, but I can truly say that <strong>nothing is as hard as it seems.</strong> ?</p><h2 id=\"let-s-talk-about-vs-code-and-its-extension-marketplace\">Let's talk about VS Code and its Extension Marketplace</h2><p>If you opened this article, you have probably at least heard about VS Code (or Visual Studio Code). If not, it's basically a light-weight code editor developed by Microsoft.</p><p>Since VS Code is a code editor, it can perform much faster and lighter than a typical IDE such as Eclipse. But with that performance comes one disadvantage: IDEs often provide better tools such as built-in linters, better code templates, code versioning tools, and some features such as auto complete.</p><p>But where VS Code actually shines is the power of the community. It allows you to install extensions that come directly from the VS Code marketplace itself. These extensions allow you to customize it however you wish. You can, for example, add a linter or any other features like colorful brackets. You can even put a nyan cat in your VS Code!</p><figure><img alt=\"Screenshot-from-2020-05-31-23-42-52\" height=\"314\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2020/06/Screenshot-from-2020-05-31-23-42-52.png\" width=\"676\"/><figcaption>Who doesn't like a nyan cat?</figcaption></figure><h2 id=\"why-should-you-create-a-vs-code-extension\">Why should you create a VS Code extension?</h2><figure><img alt=\"0-EErfJXzBUg_qzUsI\" height=\"533\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2020/06/0-EErfJXzBUg_qzUsI.jpeg\" width=\"800\"/></figure><p>Yes, \u2018why\u2019 is the keyword here. It's the first and most important thing to talk about when you want to start doing something. </p><p>Ask yourself why do you want to make it? Most people usually answer because they want to <strong>learn something</strong> or <strong>gain fame, </strong>or maybe even both. But the more reasons there are, the more motivation you will have.</p><p>One thing I can say is that you don\u2019t need to think big yet. Just make a tool that is very specific, that maybe only you will use. The first step is always the hardest. And at the end of day at least you've helped yourself with your extension.</p><p>As for myself, I built an extension because of one particular reason: I wanted to make a tool that I could use to increase my productivity. And that would maybe even help a small part of the community near me. (Spoiler: it's golang unit test generator)</p><p>That\u2019s why the extensions that I've made are very precise and have a very specific use case. I'm not going for a big mark, I am aiming to increase my productivity and learn something new. I think that is enough reason for me.</p><p>And of course everything seemed impossible at the start. Making VS Code extensions looks like some genius level piece art of work (but of course it's not). Since I have a lot of free time on my hands at the moment, I figured I might as well try it out.</p><h2 id=\"the-very-first-step-of-building-a-vs-code-extension\">The Very first step of Building a VS Code Extension</h2><p>To get started, you have to have VS Code installed. In case you don\u2019t have it yet, I will just put the download link <a href=\"https://code.visualstudio.com/download\" rel=\"noopener\">here</a>.</p><p>VS Code extensions support two main languages: JavaScript and TypeScript. So having some knowledge of either of these is pretty mandatory.</p><p>Also, make sure you have Node.js installed, since we are going to use a lot of npm packages here.</p><h2 id=\"how-to-generate-a-vs-code-extension-template\">How to Generate a VS Code Extension Template</h2><p>Ah, templates. How very convenient. VS Code already has its own template generator, so let\u2019s jump straight into it.</p><p>First, install your template generator with <code>npm install -g yo generator-code</code></p><p>Afterwards, let's run it with <code>yo code</code>. And it will prompt out this weird head thing (?) and language selection. Just pick your preferred language and proceed. (I picked JavaScript here).</p><figure><img alt=\"yo-code\" height=\"331\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2020/06/yo-code.png\" width=\"626\"/><figcaption>yo code</figcaption></figure><p>Afterwards, you will need to edit your extension name and description. You can just proceed with anything you prefer.</p><figure><img alt=\"Screenshot-from-2020-05-26-23-07-28\" height=\"349\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2020/06/Screenshot-from-2020-05-26-23-07-28.png\" width=\"707\"/><figcaption>or maybe just enter all the way</figcaption></figure><p>Now, a folder called hellovscode will be created in your home directory. Open it with VS Code by simply typing <code>code hellovscode</code> in the folder directory.</p><p>Use the <code>F5</code> key to run your extension and another window will popup. Now press <code>ctrl+shift+p</code> and find the <code>Hello World</code> command, run it, and a popup should come out in the bottom right corner. Like this:</p><figure><img alt=\"sample-hello\" height=\"361\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2020/06/sample-hello.gif\" width=\"692\"/><figcaption>Magic? Nope. Just collection of code.</figcaption></figure><p>Voil\u00e0! You've just run your first extension. But what is actually happening with all that? Don\u2019t worry, I will explain some bits below, mainly regarding two files: <code>extension.js</code> and <code>package.json</code>.</p><h2 id=\"what-is-the-extension-js-file-in-vs-code\">What is the Extension.js File in VS Code?</h2><p>This is where you will spend most of your time coding. This file will contain all your code blocks and logic flow.</p><p>There isn\u2019t much difference between this and normal Node code. But one of the main differences is registering your commands. You will come upon this block <code>vscode.commands.registerCommand('hellovscode.helloWorld'</code>.</p><p>In a nutshell, it will register your function call to be used.</p><p>Another difference is the frequent usage of the VS Code API \u2013 but we will come back to that later on.</p><p>If you looked through the code, you will see this too: <code>vscode.window.showInformationMessage('Hello World from hellovscode!');</code> </p><p>As an experiment, try changing the value of the message and try running it again.</p><h3 id=\"package-json\">Package.json</h3><p>This file is the one that basically will link the commands you created from <code>extension.js</code> with the commands that you defined.</p><p>You will see the command that you have registered above <code>hellovscode.helloWorld</code> being put as a part of the command titled <code>Hello World</code>. And that\u2019s how the command actually links to your code.</p><p>Apart from this, this file will also enable the command to be put on the right click bar. It will also filter where the command should appear (file type).</p><h2 id=\"how-to-publish-your-vs-code-plugin\">How to Publish Your VS Code Plugin</h2><p>Just in case you might want to publish your extension, I will show you how to do that here:</p><p>Step 1: First and foremost, install vsce with <code>npm install -g vsce</code>. We will use this most of the time to publish.</p><p>Step 2: If you don\u2019t have a Microsoft account yet, you should <a href=\"https://signup.live.com/\" rel=\"noopener\">register here</a> since we will be needing the access token you'll get.</p><p>Step 3: Once you have the account sign in to the <a href=\"https://marketplace.visualstudio.com/VSCode\" rel=\"noopener\">marketplace</a>. Create your <a href=\"https://aex.dev.azure.com/me?mkt=en-US\" rel=\"noopener\">organization</a> and click on it (you should see something like the below).</p><figure><img alt=\"ss\" height=\"690\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2020/06/ss.png\" width=\"1605\"/></figure><p>Step 4: Now click on the upper right corner where the red circle is and select Personal Access Token. Create your personal access token and choose all accessible organizations with full access.</p><figure><img alt=\"Screenshot-from-2020-05-29-23-56-42\" height=\"473\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2020/06/Screenshot-from-2020-05-29-23-56-42.png\" width=\"900\"/></figure><p>Step 5: Remember your token since you'll use it when uploading your extension.</p><p>Step 6: You will need to create your publisher identity now. So go to your command prompt and type <code>run vsce create-publisher YOUR_PUBLISHER_NAME</code> .<br/>Insert your own name, email, and personal access token when prompted. Your publisher account should successfully be created.</p><p>Step 7: It\u2019s publishing time! Prepare your extension environment in the command prompt and type <code>vsce package</code>. This will package your extension to marketplace format. Then type <code>vsce publish</code>.</p><p>And that\u2019s it, your extension will be published.</p><p>On a side note, when publishing you should modify your readme (at least the first part where it says <code>This is Readme for..</code> ) since vsce will detect it and ask you to modify it.</p><h2 id=\"some-additional-tips-for-building-vs-code-extensions\">Some Additional Tips for Building VS Code Extensions</h2><p>Now you should have some basic understanding of how VS Code extensions work. Here, I will share some things that I have learned.</p><h3 id=\"utilizing-vs-code-s-api\">Utilizing VS Code's API</h3><p>VS Code itself has provided a lot of APIs for you to use to make your extension. You might encounter several common obstacles when building your extension, like getting your cursor position, getting the line position, or maybe getting the highlighted word. Those all can be tackled with using the VS Code API.</p><p>You should read through their <a href=\"https://code.visualstudio.com/api/references/vscode-api\" rel=\"noopener\">documentation</a> and experiment with their API. You can even try reading through their API code! With the amount of documentation inside the code itself, you should be able to somewhat figure out which API will be most helpful.</p><h3 id=\"googling-things-read-the-docs-or-code-\">Googling things (read the docs or code)</h3><figure><img alt=\"image-169\" height=\"1333\" loading=\"lazy\" sizes=\"(min-width: 720px) 720px\" src=\"https://www.freecodecamp.org/news/content/images/2021/04/image-169.png\" srcset=\"https://www.freecodecamp.org/news/content/images/size/w600/2021/04/image-169.png 600w, https://www.freecodecamp.org/news/content/images/size/w1000/2021/04/image-169.png 1000w, https://www.freecodecamp.org/news/content/images/size/w1600/2021/04/image-169.png 1600w, https://www.freecodecamp.org/news/content/images/2021/04/image-169.png 2000w\" width=\"2000\"/></figure><p>Most of the time in our programming life, when we are stuck there is always Google or <a href=\"https://stackoverflow.com/\" rel=\"noopener\">Stack Overflow</a> that can provide quick help.</p><p>But this time it will not always save you.</p><p>First of all, googling for help in this case is quite tricky. For example, say you want to highlight a word on cursor \u2013 you might search for <code>vs code extension how to get total line...</code> or something similar.</p><p>But let me tell you, most of the time it will direct you to the real extension itself or give you manual on how to use VS Code.</p><p>One way you can make it easier for yourself is by adding the \"API\" keyword in your search, like <code>vs code extension api how to ...</code>.</p><p>Also, it is pretty hard to find the relevant answers in Google, because the developer community is not that huge, and VS Code extensions may look intimidating for many newcomers. But truthfully,<strong> it is not exactly that hard</strong>.</p><p>That\u2019s why sometimes the best way to learn how to develop a VS Code extension is by reading the documentation or the code.</p><h2 id=\"a-vs-code-extension-github-example-repository\">A VS Code Extension GitHub Example Repository</h2><p>I have provided a text manipulation example in my <a href=\"https://github.com/pramonow/vscode-extension-ut\" rel=\"noopener\">GitHub repository</a> which might help for code references (watch out for some messy code though!). The code will generate some template unit tests in the Go language.</p><h2 id=\"wrapping-up\">Wrapping up</h2><p>What I have covered here are just the basics of creating a VS Code extension. One message I want you to take to heart is that <strong>it is not as hard as it looks. </strong>Sometimes you just need to push yourself a bit and try it out.</p><p>You might come across some challenges along the way, but if you never even start you are missing out completely.</p><p>In the end, thanks for taking the time to read this. I hope you enjoyed it and started to understand all the things I just explained.</p><p>And hopefully you will also start making an extension too!</p><p><em>Happy coding to you all in this social distancing time.</em></p>\n</section>\n<hr/>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nI just made my first VS Code extension. And it felt good! This article will cover basic steps to help you create your own VS Code extension. Along the way I'll share what I learned from making one for the first time. I am not an expert at this yet, but I can truly say that nothing is as hard as it seems. ?Let's talk about VS Code and its Extension MarketplaceIf you opened this article, you have probably at least heard about VS Code (or Visual Studio Code). If not, it's basically a light-weight code editor developed by Microsoft.Since VS Code is a code editor, it can perform much faster and lighter than a typical IDE such as Eclipse. But with that performance comes one disadvantage: IDEs often provide better tools such as built-in linters, better code templates, code versioning tools, and some features such as auto complete.But where VS Code actually shines is the power of the community. It allows you to install extensions that come directly from the VS Code marketplace itself. These extensions allow you to customize it however you wish. You can, for example, add a linter or any other features like colorful brackets. You can even put a nyan cat in your VS Code!Who doesn't like a nyan cat?Why should you create a VS Code extension?Yes, \u2018why\u2019 is the keyword here. It's the first and most important thing to talk about when you want to start doing something. Ask yourself why do you want to make it? Most people usually answer because they want to learn something or gain fame, or maybe even both. But the more reasons there are, the more motivation you will have.One thing I can say is that you don\u2019t need to think big yet. Just make a tool that is very specific, that maybe only you will use. The first step is always the hardest. And at the end of day at least you've helped yourself with your extension.As for myself, I built an extension because of one particular reason: I wanted to make a tool that I could use to increase my productivity. And that would maybe even help a small part of the community near me. (Spoiler: it's golang unit test generator)That\u2019s why the extensions that I've made are very precise and have a very specific use case. I'm not going for a big mark, I am aiming to increase my productivity and learn something new. I think that is enough reason for me.And of course everything seemed impossible at the start. Making VS Code extensions looks like some genius level piece art of work (but of course it's not). Since I have a lot of free time on my hands at the moment, I figured I might as well try it out.The Very first step of Building a VS Code ExtensionTo get started, you have to have VS Code installed. In case you don\u2019t have it yet, I will just put the download link here.VS Code extensions support two main languages: JavaScript and TypeScript. So having some knowledge of either of these is pretty mandatory.Also, make sure you have Node.js installed, since we are going to use a lot of npm packages here.How to Generate a VS Code Extension TemplateAh, templates. How very convenient. VS Code already has its own template generator, so let\u2019s jump straight into it.First, install your template generator with npm install -g yo generator-codeAfterwards, let's run it with yo code. And it will prompt out this weird head thing (?) and language selection. Just pick your preferred language and proceed. (I picked JavaScript here).yo codeAfterwards, you will need to edit your extension name and description. You can just proceed with anything you prefer.or maybe just enter all the wayNow, a folder called hellovscode will be created in your home directory. Open it with VS Code by simply typing code hellovscode in the folder directory.Use the F5 key to run your extension and another window will popup. Now press ctrl+shift+p and find the Hello World command, run it, and a popup should come out in the bottom right corner. Like this:Magic? Nope. Just collection of code.Voil\u00e0! You've just run your first extension. But what is actually happening with all that? Don\u2019t worry, I will explain some bits below, mainly regarding two files: extension.js and package.json.What is the Extension.js File in VS Code?This is where you will spend most of your time coding. This file will contain all your code blocks and logic flow.There isn\u2019t much difference between this and normal Node code. But one of the main differences is registering your commands. You will come upon this block vscode.commands.registerCommand('hellovscode.helloWorld'.In a nutshell, it will register your function call to be used.Another difference is the frequent usage of the VS Code API \u2013 but we will come back to that later on.If you looked through the code, you will see this too: vscode.window.showInformationMessage('Hello World from hellovscode!'); As an experiment, try changing the value of the message and try running it again.Package.jsonThis file is the one that basically will link the commands you created from extension.js with the commands that you defined.You will see the command that you have registered above hellovscode.helloWorld being put as a part of the command titled Hello World. And that\u2019s how the command actually links to your code.Apart from this, this file will also enable the command to be put on the right click bar. It will also filter where the command should appear (file type).How to Publish Your VS Code PluginJust in case you might want to publish your extension, I will show you how to do that here:Step 1: First and foremost, install vsce with npm install -g vsce. We will use this most of the time to publish.Step 2: If you don\u2019t have a Microsoft account yet, you should register here since we will be needing the access token you'll get.Step 3: Once you have the account sign in to the marketplace. Create your organization and click on it (you should see something like the below).Step 4: Now click on the upper right corner where the red circle is and select Personal Access Token. Create your personal access token and choose all accessible organizations with full access.Step 5: Remember your token since you'll use it when uploading your extension.Step 6: You will need to create your publisher identity now. So go to your command prompt and type run vsce create-publisher YOUR_PUBLISHER_NAME .Insert your own name, email, and personal access token when prompted. Your publisher account should successfully be created.Step 7: It\u2019s publishing time! Prepare your extension environment in the command prompt and type vsce package. This will package your extension to marketplace format. Then type vsce publish.And that\u2019s it, your extension will be published.On a side note, when publishing you should modify your readme (at least the first part where it says This is Readme for.. ) since vsce will detect it and ask you to modify it.Some Additional Tips for Building VS Code ExtensionsNow you should have some basic understanding of how VS Code extensions work. Here, I will share some things that I have learned.Utilizing VS Code's APIVS Code itself has provided a lot of APIs for you to use to make your extension. You might encounter several common obstacles when building your extension, like getting your cursor position, getting the line position, or maybe getting the highlighted word. Those all can be tackled with using the VS Code API.You should read through their documentation and experiment with their API. You can even try reading through their API code! With the amount of documentation inside the code itself, you should be able to somewhat figure out which API will be most helpful.Googling things (read the docs or code)Most of the time in our programming life, when we are stuck there is always Google or Stack Overflow that can provide quick help.But this time it will not always save you.First of all, googling for help in this case is quite tricky. For example, say you want to highlight a word on cursor \u2013 you might search for vs code extension how to get total line... or something similar.But let me tell you, most of the time it will direct you to the real extension itself or give you manual on how to use VS Code.One way you can make it easier for yourself is by adding the \"API\" keyword in your search, like vs code extension api how to ....Also, it is pretty hard to find the relevant answers in Google, because the developer community is not that huge, and VS Code extensions may look intimidating for many newcomers. But truthfully, it is not exactly that hard.That\u2019s why sometimes the best way to learn how to develop a VS Code extension is by reading the documentation or the code.A VS Code Extension GitHub Example RepositoryI have provided a text manipulation example in my GitHub repository which might help for code references (watch out for some messy code though!). The code will generate some template unit tests in the Go language.Wrapping upWhat I have covered here are just the basics of creating a VS Code extension. One message I want you to take to heart is that it is not as hard as it looks. Sometimes you just need to push yourself a bit and try it out.You might come across some challenges along the way, but if you never even start you are missing out completely.In the end, thanks for taking the time to read this. I hope you enjoyed it and started to understand all the things I just explained.And hopefully you will also start making an extension too!Happy coding to you all in this social distancing time.\n\n                        \n                    \n                    \n                        \n                        \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 10113, "excerpt": "I just made my first VS Code extension. And it felt good! This article will\ncover basic steps to help you create your own VS Code extension. Along the way\nI'll share what I learned from making one for the first time. \n\nI am not an expert at this yet, but I can truly say that nothing is as hard as\nit seems. ?\n\nLet's talk about VS Code and its Extension Marketplace\nIf you opened this article, you have probably at least heard about VS Code (or\nVisual Studio Code). If not, it's basically a light-wei", "siteName": "freeCodeCamp.org", "publishedTime": "2020-06-04T04:05:00.000Z", "id": "a2521288a23a5d8543e00180300c7b8920a216a5", "url": "https://www.freecodecamp.org/news/making-vscode-extension/", "domain": "freecodecamp.org", "date": "2023-12-27T18:06:45.863265", "resultUri": "http://localhost:3000/result/a2521288a23a5d8543e00180300c7b8920a216a5", "query": {"url": ["https://www.freecodecamp.org/news/making-vscode-extension/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "How to Make Your Own VS Code Extension", "description": "I just made my first VS Code extension. And it felt good! This article will cover basic steps to help you create your own VS Code extension. Along the way I'll share what I learned from making one for the first time.  I am not an expert at this", "url": "https://www.freecodecamp.org/news/making-vscode-extension/", "image": "https://www.freecodecamp.org/news/content/images/2020/06/0-lDZSUwewtGWo6M4J.jpeg", "image:width": "800", "image:height": "542"}, "twitter": {"card": "summary_large_image", "title": "How to Make Your Own VS Code Extension", "description": "I just made my first VS Code extension. And it felt good! This article will cover basic steps to help you create your own VS Code extension. Along the way I'll share what I learned from making one for the first time.  I am not an expert at this", "url": "https://www.freecodecamp.org/news/making-vscode-extension/", "image": "https://www.freecodecamp.org/news/content/images/2020/06/0-lDZSUwewtGWo6M4J.jpeg", "label1": "Written by", "data1": "Pramono Winata", "label2": "Filed under", "data2": "Programming, Vscode, Software Engineering, Visual Studio Code", "site": "@freecodecamp", "creator": "@PramonoWinata"}}}