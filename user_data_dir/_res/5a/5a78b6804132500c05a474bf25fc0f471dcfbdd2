{"title": "Web Storage Explained \u2013 How to Use localStorage and sessionStorage in JavaScript Projects", "byline": "Oluwatobi Sofela", "dir": null, "lang": "en", "content": "<article><h1>Web Storage Explained \u2013 How to Use localStorage and sessionStorage in JavaScript Projects</h1><div class=\"page\" id=\"readability-page-1\"><section data-test-label=\"post-content\">\n<p><strong>Web Storage</strong> is what the JavaScript <a href=\"https://codesweetly.com/application-programming-interface-api-explained\">API</a> browsers provide for storing data locally and securely within a user\u2019s browser.</p><p>Session and local storage are the two main types of web storage. They are similar to regular <a href=\"https://codesweetly.com/javascript-properties-object\">properties objects</a>, but they persist (do not disappear) when the webpage reloads.</p><p>This article aims to show you exactly how the two storage objects work in JavaScript. We will also use a To-Do list exercise to practice using web storage in a web app project.</p><h2 id=\"table-of-contents\">Table of Contents</h2><!--kg-card-begin: markdown--><ol>\n<li><a href=\"#what-is-the-session-storage-object\">What is the Session Storage Object?</a></li>\n<li><a href=\"#what-is-the-local-storage-object\">What is the Local Storage Object?</a></li>\n<li><a href=\"#how-to-access-the-session-and-local-storage-objects\">How to Access the Session and Local Storage Objects</a></li>\n<li><a href=\"#what-are-web-storage-s-built-in-interfaces\">What are Web Storage\u2019s Built-In Interfaces?</a>\n<ul>\n<li><a href=\"#what-is-web-storage-s-setitem-method\">What is web storage\u2019s <code>setItem()</code> method?</a></li>\n<li><a href=\"#what-is-web-storage-s-key-method\">What is web storage\u2019s <code>key()</code> method?</a></li>\n<li><a href=\"#what-is-web-storage-s-getitem-method\">What is web storage\u2019s <code>getItem()</code> method?</a></li>\n<li><a href=\"#what-is-web-storage-s-length-property\">What is web storage\u2019s <code>length</code> property?</a></li>\n<li><a href=\"#what-is-web-storage-s-removeitem-method\">What is web storage\u2019s <code>removeItem()</code> method?</a></li>\n<li><a href=\"#what-is-web-storage-s-clear-method\">What is web storage\u2019s <code>clear()</code> method?</a></li>\n</ul>\n</li>\n<li><a href=\"#time-to-practice-with-web-storage-\">Time to Practice with Web Storage \ud83e\udd38\u200d\u2642\ufe0f\ud83c\udfcb\ufe0f\u200d\u2640\ufe0f</a>\n<ul>\n<li><a href=\"#the-problem\">The Problem</a></li>\n<li><a href=\"#your-exercise\">Your Exercise</a></li>\n<li><a href=\"#bonus-exercise\">Bonus Exercise</a></li>\n</ul>\n</li>\n<li><a href=\"#how-did-you-go-about-solving-the-web-storage-exercise\">How Did You Go About Solving the Web Storage Exercise?</a>\n<ul>\n<li><a href=\"#how-to-prevent-the-session-storage-pane-s-to-do-items-from-disappearing-on-page-reload\">How to prevent the Session Storage pane\u2019s To-Do items from disappearing on page reload</a></li>\n<li><a href=\"#how-to-prevent-the-local-storage-pane-s-to-do-items-from-disappearing-on-page-reload-or-reopen\">How to prevent the Local Storage pane\u2019s To-Do items from disappearing on page reload or reopen</a></li>\n<li><a href=\"#how-to-auto-display-the-session-section-s-previously-added-tasks-on-page-reload\">How to auto-display the Session section\u2019s previously added tasks on page reload</a></li>\n<li><a href=\"#how-to-auto-display-the-local-section-s-previously-added-tasks-on-page-reload-or-reopen\">How to auto-display the Local section\u2019s previously added tasks on page reload or reopen</a></li>\n<li><a href=\"#how-to-check-the-total-items-in-the-browser-s-session-storage\">How to check the total items in the browser\u2019s session storage</a></li>\n<li><a href=\"#how-to-display-the-local-storage-s-zeroth-index-item-s-name\">How to display the local storage\u2019s zeroth index item\u2019s name</a></li>\n<li><a href=\"#how-to-empty-the-browser-s-session-storage\">How to empty the browser\u2019s session storage</a></li>\n</ul>\n</li>\n<li><a href=\"#how-to-continue-practicing-with-web-storage-\">How to Continue Practicing with Web Storage \ud83e\uddd7\u200d\u2640\ufe0f\ud83d\ude80</a></li>\n<li><a href=\"#web-storage-vs-cookies-what-is-the-difference\">Web Storage vs. Cookies: What is the Difference?</a></li>\n<li><a href=\"#wrapping-up\">Wrapping up</a></li>\n</ol>\n<!--kg-card-end: markdown--><p>Without further ado, let\u2019s discuss session storage.</p><h2 id=\"what-is-the-session-storage-object\">What is the Session Storage Object?</h2><p>The session storage object (<code>window.sessionStorage</code>) stores data that persists for only one session of an opened tab.</p><p>In other words, whatever gets stored in the <code>window.sessionStorage</code> object will not disappear on a reload of the web page. Instead, the computer will delete the stored data only when users close the browser tab or window.</p><p><strong>Note the following:</strong></p><ul><li>The data stored inside the session storage is per-<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Origin\">origin</a> and per-instance. In other words, <code>http://freecodecamp.com</code>\u2019s <code>sessionStorage</code> object is different from <code>https://freecodecamp.com</code>\u2019s <code>sessionStorage</code> object because the two origins use different <a href=\"https://codesweetly.com/web-address-url#scheme\">schemes</a> (<code>http</code> and <code>https</code>).</li><li>Per-instance means per-window or per-tab. In other words, the <code>sessionStorage</code> object\u2019s lifespan expires once users close the instance (window or tab).</li><li>Browsers create a unique page session for each new tab or window. Therefore, users can run multiple instances of an app without interfering with each instance\u2019s session storage. (Note: Cookies do not have good support for running multiple instances of the same app. Such an attempt can cause errors such as <a href=\"https://html.spec.whatwg.org/multipage/webstorage.html#introduction-15\">double entry of bookings</a>.)</li><li>Session storage is a property of the global <code>Window</code> object. So <code>sessionStorage.setItem()</code> is equivalent to <code>window.sessionStorage.setItem()</code>.</li></ul><h2 id=\"what-is-the-local-storage-object\">What is the Local Storage Object?</h2><p>The local storage object (<code>window.localStorage</code>) stores data that persists even when users close their browser tab (or window).</p><p>In other words, whatever gets stored in the <code>window.localStorage</code> object will not disappear during a reload or reopening of the web page or when users close their browsers. Those data have no expiration time. Browsers never clear them automatically.</p><p>The computer will delete the <code>window.localStorage</code> object\u2019s content in the following instances only:</p><ol><li>When the content gets cleared through JavaScript</li><li>When the browser\u2019s cache gets cleared</li></ol><p><strong>Note the following:</strong></p><ul><li>The <code>window.localStorage</code> object\u2019s storage limit is larger than the <code>window.sessionStorage</code>.</li><li>The data stored inside the local storage is per-<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Origin\">origin</a>. In other words, <code>http://freecodecamp.com</code>\u2019s <code>localStorage</code> object is different from <code>https://freecodecamp.com</code>\u2019s <code>localStorage</code> object because the two origins use different <a href=\"https://codesweetly.com/web-address-url#scheme\">schemes</a> (<code>http</code> and <code>https</code>).</li><li>There are inconsistencies with how browsers handle the local storage of documents not served from a web server (for instance, pages with a <code>file:</code> URL scheme). Therefore, the <code>localStorage</code> object may behave differently among browsers when used with non-HTTP URLs, such as <code>file:///document/on/users/local/system.html</code>.</li><li>Local storage is a property of the global <code>Window</code> object. Therefore, <code>localStorage.setItem()</code> is equivalent to <code>window.localStorage.setItem()</code>.</li></ul><h2 id=\"how-to-access-the-session-and-local-storage-objects\">How to Access the Session and Local Storage Objects</h2><p>You can access the two web storages by:</p><ol><li>Using the same technique as you'd use for <a href=\"https://codesweetly.com/javascript-properties-object#how-to-access-an-objects-value\">accessing regular JavaScript objects</a></li><li>Using web storage\u2019s built-in interfaces</li></ol><p>For instance, consider the snippet below:</p><pre tabindex=\"0\"><code>sessionStorage.bestColor = \"Green\";\nsessionStorage[\"bestColor\"] = \"Green\";\nsessionStorage.setItem(\"bestColor\", \"Green\");</code></pre><p>The three statements above do the same thing\u2014they set <code>bestColor</code>\u2019s value. But the third line is recommended because it uses web storage\u2019s <code>setItem()</code> method.</p><p><strong>Tip:</strong> you should prefer using the web storage\u2019s built-in interfaces to avoid <a href=\"https://2ality.com/2012/01/objects-as-maps.html\">the pitfalls of using objects as key/value stores</a>.</p><p>Let\u2019s discuss more on the web storage\u2019s built-in interfaces below.</p><h2 id=\"what-are-web-storage-s-built-in-interfaces\">What are Web Storage\u2019s Built-In Interfaces?</h2><p>The web storage built-in interfaces are the recommended tools for reading and manipulating a browser\u2019s <code>sessionStorage</code> and <code>localStorage</code> objects.</p><p>The six (6) built-in interfaces are:</p><ul><li><code>setItem()</code></li><li><code>key()</code></li><li><code>getItem()</code></li><li><code>length</code></li><li><code>removeItem()</code></li><li><code>clear()</code></li></ul><p>Let\u2019s discuss each one now.</p><h3 id=\"what-is-web-storage-s-setitem-method\">What is web storage\u2019s <code>setItem()</code> method?</h3><p>The <code>setItem()</code> method stores its <code>key</code> and <code>value</code> arguments inside the specified web storage object.</p><h4 id=\"syntax-of-the-setitem-method\">Syntax of the <code>setItem()</code> method</h4><p><code>setItem()</code> accepts two required <a href=\"https://codesweetly.com/javascript-arguments\">arguments</a>. Here is the syntax:</p><pre tabindex=\"0\"><code>webStorageObject.setItem(key, value);</code></pre><ul><li><code>webStorageObject</code> represents the storage object (<code>localStorage</code> or <code>sessionStorage</code>) you wish to manipulate.</li><li><code>key</code> is the first argument accepted by <code>setItem()</code>. It is a required string argument representing the name of the web storage property you want to create or update.</li><li><code>value</code> is the second argument accepted by <code>setItem()</code>. It is a required string argument specifying the value of the <code>key</code> you are creating or updating.</li></ul><ul><li>The <code>key</code> and <code>value</code> arguments are always strings.</li><li>Suppose you provide an integer as a <code>key</code> or <code>value</code>. In that case, browsers will convert them to strings automatically.</li><li><code>setItem()</code> may display an error message if the storage object is full.</li></ul><h4 id=\"example-1-how-to-store-data-in-the-session-storage-object\">Example 1: How to store data in the session storage object</h4><ol><li>Invoke <code>sessionStorage</code>\u2019s <code>setItem()</code> method.</li><li>Provide the name and value of the data you wish to store.</li></ol><pre tabindex=\"0\"><code>// Store color: \"Pink\" inside the browser's session storage object:\nsessionStorage.setItem(\"color\", \"Pink\");\n\n// Log the session storage object to the console:\nconsole.log(sessionStorage);\n\n// The invocation above will return:\n{color: \"Pink\"}</code></pre><p><a href=\"https://codesweetly.com/try-it-sdk/javascript/web-storage-apis/setitem/js-25hgkp\"><strong>Try Editing It</strong></a></p><p><strong>Note:</strong> Your browser\u2019s session storage may contain additional data if it already uses the storage object to store information.</p><h4 id=\"example-2-how-to-store-data-in-the-local-storage-object\">Example 2: How to store data in the local storage object</h4><ol><li>Invoke <code>localStorage</code>\u2019s <code>setItem()</code> method.</li><li>Provide the name and value of the data you wish to store.</li></ol><pre tabindex=\"0\"><code>// Store color: \"Pink\" inside the browser's local storage object:\nlocalStorage.setItem(\"color\", \"Pink\");\n\n// Log the local storage object to the console:\nconsole.log(localStorage);\n\n// The invocation above will return:\n{color: \"Pink\"}</code></pre><p><a href=\"https://codesweetly.com/try-it-sdk/javascript/web-storage-apis/setitem/js-2hluvw\"><strong>Try Editing It</strong></a></p><ul><li>Your browser\u2019s local storage may contain additional data if it already uses the storage object to store information.</li><li>It is best to serialize objects before storing them in local or session storage. Otherwise, the computer will store the object as <code>\"[object Object]\"</code>.</li></ul><h4 id=\"example-3-browsers-use-object-object-for-non-serialized-objects-in-the-web-storage\">Example 3: Browsers use <code>\"[object Object]\"</code> for non-serialized objects in the web storage</h4><pre tabindex=\"0\"><code>// Store myBio object inside the browser's session storage object:\nsessionStorage.setItem(\"myBio\", { name: \"Oluwatobi\" });\n\n// Log the session storage object to the console:\nconsole.log(sessionStorage);\n\n// The invocation above will return:\n{myBio: \"[object Object]\", length: 1}</code></pre><p><a href=\"https://codesweetly.com/try-it-sdk/javascript/web-storage-apis/setitem/js-n8m7hc\"><strong>Try Editing It</strong></a></p><p>You can see that the computer stored the object as <code>\"[object Object]\"</code> because we did not serialize it.</p><h4 id=\"example-4-how-to-store-serialized-objects-in-the-web-storage\">Example 4: How to store serialized objects in the web storage</h4><pre tabindex=\"0\"><code>// Store myBio object inside the browser's session storage object:\nsessionStorage.setItem(\"myBio\", JSON.stringify({ name: \"Oluwatobi\" }));\n\n// Log the session storage object to the console:\nconsole.log(sessionStorage);\n\n// The invocation above will return:\n{myBio: '{\"name\":\"Oluwatobi\"}', length: 1}</code></pre><p><a href=\"https://codesweetly.com/try-it-sdk/javascript/web-storage-apis/setitem/js-edfh43\"><strong>Try Editing It</strong></a></p><p>We used <code>JSON.stringify()</code> to convert the object to JSON before storing it in the web storage.</p><p><strong>Tip:</strong> Learn <a href=\"https://codesweetly.com/json-explained#how-to-convert-a-json-text-to-a-javascript-object\">how to convert JSON to JavaScript objects</a>.</p><h3 id=\"what-is-web-storage-s-key-method\">What is web storage\u2019s <code>key()</code> method?</h3><p>The <code>key()</code> method retrieves a specified web storage item\u2019s name (key).</p><h4 id=\"syntax-of-the-key-method\">Syntax of the <code>key()</code> method</h4><p><code>key()</code> accepts one required argument. Here is the syntax:</p><pre tabindex=\"0\"><code>webStorageObject.key(index);</code></pre><ul><li><code>webStorageObject</code> represents the storage object (<code>localStorage</code> or <code>sessionStorage</code>) whose key you wish to get.</li><li><code>index</code> is a required argument. It is an <a href=\"https://codesweetly.com/web-tech-terms-i#integer\">integer</a> specifying the <a href=\"https://codesweetly.com/web-tech-terms-i#index\">index</a> of the item whose key you want to get.</li></ul><h4 id=\"example-1-how-to-get-the-name-of-an-item-in-the-session-storage-object\">Example 1: How to get the name of an item in the session storage object</h4><ol><li>Invoke <code>sessionStorage</code>\u2019s <code>key()</code> method.</li><li>Provide the index of the item whose name you wish to get.</li></ol><pre tabindex=\"0\"><code>// Store carColor: \"Pink\" inside the browser's session storage object:\nsessionStorage.setItem(\"carColor\", \"Pink\");\n\n// Store pcColor: \"Yellow\" inside the session storage object:\nsessionStorage.setItem(\"pcColor\", \"Yellow\");\n\n// Store laptopColor: \"White\" inside the session storage object:\nsessionStorage.setItem(\"laptopColor\", \"White\");\n\n// Get the name of the item at index 1:\nsessionStorage.key(1);</code></pre><p><a href=\"https://codesweetly.com/try-it-sdk/javascript/web-storage-apis/key/js-tptqtg\"><strong>Try Editing It</strong></a></p><p><strong>Important:</strong> The <a href=\"https://en.wikipedia.org/wiki/User_agent\">user-agent</a> defines the order of items in the session storage. In other words, <code>key()</code>\u2019s output may vary based on how the user-agent orders the web storage\u2019s items. So you shouldn't rely on <code>key()</code> to return a constant value.</p><h4 id=\"example-2-how-to-get-the-name-of-an-item-in-the-local-storage-object\">Example 2: How to get the name of an item in the local storage object</h4><ol><li>Invoke <code>localStorage</code>\u2019s <code>key()</code> method.</li><li>Provide the index of the item whose name you wish to get.</li></ol><pre tabindex=\"0\"><code>// Store carColor: \"Pink\" inside the browser's local storage object:\nlocalStorage.setItem(\"carColor\", \"Pink\");\n\n// Store pcColor: \"Yellow\" inside the local storage object:\nlocalStorage.setItem(\"pcColor\", \"Yellow\");\n\n// Store laptopColor: \"White\" inside the local storage object:\nlocalStorage.setItem(\"laptopColor\", \"White\");\n\n// Get the name of the item at index 1:\nlocalStorage.key(1);</code></pre><p><a href=\"https://codesweetly.com/try-it-sdk/javascript/web-storage-apis/key/js-tclrbd\"><strong>Try Editing It</strong></a></p><p><strong>Important:</strong> The user-agent defines the order of items in the local storage. In other words, <code>key()</code>\u2019s output may vary based on how the user-agent orders the web storage\u2019s items. So you shouldn't rely on <code>key()</code> to return a constant value.</p><h3 id=\"what-is-web-storage-s-getitem-method\">What is web storage\u2019s <code>getItem()</code> method?</h3><p>The <code>getItem()</code> method retrieves the value of a specified web storage item.</p><h4 id=\"syntax-of-the-getitem-method\">Syntax of the <code>getItem()</code> method</h4><p><code>getItem()</code> accepts one required argument. Here is the syntax:</p><pre tabindex=\"0\"><code>webStorageObject.getItem(key);</code></pre><ul><li><code>webStorageObject</code> represents the storage object (<code>localStorage</code> or <code>sessionStorage</code>) whose item you wish to get.</li><li><code>key</code> is a required argument. It is a <a href=\"https://codesweetly.com/javascript-primitive-data-type#string-primitive-data-type\">string</a> specifying the name of the web storage <a href=\"https://codesweetly.com/javascript-properties-object#syntax-of-a-javascript-object\">property</a> whose value you want to get.</li></ul><h4 id=\"example-1-how-to-get-data-from-the-session-storage-object\">Example 1: How to get data from the session storage object</h4><ol><li>Invoke <code>sessionStorage</code>\u2019s <code>getItem()</code> method.</li><li>Provide the name of the data you wish to get.</li></ol><pre tabindex=\"0\"><code>// Store color: \"Pink\" inside the browser's session storage object:\nsessionStorage.setItem(\"color\", \"Pink\");\n\n// Get color's value from the session storage:\nsessionStorage.getItem(\"color\");\n\n// The invocation above will return:\n\"Pink\"</code></pre><p><a href=\"https://codesweetly.com/try-it-sdk/javascript/web-storage-apis/getitem/js-xk9auv\"><strong>Try Editing It</strong></a></p><h4 id=\"example-2-how-to-get-data-from-the-local-storage-object\">Example 2: How to get data from the local storage object</h4><ol><li>Invoke <code>localStorage</code>\u2019s <code>getItem()</code> method.</li><li>Provide the name of the data you wish to get.</li></ol><pre tabindex=\"0\"><code>// Store color: \"Pink\" inside the browser's local storage object:\nlocalStorage.setItem(\"color\", \"Pink\");\n\n// Get color's value from the local storage:\nlocalStorage.getItem(\"color\");\n\n// The invocation above will return:\n\"Pink\"</code></pre><p><a href=\"https://codesweetly.com/try-it-sdk/javascript/web-storage-apis/getitem/js-terw5e\"><strong>Try Editing It</strong></a></p><p><strong>Note:</strong> The <code>getItem()</code> method will return <code>null</code> if its argument does not exist in the specified web storage.</p><h3 id=\"what-is-web-storage-s-length-property\">What is web storage\u2019s <code>length</code> property?</h3><p>The <code>length</code> property returns the number of <a href=\"https://codesweetly.com/javascript-properties-object#syntax-of-a-javascript-object\">properties</a> in the specified web storage.</p><h4 id=\"syntax-of-the-length-property\">Syntax of the <code>length</code> property</h4><p>Here is <code>length</code>\u2019s syntax:</p><pre tabindex=\"0\"><code>webStorageObject.length;</code></pre><p><code>webStorageObject</code> represents the storage object (<code>localStorage</code> or <code>sessionStorage</code>) whose length you wish to verify.</p><h4 id=\"example-1-how-to-verify-the-number-of-items-in-the-session-storage-object\">Example 1: How to verify the number of items in the session storage object</h4><pre tabindex=\"0\"><code>// Store carColor: \"Pink\" inside the browser's session storage object:\nsessionStorage.setItem(\"carColor\", \"Pink\");\n\n// Store pcColor: \"Yellow\" inside the session storage object:\nsessionStorage.setItem(\"pcColor\", \"Yellow\");\n\n// Store laptopColor: \"White\" inside the session storage object:\nsessionStorage.setItem(\"laptopColor\", \"White\");\n\n// Verify the number of items in the session storage:\nsessionStorage.length;\n\n// The invocation above may return:\n3</code></pre><p><a href=\"https://codesweetly.com/try-it-sdk/javascript/web-storage-apis/length/js-zasgst\"><strong>Try Editing It</strong></a></p><p><strong>Note:</strong> Your <code>sessionStorage.length</code> invocation may return a value greater than <code>3</code> if your browser\u2019s session storage already contains some stored information.</p><h4 id=\"example-2-how-to-verify-the-number-of-items-in-the-local-storage-object\">Example 2: How to verify the number of items in the local storage object</h4><pre tabindex=\"0\"><code>// Store carColor: \"Pink\" inside the browser's local storage object:\nlocalStorage.setItem(\"carColor\", \"Pink\");\n\n// Store pcColor: \"Yellow\" inside the local storage object:\nlocalStorage.setItem(\"pcColor\", \"Yellow\");\n\n// Store laptopColor: \"White\" inside the local storage object:\nlocalStorage.setItem(\"laptopColor\", \"White\");\n\n// Verify the number of items in the local storage:\nlocalStorage.length;\n\n// The invocation above may return:\n3</code></pre><p><a href=\"https://codesweetly.com/try-it-sdk/javascript/web-storage-apis/length/js-3f6lac\"><strong>Try Editing It</strong></a></p><p><strong>Note:</strong> Your <code>localStorage.length</code> invocation may return a value greater than <code>3</code> if your browser's local storage already contains some stored information.</p><h3 id=\"what-is-web-storage-s-removeitem-method\">What is web storage\u2019s <code>removeItem()</code> method?</h3><p>The <code>removeItem()</code> method removes a property from the specified web storage.</p><h4 id=\"syntax-of-the-removeitem-method\">Syntax of the <code>removeItem()</code> Method</h4><p><code>removeItem()</code> accepts one required argument. Here is the syntax:</p><pre tabindex=\"0\"><code>webStorageObject.removeItem(key);</code></pre><ul><li><code>webStorageObject</code> represents the storage object (<code>localStorage</code> or <code>sessionStorage</code>) whose item you wish to remove.</li><li><code>key</code> is a required argument. It is a string specifying the name of the web storage property you want to remove.</li></ul><h4 id=\"example-1-how-to-remove-data-from-the-session-storage-object\">Example 1: How to remove data from the session storage object</h4><ol><li>Invoke <code>sessionStorage</code>\u2019s <code>removeItem()</code> method.</li><li>Provide the name of the data you wish to remove.</li></ol><pre tabindex=\"0\"><code>// Store carColor: \"Pink\" inside the browser's session storage object:\nsessionStorage.setItem(\"carColor\", \"Pink\");\n\n// Store pcColor: \"Yellow\" inside the session storage object:\nsessionStorage.setItem(\"pcColor\", \"Yellow\");\n\n// Store laptopColor: \"White\" inside the session storage object:\nsessionStorage.setItem(\"laptopColor\", \"White\");\n\n// Remove the pcColor item from the session storage:\nsessionStorage.removeItem(\"pcColor\");\n\n// Confirm whether the pcColor item still exists in the session storage:\nsessionStorage.getItem(\"pcColor\");\n\n// The invocation above will return:\nnull</code></pre><p><a href=\"https://codesweetly.com/try-it-sdk/javascript/web-storage-apis/removeitem/js-1mywnh\"><strong>Try Editing It</strong></a></p><p><strong>Note:</strong> The <code>removeItem()</code> method will do nothing if its argument does not exist in the session storage.</p><h4 id=\"example-2-how-to-remove-data-from-the-local-storage-object\">Example 2: How to remove data from the local storage object</h4><ol><li>Invoke <code>localStorage</code>\u2019s <code>removeItem()</code> method.</li><li>Provide the name of the data you wish to remove.</li></ol><pre tabindex=\"0\"><code>// Store carColor: \"Pink\" inside the browser's local storage object:\nlocalStorage.setItem(\"carColor\", \"Pink\");\n\n// Store pcColor: \"Yellow\" inside the local storage object:\nlocalStorage.setItem(\"pcColor\", \"Yellow\");\n\n// Store laptopColor: \"White\" inside the local storage object:\nlocalStorage.setItem(\"laptopColor\", \"White\");\n\n// Remove the pcColor item from the local storage:\nlocalStorage.removeItem(\"pcColor\");\n\n// Confirm whether the pcColor item still exists in the local storage:\nlocalStorage.getItem(\"pcColor\");\n\n// The invocation above will return:\nnull</code></pre><p><a href=\"https://codesweetly.com/try-it-sdk/javascript/web-storage-apis/removeitem/js-8doou3\"><strong>Try Editing It</strong></a></p><p><strong>Note:</strong> The <code>removeItem()</code> method will do nothing if its argument does not exist in the local storage.</p><h3 id=\"what-is-web-storage-s-clear-method\">What is web storage\u2019s <code>clear()</code> method?</h3><p>The <code>clear()</code> method clears (deletes) all the items in the specified web storage.</p><h4 id=\"syntax-of-the-clear-method\">Syntax of the <code>clear()</code> Method</h4><p><code>clear()</code> accepts no argument. Here is the syntax:</p><pre tabindex=\"0\"><code>webStorageObject.clear();</code></pre><p><code>webStorageObject</code> represents the storage object (<code>localStorage</code> or <code>sessionStorage</code>) whose items you wish to clear.</p><h4 id=\"example-1-how-to-clear-all-items-from-the-session-storage-object\">Example 1: How to clear all items from the session storage object</h4><pre tabindex=\"0\"><code>// Store carColor: \"Pink\" inside the browser's session storage object:\nsessionStorage.setItem(\"carColor\", \"Pink\");\n\n// Store pcColor: \"Yellow\" inside the session storage object:\nsessionStorage.setItem(\"pcColor\", \"Yellow\");\n\n// Store laptopColor: \"White\" inside the session storage object:\nsessionStorage.setItem(\"laptopColor\", \"White\");\n\n// Clear all items from the session storage:\nsessionStorage.clear();\n\n// Confirm whether the session storage still contains any item:\nconsole.log(sessionStorage);\n\n// The invocation above will return:\n{length: 0}</code></pre><p><a href=\"https://codesweetly.com/try-it-sdk/javascript/web-storage-apis/clear/js-an86yu\"><strong>Try Editing It</strong></a></p><h4 id=\"example-2-how-to-clear-all-items-from-the-local-storage-object\">Example 2: How to clear all items from the local storage object</h4><pre tabindex=\"0\"><code>// Store carColor: \"Pink\" inside the browser's local storage object:\nlocalStorage.setItem(\"carColor\", \"Pink\");\n\n// Store pcColor: \"Yellow\" inside the local storage object:\nlocalStorage.setItem(\"pcColor\", \"Yellow\");\n\n// Store laptopColor: \"White\" inside the local storage object:\nlocalStorage.setItem(\"laptopColor\", \"White\");\n\n// Clear all items from the local storage:\nlocalStorage.clear();\n\n// Confirm whether the local storage still contains any item:\nconsole.log(localStorage);\n\n// The invocation above will return:\n{length: 0}</code></pre><p><a href=\"https://codesweetly.com/try-it-sdk/javascript/web-storage-apis/clear/js-w5vyem\"><strong>Try Editing It</strong></a></p><p>Now that we know what web storage is and how to access it, we can practice using it in a JavaScript project.</p><h2 id=\"time-to-practice-with-web-storage-\">Time to Practice with Web Storage \ud83e\udd38\u200d\u2642\ufe0f\ud83c\udfcb\ufe0f\u200d\u2640\ufe0f</h2><p>Consider the following To-Do List app:</p><figure data-test-label=\"fitted\">\n\n</figure><h3 id=\"the-problem\">The Problem</h3><p>The issue with the <a href=\"https://codesweetly.com/try-it-sdk/javascript/web-storage-apis/to-do-app/js-mgl6ie\">To-Do List app</a> is this:</p><ul><li>Tasks disappear whenever users refresh the webpage.</li></ul><h3 id=\"your-exercise\">Your Exercise</h3><p>Use the appropriate Web Storage APIs to accomplish the following tasks:</p><ol><li>Prevent the Session pane\u2019s To-Do items from disappearing whenever users reload the browser.</li><li>Prevent the Local section\u2019s To-Do items from disappearing whenever users reload or close their browser tab (or window).</li><li>Auto-display the Session section's previously added tasks on page reload.</li><li>Auto-display the Local section's previously added tasks on page reload (or browser reopen).</li></ol><h3 id=\"bonus-exercise\">Bonus Exercise</h3><p>Use your browser\u2019s console to:</p><ol><li>Check the number of items in your browser\u2019s session storage object.</li><li>Display the name of your local storage\u2019s zeroth index item.</li><li>Delete all the items in your browser\u2019s session storage.</li></ol><p><a href=\"https://codesweetly.com/try-it-sdk/javascript/web-storage-apis/to-do-app/js-mgl6ie\"><strong>Try the Web Storage Exercise</strong></a></p><p><strong>Note:</strong> You will benefit much more from this tutorial if you attempt the exercise yourself.</p><p>If you get stuck, don\u2019t be discouraged. Instead, review the lesson and give it another try.</p><p>Once you\u2019ve given it your best shot (you\u2019ll only cheat yourself if you don\u2019t!), we can discuss how I approached the exercise below.</p><h2 id=\"how-did-you-go-about-solving-the-web-storage-exercise\">How Did You Go About Solving the Web Storage Exercise?</h2><p>Below are feasible ways to get the exercise done.</p><h3 id=\"how-to-prevent-the-session-storage-pane-s-to-do-items-from-disappearing-on-page-reload\">How to prevent the Session Storage pane\u2019s To-Do items from disappearing on page reload</h3><p>Whenever users click the \u201cAdd task\u201d button,</p><ol><li>Get existing session storage\u2019s content, if any. Otherwise, return an empty array.</li><li>Merge the existing to-do items with the user\u2019s new input.</li><li>Add the new to-do list to the browser\u2019s session storage object.</li></ol><p><strong>Here\u2019s the code:</strong></p><pre tabindex=\"0\"><code>sessionAddTaskBtn.addEventListener('click', () =&gt; {\n  // Get existing session storage's content, if any. Otherwise, return an empty array:\n  const currentTodoArray =\n    JSON.parse(sessionStorage.getItem('codesweetlyStore')) || [];\n\n  // Merge currentTodoArray with the user's new input:\n  const newTodoArray = [\n    ...currentTodoArray,\n    { checked: false, text: sessionInputEle.value },\n  ];\n\n  // Add newTodoArray to the session storage object:\n  sessionStorage.setItem('codesweetlyStore', JSON.stringify(newTodoArray));\n\n  const todoLiElements = createTodoLiElements(newTodoArray);\n  sessionTodosContainer.replaceChildren(...todoLiElements);\n  sessionInputEle.value = '';\n});</code></pre><p><a href=\"https://codesweetly.com/try-it-sdk/javascript/web-storage-apis/to-do-app/js-txyt66\"><strong>Try Editing It</strong></a></p><p><strong>Note:</strong> The three dots (<code>...</code>) preceding the <code>currentTodoArray</code> variable represent the <a href=\"https://codesweetly.com/spread-operator\">spread operator</a>. We used it in the <code>newTodoArray</code> object to copy <code>currentTodoArray</code>\u2019s items into <code>newTodoArray</code>.</p><h3 id=\"how-to-prevent-the-local-storage-pane-s-to-do-items-from-disappearing-on-page-reload-or-reopen\">How to prevent the Local Storage pane\u2019s To-Do items from disappearing on page reload or reopen</h3><ol><li>Get existing local storage\u2019s content, if any. Otherwise, return an empty array.</li><li>Merge the existing to-do items with the user\u2019s new input.</li><li>Add the new to-do list to the browser\u2019s local storage object.</li></ol><p><strong>Here\u2019s the code:</strong></p><pre tabindex=\"0\"><code>localAddTaskBtn.addEventListener('click', () =&gt; {\n  // Get existing local storage's content, if any. Otherwise, return an empty array:\n  const currentTodoArray =\n    JSON.parse(localStorage.getItem('codesweetlyStore')) || [];\n\n  // Merge currentTodoArray with the user's new input:\n  const newTodoArray = [\n    ...currentTodoArray,\n    { checked: false, text: localInputEle.value },\n  ];\n\n  // Add newTodoArray to the local storage object:\n  sessionStorage.setItem('codesweetlyStore', JSON.stringify(newTodoArray));\n\n  const todoLiElements = createTodoLiElements(newTodoArray);\n  localTodosContainer.replaceChildren(...todoLiElements);\n  localInputEle.value = '';\n});</code></pre><p><a href=\"https://codesweetly.com/try-it-sdk/javascript/web-storage-apis/to-do-app/js-dpuffp\"><strong>Try Editing It</strong></a></p><p><strong>Note:</strong> The <code>localTodosContainer.replaceChildren(...todoLiElements)</code> statement tells the browser to replace <code>localTodosContainer</code>\u2019s current children elements with the list of <code>&lt;li&gt;</code>s in the <code>todoLiElements</code> array.</p><h3 id=\"how-to-auto-display-the-session-section-s-previously-added-tasks-on-page-reload\">How to auto-display the Session section\u2019s previously added tasks on page reload</h3><p>Whenever users reload the page,</p><ol><li>Get existing session storage\u2019s content, if any. Otherwise, return an empty array.</li><li>Use the retrieved content to create <code>&lt;li&gt;</code> elements.</li><li>Populate the tasks display space with the <code>&lt;li&gt;</code> elements.</li></ol><p><strong>Here\u2019s the code:</strong></p><pre tabindex=\"0\"><code>window.addEventListener('load', () =&gt; {\n  // Get existing session storage's content, if any. Otherwise, return an empty array:\n  const sessionTodoArray =\n    JSON.parse(sessionStorage.getItem('codesweetlyStore')) || [];\n\n  // Use the retrieved sessionTodoArray to create &lt;li&gt; elements:\n  const todoLiElements = createTodoLiElements(sessionTodoArray);\n\n  // Populate the tasks display space with the todoLiElements:\n  sessionTodosContainer.replaceChildren(...todoLiElements);\n});</code></pre><p><a href=\"https://codesweetly.com/try-it-sdk/javascript/web-storage-apis/to-do-app/js-zga551\"><strong>Try Editing It</strong></a></p><h3 id=\"how-to-auto-display-the-local-section-s-previously-added-tasks-on-page-reload-or-reopen\">How to auto-display the Local section\u2019s previously added tasks on page reload or reopen</h3><p>Whenever users reload or reopen the page,</p><ol><li>Get existing local storage\u2019s content, if any. Otherwise, return an empty array.</li><li>Use the retrieved content to create <code>&lt;li&gt;</code> elements.</li><li>Populate the tasks display space with the <code>&lt;li&gt;</code> elements.</li></ol><p><strong>Here\u2019s the code:</strong></p><pre tabindex=\"0\"><code>window.addEventListener('load', () =&gt; {\n  // Get existing local storage's content, if any. Otherwise, return an empty array:\n  const localTodoArray =\n    JSON.parse(localStorage.getItem('codesweetlyStore')) || [];\n\n  // Use the retrieved localTodoArray to create &lt;li&gt; elements:\n  const todoLiElements = createTodoLiElements(localTodoArray);\n\n  // Populate the tasks display space with the todoLiElements:\n  localTodosContainer.replaceChildren(...todoLiElements);\n});</code></pre><p><a href=\"https://codesweetly.com/try-it-sdk/javascript/web-storage-apis/to-do-app/js-srmnst\"><strong>Try Editing It</strong></a></p><h3 id=\"how-to-check-the-total-items-in-the-browser-s-session-storage\">How to check the total items in the browser\u2019s session storage</h3><p>Use session storage\u2019s <code>length</code> property like so:</p><pre tabindex=\"0\"><code>console.log(sessionStorage.length);</code></pre><p><a href=\"https://codesweetly.com/try-it-sdk/javascript/web-storage-apis/to-do-app/js-m4pmhf\"><strong>Try Editing It</strong></a></p><h3 id=\"how-to-display-the-local-storage-s-zeroth-index-item-s-name\">How to display the local storage\u2019s zeroth index item\u2019s name</h3><p>Use the local storage\u2019s <code>key()</code> method as follows:</p><pre tabindex=\"0\"><code>console.log(localStorage.key(0));</code></pre><p><a href=\"https://codesweetly.com/try-it-sdk/javascript/web-storage-apis/to-do-app/js-th8xr7\"><strong>Try Editing It</strong></a></p><h3 id=\"how-to-empty-the-browser-s-session-storage\">How to empty the browser\u2019s session storage</h3><p>Use the session storage\u2019s <code>clear()</code> method as follows:</p><pre tabindex=\"0\"><code>sessionStorage.clear();</code></pre><h2 id=\"how-to-continue-practicing-with-web-storage-\">How to Continue Practicing with Web Storage \ud83e\uddd7\u200d\u2640\ufe0f\ud83d\ude80</h2><p>The to-do app still has a lot of potential. For instance, you can:</p><ul><li>Convert it to a React TypeScript application.</li><li>Make it keyboard accessible.</li><li>Allow users to delete or edit individual tasks.</li><li>Allow users to star (mark as important) specific tasks.</li><li>Let users specify due dates.</li></ul><p>So, feel free to continue developing what we\u2019ve built in this tutorial so you can better understand the web storage objects.</p><p>For instance, here\u2019s my attempt at <a href=\"https://codesweetly.com/try-it-sdk/javascript/web-storage-apis/to-do-app/js-ax8tvk\">making the two panes functional</a>:</p><figure data-test-label=\"fitted\">\n\n</figure><p>Before we wrap up our discussion, you should know some differences between web storage and cookies. So, let\u2019s talk about that below.</p><h2 id=\"web-storage-vs-cookies-what-is-the-difference\">Web Storage vs. Cookies: What is the Difference?</h2><p>Web storage and cookies are two main ways to store data locally within a user\u2019s browser. But they work differently. Below are the main distinctions between them.</p><h3 id=\"storage-limit\">Storage limit</h3><p><strong>Cookies:</strong> Have 4 kilobytes maximum <a href=\"https://docs.devexpress.com/AspNet/11912/common-concepts/cookies-support#browser-limitations\">storage limit</a>.</p><p><strong>Web storage:</strong> Can store a lot more than 4 kilobytes of data. For instance, Safari 8 can store up to 5 MB, while Firefox 34 permits 10 MB.</p><h3 id=\"data-transfer-to-the-server\">Data transfer to the server</h3><p><strong>Cookies: </strong>Transfer data to the server whenever browsers send HTTP requests to the web server.</p><p><strong>Web storage: </strong>Never transfers data to the server.</p><p><strong>Note:</strong> It is a waste of users\u2019 bandwidth to send data to the server if such information is needed only by the client (browser), not the server.</p><h3 id=\"weak-integrity-and-confidentiality\">Weak integrity and confidentiality</h3><p><strong>Cookies:</strong> Suffer from <a href=\"https://datatracker.ietf.org/doc/html/rfc6265#section-8.6\">weak integrity</a> and <a href=\"https://datatracker.ietf.org/doc/html/rfc6265#section-8.5\">weak confidentiality</a> issues.</p><p><strong>Web storage:</strong> Do not suffer from weak integrity and confidentiality issues because it stores data per <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Origin\">origin</a>.</p><h3 id=\"property\">Property</h3><p><strong>Cookies: </strong>Cookies are a property of the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document\"><code>Document</code></a> object.</p><p><strong>Web storage: </strong>Web storage is a property of the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window\"><code>Window</code></a> object.</p><h3 id=\"expiration\">Expiration</h3><p><strong>Cookie: </strong>You can specify a cookie\u2019s expiration date.</p><p><strong>Web storage: </strong>Browsers determine web storage\u2019s expiration date.</p><h3 id=\"retrieving-individual-data\">Retrieving individual data</h3><p><strong>Cookies: </strong>There\u2019s no way to retrieve individual data. You always have to recall all the data to read any single one.</p><p><strong>Web storage: </strong>You can choose the specific data you wish to retrieve.</p><h3 id=\"the-syntax-for-storing-data\">The syntax for storing data</h3><pre tabindex=\"0\"><code>document.cookie = \"key=value\";</code></pre><p><strong>Web storage:</strong></p><pre tabindex=\"0\"><code>webStorageObject.setItem(key, value);</code></pre><h3 id=\"the-syntax-for-reading-data\">The syntax for reading data</h3><pre tabindex=\"0\"><code>document.cookie;</code></pre><p><strong>Web storage:</strong></p><pre tabindex=\"0\"><code>webStorageObject.getItem(key);</code></pre><h3 id=\"the-syntax-for-removing-data\">The syntax for removing data</h3><pre tabindex=\"0\"><code>document.cookie = \"key=; expires=Thu, 01 May 1930 00:00:00 UTC\";</code></pre><p>The snippet above deletes the cookie by assigning an empty value to the <code>key</code> property and setting a past expiration date.</p><p><strong>Web storage:</strong></p><pre tabindex=\"0\"><code>webStorageObject.removeItem(key);</code></pre><h2 id=\"wrapping-up\">Wrapping up</h2><p>In this article, we discussed how to use web storage and its built-in interfaces. We also used a to-do list project to practice using the local and session storage objects to store data locally and securely within users\u2019 browsers.</p><p>Thanks for reading!</p><h3 id=\"and-here-s-a-useful-react-typescript-resource-\">And here\u2019s a useful React TypeScript resource:</h3><p>I wrote a book about <a href=\"https://amzn.to/3Pa4bI4\">Creating NPM Packages</a>!</p><p>It is a beginner-friendly book that takes you from zero to creating, testing, and publishing NPM packages like a pro.</p><!--kg-card-begin: markdown--><p><a href=\"https://amzn.to/3Pa4bI4\"><img alt=\"Creating NPM Package Book Now Available at Amazon\" height=\"500\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2023/09/creating-npm-package-banner-codesweetly.png\" width=\"1500\"/></a></p>\n<!--kg-card-end: markdown-->\n</section><p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p></div></article>", "textContent": "\n                            \nWeb Storage is what the JavaScript API browsers provide for storing data locally and securely within a user\u2019s browser.Session and local storage are the two main types of web storage. They are similar to regular properties objects, but they persist (do not disappear) when the webpage reloads.This article aims to show you exactly how the two storage objects work in JavaScript. We will also use a To-Do list exercise to practice using web storage in a web app project.Table of Contents\nWhat is the Session Storage Object?\nWhat is the Local Storage Object?\nHow to Access the Session and Local Storage Objects\nWhat are Web Storage\u2019s Built-In Interfaces?\n\nWhat is web storage\u2019s setItem() method?\nWhat is web storage\u2019s key() method?\nWhat is web storage\u2019s getItem() method?\nWhat is web storage\u2019s length property?\nWhat is web storage\u2019s removeItem() method?\nWhat is web storage\u2019s clear() method?\n\n\nTime to Practice with Web Storage \ud83e\udd38\u200d\u2642\ufe0f\ud83c\udfcb\ufe0f\u200d\u2640\ufe0f\n\nThe Problem\nYour Exercise\nBonus Exercise\n\n\nHow Did You Go About Solving the Web Storage Exercise?\n\nHow to prevent the Session Storage pane\u2019s To-Do items from disappearing on page reload\nHow to prevent the Local Storage pane\u2019s To-Do items from disappearing on page reload or reopen\nHow to auto-display the Session section\u2019s previously added tasks on page reload\nHow to auto-display the Local section\u2019s previously added tasks on page reload or reopen\nHow to check the total items in the browser\u2019s session storage\nHow to display the local storage\u2019s zeroth index item\u2019s name\nHow to empty the browser\u2019s session storage\n\n\nHow to Continue Practicing with Web Storage \ud83e\uddd7\u200d\u2640\ufe0f\ud83d\ude80\nWeb Storage vs. Cookies: What is the Difference?\nWrapping up\n\nWithout further ado, let\u2019s discuss session storage.What is the Session Storage Object?The session storage object (window.sessionStorage) stores data that persists for only one session of an opened tab.In other words, whatever gets stored in the window.sessionStorage object will not disappear on a reload of the web page. Instead, the computer will delete the stored data only when users close the browser tab or window.Note the following:The data stored inside the session storage is per-origin and per-instance. In other words, http://freecodecamp.com\u2019s sessionStorage object is different from https://freecodecamp.com\u2019s sessionStorage object because the two origins use different schemes (http and https).Per-instance means per-window or per-tab. In other words, the sessionStorage object\u2019s lifespan expires once users close the instance (window or tab).Browsers create a unique page session for each new tab or window. Therefore, users can run multiple instances of an app without interfering with each instance\u2019s session storage. (Note: Cookies do not have good support for running multiple instances of the same app. Such an attempt can cause errors such as double entry of bookings.)Session storage is a property of the global Window object. So sessionStorage.setItem() is equivalent to window.sessionStorage.setItem().What is the Local Storage Object?The local storage object (window.localStorage) stores data that persists even when users close their browser tab (or window).In other words, whatever gets stored in the window.localStorage object will not disappear during a reload or reopening of the web page or when users close their browsers. Those data have no expiration time. Browsers never clear them automatically.The computer will delete the window.localStorage object\u2019s content in the following instances only:When the content gets cleared through JavaScriptWhen the browser\u2019s cache gets clearedNote the following:The window.localStorage object\u2019s storage limit is larger than the window.sessionStorage.The data stored inside the local storage is per-origin. In other words, http://freecodecamp.com\u2019s localStorage object is different from https://freecodecamp.com\u2019s localStorage object because the two origins use different schemes (http and https).There are inconsistencies with how browsers handle the local storage of documents not served from a web server (for instance, pages with a file: URL scheme). Therefore, the localStorage object may behave differently among browsers when used with non-HTTP URLs, such as file:///document/on/users/local/system.html.Local storage is a property of the global Window object. Therefore, localStorage.setItem() is equivalent to window.localStorage.setItem().How to Access the Session and Local Storage ObjectsYou can access the two web storages by:Using the same technique as you'd use for accessing regular JavaScript objectsUsing web storage\u2019s built-in interfacesFor instance, consider the snippet below:sessionStorage.bestColor = \"Green\";\nsessionStorage[\"bestColor\"] = \"Green\";\nsessionStorage.setItem(\"bestColor\", \"Green\");The three statements above do the same thing\u2014they set bestColor\u2019s value. But the third line is recommended because it uses web storage\u2019s setItem() method.Tip: you should prefer using the web storage\u2019s built-in interfaces to avoid the pitfalls of using objects as key/value stores.Let\u2019s discuss more on the web storage\u2019s built-in interfaces below.What are Web Storage\u2019s Built-In Interfaces?The web storage built-in interfaces are the recommended tools for reading and manipulating a browser\u2019s sessionStorage and localStorage objects.The six (6) built-in interfaces are:setItem()key()getItem()lengthremoveItem()clear()Let\u2019s discuss each one now.What is web storage\u2019s setItem() method?The setItem() method stores its key and value arguments inside the specified web storage object.Syntax of the setItem() methodsetItem() accepts two required arguments. Here is the syntax:webStorageObject.setItem(key, value);webStorageObject represents the storage object (localStorage or sessionStorage) you wish to manipulate.key is the first argument accepted by setItem(). It is a required string argument representing the name of the web storage property you want to create or update.value is the second argument accepted by setItem(). It is a required string argument specifying the value of the key you are creating or updating.Note:The key and value arguments are always strings.Suppose you provide an integer as a key or value. In that case, browsers will convert them to strings automatically.setItem() may display an error message if the storage object is full.Example 1: How to store data in the session storage objectInvoke sessionStorage\u2019s setItem() method.Provide the name and value of the data you wish to store.// Store color: \"Pink\" inside the browser's session storage object:\nsessionStorage.setItem(\"color\", \"Pink\");\n\n// Log the session storage object to the console:\nconsole.log(sessionStorage);\n\n// The invocation above will return:\n{color: \"Pink\"}Try Editing ItNote: Your browser\u2019s session storage may contain additional data if it already uses the storage object to store information.Example 2: How to store data in the local storage objectInvoke localStorage\u2019s setItem() method.Provide the name and value of the data you wish to store.// Store color: \"Pink\" inside the browser's local storage object:\nlocalStorage.setItem(\"color\", \"Pink\");\n\n// Log the local storage object to the console:\nconsole.log(localStorage);\n\n// The invocation above will return:\n{color: \"Pink\"}Try Editing ItNote:Your browser\u2019s local storage may contain additional data if it already uses the storage object to store information.It is best to serialize objects before storing them in local or session storage. Otherwise, the computer will store the object as \"[object Object]\".Example 3: Browsers use \"[object Object]\" for non-serialized objects in the web storage// Store myBio object inside the browser's session storage object:\nsessionStorage.setItem(\"myBio\", { name: \"Oluwatobi\" });\n\n// Log the session storage object to the console:\nconsole.log(sessionStorage);\n\n// The invocation above will return:\n{myBio: \"[object Object]\", length: 1}Try Editing ItYou can see that the computer stored the object as \"[object Object]\" because we did not serialize it.Example 4: How to store serialized objects in the web storage// Store myBio object inside the browser's session storage object:\nsessionStorage.setItem(\"myBio\", JSON.stringify({ name: \"Oluwatobi\" }));\n\n// Log the session storage object to the console:\nconsole.log(sessionStorage);\n\n// The invocation above will return:\n{myBio: '{\"name\":\"Oluwatobi\"}', length: 1}Try Editing ItWe used JSON.stringify() to convert the object to JSON before storing it in the web storage.Tip: Learn how to convert JSON to JavaScript objects.What is web storage\u2019s key() method?The key() method retrieves a specified web storage item\u2019s name (key).Syntax of the key() methodkey() accepts one required argument. Here is the syntax:webStorageObject.key(index);webStorageObject represents the storage object (localStorage or sessionStorage) whose key you wish to get.index is a required argument. It is an integer specifying the index of the item whose key you want to get.Example 1: How to get the name of an item in the session storage objectInvoke sessionStorage\u2019s key() method.Provide the index of the item whose name you wish to get.// Store carColor: \"Pink\" inside the browser's session storage object:\nsessionStorage.setItem(\"carColor\", \"Pink\");\n\n// Store pcColor: \"Yellow\" inside the session storage object:\nsessionStorage.setItem(\"pcColor\", \"Yellow\");\n\n// Store laptopColor: \"White\" inside the session storage object:\nsessionStorage.setItem(\"laptopColor\", \"White\");\n\n// Get the name of the item at index 1:\nsessionStorage.key(1);Try Editing ItImportant: The user-agent defines the order of items in the session storage. In other words, key()\u2019s output may vary based on how the user-agent orders the web storage\u2019s items. So you shouldn't rely on key() to return a constant value.Example 2: How to get the name of an item in the local storage objectInvoke localStorage\u2019s key() method.Provide the index of the item whose name you wish to get.// Store carColor: \"Pink\" inside the browser's local storage object:\nlocalStorage.setItem(\"carColor\", \"Pink\");\n\n// Store pcColor: \"Yellow\" inside the local storage object:\nlocalStorage.setItem(\"pcColor\", \"Yellow\");\n\n// Store laptopColor: \"White\" inside the local storage object:\nlocalStorage.setItem(\"laptopColor\", \"White\");\n\n// Get the name of the item at index 1:\nlocalStorage.key(1);Try Editing ItImportant: The user-agent defines the order of items in the local storage. In other words, key()\u2019s output may vary based on how the user-agent orders the web storage\u2019s items. So you shouldn't rely on key() to return a constant value.What is web storage\u2019s getItem() method?The getItem() method retrieves the value of a specified web storage item.Syntax of the getItem() methodgetItem() accepts one required argument. Here is the syntax:webStorageObject.getItem(key);webStorageObject represents the storage object (localStorage or sessionStorage) whose item you wish to get.key is a required argument. It is a string specifying the name of the web storage property whose value you want to get.Example 1: How to get data from the session storage objectInvoke sessionStorage\u2019s getItem() method.Provide the name of the data you wish to get.// Store color: \"Pink\" inside the browser's session storage object:\nsessionStorage.setItem(\"color\", \"Pink\");\n\n// Get color's value from the session storage:\nsessionStorage.getItem(\"color\");\n\n// The invocation above will return:\n\"Pink\"Try Editing ItExample 2: How to get data from the local storage objectInvoke localStorage\u2019s getItem() method.Provide the name of the data you wish to get.// Store color: \"Pink\" inside the browser's local storage object:\nlocalStorage.setItem(\"color\", \"Pink\");\n\n// Get color's value from the local storage:\nlocalStorage.getItem(\"color\");\n\n// The invocation above will return:\n\"Pink\"Try Editing ItNote: The getItem() method will return null if its argument does not exist in the specified web storage.What is web storage\u2019s length property?The length property returns the number of properties in the specified web storage.Syntax of the length propertyHere is length\u2019s syntax:webStorageObject.length;webStorageObject represents the storage object (localStorage or sessionStorage) whose length you wish to verify.Example 1: How to verify the number of items in the session storage objectInvoke sessionStorage\u2019s length property.// Store carColor: \"Pink\" inside the browser's session storage object:\nsessionStorage.setItem(\"carColor\", \"Pink\");\n\n// Store pcColor: \"Yellow\" inside the session storage object:\nsessionStorage.setItem(\"pcColor\", \"Yellow\");\n\n// Store laptopColor: \"White\" inside the session storage object:\nsessionStorage.setItem(\"laptopColor\", \"White\");\n\n// Verify the number of items in the session storage:\nsessionStorage.length;\n\n// The invocation above may return:\n3Try Editing ItNote: Your sessionStorage.length invocation may return a value greater than 3 if your browser\u2019s session storage already contains some stored information.Example 2: How to verify the number of items in the local storage objectInvoke localStorage\u2019s length property.// Store carColor: \"Pink\" inside the browser's local storage object:\nlocalStorage.setItem(\"carColor\", \"Pink\");\n\n// Store pcColor: \"Yellow\" inside the local storage object:\nlocalStorage.setItem(\"pcColor\", \"Yellow\");\n\n// Store laptopColor: \"White\" inside the local storage object:\nlocalStorage.setItem(\"laptopColor\", \"White\");\n\n// Verify the number of items in the local storage:\nlocalStorage.length;\n\n// The invocation above may return:\n3Try Editing ItNote: Your localStorage.length invocation may return a value greater than 3 if your browser's local storage already contains some stored information.What is web storage\u2019s removeItem() method?The removeItem() method removes a property from the specified web storage.Syntax of the removeItem() MethodremoveItem() accepts one required argument. Here is the syntax:webStorageObject.removeItem(key);webStorageObject represents the storage object (localStorage or sessionStorage) whose item you wish to remove.key is a required argument. It is a string specifying the name of the web storage property you want to remove.Example 1: How to remove data from the session storage objectInvoke sessionStorage\u2019s removeItem() method.Provide the name of the data you wish to remove.// Store carColor: \"Pink\" inside the browser's session storage object:\nsessionStorage.setItem(\"carColor\", \"Pink\");\n\n// Store pcColor: \"Yellow\" inside the session storage object:\nsessionStorage.setItem(\"pcColor\", \"Yellow\");\n\n// Store laptopColor: \"White\" inside the session storage object:\nsessionStorage.setItem(\"laptopColor\", \"White\");\n\n// Remove the pcColor item from the session storage:\nsessionStorage.removeItem(\"pcColor\");\n\n// Confirm whether the pcColor item still exists in the session storage:\nsessionStorage.getItem(\"pcColor\");\n\n// The invocation above will return:\nnullTry Editing ItNote: The removeItem() method will do nothing if its argument does not exist in the session storage.Example 2: How to remove data from the local storage objectInvoke localStorage\u2019s removeItem() method.Provide the name of the data you wish to remove.// Store carColor: \"Pink\" inside the browser's local storage object:\nlocalStorage.setItem(\"carColor\", \"Pink\");\n\n// Store pcColor: \"Yellow\" inside the local storage object:\nlocalStorage.setItem(\"pcColor\", \"Yellow\");\n\n// Store laptopColor: \"White\" inside the local storage object:\nlocalStorage.setItem(\"laptopColor\", \"White\");\n\n// Remove the pcColor item from the local storage:\nlocalStorage.removeItem(\"pcColor\");\n\n// Confirm whether the pcColor item still exists in the local storage:\nlocalStorage.getItem(\"pcColor\");\n\n// The invocation above will return:\nnullTry Editing ItNote: The removeItem() method will do nothing if its argument does not exist in the local storage.What is web storage\u2019s clear() method?The clear() method clears (deletes) all the items in the specified web storage.Syntax of the clear() Methodclear() accepts no argument. Here is the syntax:webStorageObject.clear();webStorageObject represents the storage object (localStorage or sessionStorage) whose items you wish to clear.Example 1: How to clear all items from the session storage objectInvoke sessionStorage\u2019s clear() method.// Store carColor: \"Pink\" inside the browser's session storage object:\nsessionStorage.setItem(\"carColor\", \"Pink\");\n\n// Store pcColor: \"Yellow\" inside the session storage object:\nsessionStorage.setItem(\"pcColor\", \"Yellow\");\n\n// Store laptopColor: \"White\" inside the session storage object:\nsessionStorage.setItem(\"laptopColor\", \"White\");\n\n// Clear all items from the session storage:\nsessionStorage.clear();\n\n// Confirm whether the session storage still contains any item:\nconsole.log(sessionStorage);\n\n// The invocation above will return:\n{length: 0}Try Editing ItExample 2: How to clear all items from the local storage objectInvoke localStorage\u2019s clear() method.// Store carColor: \"Pink\" inside the browser's local storage object:\nlocalStorage.setItem(\"carColor\", \"Pink\");\n\n// Store pcColor: \"Yellow\" inside the local storage object:\nlocalStorage.setItem(\"pcColor\", \"Yellow\");\n\n// Store laptopColor: \"White\" inside the local storage object:\nlocalStorage.setItem(\"laptopColor\", \"White\");\n\n// Clear all items from the local storage:\nlocalStorage.clear();\n\n// Confirm whether the local storage still contains any item:\nconsole.log(localStorage);\n\n// The invocation above will return:\n{length: 0}Try Editing ItNow that we know what web storage is and how to access it, we can practice using it in a JavaScript project.Time to Practice with Web Storage \ud83e\udd38\u200d\u2642\ufe0f\ud83c\udfcb\ufe0f\u200d\u2640\ufe0fConsider the following To-Do List app:\n        \n          \n            \n          \n        \n      The ProblemThe issue with the To-Do List app is this:Tasks disappear whenever users refresh the webpage.Your ExerciseUse the appropriate Web Storage APIs to accomplish the following tasks:Prevent the Session pane\u2019s To-Do items from disappearing whenever users reload the browser.Prevent the Local section\u2019s To-Do items from disappearing whenever users reload or close their browser tab (or window).Auto-display the Session section's previously added tasks on page reload.Auto-display the Local section's previously added tasks on page reload (or browser reopen).Bonus ExerciseUse your browser\u2019s console to:Check the number of items in your browser\u2019s session storage object.Display the name of your local storage\u2019s zeroth index item.Delete all the items in your browser\u2019s session storage.Try the Web Storage ExerciseNote: You will benefit much more from this tutorial if you attempt the exercise yourself.If you get stuck, don\u2019t be discouraged. Instead, review the lesson and give it another try.Once you\u2019ve given it your best shot (you\u2019ll only cheat yourself if you don\u2019t!), we can discuss how I approached the exercise below.How Did You Go About Solving the Web Storage Exercise?Below are feasible ways to get the exercise done.How to prevent the Session Storage pane\u2019s To-Do items from disappearing on page reloadWhenever users click the \u201cAdd task\u201d button,Get existing session storage\u2019s content, if any. Otherwise, return an empty array.Merge the existing to-do items with the user\u2019s new input.Add the new to-do list to the browser\u2019s session storage object.Here\u2019s the code:sessionAddTaskBtn.addEventListener('click', () => {\n  // Get existing session storage's content, if any. Otherwise, return an empty array:\n  const currentTodoArray =\n    JSON.parse(sessionStorage.getItem('codesweetlyStore')) || [];\n\n  // Merge currentTodoArray with the user's new input:\n  const newTodoArray = [\n    ...currentTodoArray,\n    { checked: false, text: sessionInputEle.value },\n  ];\n\n  // Add newTodoArray to the session storage object:\n  sessionStorage.setItem('codesweetlyStore', JSON.stringify(newTodoArray));\n\n  const todoLiElements = createTodoLiElements(newTodoArray);\n  sessionTodosContainer.replaceChildren(...todoLiElements);\n  sessionInputEle.value = '';\n});Try Editing ItNote: The three dots (...) preceding the currentTodoArray variable represent the spread operator. We used it in the newTodoArray object to copy currentTodoArray\u2019s items into newTodoArray.How to prevent the Local Storage pane\u2019s To-Do items from disappearing on page reload or reopenGet existing local storage\u2019s content, if any. Otherwise, return an empty array.Merge the existing to-do items with the user\u2019s new input.Add the new to-do list to the browser\u2019s local storage object.Here\u2019s the code:localAddTaskBtn.addEventListener('click', () => {\n  // Get existing local storage's content, if any. Otherwise, return an empty array:\n  const currentTodoArray =\n    JSON.parse(localStorage.getItem('codesweetlyStore')) || [];\n\n  // Merge currentTodoArray with the user's new input:\n  const newTodoArray = [\n    ...currentTodoArray,\n    { checked: false, text: localInputEle.value },\n  ];\n\n  // Add newTodoArray to the local storage object:\n  sessionStorage.setItem('codesweetlyStore', JSON.stringify(newTodoArray));\n\n  const todoLiElements = createTodoLiElements(newTodoArray);\n  localTodosContainer.replaceChildren(...todoLiElements);\n  localInputEle.value = '';\n});Try Editing ItNote: The localTodosContainer.replaceChildren(...todoLiElements) statement tells the browser to replace localTodosContainer\u2019s current children elements with the list of <li>s in the todoLiElements array.How to auto-display the Session section\u2019s previously added tasks on page reloadWhenever users reload the page,Get existing session storage\u2019s content, if any. Otherwise, return an empty array.Use the retrieved content to create <li> elements.Populate the tasks display space with the <li> elements.Here\u2019s the code:window.addEventListener('load', () => {\n  // Get existing session storage's content, if any. Otherwise, return an empty array:\n  const sessionTodoArray =\n    JSON.parse(sessionStorage.getItem('codesweetlyStore')) || [];\n\n  // Use the retrieved sessionTodoArray to create <li> elements:\n  const todoLiElements = createTodoLiElements(sessionTodoArray);\n\n  // Populate the tasks display space with the todoLiElements:\n  sessionTodosContainer.replaceChildren(...todoLiElements);\n});Try Editing ItHow to auto-display the Local section\u2019s previously added tasks on page reload or reopenWhenever users reload or reopen the page,Get existing local storage\u2019s content, if any. Otherwise, return an empty array.Use the retrieved content to create <li> elements.Populate the tasks display space with the <li> elements.Here\u2019s the code:window.addEventListener('load', () => {\n  // Get existing local storage's content, if any. Otherwise, return an empty array:\n  const localTodoArray =\n    JSON.parse(localStorage.getItem('codesweetlyStore')) || [];\n\n  // Use the retrieved localTodoArray to create <li> elements:\n  const todoLiElements = createTodoLiElements(localTodoArray);\n\n  // Populate the tasks display space with the todoLiElements:\n  localTodosContainer.replaceChildren(...todoLiElements);\n});Try Editing ItHow to check the total items in the browser\u2019s session storageUse session storage\u2019s length property like so:console.log(sessionStorage.length);Try Editing ItHow to display the local storage\u2019s zeroth index item\u2019s nameUse the local storage\u2019s key() method as follows:console.log(localStorage.key(0));Try Editing ItHow to empty the browser\u2019s session storageUse the session storage\u2019s clear() method as follows:sessionStorage.clear();How to Continue Practicing with Web Storage \ud83e\uddd7\u200d\u2640\ufe0f\ud83d\ude80The to-do app still has a lot of potential. For instance, you can:Convert it to a React TypeScript application.Make it keyboard accessible.Allow users to delete or edit individual tasks.Allow users to star (mark as important) specific tasks.Let users specify due dates.So, feel free to continue developing what we\u2019ve built in this tutorial so you can better understand the web storage objects.For instance, here\u2019s my attempt at making the two panes functional:\n        \n          \n            \n          \n        \n      Before we wrap up our discussion, you should know some differences between web storage and cookies. So, let\u2019s talk about that below.Web Storage vs. Cookies: What is the Difference?Web storage and cookies are two main ways to store data locally within a user\u2019s browser. But they work differently. Below are the main distinctions between them.Storage limitCookies: Have 4 kilobytes maximum storage limit.Web storage: Can store a lot more than 4 kilobytes of data. For instance, Safari 8 can store up to 5 MB, while Firefox 34 permits 10 MB.Data transfer to the serverCookies: Transfer data to the server whenever browsers send HTTP requests to the web server.Web storage: Never transfers data to the server.Note: It is a waste of users\u2019 bandwidth to send data to the server if such information is needed only by the client (browser), not the server.Weak integrity and confidentialityCookies: Suffer from weak integrity and weak confidentiality issues.Web storage: Do not suffer from weak integrity and confidentiality issues because it stores data per origin.PropertyCookies: Cookies are a property of the Document object.Web storage: Web storage is a property of the Window object.ExpirationCookie: You can specify a cookie\u2019s expiration date.Web storage: Browsers determine web storage\u2019s expiration date.Retrieving individual dataCookies: There\u2019s no way to retrieve individual data. You always have to recall all the data to read any single one.Web storage: You can choose the specific data you wish to retrieve.The syntax for storing dataCookies:document.cookie = \"key=value\";Web storage:webStorageObject.setItem(key, value);The syntax for reading dataCookies:document.cookie;Web storage:webStorageObject.getItem(key);The syntax for removing dataCookies:document.cookie = \"key=; expires=Thu, 01 May 1930 00:00:00 UTC\";The snippet above deletes the cookie by assigning an empty value to the key property and setting a past expiration date.Web storage:webStorageObject.removeItem(key);Wrapping upIn this article, we discussed how to use web storage and its built-in interfaces. We also used a to-do list project to practice using the local and session storage objects to store data locally and securely within users\u2019 browsers.Thanks for reading!And here\u2019s a useful React TypeScript resource:I wrote a book about Creating NPM Packages!It is a beginner-friendly book that takes you from zero to creating, testing, and publishing NPM packages like a pro.\n\n\n                        \n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    ", "length": 26567, "excerpt": "Web Storage is what the JavaScript API\n[https://codesweetly.com/application-programming-interface-api-explained] \nbrowsers provide for storing data locally and securely within a user\u2019s browser.\n\nSession and local storage are the two main types of web storage. They are\nsimilar to regular properties objects\n[https://codesweetly.com/javascript-properties-object], but they persist (do not\ndisappear) when the webpage reloads.\n\nThis article aims to show you exactly how the two storage objects work in", "siteName": "freeCodeCamp.org", "publishedTime": "2023-10-09T16:45:31.000Z", "id": "5a78b6804132500c05a474bf25fc0f471dcfbdd2", "url": "https://www.freecodecamp.org/news/web-storage-localstorage-vs-sessionstorage-in-javascript/", "domain": "freecodecamp.org", "date": "2023-12-27T18:04:57.249938", "resultUri": "http://localhost:3000/result/5a78b6804132500c05a474bf25fc0f471dcfbdd2", "query": {"url": ["https://www.freecodecamp.org/news/web-storage-localstorage-vs-sessionstorage-in-javascript/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "Web Storage Explained \u2013 How to Use localStorage and sessionStorage in JavaScript Projects", "description": "Web Storage is what the JavaScript API [https://codesweetly.com/application-programming-interface-api-explained]  browsers provide for storing data locally and securely within a user\u2019s browser. Session and local storage are the two main types of web storage. They are similar to regular properties objects [https://codesweetly.com/javascript-properties-object], but they persist (do not disappear) when the webpage", "url": "https://www.freecodecamp.org/news/web-storage-localstorage-vs-sessionstorage-in-javascript/", "image": "https://www.freecodecamp.org/news/content/images/2023/10/web-storage-explained-local-and-session-storage-objects-in-javascript-codesweetly.jpg", "image:width": "1920", "image:height": "1280"}, "twitter": {"card": "summary_large_image", "title": "Web Storage Explained \u2013 How to Use localStorage and sessionStorage in JavaScript Projects", "description": "Web Storage is what the JavaScript API [https://codesweetly.com/application-programming-interface-api-explained]  browsers provide for storing data locally and securely within a user\u2019s browser. Session and local storage are the two main types of web storage. They are similar to regular properties objects [https://codesweetly.com/javascript-properties-object], but they persist (do not disappear) when the webpage", "url": "https://www.freecodecamp.org/news/web-storage-localstorage-vs-sessionstorage-in-javascript/", "image": "https://www.freecodecamp.org/news/content/images/2023/10/web-storage-explained-local-and-session-storage-objects-in-javascript-codesweetly.jpg", "label1": "Written by", "data1": "Oluwatobi Sofela", "label2": "Filed under", "data2": "JavaScript, Storage, Web Development, API, Programming", "site": "@freecodecamp", "creator": "@oluwatobiss"}}}