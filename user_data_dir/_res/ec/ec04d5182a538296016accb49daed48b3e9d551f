{"title": "7 important lessons about programming that I\u2019ve learned at 17", "byline": "freeCodeCamp.org", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>7 important lessons about programming that I\u2019ve learned at 17</h1>\n<section>\n<section data-test-label=\"post-content\">\n<p>by Alec Jones</p><p>Hey there, I\u2019m Alec, I\u2019m 17 years old, I\u2019ve been learning web development since I was 12. I\u2019m far from an excellent developer, but I\u2019ve definitely learned some things about being an average one. ?</p><p>Here are some lessons I\u2019ve learned that I think every developer, especially new developers, needs to know.</p><h3 id=\"no-one-knows-everything\">No one knows everything</h3><p>No developer knows everything and you don\u2019t need to know everything.</p><p>There is so much more to being a developer than knowing by heart, for example, the methods of manipulating arrays in PHP version 5.6. It doesn\u2019t matter if you know the little things, they are a google search away if you forget them.</p><p>There are far more important things you can do as a developer to improve yourself than learning these tiny insignificant details like,</p><ol><li>Improving your problem-solving skills</li><li>Improving your teamwork and communication skills</li><li>Increasing your knowledge of programming concepts and languages</li><li>Creating awesome projects to showcase your work</li><li>Focusing on writing clean efficient code</li></ol><p>The great thing about being a developer is that you don\u2019t need to know everything. You only need to know how to solve problems.</p><h3 id=\"having-bugs-is-essential-to-learning\">Having bugs is essential to learning</h3><figure><img alt=\"jvaqDDelHmG2CJlX7jgWwcyk77jGgB9NCdjW\" height=\"315\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/jvaqDDelHmG2CJlX7jgWwcyk77jGgB9NCdjW\" width=\"600\"/><figcaption>Source: <a href=\"https://imgur.com/gallery/HTisMpC\" rel=\"noopener\" target=\"_blank\" title=\"\">imgur</a></figcaption></figure><p>If you\u2019re programming something and you\u2019re not coming across any bugs, it means you\u2019re learning nothing.</p><p>Not running into bugs does not mean that you\u2019re somehow a great developer because you\u2019re too smart to make a mistake. It means that you\u2019ve already developed something similar, so many times, that you already know how not to run into the bugs.</p><p>When you\u2019re solving bugs you are becoming a strong developer. There are endless bugs in development, so the faster you can learn to handle them, the better off you\u2019ll be.</p><h3 id=\"formal-education-is-not-necessary\">Formal education is not necessary</h3><p>At 17, I\u2019m currently grappling with this topic. Should I attend university so I can acquire a computer science degree?</p><p>That\u2019s a tough question for me to answer. But, most people reading this are probably not 17, in fact, most of you probably already have a job.</p><p>If you have already attended college or university, you definitely do not need a computer science degree. You also don\u2019t need to do all of these coding boot camps either.</p><p>A GitHub profile with some interesting projects on it speaks volumes. If you can demonstrate that you can program, it doesn\u2019t matter what background you have.</p><p>It\u2019s simply a question of how do you learn best.</p><p>I didn\u2019t have the choice, I had to learn to code on weekends because I couldn\u2019t take 6 weeks off of high school for a boot camp. ?\u200d\u2642\ufe0f</p><p>If you want to go back to university to get a computer science degree or attend an 8-week boot camp, go for it. But it\u2019s nowhere close to necessary.</p><h3 id=\"googling-is-a-legitimate-skill\">Googling is a legitimate skill</h3><p>If you want to be a great developer, you will need to enhance your googling ability. It\u2019s essential to be able to find solutions and code that you are looking for.</p><p>There is frequent googling, especially when you\u2019re learning a brand new technology.</p><p>There are <a href=\"https://www.scoopwhoop.com/google-search-tips/#.r4e31k357\" rel=\"noopener\">many different ways to improve your search results</a> through little \u201chacks\u201d and tips Google has set up.</p><p>Coding projects can take down weird rabbit holes of things you need to add to your code. Sometimes, you need to find a solution to a problem you don\u2019t even understand. But thankfully, Google has the answer somewhere.</p><h3 id=\"try-thinking-rather-than-coding\">Try thinking rather than coding</h3><p>When you\u2019re coding, do you ask yourself, \u201cwhat\u2019s the best way to write this code?\u201d</p><p>I know I usually don\u2019t until after I\u2019ve written a subpar solution. Far too often, I find myself writing the solution that first popped into my head. Most of the time, the first solution to the problem isn\u2019t the best.</p><p>The act of typing out the code is short. Anyone can write code quickly that will be sloppy. You need to take the time to come up with a good stable solution.</p><p>Though it can be tedious, test driven development promotes this greatly as you have to think about what functionality you expect and how it\u2019ll work. You can\u2019t freehand the code when you have to plan it ahead of time.</p><p>Of course, there are exceptions to every rule. I\u2019m not saying you should sit quietly and think about every line of code.</p><p>But, with anything, save yourself the time of refactoring and bug fixing by thinking about your code.</p><h3 id=\"be-careful-with-tutorials\">Be careful with tutorials</h3><p>Following along with a coding tutorial is great for starting out, but I think these tutorials are not the only resource you should use for learning.</p><p>You\u2019re not actually learning when you follow a coding tutorial. You may learn a little, but you\u2019re not truly learning what you\u2019re doing and why you\u2019re doing it.</p><p>Additionally, these tutorials can also quickly skip over important parts of the code, as illustrated in Quincy\u2019s tweet. It\u2019s so easy to just copy and paste and not ask questions from the tutorial.</p><p>A far better way to learn to code is to set out on a project you\u2019d like to build. Then, just get started. Find little pieces of code, write your own code, solve the bugs, read explanations and posts.</p><p>The most effective way to learn is to piece the puzzle together until you have a program that works.</p><h3 id=\"tabs-are-better-than-spaces\">Tabs are better than spaces</h3><figure><img alt=\"D6kuyGtfBjJAHVMBwXKyj6ZhSXirPx4c-2CY\" height=\"480\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/D6kuyGtfBjJAHVMBwXKyj6ZhSXirPx4c-2CY\" width=\"640\"/><figcaption><a href=\"https://www.youtube.com/watch?v=V7PLxL8jIl8\" rel=\"noopener\" target=\"_blank\" title=\"\">image source</a></figcaption></figure><p>I know. While you reading this article, you were thinking, \u201che\u2019s got to be a spaces guy, it\u2019s obvious.\u201d I\u2019m afraid not, everyone should be using tabs when they code.</p><p>I get it. Tabs can look different from other people\u2019s computers. But, it\u2019s so nice to just hit the tab, rather than smacking that space bar again and again. Treat yourself to tabs people!</p><p>Thanks for reading these short, but important, lessons that I\u2019ve learned. If you disagree with any points I make, I\u2019d love to hear why!</p>\n</section>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nby Alec JonesHey there, I\u2019m Alec, I\u2019m 17 years old, I\u2019ve been learning web development since I was 12. I\u2019m far from an excellent developer, but I\u2019ve definitely learned some things about being an average one. ?Here are some lessons I\u2019ve learned that I think every developer, especially new developers, needs to know.No one knows everythingNo developer knows everything and you don\u2019t need to know everything.There is so much more to being a developer than knowing by heart, for example, the methods of manipulating arrays in PHP version 5.6. It doesn\u2019t matter if you know the little things, they are a google search away if you forget them.There are far more important things you can do as a developer to improve yourself than learning these tiny insignificant details like,Improving your problem-solving skillsImproving your teamwork and communication skillsIncreasing your knowledge of programming concepts and languagesCreating awesome projects to showcase your workFocusing on writing clean efficient codeThe great thing about being a developer is that you don\u2019t need to know everything. You only need to know how to solve problems.Having bugs is essential to learningSource: imgurIf you\u2019re programming something and you\u2019re not coming across any bugs, it means you\u2019re learning nothing.Not running into bugs does not mean that you\u2019re somehow a great developer because you\u2019re too smart to make a mistake. It means that you\u2019ve already developed something similar, so many times, that you already know how not to run into the bugs.When you\u2019re solving bugs you are becoming a strong developer. There are endless bugs in development, so the faster you can learn to handle them, the better off you\u2019ll be.Formal education is not necessaryAt 17, I\u2019m currently grappling with this topic. Should I attend university so I can acquire a computer science degree?That\u2019s a tough question for me to answer. But, most people reading this are probably not 17, in fact, most of you probably already have a job.If you have already attended college or university, you definitely do not need a computer science degree. You also don\u2019t need to do all of these coding boot camps either.A GitHub profile with some interesting projects on it speaks volumes. If you can demonstrate that you can program, it doesn\u2019t matter what background you have.It\u2019s simply a question of how do you learn best.I didn\u2019t have the choice, I had to learn to code on weekends because I couldn\u2019t take 6 weeks off of high school for a boot camp. ?\u200d\u2642\ufe0fIf you want to go back to university to get a computer science degree or attend an 8-week boot camp, go for it. But it\u2019s nowhere close to necessary.Googling is a legitimate skillIf you want to be a great developer, you will need to enhance your googling ability. It\u2019s essential to be able to find solutions and code that you are looking for.There is frequent googling, especially when you\u2019re learning a brand new technology.There are many different ways to improve your search results through little \u201chacks\u201d and tips Google has set up.Coding projects can take down weird rabbit holes of things you need to add to your code. Sometimes, you need to find a solution to a problem you don\u2019t even understand. But thankfully, Google has the answer somewhere.Try thinking rather than codingWhen you\u2019re coding, do you ask yourself, \u201cwhat\u2019s the best way to write this code?\u201dI know I usually don\u2019t until after I\u2019ve written a subpar solution. Far too often, I find myself writing the solution that first popped into my head. Most of the time, the first solution to the problem isn\u2019t the best.The act of typing out the code is short. Anyone can write code quickly that will be sloppy. You need to take the time to come up with a good stable solution.Though it can be tedious, test driven development promotes this greatly as you have to think about what functionality you expect and how it\u2019ll work. You can\u2019t freehand the code when you have to plan it ahead of time.Of course, there are exceptions to every rule. I\u2019m not saying you should sit quietly and think about every line of code.But, with anything, save yourself the time of refactoring and bug fixing by thinking about your code.Be careful with tutorialsFollowing along with a coding tutorial is great for starting out, but I think these tutorials are not the only resource you should use for learning.You\u2019re not actually learning when you follow a coding tutorial. You may learn a little, but you\u2019re not truly learning what you\u2019re doing and why you\u2019re doing it.Additionally, these tutorials can also quickly skip over important parts of the code, as illustrated in Quincy\u2019s tweet. It\u2019s so easy to just copy and paste and not ask questions from the tutorial.A far better way to learn to code is to set out on a project you\u2019d like to build. Then, just get started. Find little pieces of code, write your own code, solve the bugs, read explanations and posts.The most effective way to learn is to piece the puzzle together until you have a program that works.Tabs are better than spacesimage sourceI know. While you reading this article, you were thinking, \u201che\u2019s got to be a spaces guy, it\u2019s obvious.\u201d I\u2019m afraid not, everyone should be using tabs when they code.I get it. Tabs can look different from other people\u2019s computers. But, it\u2019s so nice to just hit the tab, rather than smacking that space bar again and again. Treat yourself to tabs people!Thanks for reading these short, but important, lessons that I\u2019ve learned. If you disagree with any points I make, I\u2019d love to hear why!\n\n                        \n                    \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 6146, "excerpt": "by Alec Jones\n\n7 important lessons about programming that I\u2019ve learned at 17\nsource: twitter [https://twitter.com/msdev/status/399521824704589824]\u2014 always be\ncoding\u2014 this is the most important lesson of all!Hey there, I\u2019m Alec, I\u2019m 17\nyears old, I\u2019ve been learning web development since I was 12. I\u2019m far from an\nexcellent developer, but I\u2019ve definitely learned some things about being an\naverage one. ?\n\nHere are some lessons I\u2019ve learned that I think every developer, especially new\ndevelopers, nee", "siteName": "freeCodeCamp.org", "publishedTime": "2019-05-23T17:58:30.000Z", "id": "ec04d5182a538296016accb49daed48b3e9d551f", "url": "https://www.freecodecamp.org/news/7-important-lessons-about-programming-that-ive-learned-at-17-516ae619686/", "domain": "freecodecamp.org", "date": "2023-12-27T18:09:17.283751", "resultUri": "http://localhost:3000/result/ec04d5182a538296016accb49daed48b3e9d551f", "query": {"url": ["https://www.freecodecamp.org/news/7-important-lessons-about-programming-that-ive-learned-at-17-516ae619686/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "7 important lessons about programming that I\u2019ve learned at 17", "description": "by Alec Jones 7 important lessons about programming that I\u2019ve learned at 17 source: twitter [https://twitter.com/msdev/status/399521824704589824]\u2014 always be coding\u2014 this is the most important lesson of all!Hey there, I\u2019m Alec, I\u2019m 17 years old, I\u2019ve been learning web development since I was 12. I\u2019m far from an excellent developer, but", "url": "https://www.freecodecamp.org/news/7-important-lessons-about-programming-that-ive-learned-at-17-516ae619686/", "image": "https://cdn-media-1.freecodecamp.org/images/0*g_FeNjTZ2ZsfhD7_.jpg", "image:width": "500", "image:height": "355"}, "twitter": {"card": "summary_large_image", "title": "7 important lessons about programming that I\u2019ve learned at 17", "description": "by Alec Jones 7 important lessons about programming that I\u2019ve learned at 17 source: twitter [https://twitter.com/msdev/status/399521824704589824]\u2014 always be coding\u2014 this is the most important lesson of all!Hey there, I\u2019m Alec, I\u2019m 17 years old, I\u2019ve been learning web development since I was 12. I\u2019m far from an excellent developer, but", "url": "https://www.freecodecamp.org/news/7-important-lessons-about-programming-that-ive-learned-at-17-516ae619686/", "image": "https://cdn-media-1.freecodecamp.org/images/0*g_FeNjTZ2ZsfhD7_.jpg", "label1": "Written by", "data1": "freeCodeCamp.org", "label2": "Filed under", "data2": "Programming, Technology, Learning To Code, Coding, Lessons Learned", "site": "@freecodecamp"}}}