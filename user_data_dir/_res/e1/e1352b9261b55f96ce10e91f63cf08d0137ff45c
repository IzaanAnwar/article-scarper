{"title": "Computer Coding \u2013 Computer Program Definition and Code Meaning", "byline": "Dionysia Lemonaki", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>Computer Coding \u2013 Computer Program Definition and Code Meaning</h1>\n<section>\n<section data-test-label=\"post-content\">\n<p>When you start learning to code, one of the questions you probably ask yourself is \"What lannguage should I learn first?\"</p>\n<p>One of the most exciting \u2013 and at times overwhelming \u2013 things about learning to code is just how much there is to learn.</p>\n<p>But instead of just focusing on learning one specific technology, it can also help to learn the foundations \u2013 the building blocks. You can peel back the layers of abstraction to get to know the underlying principles that all technologies have in common.</p>\n<p>Understanding what coding is at a fundamental level will make solving problems easier and will give you a better understanding of how different technologies work underneath the hood.</p>\n<p>This article goes over the fundamentals of computer coding and what programs are made of, while also giving some suggestions on how to start taking your first steps in learning how to code.</p>\n<h2 id=\"whatiscodingadefinitionforbeginners\">What is coding? A definition for beginners</h2>\n<p>Computer coding, also known as computer programming, is a way to tell a computer what to do.</p>\n<p>Coding is a way to tell the computer how it should behave overall - the exact actions it needs to take and how to take them in an effective and efficient way.</p>\n<p>Specifically, coding is the process of creating and then giving the computer a detailed set of instructions to be carefully executed in sequential order.</p>\n<p>The set of instructions are called a <strong>program</strong> or the <strong>code</strong>.</p>\n<p>Computers are incredibly clever machines, but they rely on humans for getting things done.</p>\n<p>In a nutshell, coding is the art of humans communicating with computers. It helps us solve problems and create helpful new tools for communities, such as apps or websites, and lets us analyze and process large sets of data.</p>\n<h3 id=\"anoverviewofthecodingprocess\">An overview of the coding process</h3>\n<p>Coding is all about problem solving.</p>\n<p>When writing code, you'll be taking a problem and breaking it down into smaller and smaller steps of action, using logical reasoning, to finally come to a conclusion and solution.</p>\n<p>Computers take everything literally and pay extreme attention to detail.</p>\n<p>Making a small mistake in your code \u2013 such as a typo in a word, a missed semicolon, telling a computer to repeat a certain action but not telling it how and when to stop repeating it \u2013 will all result in an error message.</p>\n<p>These mistakes are called <strong>bugs</strong> in the code.</p>\n<p>The process of identifying the possible mistakes, finding what is causing the problem, and then fixing the mistake so the code works as it was intended to is called <strong>debugging</strong>.</p>\n<p>This is a critical part of writing code and learning how to code in general.</p>\n<h3 id=\"whyalgorithmsareimportantincoding\">Why algorithms are important in coding</h3>\n<p>Figuring out the exact instructions to give the computer so it can accomplish specific tasks is the most difficult part of coding and problem solving.</p>\n<p>Computers make no assumptions and they do exactly as they are told. This means that there should be no ambiguity in the instructions they receive.</p>\n<p>Instructions need to be defined clearly, with the correct number and order of steps the computer should take to solve a problem.</p>\n<p>The set of step-by-step, ordered instructions for solving problems and for the computer to complete every single task are called <strong>algorithms</strong>.</p>\n<p>Algorithms are sequences of actions that need to be correct, efficient, precise, and to the point, and they should leave no room for misinterpretation.</p>\n<p>Algorithms are not only reserved for computers to follow. Humans use algorithms on a daily basis, too.</p>\n<p>An example of a type of algorithm we use frequently is following a cooking recipe.</p>\n<p>The recipe is the algorithm. You need to follow the series of steps in the recipe in the correct order to get the end result you want.</p>\n<h4 id=\"howtowritepseudocodetoplanoutalgorithms\">How to write pseudocode to plan out algorithms</h4>\n<p>The way to organise, plan ahead, and write down the steps you need to follow, or the algorithm, is to first write <strong>pseudocode</strong>.</p>\n<p>Pseudocode is an informal way to represent algorithms.</p>\n<p>There is no specific syntax to pseudocode. It is written in plain, readable English (or any other natural, human language) using some technical terms.</p>\n<p>The purpose of writing it is solely for the programmer to understand the reasoning and logic behind the code/steps that need to be written to solve the problem, using simple phrases.</p>\n<p>After doing so,the programmer writes code that is actually executed by the computer.</p>\n<p>Pseudocode is a simpler version of computer code and is the first step before any computer code gets written.</p>\n<p>For example, say you wanted to write a program that aksed the user to enter their password and checked if it was equal to '1234'.</p>\n<p>If the password was equal to '1234', then you'd let them into the system, otherwise they would be rejected.</p>\n<p>A simple version of that written in pseudocode could look something like this:</p>\n<pre><code>user_password = input: \"Please enter your password to sign-in: \"\n\nif user_password is equal to '1234'\n    let them into the system\nelse\n    tell them they entered the wrong password\n</code></pre>\n<p>You can then build on that code later, as you went on.</p>\n<p>For example, if they entered the wrong password you could ask them for it again.</p>\n<p>If they entered it wrong more than 3 times, they would be rejected from the system.</p>\n<pre><code>correct_password = 1234\nattempts = 0\n\nwhile conditions are true\n     user_password = input: \"Please enter your password to sign-in: \"\n     attempts = attempts + 1\n     if user_password is equal to correct_password\n         let user in the system and stop the program\n     if user_password is NOT equal to correct_password AND attempts is greater than 3\n         don't let user in and stop the program\n</code></pre>\n<h2 id=\"howprogramminglanguagesbridgethecommunicationgapbetweenhumansandcomputers\">How programming languages bridge the communication gap between humans and computers</h2>\n<p>Computers at their core only speak one language - <strong>binary</strong> or <strong>machine code</strong>.</p>\n<p>It's a base-2 numerical system, comprised of only two possible numbers: <code>0</code> and <code>1</code>.</p>\n<p>This ties in well with the fact that computers are powered by electricity, which has only two possible states: <code>off</code> and <code>on</code>.</p>\n<p>Inside computers there are millions of microscopic switches, or <em>transistors</em>, that control the ebb and flow of electricity.</p>\n<p>So, essentially computers understand only <code>no</code> and <code>yes</code>.</p>\n<p>Values are represented by transistors being either <strong>off (or 0 or no)</strong> or <strong>on (or 1 or yes)</strong>.</p>\n<p>Underneath the hood, everything is represented in that state.</p>\n<p>Binary, or machine language, is the lowest level of language as it's the closest to the machine.</p>\n<p>Instructions are represented only in numbers, sequences of 0s and 1s (also known as binary digits), which directly control the computer's CPU ( Central Processing Unit). Each machine architecture has it's own unique machine language.</p>\n<p>This language is incredibly fast as there is no need for any kind of conversion \u2013 but it's not easy for humans to use.</p>\n<p>It's error prone and time consuming.</p>\n<p>Binary was used in the early days of computing, but these programs written in binary were tricky to understand and read.</p>\n<p>There was a need for languages that were easily understood and interpreted by both humans and computers.</p>\n<p>Throughout the years, programming languages have evolved. These evolutions are called levels, or <em>generations</em>.</p>\n<p>Binary is the first generation of programming languages (or 1GL).</p>\n<p>As programming languages progressed throughout history and new ones were developed, they started to look more like the languages humans use.</p>\n<h3 id=\"introductionofassemblylanguage\">Introduction of Assembly Language</h3>\n<p>The second generation of programming languages was Assembly language (2GL), which was a major leap forward and improvement in writing programs compared to using machine language.</p>\n<p>It was still a very low-level language, but Assembly introduced alphabetical letters to programs, otherwise known as <em>mneumonic codes</em>, which made it easier to understand and use.</p>\n<p>In Assembly there is a strong correspondence between the instructions used in the language and the underlying computer's architecture.</p>\n<p>So, there is a correlation between the mneumonics in the language, and the machine's native binary instructions.</p>\n<p>Assembly introduced a translator, called an <em>assembler</em>, to convert programs written in it to machine language (since that is the only language computer programs can be executed in).</p>\n<p>Assembly was more readable and easier to use and debug, but it was still very error prone and tiresome to write programs in.</p>\n<h3 id=\"theintroductionofhigherlevelprogramminglanguages\">The introduction of higher level programming languages</h3>\n<p>Following Assembly language, the third generation programming languages (3GL) came along.</p>\n<p>They paved the way to a new style of programming, making it more accessible to people and moving further from the native language of machines.</p>\n<p>These languages were called higher level languages - that is languages that are easier for humans to read, write, and understand, since they resemble an English-like way of writing.</p>\n<p>They are machine independent, with more levels of abstraction away from the machine.</p>\n<p>Translators called <em>compilers</em> were introduced to translate the code programmers wrote in such a language (also known as source code) to machine executable binary code.</p>\n<p>Such languages included BASIC, FORTRAN, COBOL, PASCAL, and others that are popular and frequently used to this day, like C, C++, Java, and JavaScript.</p>\n<p>Fourth generation languages followed (4GL), which were faster and even easier to use, with more layers of abstractions from the computer. And they looked more and more like human languages.</p>\n<p>They increased productivity as programmers no longer had to take the time to tell the computer <em>how</em> to solve a problem.</p>\n<p>Instead, they focused on just telling the computer <em>what</em> to do, without the additional steps on <em>how</em> to do it.</p>\n<p>Fourth generation languages include scripting languages such as Python and Ruby, but also query languages, used to retrive data from databases, such as SQL (Structured Query Language).</p>\n<p>Finally, fith generation programming languages (5GL) are based on Artificial Intelligence.</p>\n<p>Computers are trained to learn how to solve problems, without the programmer needing to write algorithms.</p>\n<p>Some of the languages used include Prolog and Mercury.</p>\n<h2 id=\"whyshouldyoulearntocode\">Why should you learn to code?</h2>\n<p>Coding is a powerful tool.</p>\n<p>It allows you to solve a problem in unique and creative ways and gives you the chance to bring an idea to life.</p>\n<p>By learning to code you may be able to make a dream of yours a reality and bring a vision you have to fruition.</p>\n<p>Coding also helps you understand the constantly changing digital world around you.</p>\n<p>Pretty much everything you use on a daily basis runs on code - from looking for directions to a particular destination, to ordering items online, to apps that track the steps you have taken that day.</p>\n<p>Coding is used in every single industry, so knowing at least the basics of coding will give you that extra competitive edge when looking for a new role or for a promotion.</p>\n<p>Also, there's no shortage of IT and programming jobs out there right now. On the contrary they are growing and that growth doesn\u2019t seem to be easing off anytime soon (despite theories that Artificial Intelligence will eventually replace programmers).</p>\n<p>Besides these reasons to learn to code, coding makes for a fun new hobby and productive passtime.</p>\n<p>Coding is for everyone no matter their age, their background, or where they are in life.</p>\n<p>You don\u2019t need a four year college degree to get started. You can <a href=\"https://www.freecodecamp.org/learn/\">begin learning for free</a>, from the comfort of your own home.</p>\n<p>Anyone can learn to code if they want to.</p>\n<h2 id=\"howtostartcoding\">How to start coding</h2>\n<p>There are many programming languages out there, and as a newbie it can get overwhelming choosing the first one to learn.</p>\n<p>To get started, think of a problem you want to solve and then research what technology would help you reach your goal.</p>\n<p>For example, if you want to create a personal website, you wouldn't start by learning Java or C++.</p>\n<p>A good starting point for beginners could be the following:</p>\n<ul>\n<li>HTML (Hyper Text Markup Language), which is the bones of every webpage. It displays all kind of content you see on websites - from text, to links, images and videos.</li>\n<li>CSS (Cascading Style Sheets), which makes the HTML look pretty. It is used to change the font styles and colors of websites, and also it is used to make a website responsive and usable on every device.</li>\n<li>JavaScript, which adds functionality and interactivity to otherwise static web pages.</li>\n</ul>\n<p>freeCodeCamp has a well thought out and extensive, interactive curriculum. It helps learners take their first steps in coding and helps them land a job with the new skills they acquire.</p>\n<p>Check out the <a href=\"https://www.freecodecamp.org/learn/2022/responsive-web-design/\">Responsive Web Design Certification</a>, where you'll build  projects that you can add to your portfolio to showcase your skills to potential employers.</p>\n<p>freeCodeCamp also has a <a href=\"https://www.youtube.com/channel/UC8butISFwT-Wl7EV0hUK0BQ\">YouTube channel</a> with free, full-length courses on a wide variety of tech topics.</p>\n<p>And there's also the friendly freeCodeCamp community that can help you when you get stuck and support you throughout your coding journey. So make sure to engage in the <a href=\"https://forum.freecodecamp.org/\">forum</a> when you need help.</p>\n<h2 id=\"wrappingup\">Wrapping Up</h2>\n<p>Coding is a skill that cannot be learnt overnight, so don't rush the process!</p>\n<p>Like learning any new language, learning to code takes time,patience, consistent practice and lots of trial and error.</p>\n<p>As quoted by Beverly Sills, and shown on <a href=\"https://www.freecodecamp.org/learn/\">freeCodeCamp</a> as one of the inspirational quotes:</p>\n<blockquote>\n<p>There are no short cuts to any place worth going.</p>\n</blockquote>\n<p>Thanks for reading!</p>\n<!--kg-card-end: markdown-->\n</section>\n<hr/>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nWhen you start learning to code, one of the questions you probably ask yourself is \"What lannguage should I learn first?\"\nOne of the most exciting \u2013 and at times overwhelming \u2013 things about learning to code is just how much there is to learn.\nBut instead of just focusing on learning one specific technology, it can also help to learn the foundations \u2013 the building blocks. You can peel back the layers of abstraction to get to know the underlying principles that all technologies have in common.\nUnderstanding what coding is at a fundamental level will make solving problems easier and will give you a better understanding of how different technologies work underneath the hood.\nThis article goes over the fundamentals of computer coding and what programs are made of, while also giving some suggestions on how to start taking your first steps in learning how to code.\nWhat is coding? A definition for beginners\nComputer coding, also known as computer programming, is a way to tell a computer what to do.\nCoding is a way to tell the computer how it should behave overall - the exact actions it needs to take and how to take them in an effective and efficient way.\nSpecifically, coding is the process of creating and then giving the computer a detailed set of instructions to be carefully executed in sequential order.\nThe set of instructions are called a program or the code.\nComputers are incredibly clever machines, but they rely on humans for getting things done.\nIn a nutshell, coding is the art of humans communicating with computers. It helps us solve problems and create helpful new tools for communities, such as apps or websites, and lets us analyze and process large sets of data.\nAn overview of the coding process\nCoding is all about problem solving.\nWhen writing code, you'll be taking a problem and breaking it down into smaller and smaller steps of action, using logical reasoning, to finally come to a conclusion and solution.\nComputers take everything literally and pay extreme attention to detail.\nMaking a small mistake in your code \u2013 such as a typo in a word, a missed semicolon, telling a computer to repeat a certain action but not telling it how and when to stop repeating it \u2013 will all result in an error message.\nThese mistakes are called bugs in the code.\nThe process of identifying the possible mistakes, finding what is causing the problem, and then fixing the mistake so the code works as it was intended to is called debugging.\nThis is a critical part of writing code and learning how to code in general.\nWhy algorithms are important in coding\nFiguring out the exact instructions to give the computer so it can accomplish specific tasks is the most difficult part of coding and problem solving.\nComputers make no assumptions and they do exactly as they are told. This means that there should be no ambiguity in the instructions they receive.\nInstructions need to be defined clearly, with the correct number and order of steps the computer should take to solve a problem.\nThe set of step-by-step, ordered instructions for solving problems and for the computer to complete every single task are called algorithms.\nAlgorithms are sequences of actions that need to be correct, efficient, precise, and to the point, and they should leave no room for misinterpretation.\nAlgorithms are not only reserved for computers to follow. Humans use algorithms on a daily basis, too.\nAn example of a type of algorithm we use frequently is following a cooking recipe.\nThe recipe is the algorithm. You need to follow the series of steps in the recipe in the correct order to get the end result you want.\nHow to write pseudocode to plan out algorithms\nThe way to organise, plan ahead, and write down the steps you need to follow, or the algorithm, is to first write pseudocode.\nPseudocode is an informal way to represent algorithms.\nThere is no specific syntax to pseudocode. It is written in plain, readable English (or any other natural, human language) using some technical terms.\nThe purpose of writing it is solely for the programmer to understand the reasoning and logic behind the code/steps that need to be written to solve the problem, using simple phrases.\nAfter doing so,the programmer writes code that is actually executed by the computer.\nPseudocode is a simpler version of computer code and is the first step before any computer code gets written.\nFor example, say you wanted to write a program that aksed the user to enter their password and checked if it was equal to '1234'.\nIf the password was equal to '1234', then you'd let them into the system, otherwise they would be rejected.\nA simple version of that written in pseudocode could look something like this:\nuser_password = input: \"Please enter your password to sign-in: \"\n\nif user_password is equal to '1234'\n    let them into the system\nelse\n    tell them they entered the wrong password\n\nYou can then build on that code later, as you went on.\nFor example, if they entered the wrong password you could ask them for it again.\nIf they entered it wrong more than 3 times, they would be rejected from the system.\ncorrect_password = 1234\nattempts = 0\n\nwhile conditions are true\n     user_password = input: \"Please enter your password to sign-in: \"\n     attempts = attempts + 1\n     if user_password is equal to correct_password\n         let user in the system and stop the program\n     if user_password is NOT equal to correct_password AND attempts is greater than 3\n         don't let user in and stop the program\n\nHow programming languages bridge the communication gap between humans and computers\n\nComputers at their core only speak one language - binary or machine code.\nIt's a base-2 numerical system, comprised of only two possible numbers: 0 and 1.\nThis ties in well with the fact that computers are powered by electricity, which has only two possible states: off and on.\nInside computers there are millions of microscopic switches, or transistors, that control the ebb and flow of electricity.\nSo, essentially computers understand only no and yes.\nValues are represented by transistors being either off (or 0 or no) or on (or 1 or yes).\nUnderneath the hood, everything is represented in that state.\nBinary, or machine language, is the lowest level of language as it's the closest to the machine.\nInstructions are represented only in numbers, sequences of 0s and 1s (also known as binary digits), which directly control the computer's CPU ( Central Processing Unit). Each machine architecture has it's own unique machine language.\nThis language is incredibly fast as there is no need for any kind of conversion \u2013 but it's not easy for humans to use.\nIt's error prone and time consuming.\nBinary was used in the early days of computing, but these programs written in binary were tricky to understand and read.\nThere was a need for languages that were easily understood and interpreted by both humans and computers.\nThroughout the years, programming languages have evolved. These evolutions are called levels, or generations.\nBinary is the first generation of programming languages (or 1GL).\nAs programming languages progressed throughout history and new ones were developed, they started to look more like the languages humans use.\nIntroduction of Assembly Language\nThe second generation of programming languages was Assembly language (2GL), which was a major leap forward and improvement in writing programs compared to using machine language.\nIt was still a very low-level language, but Assembly introduced alphabetical letters to programs, otherwise known as mneumonic codes, which made it easier to understand and use.\nIn Assembly there is a strong correspondence between the instructions used in the language and the underlying computer's architecture.\nSo, there is a correlation between the mneumonics in the language, and the machine's native binary instructions.\nAssembly introduced a translator, called an assembler, to convert programs written in it to machine language (since that is the only language computer programs can be executed in).\nAssembly was more readable and easier to use and debug, but it was still very error prone and tiresome to write programs in.\nThe introduction of higher level programming languages\nFollowing Assembly language, the third generation programming languages (3GL) came along.\nThey paved the way to a new style of programming, making it more accessible to people and moving further from the native language of machines.\nThese languages were called higher level languages - that is languages that are easier for humans to read, write, and understand, since they resemble an English-like way of writing.\nThey are machine independent, with more levels of abstraction away from the machine.\nTranslators called compilers were introduced to translate the code programmers wrote in such a language (also known as source code) to machine executable binary code.\nSuch languages included BASIC, FORTRAN, COBOL, PASCAL, and others that are popular and frequently used to this day, like C, C++, Java, and JavaScript.\nFourth generation languages followed (4GL), which were faster and even easier to use, with more layers of abstractions from the computer. And they looked more and more like human languages.\nThey increased productivity as programmers no longer had to take the time to tell the computer how to solve a problem.\nInstead, they focused on just telling the computer what to do, without the additional steps on how to do it.\nFourth generation languages include scripting languages such as Python and Ruby, but also query languages, used to retrive data from databases, such as SQL (Structured Query Language).\nFinally, fith generation programming languages (5GL) are based on Artificial Intelligence.\nComputers are trained to learn how to solve problems, without the programmer needing to write algorithms.\nSome of the languages used include Prolog and Mercury.\nWhy should you learn to code?\nCoding is a powerful tool.\nIt allows you to solve a problem in unique and creative ways and gives you the chance to bring an idea to life.\nBy learning to code you may be able to make a dream of yours a reality and bring a vision you have to fruition.\nCoding also helps you understand the constantly changing digital world around you.\nPretty much everything you use on a daily basis runs on code - from looking for directions to a particular destination, to ordering items online, to apps that track the steps you have taken that day.\nCoding is used in every single industry, so knowing at least the basics of coding will give you that extra competitive edge when looking for a new role or for a promotion.\nAlso, there's no shortage of IT and programming jobs out there right now. On the contrary they are growing and that growth doesn\u2019t seem to be easing off anytime soon (despite theories that Artificial Intelligence will eventually replace programmers).\nBesides these reasons to learn to code, coding makes for a fun new hobby and productive passtime.\nCoding is for everyone no matter their age, their background, or where they are in life.\nYou don\u2019t need a four year college degree to get started. You can begin learning for free, from the comfort of your own home.\nAnyone can learn to code if they want to.\nHow to start coding\nThere are many programming languages out there, and as a newbie it can get overwhelming choosing the first one to learn.\nTo get started, think of a problem you want to solve and then research what technology would help you reach your goal.\nFor example, if you want to create a personal website, you wouldn't start by learning Java or C++.\nA good starting point for beginners could be the following:\n\nHTML (Hyper Text Markup Language), which is the bones of every webpage. It displays all kind of content you see on websites - from text, to links, images and videos.\nCSS (Cascading Style Sheets), which makes the HTML look pretty. It is used to change the font styles and colors of websites, and also it is used to make a website responsive and usable on every device.\nJavaScript, which adds functionality and interactivity to otherwise static web pages.\n\nfreeCodeCamp has a well thought out and extensive, interactive curriculum. It helps learners take their first steps in coding and helps them land a job with the new skills they acquire.\nCheck out the Responsive Web Design Certification, where you'll build  projects that you can add to your portfolio to showcase your skills to potential employers.\nfreeCodeCamp also has a YouTube channel with free, full-length courses on a wide variety of tech topics.\nAnd there's also the friendly freeCodeCamp community that can help you when you get stuck and support you throughout your coding journey. So make sure to engage in the forum when you need help.\nWrapping Up\nCoding is a skill that cannot be learnt overnight, so don't rush the process!\nLike learning any new language, learning to code takes time,patience, consistent practice and lots of trial and error.\nAs quoted by Beverly Sills, and shown on freeCodeCamp as one of the inspirational quotes:\n\nThere are no short cuts to any place worth going.\n\nThanks for reading!\n\n\n                        \n                    \n                    \n                        \n                        \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 13812, "excerpt": "When you start learning to code, one of the questions you probably ask yourself\nis \"What lannguage should I learn first?\"\n\nOne of the most exciting \u2013 and at times overwhelming \u2013 things about learning to\ncode is just how much there is to learn.\n\nBut instead of just focusing on learning one specific technology, it can also\nhelp to learn the foundations \u2013 the building blocks. You can peel back the\nlayers of abstraction to get to know the underlying principles that all\ntechnologies have in common.", "siteName": "freeCodeCamp.org", "publishedTime": "2022-01-03T17:32:46.000Z", "id": "e1352b9261b55f96ce10e91f63cf08d0137ff45c", "url": "https://www.freecodecamp.org/news/computer-coding-computer-program-definition-and-code-meaning/", "domain": "freecodecamp.org", "date": "2023-12-27T18:05:39.209342", "resultUri": "http://localhost:3000/result/e1352b9261b55f96ce10e91f63cf08d0137ff45c", "query": {"url": ["https://www.freecodecamp.org/news/computer-coding-computer-program-definition-and-code-meaning/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "Computer Coding \u2013 Computer Program Definition and Code Meaning", "description": "When you start learning to code, one of the questions you probably ask yourself is \"What lannguage should I learn first?\" One of the most exciting \u2013 and at times overwhelming \u2013 things about learning to code is just how much there is to learn. But instead of just focusing", "url": "https://www.freecodecamp.org/news/computer-coding-computer-program-definition-and-code-meaning/", "image": "https://www.freecodecamp.org/news/content/images/2022/01/alexander-sinn-KgLtFCgfC28-unsplash.jpg", "image:width": "2000", "image:height": "1336"}, "twitter": {"card": "summary_large_image", "title": "Computer Coding \u2013 Computer Program Definition and Code Meaning", "description": "When you start learning to code, one of the questions you probably ask yourself is \"What lannguage should I learn first?\" One of the most exciting \u2013 and at times overwhelming \u2013 things about learning to code is just how much there is to learn. But instead of just focusing", "url": "https://www.freecodecamp.org/news/computer-coding-computer-program-definition-and-code-meaning/", "image": "https://www.freecodecamp.org/news/content/images/2022/01/alexander-sinn-KgLtFCgfC28-unsplash.jpg", "label1": "Written by", "data1": "Dionysia Lemonaki", "label2": "Filed under", "data2": "Coding, Programming, Beginner, Learning To Code", "site": "@freecodecamp"}}}