{"title": "What is Recursion in JavaScript?", "byline": "Benjamin Semah", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>What is Recursion in JavaScript?</h1>\n<section>\n<section data-test-label=\"post-content\">\n<p>Recursion is a problem-solving technique in programming. In this article, you will learn how to use recursive functions in JavaScript.</p><h2 id=\"what-is-a-recursive-function\">What is a Recursive Function?</h2><p>A recursive function is a function that calls itself somewhere within the body of the function. Below is a basic example of a recursive function.</p><pre tabindex=\"0\"><code>function recursiveFunc() {\n  // some code here... \n  recursiveFunc()\n}</code></pre><p>As you can see, the <code>recursiveFunc</code> function calls itself within the body of the function. It will repeat calling itself until the desired output is achieved.</p><p>So how do you tell the function when to stop calling itself? You do that using a <strong>base condition</strong>.</p><h2 id=\"the-three-parts-of-a-recursive-function\">The Three Parts of a Recursive Function</h2><p>Every time you write a recursive function, three elements must be present. They are:</p><ul><li>The function definition.</li><li>The base condition.</li><li>The recursive call.</li></ul><p>When these three elements are missing, your recursive function won't work as you expect. Let's take a closer look at each one.</p><h3 id=\"how-to-define-a-recursive-function\">How to define a recursive function</h3><p>You define a recursive function the same way you define regular JavaScript functions.</p><pre tabindex=\"0\"><code>function recursiveFunc() {\n  // some code here...\n} </code></pre><p>What differentiates recursive functions from regular JavaScript functions are the base condition and the recursive call.</p><h3 id=\"what-is-a-base-condition\">What is a base condition?</h3><p>When using a recursive function, the base condition is what lets the function know when to stop calling itself. Once the base condition is met, the recursion ends.</p><pre tabindex=\"0\"><code>function recursiveFunc() {\n  if(base condition) {\n    // stops recursion if condition is met\n  }\n  // else recursion continues\n  recurse();\n}</code></pre><h3 id=\"why-do-you-need-a-base-condition\">Why do you need a base condition?</h3><p>Without the base condition, you will run into infinite recursion. A situation where your function continues calling itself without stopping, like this:</p><pre tabindex=\"0\"><code>function doSomething(action) {\n  console.log(`I am ${action}.`)\n  doSomething(action)\n}\n\ndoSomething(\"running\")</code></pre><p>Also, without a base condition, your function exceeds the maximum call stack. You will run into the error shown below.</p><figure><img alt=\"benjamin-semah-max-callstack\" height=\"122\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2022/11/benjamin-semah-max-callstack.PNG\" width=\"391\"/><figcaption>Maximum call stack exceeded when there's no base condition</figcaption></figure><p>The Call Stack keeps track of what functions are currently running and the functions that are within them.</p><p>The call stack has a limit. And since a recursive function without a base condition will run infinitely, it exceeds the call stack's limit.</p><p>The base condition provides a way to break out when the function gets the desired output.</p><h3 id=\"example-of-recursive-function\">Example of recursive function</h3><p>Let's see a simple example of a recursive function.</p><pre tabindex=\"0\"><code>function doSomething(n) {\n  if(n === 0) {\n    console.log(\"TASK COMPLETED!\")\n    return\n  }\n  console.log(\"I'm doing something.\")\n  doSomething(n - 1)\n}\ndoSomething(3)</code></pre><p>Here is the result when you pass the number <code>3</code> to the <code>doSomething</code> function.</p><figure><img alt=\"benjamin-semah-task-completed\" height=\"113\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2022/11/benjamin-semah-task-completed.PNG\" width=\"265\"/></figure><p>The base condition for the <code>doSomething</code> function is <code>n === 0</code>. Anytime the function is called, it first checks if the base condition is met.</p><p>If yes, it prints <code>TASK COMPLETED!</code>. If not, it continues with the rest of the code in the function. In this case, it will print <code>I'm doing something.</code> and then call the function again.</p><h3 id=\"the-recursive-call\">The recursive call</h3><p>The recursive call is what handles the function calling itself again. In the <code>doSomething</code> function, the recursive call is the line below.</p><pre tabindex=\"0\"><code>doSomething(n-1)</code></pre><p>Note what happens when the function calls itself. A new parameter \u00a0<code>n - 1</code> is passed to the function. On every iteration of a recursive call, the parameter will differ from that of the previous call.</p><p>The function will keep calling itself until the new parameter satisfies the base condition.</p><h2 id=\"recursion-vs-loops\">Recursion vs Loops</h2><p>Recursion and loops work in similar ways. Every recursive function you write has an alternative solution with a loop.</p><p>For example, you can create a function to find the factorial of a given number using both recursion and loops.</p><h3 id=\"how-to-find-the-factorial-with-a-loop-\">How to find the factorial with a loop:</h3><pre tabindex=\"0\"><code>function findFactorial(num) {\n  let factorial = 1\n  for (let i = num; i &gt; 0; i--) {\n    factorial *= i\n  }\n  return factorial\n}\n\nfindFactorial(5) // 120</code></pre><p>To find the factorial using a loop, you first initialize a variable <code>factorial</code> with a value of <code>1</code>.</p><p>Then you initiate the loop with the given number <code>num</code>. The loop will continue running until <code>i &gt; 0</code>.</p><p>For each iteration, you multiply the current value of <code>factorial</code> by <code>i</code>. And you decrease the value of <code>i</code> by 1 until <code>i</code> is not greater than zero.</p><p>Finally, you return the value of the factorial when the loop finishes running.</p><h3 id=\"how-to-find-the-factorial-with-recursion-\">How to find the factorial with recursion:</h3><p>You can create the same solution with a recursive function.</p><pre tabindex=\"0\"><code>function findFactorial(num) {\n  if (num === 0) return 1\n  let factorial = num * findFactorial(num - 1)\n  return factorial;\n}\n\nfindFactorial(5) // 120</code></pre><p>First, you need a base condition <code>num === 0</code>.</p><p>You also need the recursive call <code>findFactorial(num - 1)</code> to ensure the number keeps reducing at each call when you pass a new parameter of <code>n-1</code>.</p><p>Then you multiply the result with the previous number <code>num * findFactorial(num - 1)</code> until the base condition is met.</p><h3 id=\"so-which-is-better-recursion-or-loops\">So which is better \u2013 recursion or loops?</h3><p>So which one is better? There's no right or wrong answer to that. It's up to you to decide. Depending on the problem you're solving, you may choose one over the other.</p><p>Optimize for the readability of your code. Sometimes, like in the factorial example, recursion leads to shorter and more readable code. </p><p>But recursive functions are not always intuitive. If that's the case, you should stick to loops.</p><h2 id=\"conclusion\">Conclusion</h2><p>In this article, you've learned what recursion is and how to create recursive functions in JavaScript.</p><p>Reading and writing recursive functions might be confusing at first. But remember, what makes recursive functions different from regular functions are the <strong>base condition</strong> and the <strong>recursive call</strong>.</p><p>Thanks for reading. And happy coding!</p>\n</section>\n<hr/>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nRecursion is a problem-solving technique in programming. In this article, you will learn how to use recursive functions in JavaScript.What is a Recursive Function?A recursive function is a function that calls itself somewhere within the body of the function. Below is a basic example of a recursive function.function recursiveFunc() {\n  // some code here... \n  recursiveFunc()\n}As you can see, the recursiveFunc function calls itself within the body of the function. It will repeat calling itself until the desired output is achieved.So how do you tell the function when to stop calling itself? You do that using a base condition.The Three Parts of a Recursive FunctionEvery time you write a recursive function, three elements must be present. They are:The function definition.The base condition.The recursive call.When these three elements are missing, your recursive function won't work as you expect. Let's take a closer look at each one.How to define a recursive functionYou define a recursive function the same way you define regular JavaScript functions.function recursiveFunc() {\n  // some code here...\n} What differentiates recursive functions from regular JavaScript functions are the base condition and the recursive call.What is a base condition?When using a recursive function, the base condition is what lets the function know when to stop calling itself. Once the base condition is met, the recursion ends.function recursiveFunc() {\n  if(base condition) {\n    // stops recursion if condition is met\n  }\n  // else recursion continues\n  recurse();\n}Why do you need a base condition?Without the base condition, you will run into infinite recursion. A situation where your function continues calling itself without stopping, like this:function doSomething(action) {\n  console.log(`I am ${action}.`)\n  doSomething(action)\n}\n\ndoSomething(\"running\")Also, without a base condition, your function exceeds the maximum call stack. You will run into the error shown below.Maximum call stack exceeded when there's no base conditionThe Call Stack keeps track of what functions are currently running and the functions that are within them.The call stack has a limit. And since a recursive function without a base condition will run infinitely, it exceeds the call stack's limit.The base condition provides a way to break out when the function gets the desired output.Example of recursive functionLet's see a simple example of a recursive function.function doSomething(n) {\n  if(n === 0) {\n    console.log(\"TASK COMPLETED!\")\n    return\n  }\n  console.log(\"I'm doing something.\")\n  doSomething(n - 1)\n}\ndoSomething(3)Here is the result when you pass the number 3 to the doSomething function.The base condition for the doSomething function is n === 0. Anytime the function is called, it first checks if the base condition is met.If yes, it prints TASK COMPLETED!. If not, it continues with the rest of the code in the function. In this case, it will print I'm doing something. and then call the function again.The recursive callThe recursive call is what handles the function calling itself again. In the doSomething function, the recursive call is the line below.doSomething(n-1)Note what happens when the function calls itself. A new parameter \u00a0n - 1 is passed to the function. On every iteration of a recursive call, the parameter will differ from that of the previous call.The function will keep calling itself until the new parameter satisfies the base condition.Recursion vs LoopsRecursion and loops work in similar ways. Every recursive function you write has an alternative solution with a loop.For example, you can create a function to find the factorial of a given number using both recursion and loops.How to find the factorial with a loop:function findFactorial(num) {\n  let factorial = 1\n  for (let i = num; i > 0; i--) {\n    factorial *= i\n  }\n  return factorial\n}\n\nfindFactorial(5) // 120To find the factorial using a loop, you first initialize a variable factorial with a value of 1.Then you initiate the loop with the given number num. The loop will continue running until i > 0.For each iteration, you multiply the current value of factorial by i. And you decrease the value of i by 1 until i is not greater than zero.Finally, you return the value of the factorial when the loop finishes running.How to find the factorial with recursion:You can create the same solution with a recursive function.function findFactorial(num) {\n  if (num === 0) return 1\n  let factorial = num * findFactorial(num - 1)\n  return factorial;\n}\n\nfindFactorial(5) // 120First, you need a base condition num === 0.You also need the recursive call findFactorial(num - 1) to ensure the number keeps reducing at each call when you pass a new parameter of n-1.Then you multiply the result with the previous number num * findFactorial(num - 1) until the base condition is met.So which is better \u2013 recursion or loops?So which one is better? There's no right or wrong answer to that. It's up to you to decide. Depending on the problem you're solving, you may choose one over the other.Optimize for the readability of your code. Sometimes, like in the factorial example, recursion leads to shorter and more readable code. But recursive functions are not always intuitive. If that's the case, you should stick to loops.ConclusionIn this article, you've learned what recursion is and how to create recursive functions in JavaScript.Reading and writing recursive functions might be confusing at first. But remember, what makes recursive functions different from regular functions are the base condition and the recursive call.Thanks for reading. And happy coding!\n\n                        \n                    \n                    \n                        \n                        \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 6327, "excerpt": "Recursion is a problem-solving technique in programming. In this article, you\nwill learn how to use recursive functions in JavaScript.\n\nWhat is a Recursive Function?\nA recursive function is a function that calls itself somewhere within the body\nof the function. Below is a basic example of a recursive function.\n\nfunction recursiveFunc() {\n  // some code here... \n  recursiveFunc()\n}\n\nAs you can see, the recursiveFunc function calls itself within the body of the\nfunction. It will repeat calling its", "siteName": "freeCodeCamp.org", "publishedTime": "2022-11-14T18:44:18.000Z", "id": "dacdd006711c48a3e264a463187b339219a0b9e5", "url": "https://www.freecodecamp.org/news/recursion-in-javascript/", "domain": "freecodecamp.org", "date": "2023-12-27T18:05:11.507624", "resultUri": "http://localhost:3000/result/dacdd006711c48a3e264a463187b339219a0b9e5", "query": {"url": ["https://www.freecodecamp.org/news/recursion-in-javascript/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "What is Recursion in JavaScript?", "description": "Recursion is a problem-solving technique in programming. In this article, you will learn how to use recursive functions in JavaScript. What is a Recursive Function? A recursive function is a function that calls itself somewhere within the body of the function. Below is a basic example of a recursive function.", "url": "https://www.freecodecamp.org/news/recursion-in-javascript/", "image": "https://www.freecodecamp.org/news/content/images/2022/11/benjamin-semah-freecodecamp-recursion.png", "image:width": "1600", "image:height": "840"}, "twitter": {"card": "summary_large_image", "title": "What is Recursion in JavaScript?", "description": "Recursion is a problem-solving technique in programming. In this article, you will learn how to use recursive functions in JavaScript. What is a Recursive Function? A recursive function is a function that calls itself somewhere within the body of the function. Below is a basic example of a recursive function.", "url": "https://www.freecodecamp.org/news/recursion-in-javascript/", "image": "https://www.freecodecamp.org/news/content/images/2022/11/benjamin-semah-freecodecamp-recursion.png", "label1": "Written by", "data1": "Benjamin Semah", "label2": "Filed under", "data2": "JavaScript, Recursion, Programming", "site": "@freecodecamp", "creator": "@BenjaminSemah"}}}