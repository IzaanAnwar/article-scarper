{"title": "Variable Data Types Explained", "byline": "Deborah Kurata", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>Variable Data Types Explained</h1>\n<section>\n<section data-test-label=\"post-content\">\n<p>Walking into a hardware store, it's not enough to say: \"I need a tool\". You need to be specific about the type of tool you need. </p><p>Each tool type has its particular purpose: A hammer to drive a nail into wood, a paint brush to paint, and a wrench tightens or loosens nuts and bolts.</p><p>The same goes for the variables we use to hold data in our code. Regardless of the programming language you use, when building a website or app you'll want to use the appropriate type of variable for a particular purpose. We'll look at basic types and more complex types such as arrays (lists) and objects.</p><p>You can also watch the associated video here which walks through the key variable data types.</p><figure data-test-label=\"fitted\">\n\n</figure><h2 id=\"basic-data-types\"><strong>Basic Data Types</strong></h2><p>The most common basic data types available in most programming languages include:</p><p><strong>numbers</strong>: we use this for any data that is numeric or should be worked with as a number for addition or other math operations. </p><p>In some programming languages, there are multiple data types for numbers, depending on whether the number is an integer, decimal, or currency, for example. </p><p>If we were building a number guessing game, we would hold the guessed number in a numeric data type, like this:</p><pre tabindex=\"0\"><code>usersGuess = 3</code></pre><p><strong>string</strong>: we use this for any data that is text. For example, a name or address or message. In most programming languages, strings require quotes. Notice that the text inside of the quotes can include spaces and other special characters.</p><pre tabindex=\"0\"><code>usersName = \"Jack Harkness\"</code></pre><p><strong>date</strong>: we use this for data that is a date or time, such as a birthday.</p><pre tabindex=\"0\"><code>usersBirthday = April 14, 2001</code></pre><p><strong>Boolean</strong>: we use this for data that only has the value <code>true</code> or <code>false</code>. In a number guessing game, the user's guess was either correct or it wasn't. There is no other value.</p><pre tabindex=\"0\"><code>correctGuess = true</code></pre><p>For programming languages that are considered to be \"strongly typed\", such as C# and TypeScript, the data type defines the kind of data that can be assigned to that variable. You'll see an error if you try to put the wrong type of data into a variable.</p><pre tabindex=\"0\"><code>pageTitle = 'Pet List';\t// Variable is a string.\n\npageTitle = 42;\t\t\t// Error\n\t\t\t\t\t\t// Can't put a number into a string variable</code></pre><p>With \"dynamically typed\" languages such as JavaScript and Python, the data type defines the kind of data currently assigned to that variable. That type can change if you put a different type of data into that variable. So the type dynamically changes based on the currently assigned value.</p><pre tabindex=\"0\"><code>pageTitle = 'Pet List';\t\t\t// Variable type is a string\n\npageTitle = 42;\t\t\t\t\t// Variable type is now a number</code></pre><h2 id=\"array-list-data-type\"><strong>Array (List) Data Type</strong></h2><p>Another important data type in programming is an array, which in some programming languages is called a list.</p><p>Let's say we add a feature to our website or app<strong> </strong>so the user can provide the name of each of their pets. We could hold each name in a separate variable like shown in Figure 1.</p><figure><img alt=\"Pictures of three cats with three variables to hold the name of each cat.\" height=\"1080\" loading=\"lazy\" sizes=\"(min-width: 1200px) 1200px\" src=\"https://www.freecodecamp.org/news/content/images/2023/03/array1.jpg\" srcset=\"https://www.freecodecamp.org/news/content/images/size/w600/2023/03/array1.jpg 600w, https://www.freecodecamp.org/news/content/images/size/w1000/2023/03/array1.jpg 1000w, https://www.freecodecamp.org/news/content/images/size/w1600/2023/03/array1.jpg 1600w, https://www.freecodecamp.org/news/content/images/2023/03/array1.jpg 1920w\" width=\"1920\"/><figcaption>Figure 1. Using separate string variables to hold multiple items.</figcaption></figure><p>But we'd then have to limit how many pets we could allow based on how many variables we'd defined.</p><p>Arrays solve this problem. An <strong>array </strong>is a collection or set of data items. You can think of an array as a list of items.</p><p>The data items in an array are often of the same type, so you may have an array of numbers, of strings, or of dates.</p><p>In some programming languages, including C#, TypeScript, JavaScript, and Python, arrays are defined with square brackets: [ ] and each value in the array is separated with commas.</p><pre tabindex=\"0\"><code>petNames = [\"Yoyo\", \"Vanny\", \"Cali\"]</code></pre><p>Here we define an array of strings. Recall that strings must be enclosed in quotation marks. </p><figure><img alt=\"Pictures of three cats with a single array to hold the name of each cat.\" height=\"1080\" loading=\"lazy\" sizes=\"(min-width: 1200px) 1200px\" src=\"https://www.freecodecamp.org/news/content/images/2023/03/array2.jpg\" srcset=\"https://www.freecodecamp.org/news/content/images/size/w600/2023/03/array2.jpg 600w, https://www.freecodecamp.org/news/content/images/size/w1000/2023/03/array2.jpg 1000w, https://www.freecodecamp.org/news/content/images/size/w1600/2023/03/array2.jpg 1600w, https://www.freecodecamp.org/news/content/images/2023/03/array2.jpg 1920w\" width=\"1920\"/><figcaption>Figure 2. Using an array to hold multiple items.</figcaption></figure><p>With arrays, the user can have an almost limitless number of items, such as names, because we can keep appending to the array.</p><pre tabindex=\"0\"><code>petNames = [\"Yoyo\", \"Vanny\", \"Cali\", \"Ben\", \"Maki\"]</code></pre><h2 id=\"object-data-type-custom-data-type-\"><strong>Object Data Type (Custom Data Type)</strong></h2><p>What about data that represent things in our application? Things like those shown in Figure 3:</p><ul><li>A pet</li><li>A customer</li><li>A product</li><li>Or post, and I actually mean a social media post here, but close enough.</li></ul><figure><img alt=\"Four icons representing pet, customer, product, and post\" height=\"1080\" loading=\"lazy\" sizes=\"(min-width: 1200px) 1200px\" src=\"https://www.freecodecamp.org/news/content/images/2023/03/object1.jpg\" srcset=\"https://www.freecodecamp.org/news/content/images/size/w600/2023/03/object1.jpg 600w, https://www.freecodecamp.org/news/content/images/size/w1000/2023/03/object1.jpg 1000w, https://www.freecodecamp.org/news/content/images/size/w1600/2023/03/object1.jpg 1600w, https://www.freecodecamp.org/news/content/images/2023/03/object1.jpg 1920w\" width=\"1920\"/><figcaption>Figure 3. Custom data type (object) examples.</figcaption></figure><p>We can hold detailed information about a thing, such as a pet or customer or blog post, in a set of string, number, and date variables. But to keep that set of variables for a particular thing together as one variable, we want a custom data type that describes that thing. </p><p>Think of an object as a custom data type that groups a set of related variables for a particular thing.</p><p>Let's walk through how to define an object as a custom data type.</p><h3 id=\"step-1-identify-properties-characteristics-\">Step 1: Identify Properties (Characteristics)</h3><p>To define an object data type, we first identify the data we want to hold for the object. These are often characteristics of the object, like a pet's name, type, and age. In programming, we call each of these characteristics a <strong>property </strong>of the object.</p><p>Let's look at some examples.</p><figure><img alt=\"Four icons representing pet, customer, product, and post and their characteristics\" height=\"1080\" loading=\"lazy\" sizes=\"(min-width: 1200px) 1200px\" src=\"https://www.freecodecamp.org/news/content/images/2023/03/object2.jpg\" srcset=\"https://www.freecodecamp.org/news/content/images/size/w600/2023/03/object2.jpg 600w, https://www.freecodecamp.org/news/content/images/size/w1000/2023/03/object2.jpg 1000w, https://www.freecodecamp.org/news/content/images/size/w1600/2023/03/object2.jpg 1600w, https://www.freecodecamp.org/news/content/images/2023/03/object2.jpg 1920w\" width=\"1920\"/><figcaption>Figure 4. Identify the data to store (or hold) for each object.</figcaption></figure><p>For a customer, the properties might be the customer's name, shipping address, and default payment method. </p><p>A product may have a product name, description, and a Boolean value defining whether the product is currently in stock.</p><p>And for a blog post, we may want to hold the user's name, the post text, and the date.</p><p>Each of these are properties of our object.</p><p>At this point, we have the list of properties for the object. We want to hold data for each of these properties.</p><h3 id=\"step-2-assign-a-property-name\">Step 2: Assign a Property Name</h3><p>Once we have the properties defined, we assign a name to each property as shown in Figure 5. </p><figure><img alt=\"Four icons representing pet, customer, product, and post and their property names\" height=\"1080\" loading=\"lazy\" sizes=\"(min-width: 1200px) 1200px\" src=\"https://www.freecodecamp.org/news/content/images/2023/03/object3.jpg\" srcset=\"https://www.freecodecamp.org/news/content/images/size/w600/2023/03/object3.jpg 600w, https://www.freecodecamp.org/news/content/images/size/w1000/2023/03/object3.jpg 1000w, https://www.freecodecamp.org/news/content/images/size/w1600/2023/03/object3.jpg 1600w, https://www.freecodecamp.org/news/content/images/2023/03/object3.jpg 1920w\" width=\"1920\"/><figcaption>Figure 5. Define a variable name for each object property.</figcaption></figure><p>The names follow the conventions for the programming language you are using. In general, property names cannot have spaces or special characters in them. They are often defined using camel case, with the first letter lower case and each additional word capitalized.</p><p>Each property also has a basic data type. <code>petName</code>, <code>customerName</code>, <code>productName</code>, and <code>userName</code> are strings. <code>age</code> is a number, <code>inStock</code> is a Boolean value (true or false), and <code>postDate</code> is a date.</p><p>We could keep track of separate variables for each of these pet properties and each of these customer properties and each of these post properties. But we'd end up with lots of unorganized variables.</p><p>Let's instead group each set of related properties into an object.</p><h3 id=\"step-3-group-the-properties-for-the-object\">Step 3: Group the Properties for the Object</h3><p>We group the properties of an object together using object literal syntax. This keeps the data for an object together and makes it easier to work with it as a set.</p><p>The syntax used to group the properties depends on the programming language you use. In languages such as JavaScript, TypeScript, and C#, object properties are grouped within curly braces ({ }).</p><pre tabindex=\"0\"><code>pet = {\n\tpetName: \"Yoyo\",\n    petType: \"cat\",\n    age: 11\n}</code></pre><figure><img alt=\"Four icons representing pet, customer, product, and post and a sample object.\" height=\"1080\" loading=\"lazy\" sizes=\"(min-width: 1200px) 1200px\" src=\"https://www.freecodecamp.org/news/content/images/2023/03/object4.jpg\" srcset=\"https://www.freecodecamp.org/news/content/images/size/w600/2023/03/object4.jpg 600w, https://www.freecodecamp.org/news/content/images/size/w1000/2023/03/object4.jpg 1000w, https://www.freecodecamp.org/news/content/images/size/w1600/2023/03/object4.jpg 1600w, https://www.freecodecamp.org/news/content/images/2023/03/object4.jpg 1920w\" width=\"1920\"/><figcaption>Figure 6. Group the properties for each object</figcaption></figure><p>For each object, the variable on the left of the equal sign is the object variable and represents a specific pet, customer, product, or post. On the right of the equal sign, inside the curly braces, we list each property name, a colon, and the data (often called a value). We separate properties with a comma.</p><p>To say that another way, you can think of an object as a collection of name and value pairs. The name is the property name and the value is the data you want to store for that property. </p><p>In Figure 6, we defined a pet object with a specific set of properties, and a value for each property. Same with the customer, and so on.</p><h2 id=\"try-it-yourself-\">Try It Yourself!</h2><p>Let's stop here for a moment and think about objects. What's your favorite hobby? If you built a website or an app to support that hobby, what objects might you define?</p><p>Maybe you like to bake, so you'd build a recipe app with your favorite recipes. You work with the data for each recipe using an object with properties such as ingredients, recipe steps, baking temperature, and time.</p><p>Or say you like sports. You'd track the data for each player using an object with properties such as name, position, and stats. And you'd track the data for each game using another object with properties such as teams and score.</p><p>What objects did you define for your hobby?</p><h2 id=\"wrapping-up\"><strong>Wrapping Up</strong></h2><p>A variable has a data type such as number, string (for text), date, and Boolean (for true or false).</p><p>An array stores a set of data items, often of the same type.</p><p>An object represents something in the website or app, like a pet, a customer, or a blog post. The object groups related properties holding the data for the object.</p><p>Now that you know all about data types, you can create variables of the appropriate type to hold any data you need for your website or app.</p><p>If you are self-taught or new to programming and want more information about general programming concepts, check out this course:</p><figure data-test-label=\"fitted\">\n\n</figure>\n</section>\n<hr/>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nWalking into a hardware store, it's not enough to say: \"I need a tool\". You need to be specific about the type of tool you need. Each tool type has its particular purpose: A hammer to drive a nail into wood, a paint brush to paint, and a wrench tightens or loosens nuts and bolts.The same goes for the variables we use to hold data in our code. Regardless of the programming language you use, when building a website or app you'll want to use the appropriate type of variable for a particular purpose. We'll look at basic types and more complex types such as arrays (lists) and objects.You can also watch the associated video here which walks through the key variable data types.\n        \n          \n            \n          \n        \n      Basic Data TypesThe most common basic data types available in most programming languages include:numbers: we use this for any data that is numeric or should be worked with as a number for addition or other math operations. In some programming languages, there are multiple data types for numbers, depending on whether the number is an integer, decimal, or currency, for example. If we were building a number guessing game, we would hold the guessed number in a numeric data type, like this:usersGuess = 3string: we use this for any data that is text. For example, a name or address or message. In most programming languages, strings require quotes. Notice that the text inside of the quotes can include spaces and other special characters.usersName = \"Jack Harkness\"date: we use this for data that is a date or time, such as a birthday.usersBirthday = April 14, 2001Boolean: we use this for data that only has the value true or false. In a number guessing game, the user's guess was either correct or it wasn't. There is no other value.correctGuess = trueFor programming languages that are considered to be \"strongly typed\", such as C# and TypeScript, the data type defines the kind of data that can be assigned to that variable. You'll see an error if you try to put the wrong type of data into a variable.pageTitle = 'Pet List';\t// Variable is a string.\n\npageTitle = 42;\t\t\t// Error\n\t\t\t\t\t\t// Can't put a number into a string variableWith \"dynamically typed\" languages such as JavaScript and Python, the data type defines the kind of data currently assigned to that variable. That type can change if you put a different type of data into that variable. So the type dynamically changes based on the currently assigned value.pageTitle = 'Pet List';\t\t\t// Variable type is a string\n\npageTitle = 42;\t\t\t\t\t// Variable type is now a numberArray (List) Data TypeAnother important data type in programming is an array, which in some programming languages is called a list.Let's say we add a feature to our website or app so the user can provide the name of each of their pets. We could hold each name in a separate variable like shown in Figure 1.Figure 1. Using separate string variables to hold multiple items.But we'd then have to limit how many pets we could allow based on how many variables we'd defined.Arrays solve this problem. An array is a collection or set of data items. You can think of an array as a list of items.The data items in an array are often of the same type, so you may have an array of numbers, of strings, or of dates.In some programming languages, including C#, TypeScript, JavaScript, and Python, arrays are defined with square brackets: [ ] and each value in the array is separated with commas.petNames = [\"Yoyo\", \"Vanny\", \"Cali\"]Here we define an array of strings. Recall that strings must be enclosed in quotation marks. Figure 2. Using an array to hold multiple items.With arrays, the user can have an almost limitless number of items, such as names, because we can keep appending to the array.petNames = [\"Yoyo\", \"Vanny\", \"Cali\", \"Ben\", \"Maki\"]Object Data Type (Custom Data Type)What about data that represent things in our application? Things like those shown in Figure 3:A petA customerA productOr post, and I actually mean a social media post here, but close enough.Figure 3. Custom data type (object) examples.We can hold detailed information about a thing, such as a pet or customer or blog post, in a set of string, number, and date variables. But to keep that set of variables for a particular thing together as one variable, we want a custom data type that describes that thing. Think of an object as a custom data type that groups a set of related variables for a particular thing.Let's walk through how to define an object as a custom data type.Step 1: Identify Properties (Characteristics)To define an object data type, we first identify the data we want to hold for the object. These are often characteristics of the object, like a pet's name, type, and age. In programming, we call each of these characteristics a property of the object.Let's look at some examples.Figure 4. Identify the data to store (or hold) for each object.For a customer, the properties might be the customer's name, shipping address, and default payment method. A product may have a product name, description, and a Boolean value defining whether the product is currently in stock.And for a blog post, we may want to hold the user's name, the post text, and the date.Each of these are properties of our object.At this point, we have the list of properties for the object. We want to hold data for each of these properties.Step 2: Assign a Property NameOnce we have the properties defined, we assign a name to each property as shown in Figure 5. Figure 5. Define a variable name for each object property.The names follow the conventions for the programming language you are using. In general, property names cannot have spaces or special characters in them. They are often defined using camel case, with the first letter lower case and each additional word capitalized.Each property also has a basic data type. petName, customerName, productName, and userName are strings. age is a number, inStock is a Boolean value (true or false), and postDate is a date.We could keep track of separate variables for each of these pet properties and each of these customer properties and each of these post properties. But we'd end up with lots of unorganized variables.Let's instead group each set of related properties into an object.Step 3: Group the Properties for the ObjectWe group the properties of an object together using object literal syntax. This keeps the data for an object together and makes it easier to work with it as a set.The syntax used to group the properties depends on the programming language you use. In languages such as JavaScript, TypeScript, and C#, object properties are grouped within curly braces ({ }).pet = {\n\tpetName: \"Yoyo\",\n    petType: \"cat\",\n    age: 11\n}Figure 6. Group the properties for each objectFor each object, the variable on the left of the equal sign is the object variable and represents a specific pet, customer, product, or post. On the right of the equal sign, inside the curly braces, we list each property name, a colon, and the data (often called a value). We separate properties with a comma.To say that another way, you can think of an object as a collection of name and value pairs. The name is the property name and the value is the data you want to store for that property. In Figure 6, we defined a pet object with a specific set of properties, and a value for each property. Same with the customer, and so on.Try It Yourself!Let's stop here for a moment and think about objects. What's your favorite hobby? If you built a website or an app to support that hobby, what objects might you define?Maybe you like to bake, so you'd build a recipe app with your favorite recipes. You work with the data for each recipe using an object with properties such as ingredients, recipe steps, baking temperature, and time.Or say you like sports. You'd track the data for each player using an object with properties such as name, position, and stats. And you'd track the data for each game using another object with properties such as teams and score.What objects did you define for your hobby?Wrapping UpA variable has a data type such as number, string (for text), date, and Boolean (for true or false).An array stores a set of data items, often of the same type.An object represents something in the website or app, like a pet, a customer, or a blog post. The object groups related properties holding the data for the object.Now that you know all about data types, you can create variables of the appropriate type to hold any data you need for your website or app.If you are self-taught or new to programming and want more information about general programming concepts, check out this course:\n        \n          \n            \n          \n        \n      \n\n                        \n                    \n                    \n                        \n                        \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 9427, "excerpt": "Walking into a hardware store, it's not enough to say: \"I need a tool\". You need\nto be specific about the type of tool you need. \n\nEach tool type has its particular purpose: A hammer to drive a nail into wood, a\npaint brush to paint, and a wrench tightens or loosens nuts and bolts.\n\nThe same goes for the variables we use to hold data in our code. Regardless of\nthe programming language you use, when building a website or app you'll want to\nuse the appropriate type of variable for a particular pur", "siteName": "freeCodeCamp.org", "publishedTime": "2023-03-07T16:54:47.000Z", "id": "ac4c9423812593cc121f08dca7f6d896623017ab", "url": "https://www.freecodecamp.org/news/variable-data-types-explained/", "domain": "freecodecamp.org", "date": "2023-12-27T18:05:00.807859", "resultUri": "http://localhost:3000/result/ac4c9423812593cc121f08dca7f6d896623017ab", "query": {"url": ["https://www.freecodecamp.org/news/variable-data-types-explained/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "Variable Data Types Explained", "description": "Walking into a hardware store, it's not enough to say: \"I need a tool\". You need to be specific about the type of tool you need.  Each tool type has its particular purpose: A hammer to drive a nail into wood, a paint brush to paint, and a wrench", "url": "https://www.freecodecamp.org/news/variable-data-types-explained/", "image": "https://www.freecodecamp.org/news/content/images/2023/03/data-types-thumbnail2.jpg", "image:width": "2000", "image:height": "1059"}, "twitter": {"card": "summary_large_image", "title": "Variable Data Types Explained", "description": "Walking into a hardware store, it's not enough to say: \"I need a tool\". You need to be specific about the type of tool you need.  Each tool type has its particular purpose: A hammer to drive a nail into wood, a paint brush to paint, and a wrench", "url": "https://www.freecodecamp.org/news/variable-data-types-explained/", "image": "https://www.freecodecamp.org/news/content/images/2023/03/data-types-thumbnail2.jpg", "label1": "Written by", "data1": "Deborah Kurata", "label2": "Filed under", "data2": "Programming, Variables, Object, Arrays", "site": "@freecodecamp", "creator": "@DeborahKurata"}}}