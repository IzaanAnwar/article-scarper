{"title": "How to use gRPC-web with React", "byline": "freeCodeCamp.org", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>How to use gRPC-web with React</h1>\n<section>\n<section data-test-label=\"post-content\">\n<p>by Mohak Puri</p><p>For the past few months, my team has been working on a gRPC service. A few weeks back a new requirement came in: we needed a web portal to display some information. Since we already had a gRPC backend, the server side was sorted. But for the front-end, we had a few important choices to make.</p><pre><code>1. Vue or React (We choose react)2. REST or gRPC from the web portal </code></pre><p>If you don\u2019t know what gRPC is you can read about it <a href=\"https://grpc.io/\" rel=\"noopener\">here</a>. Here are a few reasons that made us choose gRPC over REST.</p><ol><li>One major factor for choosing gRPC was the fact that we already had protos that we used in our backend service. We could use the same protos to generate client-side code in javascript<strong>.</strong></li><li>Using gRPC would mean that we would not have to write any code for creating the client. Adding new endpoints would mean making changes to the proto and generating client-side code.</li><li>We needed server-side streaming which is supported by gRPC-web.</li><li>We already had a setup of envoy for loading balancing our backend service (more on this later).</li></ol><h3 id=\"caveats\">Caveats</h3><ol><li>gRPC web-client won\u2019t send HTTP2 requests. Instead, you need a proxy between your web-client and gRPC backend service for converting that HTTP1 request to HTTP2. gRPC web client has built-in support for Envoy as a proxy. You can find more information about this <a href=\"https://grpc.io/blog/state-of-grpc-web#f2\" rel=\"noopener\">here</a>.</li><li>The teams at Google and Improbable both went on to implement the spec in two different repositories. We will be using gRPC web client provided by Google. You can find the implementation by Google <a href=\"https://github.com/grpc/grpc-web\" rel=\"noopener\">here</a> and by Improbable <a href=\"https://github.com/improbable-eng/grpc-web\" rel=\"noopener\">here</a>.</li><li>As of now, client-side streaming is not supported.</li></ol><p>Now that we have some idea about gRPC web, below is a diagram depicting how the entire communication will take place. We are going to make a react web application that will send a <em>Ping</em> request and get a <em>Pong</em> response for it.</p><figure><img alt=\"wZ-PKPpwVBps6i71c37sQ8G2pZRjtlguKsPx\" height=\"457\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/wZ-PKPpwVBps6i71c37sQ8G2pZRjtlguKsPx\" width=\"425\"/><figcaption>Front-end + Proxy + Back-end</figcaption></figure><h4 id=\"before-starting-make-sure-you-have-the-following-installed-\">Before starting make sure you have the following installed:</h4><pre><code>1. npm (Node package manager) - For generating react project2. Docker - For running envoy locally3. protoc - For generating code using protos</code></pre><p>There are 3 pieces to this puzzle. We are going to tackle each of them one by one.</p><h3 id=\"1-user-interface-website-using-react\">1. User Interface \u2014 Website using react</h3><p>For creating a react project, we will use the <em>create-react-app</em> command.</p><pre><code>create-react-app learn-react-grpc</code></pre><p>Now that we have a sample project in place, let\u2019s create a proto. This is what a ping pong proto looks like.</p><p>For subsequent commands to run, make sure that the proto is inside the src/ folder of the react project. For generating client-side code in javascript, run the following command:</p><pre><code>protoc -I=. src/ping_pong.proto --js_out=import_style=commonjs:. --grpc-web_out=import_style=commonjs,mode=grpcwebtext:.</code></pre><p>This will generate two new files: <strong><em>ping_pong_pb.js </em></strong>and<strong><em> ping_pong_grpc_web_pb.js,</em></strong> with all the generated code in it. We will use this code to make requests to our gRPC service.</p><p>First, let\u2019s update our package.json with a few gRPC and protobuf related dependencies and then run <strong><em>npm install</em></strong><em>.</em></p><p>Below is the entire logic for building our website. You can use this code in your App.js file. It is a really simple website which contains a button, clicking on which creates a ping pong request and gets a response.</p><p>Now if you run the node server using <strong>npm start, </strong>you are likely to face this compilation issue. This is apparently an issue when using gRPC-web with a project created using <em>create-react-app </em>command line interface<em>.</em></p><figure><img alt=\"5ZczeglnF24jEX58qfPUxInNybjRcJTZQww6\" height=\"520\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/5ZczeglnF24jEX58qfPUxInNybjRcJTZQww6\" width=\"800\"/><figcaption>compilation issues when using create-react-app</figcaption></figure><p>However, this issue can be fixed by adding <em>eslint-disable </em>to all of the proto generated files. Make sure that you do this for <em>all</em> the files. Now if you start the server, everything should be working.</p><figure><img alt=\"hAk-fyDb6JZ6bq5Vyqsxxoiyxkp5CB5gxueY\" height=\"231\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/hAk-fyDb6JZ6bq5Vyqsxxoiyxkp5CB5gxueY\" width=\"800\"/><figcaption>fixing compile issues</figcaption></figure><h3 id=\"2-backend-grpc-server-in-node\">2. Backend \u2014 gRPC server in Node</h3><p>Let\u2019s create a simple node server. We will be using the same proto that we used in our react app. Let\u2019s create a node js application node-ping-pong-server. Here is our sample server.js file.</p><p>We can run the node server using the following command:</p><pre><code>node server.js</code></pre><h3 id=\"3-proxy-envoy\">3. Proxy \u2014 Envoy</h3><p>As mentioned above, we will be using Docker for setting up envoy. Here is the docker file. As of writing, the latest tag points to Envoy<em> version 1.11. </em>Create a Dockerfile inside src/ folder of your react app.</p><p>Before running the Docker container, we need to make sure that we have a config file for envoy. Add this envoy.yml inside the src/ folder of your react app.</p><p>Let\u2019s understand what this envoy configuration file does:</p><p>9901 is the port where envoy admin portal is running. You can use this portal to check envoy routes, health checks and a lot more.</p><p>9090 is the port where envoy is listening for incoming requests. Our website will make a request to envoy on this port.</p><p>Any request that matches the above prefix is routed to the ping_pong_service cluster. Since our node server (aka cluster) is running on the host machine (your laptop) and not the docker container, we need to route those request out of the container to the host. <strong><em>host.docker.internal</em></strong> does exactly this.</p><p>Now let\u2019s build our docker image using the following command:</p><pre><code>docker build -t mohak1712/learn-grpc-web .</code></pre><p>Now let\u2019s run the docker image:</p><pre><code>docker run -d -p 9090:9090 mohak1712/learn-grpc-web</code></pre><p>We need to forward host port 9090 to the containers port 9090 so that any request on port 9090 is forwarded to the docker container where envoy is running.</p><h3 id=\"final-output\">Final Output</h3><p>Now that everything is set up, make sure that the website, node server and envoy container are running. You can run the following set of commands in case you still haven\u2019t.</p><pre><code>npm start -&gt; start web server</code></pre><pre><code>node server.js -&gt; start node server</code></pre><pre><code>docker run -d -p 9090:9090 mohak1712/learn-grpc-web -&gt; start envoy</code></pre><figure><img alt=\"ybrDqzwv38XiKDlSZfVpdcjX2pTn2kkYaaOK\" height=\"592\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/ybrDqzwv38XiKDlSZfVpdcjX2pTn2kkYaaOK\" width=\"800\"/></figure><figure><img alt=\"nfvEXxasFhtEuT9fqkKkXLBGE6DB8Eq4-xSq\" height=\"439\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/nfvEXxasFhtEuT9fqkKkXLBGE6DB8Eq4-xSq\" width=\"800\"/></figure><p>Now when you click on the button, it sends a Ping request and gets a Pong response for it!</p><p>That\u2019s about it! Thank you for reading, and I hope you enjoyed the article.</p><p>You can follow me on <a href=\"https://medium.com/@mohak1712\" rel=\"noopener\">Medium</a> and <a href=\"https://github.com/mohak1712\" rel=\"noopener\">Github</a> :)</p>\n</section>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nby Mohak PuriFor the past few months, my team has been working on a gRPC service. A few weeks back a new requirement came in: we needed a web portal to display some information. Since we already had a gRPC backend, the server side was sorted. But for the front-end, we had a few important choices to make.1. Vue or React (We choose react)2. REST or gRPC from the web portal If you don\u2019t know what gRPC is you can read about it here. Here are a few reasons that made us choose gRPC over REST.One major factor for choosing gRPC was the fact that we already had protos that we used in our backend service. We could use the same protos to generate client-side code in javascript.Using gRPC would mean that we would not have to write any code for creating the client. Adding new endpoints would mean making changes to the proto and generating client-side code.We needed server-side streaming which is supported by gRPC-web.We already had a setup of envoy for loading balancing our backend service (more on this later).CaveatsgRPC web-client won\u2019t send HTTP2 requests. Instead, you need a proxy between your web-client and gRPC backend service for converting that HTTP1 request to HTTP2. gRPC web client has built-in support for Envoy as a proxy. You can find more information about this here.The teams at Google and Improbable both went on to implement the spec in two different repositories. We will be using gRPC web client provided by Google. You can find the implementation by Google here and by Improbable here.As of now, client-side streaming is not supported.Now that we have some idea about gRPC web, below is a diagram depicting how the entire communication will take place. We are going to make a react web application that will send a Ping request and get a Pong response for it.Front-end + Proxy + Back-endBefore starting make sure you have the following installed:1. npm (Node package manager) - For generating react project2. Docker - For running envoy locally3. protoc - For generating code using protosThere are 3 pieces to this puzzle. We are going to tackle each of them one by one.1. User Interface \u2014 Website using reactFor creating a react project, we will use the create-react-app command.create-react-app learn-react-grpcNow that we have a sample project in place, let\u2019s create a proto. This is what a ping pong proto looks like.For subsequent commands to run, make sure that the proto is inside the src/ folder of the react project. For generating client-side code in javascript, run the following command:protoc -I=. src/ping_pong.proto --js_out=import_style=commonjs:. --grpc-web_out=import_style=commonjs,mode=grpcwebtext:.This will generate two new files: ping_pong_pb.js and ping_pong_grpc_web_pb.js, with all the generated code in it. We will use this code to make requests to our gRPC service.First, let\u2019s update our package.json with a few gRPC and protobuf related dependencies and then run npm install.Below is the entire logic for building our website. You can use this code in your App.js file. It is a really simple website which contains a button, clicking on which creates a ping pong request and gets a response.Now if you run the node server using npm start, you are likely to face this compilation issue. This is apparently an issue when using gRPC-web with a project created using create-react-app command line interface.compilation issues when using create-react-appHowever, this issue can be fixed by adding eslint-disable to all of the proto generated files. Make sure that you do this for all the files. Now if you start the server, everything should be working.fixing compile issues2. Backend \u2014 gRPC server in NodeLet\u2019s create a simple node server. We will be using the same proto that we used in our react app. Let\u2019s create a node js application node-ping-pong-server. Here is our sample server.js file.We can run the node server using the following command:node server.js3. Proxy \u2014 EnvoyAs mentioned above, we will be using Docker for setting up envoy. Here is the docker file. As of writing, the latest tag points to Envoy version 1.11. Create a Dockerfile inside src/ folder of your react app.Before running the Docker container, we need to make sure that we have a config file for envoy. Add this envoy.yml inside the src/ folder of your react app.Let\u2019s understand what this envoy configuration file does:9901 is the port where envoy admin portal is running. You can use this portal to check envoy routes, health checks and a lot more.9090 is the port where envoy is listening for incoming requests. Our website will make a request to envoy on this port.Any request that matches the above prefix is routed to the ping_pong_service cluster. Since our node server (aka cluster) is running on the host machine (your laptop) and not the docker container, we need to route those request out of the container to the host. host.docker.internal does exactly this.Now let\u2019s build our docker image using the following command:docker build -t mohak1712/learn-grpc-web .Now let\u2019s run the docker image:docker run -d -p 9090:9090 mohak1712/learn-grpc-webWe need to forward host port 9090 to the containers port 9090 so that any request on port 9090 is forwarded to the docker container where envoy is running.Final OutputNow that everything is set up, make sure that the website, node server and envoy container are running. You can run the following set of commands in case you still haven\u2019t.npm start -> start web servernode server.js -> start node serverdocker run -d -p 9090:9090 mohak1712/learn-grpc-web -> start envoyNow when you click on the button, it sends a Ping request and gets a Pong response for it!That\u2019s about it! Thank you for reading, and I hope you enjoyed the article.You can follow me on Medium and Github :)\n\n                        \n                    \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 6379, "excerpt": "by Mohak Puri\n\nHow to use gRPC-web with React\nFor the past few months, my team has been working on a gRPC service. A few weeks\nback a new requirement came in: we needed a web portal to display some\ninformation. Since we already had a gRPC backend, the server side was sorted.\nBut for the front-end, we had a few important choices to make.\n\n1. Vue or React (We choose react)2. REST or gRPC from the web portal \n\nIf you don\u2019t know what gRPC is you can read about it here [https://grpc.io/].\nHere are a", "siteName": "freeCodeCamp.org", "publishedTime": "2019-05-09T17:48:07.000Z", "id": "062eb204313459a6f7e11b4d240ffe62793cdb10", "url": "https://www.freecodecamp.org/news/how-to-use-grpc-web-with-react-1c93feb691b5/", "domain": "freecodecamp.org", "date": "2023-12-27T18:10:10.673784", "resultUri": "http://localhost:3000/result/062eb204313459a6f7e11b4d240ffe62793cdb10", "query": {"url": ["https://www.freecodecamp.org/news/how-to-use-grpc-web-with-react-1c93feb691b5/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "How to use gRPC-web with React", "description": "by Mohak Puri How to use gRPC-web with React For the past few months, my team has been working on a gRPC service. A few weeks back a new requirement came in: we needed a web portal to display some information. Since we already had a gRPC backend, the server", "url": "https://www.freecodecamp.org/news/how-to-use-grpc-web-with-react-1c93feb691b5/", "image": "https://cdn-media-1.freecodecamp.org/images/1*PJce89y7GZdBYsiHzmmUow.jpeg", "image:width": "425", "image:height": "457"}, "twitter": {"card": "summary_large_image", "title": "How to use gRPC-web with React", "description": "by Mohak Puri How to use gRPC-web with React For the past few months, my team has been working on a gRPC service. A few weeks back a new requirement came in: we needed a web portal to display some information. Since we already had a gRPC backend, the server", "url": "https://www.freecodecamp.org/news/how-to-use-grpc-web-with-react-1c93feb691b5/", "image": "https://cdn-media-1.freecodecamp.org/images/1*PJce89y7GZdBYsiHzmmUow.jpeg", "label1": "Written by", "data1": "freeCodeCamp.org", "label2": "Filed under", "data2": "JavaScript, React, Envoy Proxy, Tech, Programming", "site": "@freecodecamp"}}}