{"title": "How to Import SVGs in a React and Vite app", "byline": "Israel Mitolu", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>How to Import SVGs in a React and Vite app</h1>\n<section>\n<section data-test-label=\"post-content\">\n<p>Are you having difficulties importing SVGs into your React app? This is a problem that many developers face, especially when setting up a new React app with a module bundler.</p>\n<p>In this article, I will share with you the different ways of importing SVGs in React, as well as how the process works under the hood.</p>\n<p>Let's get started.</p>\n<h2 id=\"whatisansvg\">What Is an SVG?</h2>\n<p>SVG, short for Scalable Vector Graphic, is an image format used for rendering two-dimensional (2D) graphics on the internet.</p>\n<p>The SVG format stores images as <strong>vectors</strong>  which are graphics made up of points, lines, and curves based on geometry and mathematical formulas.</p>\n<p>Because they are based on numbers and values rather than a grid of pixels like <a href=\"https://en.wikipedia.org/wiki/Raster_graphics\">raster images</a>(.png and.jpg), they do not lose quality when zoomed or resized.</p>\n<p>They're also great for creating responsive websites that need to look good and function well across a variety of screen sizes.</p>\n<p>Overall, SVGs are great as they are scalable, lightweight, customizable, and can be animated using CSS when used <a href=\"#2usingsvgsbyaddingdirectlyasjsx\">inline</a>.</p>\n<p>Let's go through some of the most used methods when importing SVGs into React Apps.</p>\n<h3 id=\"1howtoimportsvgsusingtheimagetag\">1. How to Import SVGs Using the Image Tag</h3>\n<p>Importing SVGs using the image tag is one of the easiest ways to use an SVG. If you initialize your app using CRA (Create React App), you can import the SVG file in the image source attribute, as it supports it off the bat.</p>\n<pre tabindex=\"0\"><code>import YourSvg from \"/path/to/image.svg\";\n\nconst App = () =&gt; {\n  return (\n    &lt;div className=\"App\"&gt;\n      &lt;img src={YourSvg} alt=\"Your SVG\" /&gt;\n    &lt;/div&gt;\n  );\n};\nexport default App;\n</code></pre>\n<p>But if you are not using CRA, you have to set up a file loader system in the bundler you're using (Webpack, Parcel, Rollup, and so on).</p>\n<p>Webpack, for instance, has a loader for handling SVGs called <a href=\"https://v4.webpack.js.org/loaders/file-loader/\">file-loader</a>.</p>\n<p>To install the file-loader, add the following command:</p>\n<pre tabindex=\"0\"><code>npm install file-loader --save-dev\n</code></pre>\n<p>Next, add the loader to the <code>webpack.config.js</code> file:</p>\n<pre tabindex=\"0\"><code>module.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.(png|jpe?g|gif)$/i,\n        use: [\n          {\n            loader: \"file-loader\",\n          },\n        ],\n      },\n    ],\n  },\n};\n</code></pre>\n<p>Now, you can import your SVG files and use them:</p>\n<pre tabindex=\"0\"><code>import YourSvg from \"/path/to/image.svg\";\n\nconst App = () =&gt; {\n  return (\n    &lt;div className=\"App\"&gt;\n      &lt;img src={YourSvg} alt=\"Your SVG\" /&gt;\n    &lt;/div&gt;\n  );\n};\nexport default App;\n</code></pre>\n<p>NOTE: While this approach is straightforward, it does have one disadvantage: unlike the other methods for importing, you cannot style the SVG imported in a <code>img</code> element. As a result, it will be suitable for an SVG that does not need customization, like logos.</p>\n<h3 id=\"2howtoimportsvgsbyaddingthemdirectlyasjsx\">2. How to Import SVGs by Adding them Directly as JSX</h3>\n<p>JSX supports the <code>svg</code> tag, so we can copy-paste the SVG directly into our React components. This method is straightforward as it helps you take full advantage of SVGs without using a bundler.</p>\n<p>The approach is possible because SVGs are in XML format, just like HTML. So, we can convert it to JSX syntax. You can also use a <a href=\"https://transform.tools/html-to-jsx\">compiler</a> instead of manually converting.</p>\n<pre tabindex=\"0\"><code>const App = () =&gt; {\n  return (\n    &lt;div className=\"App\"&gt;\n      &lt;svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        className=\"ionicon\"\n        viewBox=\"0 0 512 512\"\n      &gt;\n        &lt;path\n          d=\"M160 136c0-30.62 4.51-61.61 16-88C99.57 81.27 48 159.32 48 248c0 119.29 96.71 216 216 216 88.68 0 166.73-51.57 200-128-26.39 11.49-57.38 16-88 16-119.29 0-216-96.71-216-216z\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeWidth={32}\n        /&gt;\n      &lt;/svg&gt;\n    &lt;/div&gt;\n  );\n};\nexport default App;\n</code></pre>\n<p>The advantage of including SVGs inline is that we have access to their different properties, which allows us to style and customize them as we see fit.</p>\n<p>One thing to keep in mind is that if your SVG file size is large, your code may become complex, reducing readability and productivity. If this is the case, use a png or jpeg file..</p>\n<h3 id=\"3howtoimportsvgsasreactcomponents\">3. How to Import SVGs as React Components</h3>\n<p>If you use CRA, there's a chance you have imported and used SVGs directly as a React component at one point in time.</p>\n<p>This method, which is possible with the help of a file loader, works by loading the image alongside the HTML rather than as a separate file.</p>\n<pre tabindex=\"0\"><code>import { ReactComponent as Logo } from \"./logo.svg\";\n\nconst App = () =&gt; {\n  return (\n    &lt;div className=\"App\"&gt;\n      &lt;Logo /&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default App;\n</code></pre>\n<h3 id=\"4howtoconvertsvgstoreactcomponents\">4. How to Convert SVGs to React Components</h3>\n<p>This approach is similar to the one previously mentioned. Here, we can convert an SVG to a React component by returning it from inside a class or functional component.</p>\n<p>To do this, open up the SVG file in a text editor, and copy-paste the code into a new component:</p>\n<pre tabindex=\"0\"><code>export const ArrowUndo = () =&gt; {\n  return (\n    &lt;svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className=\"ionicon\"\n      viewBox=\"0 0 512 512\"\n    &gt;\n      &lt;path d=\"M245.09 327.74v-37.32c57.07 0 84.51 13.47 108.58 38.68 5.4 5.65 15 1.32 14.29-6.43-5.45-61.45-34.14-117.09-122.87-117.09v-37.32a8.32 8.32 0 00-14.05-6L146.58 242a8.2 8.2 0 000 11.94L231 333.71a8.32 8.32 0 0014.09-5.97z\" /&gt;\n      &lt;path\n        d=\"M256 64C150 64 64 150 64 256s86 192 192 192 192-86 192-192S362 64 256 64z\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        strokeMiterlimit={10}\n        strokeWidth={32}\n      /&gt;\n    &lt;/svg&gt;\n  );\n};\n</code></pre>\n<p>Now, you can import and render the SVG component in another component like this:</p>\n<pre tabindex=\"0\"><code>import { ArrowUndo } from \"./path/to/ArrowUndo.jsx\";\n\nexport const Button = () =&gt; {\n  return (\n    &lt;button&gt;\n      &lt;ArrowUndo /&gt;\n    &lt;/button&gt;\n  );\n};\n</code></pre>\n<p>Again, this approach is only possible if your React app has a loader like SVGR's <a href=\"https://www.npmjs.com/package/@svgr/webpack\">Webpack loader</a> included.</p>\n<h3 id=\"5howtoimportsvgsusingsvgr\">5. How to Import SVGs Using SVGR</h3>\n<p><a href=\"https://react-svgr.com/\">SVGR</a> is a tool that takes raw SVG files and transforms them into React components. It also has a large ecosystem with support for Create React App, Gatsby, Parcel, Rollup, and other technologies.</p>\n<p>So, how do we set it up?</p>\n<p>First, install the package by running the code below:</p>\n<pre tabindex=\"0\"><code># with npm\nnpm install --save-dev @svgr/webpack\n\n# with yarn\nyarn add --dev @svgr/webpack\n</code></pre>\n<p>Next, update your <code>webpack.config.js</code>:</p>\n<pre tabindex=\"0\"><code>module.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.svg$/i,\n        issuer: /\\.[jt]sx?$/,\n        use: [\"@svgr/webpack\"],\n      },\n    ],\n  },\n};\n</code></pre>\n<p>Now, you can import an SVG file as a React component:</p>\n<pre tabindex=\"0\"><code>import Logo from \"./logo.svg\";\n\nconst App = () =&gt; {\n  return (\n    &lt;div className=\"App\"&gt;\n      &lt;Logo /&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default App;\n</code></pre>\n<h3 id=\"6howtoimportsvgsusingthevitepluginforsvgr\">6. How to Import SVGs Using the Vite Plugin for SVGR</h3>\n<p><a href=\"https://www.npmjs.com/package/vite-plugin-svgr\"><code>vite-plugin-svgr</code></a> is a plugin for Vite that uses svgr under the hood to transform SVGs into React components.</p>\n<p>You can install it by running the following command:</p>\n<pre tabindex=\"0\"><code># with npm\nnpm i vite-plugin-svgr\n\n# with yarn\nyarn add vite-plugin-svgr\n</code></pre>\n<p>Next, add the plugin inside your app's <code>vite.config.js</code>:</p>\n<pre tabindex=\"0\"><code>import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport svgr from \"vite-plugin-svgr\";\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [svgr(), react()],\n});\n</code></pre>\n<p>Now, you can import the SVG files as <a href=\"#3importingsvgsasreactcomponents\">React components</a>:</p>\n<pre tabindex=\"0\"><code>import { ReactComponent as Logo } from \"./logo.svg\";\n</code></pre>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>And it's a wrap! In this article, we've covered how to import SVGs in a React App using custom configuration from specific packages, how importing React components works, and how to use them in a Vite setup.</p>\n<p>When working with Vite, I use the vite svgr plugin, which works flawlessly. You can also experiment with the other ways discussed in this article.</p>\n<p>I hope you found this article insightful. If you do have any questions, feel free to send a message on <a href=\"https://twitter.com/israelmitolu\">Twitter</a> or <a href=\"https://www.linkedin.com/in/israeloyetunji/\">LinkedIn</a>.</p>\n<p>Thanks for reading, and happy coding!</p>\n<p>Before you go, check out these resources:</p>\n<ul>\n<li><a href=\"https://israelmitolu.hashnode.dev/why-you-should-ditch-create-react-app-for-vite\">Why You Should Ditch Create-React-App for Vite</a></li>\n<li><a href=\"https://rossbulat.medium.com/working-with-svgs-in-react-d09d1602a219\">Working with SVGs in React</a></li>\n<li><a href=\"https://twitter.com/i/communities/1532313139810906114\">Twitter Community for Devs</a></li>\n</ul>\n<!--kg-card-end: markdown-->\n</section>\n<hr/>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nAre you having difficulties importing SVGs into your React app? This is a problem that many developers face, especially when setting up a new React app with a module bundler.\nIn this article, I will share with you the different ways of importing SVGs in React, as well as how the process works under the hood.\nLet's get started.\nWhat Is an SVG?\nSVG, short for Scalable Vector Graphic, is an image format used for rendering two-dimensional (2D) graphics on the internet.\nThe SVG format stores images as vectors  which are graphics made up of points, lines, and curves based on geometry and mathematical formulas.\nBecause they are based on numbers and values rather than a grid of pixels like raster images(.png and.jpg), they do not lose quality when zoomed or resized.\nThey're also great for creating responsive websites that need to look good and function well across a variety of screen sizes.\nOverall, SVGs are great as they are scalable, lightweight, customizable, and can be animated using CSS when used inline.\n\nLet's go through some of the most used methods when importing SVGs into React Apps.\n1. How to Import SVGs Using the Image Tag\nImporting SVGs using the image tag is one of the easiest ways to use an SVG. If you initialize your app using CRA (Create React App), you can import the SVG file in the image source attribute, as it supports it off the bat.\nimport YourSvg from \"/path/to/image.svg\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <img src={YourSvg} alt=\"Your SVG\" />\n    </div>\n  );\n};\nexport default App;\n\nBut if you are not using CRA, you have to set up a file loader system in the bundler you're using (Webpack, Parcel, Rollup, and so on).\nWebpack, for instance, has a loader for handling SVGs called file-loader.\nTo install the file-loader, add the following command:\nnpm install file-loader --save-dev\n\nNext, add the loader to the webpack.config.js file:\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.(png|jpe?g|gif)$/i,\n        use: [\n          {\n            loader: \"file-loader\",\n          },\n        ],\n      },\n    ],\n  },\n};\n\nNow, you can import your SVG files and use them:\nimport YourSvg from \"/path/to/image.svg\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <img src={YourSvg} alt=\"Your SVG\" />\n    </div>\n  );\n};\nexport default App;\n\nNOTE: While this approach is straightforward, it does have one disadvantage: unlike the other methods for importing, you cannot style the SVG imported in a img element. As a result, it will be suitable for an SVG that does not need customization, like logos.\n2. How to Import SVGs by Adding them Directly as JSX\nJSX supports the svg tag, so we can copy-paste the SVG directly into our React components. This method is straightforward as it helps you take full advantage of SVGs without using a bundler.\nThe approach is possible because SVGs are in XML format, just like HTML. So, we can convert it to JSX syntax. You can also use a compiler instead of manually converting.\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        className=\"ionicon\"\n        viewBox=\"0 0 512 512\"\n      >\n        <path\n          d=\"M160 136c0-30.62 4.51-61.61 16-88C99.57 81.27 48 159.32 48 248c0 119.29 96.71 216 216 216 88.68 0 166.73-51.57 200-128-26.39 11.49-57.38 16-88 16-119.29 0-216-96.71-216-216z\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeWidth={32}\n        />\n      </svg>\n    </div>\n  );\n};\nexport default App;\n\nThe advantage of including SVGs inline is that we have access to their different properties, which allows us to style and customize them as we see fit.\nOne thing to keep in mind is that if your SVG file size is large, your code may become complex, reducing readability and productivity. If this is the case, use a png or jpeg file..\n3. How to Import SVGs as React Components\nIf you use CRA, there's a chance you have imported and used SVGs directly as a React component at one point in time.\nThis method, which is possible with the help of a file loader, works by loading the image alongside the HTML rather than as a separate file.\nimport { ReactComponent as Logo } from \"./logo.svg\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Logo />\n    </div>\n  );\n};\n\nexport default App;\n\n4. How to Convert SVGs to React Components\nThis approach is similar to the one previously mentioned. Here, we can convert an SVG to a React component by returning it from inside a class or functional component.\nTo do this, open up the SVG file in a text editor, and copy-paste the code into a new component:\nexport const ArrowUndo = () => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className=\"ionicon\"\n      viewBox=\"0 0 512 512\"\n    >\n      <path d=\"M245.09 327.74v-37.32c57.07 0 84.51 13.47 108.58 38.68 5.4 5.65 15 1.32 14.29-6.43-5.45-61.45-34.14-117.09-122.87-117.09v-37.32a8.32 8.32 0 00-14.05-6L146.58 242a8.2 8.2 0 000 11.94L231 333.71a8.32 8.32 0 0014.09-5.97z\" />\n      <path\n        d=\"M256 64C150 64 64 150 64 256s86 192 192 192 192-86 192-192S362 64 256 64z\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        strokeMiterlimit={10}\n        strokeWidth={32}\n      />\n    </svg>\n  );\n};\n\nNow, you can import and render the SVG component in another component like this:\nimport { ArrowUndo } from \"./path/to/ArrowUndo.jsx\";\n\nexport const Button = () => {\n  return (\n    <button>\n      <ArrowUndo />\n    </button>\n  );\n};\n\nAgain, this approach is only possible if your React app has a loader like SVGR's Webpack loader included.\n5. How to Import SVGs Using SVGR\nSVGR is a tool that takes raw SVG files and transforms them into React components. It also has a large ecosystem with support for Create React App, Gatsby, Parcel, Rollup, and other technologies.\nSo, how do we set it up?\nFirst, install the package by running the code below:\n# with npm\nnpm install --save-dev @svgr/webpack\n\n# with yarn\nyarn add --dev @svgr/webpack\n\nNext, update your webpack.config.js:\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.svg$/i,\n        issuer: /\\.[jt]sx?$/,\n        use: [\"@svgr/webpack\"],\n      },\n    ],\n  },\n};\n\nNow, you can import an SVG file as a React component:\nimport Logo from \"./logo.svg\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Logo />\n    </div>\n  );\n};\n\nexport default App;\n\n6. How to Import SVGs Using the Vite Plugin for SVGR\nvite-plugin-svgr is a plugin for Vite that uses svgr under the hood to transform SVGs into React components.\nYou can install it by running the following command:\n# with npm\nnpm i vite-plugin-svgr\n\n# with yarn\nyarn add vite-plugin-svgr\n\nNext, add the plugin inside your app's vite.config.js:\nimport { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport svgr from \"vite-plugin-svgr\";\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [svgr(), react()],\n});\n\nNow, you can import the SVG files as React components:\nimport { ReactComponent as Logo } from \"./logo.svg\";\n\nConclusion\nAnd it's a wrap! In this article, we've covered how to import SVGs in a React App using custom configuration from specific packages, how importing React components works, and how to use them in a Vite setup.\nWhen working with Vite, I use the vite svgr plugin, which works flawlessly. You can also experiment with the other ways discussed in this article.\nI hope you found this article insightful. If you do have any questions, feel free to send a message on Twitter or LinkedIn.\nThanks for reading, and happy coding!\nBefore you go, check out these resources:\n\nWhy You Should Ditch Create-React-App for Vite\nWorking with SVGs in React\nTwitter Community for Devs\n\n\n\n                        \n                    \n                    \n                        \n                        \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 8493, "excerpt": "Are you having difficulties importing SVGs into your React app? This is a\nproblem that many developers face, especially when setting up a new React app\nwith a module bundler.\n\nIn this article, I will share with you the different ways of importing SVGs in\nReact, as well as how the process works under the hood.\n\nLet's get started.\n\nWhat Is an SVG?\nSVG, short for Scalable Vector Graphic, is an image format used for rendering\ntwo-dimensional (2D) graphics on the internet.\n\nThe SVG format stores imag", "siteName": "freeCodeCamp.org", "publishedTime": "2022-07-01T22:15:02.000Z", "id": "82b9389e42b6fa841770f4b22c856327b4c13685", "url": "https://www.freecodecamp.org/news/how-to-import-svgs-in-react-and-vite/", "domain": "freecodecamp.org", "date": "2023-12-27T18:05:25.624566", "resultUri": "http://localhost:3000/result/82b9389e42b6fa841770f4b22c856327b4c13685", "query": {"url": ["https://www.freecodecamp.org/news/how-to-import-svgs-in-react-and-vite/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "How to Import SVGs in a React and Vite app", "description": "Are you having difficulties importing SVGs into your React app? This is a problem that many developers face, especially when setting up a new React app with a module bundler. In this article, I will share with you the different ways of importing SVGs in React, as well as how", "url": "https://www.freecodecamp.org/news/how-to-import-svgs-in-react-and-vite/", "image": "https://www.freecodecamp.org/news/content/images/2022/07/Blog-article-cover-images--3-.png", "image:width": "1600", "image:height": "840"}, "twitter": {"card": "summary_large_image", "title": "How to Import SVGs in a React and Vite app", "description": "Are you having difficulties importing SVGs into your React app? This is a problem that many developers face, especially when setting up a new React app with a module bundler. In this article, I will share with you the different ways of importing SVGs in React, as well as how", "url": "https://www.freecodecamp.org/news/how-to-import-svgs-in-react-and-vite/", "image": "https://www.freecodecamp.org/news/content/images/2022/07/Blog-article-cover-images--3-.png", "label1": "Written by", "data1": "Israel Mitolu", "label2": "Filed under", "data2": "React, SVG, vite, Web Development, Programming", "site": "@freecodecamp", "creator": "@israelmitolu"}}}