{"title": "A quick look at Rails Custom Validation", "byline": "freeCodeCamp.org", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>A quick look at Rails Custom Validation</h1>\n<section>\n<section data-test-label=\"post-content\">\n<p>by Raymond Blessed</p><p>I recently started working with Ruby (almost 2 months now) and Ruby on Rails (a little over 3 weeks). Working with Rails\u2019 Active Record framework is one of my favorite things about Ruby on Rails. In this post, we will be looking at validations in Active Record, custom ones particularly. Here is a quick intro to Active Record before we move to the good stuff.</p><p>Active Record is one of the core gems that make up Ruby on Rails. It is the part of the framework that deals with databases.</p><p>It is an ORM (Object Relational Mapping) framework that lets you build a schema for a database using pure ruby and it is based on the Active Record design pattern described by <a href=\"https://martinfowler.com/\" rel=\"noopener\">Martin Fowler</a>. So, with Active Records, you are creating your DB, creating tables, storing, retrieving and deleting data using ruby which translates to SQL under the hood.</p><h3 id=\"quick-intro\">Quick Intro</h3><p>Suppose we have a student model with properties first name and last name. To use Active Record we just need to extend the <strong>ApplicationRecord</strong> and when we run <code>rails db:migrate </code>it gives us the SQL statement for it.</p><p>To interact with the database, we use methods inherited from the ApplicationRecord superclass.</p><p>It also supports associations and other database stuff.</p><p>For a detailed intro to Active Record, check out the official ruby on rails guide.</p><h3 id=\"validation\">Validation</h3><p>Because we write web applications for users other than ourselves, we cannot be sure that the users will always input valid data into the database. To enforce this, Active Record provides us a mini-validation framework that ensures the presence of data, uniqueness of certain fields, and so on.</p><p>Let\u2019s look at our students table above. We wouldn\u2019t want to create a user without a first name or last name which presently is possible. To mitigate this, we just need to modify our Student class like so:</p><p>With this modification, when you create a Student instance without the first name or last name attributes, it is an invalid student and active records will not persist it to the database.</p><p>Active record also provides us with methods to check if our data is valid or invalid:</p><p>With this, we do not even have to attempt to save the data.</p><p>Apart from just preventing the data from being persisted, Active Record also provides an error list that holds the attributes that failed validations and user-friendly messages to present to the users. These errors can be accessed as shown in the snippet below.</p><p>There is a lot more on validation but it\u2019s not the topic of this article. For a deep dive, you can get an in-depth explanation from the ruby on rails guide chapter on Validation.</p><h3 id=\"custom-validation\">Custom Validation</h3><p>Sometimes, we might want to use certain validations that are more than just ensuring the presence of an attribute, length, uniqueness, or any of the helpers provided by Active Record. Luckily, Active Record allows us to define our own custom validations, which is the point of this article.</p><p>So, let\u2019s say for our Student model, we have a compulsory student registration number column. It has to be filled from the registration form (I know this can be auto-generated) which should always start with the registration year. Now, Active Record does not provide this kind of validation out of the box, but has made it possible for us to define it and use it.</p><p>There are mainly two ways to define your own validation logic:</p><ul><li>Custom Validator</li><li>Custom Methods</li></ul><h4 id=\"custom-validator\"><strong>Custom Validator</strong></h4><p>To validate using a custom validator, you just need to define your validation logic in a class that extends <strong>ActiveModel::Validator </strong>and implements the validate method, which takes the record to be validated as its argument.</p><p>If validation fails, it adds the attribute to the errors array along with its error message. So, in our case, we\u2019ll have RegNumValidator as seen below:</p><p>To use this validator in the Student model, we use the <code>validates_with</code> method:</p><p>With this, when a user tries to create a student with the wrong registration number, the record creation fails and an error message can be shown.</p><h4 id=\"custom-methods\"><strong>Custom Methods</strong></h4><p>To use custom methods for validation, you just need to define a method to use for validation in your model class and call it like you would call any of the in-built validations \u2014 using <code>validate</code>. Using the same logic as what we had above, our model would look like this:</p><h3 id=\"conclusion\">Conclusion</h3><p>I hope this article has given you the necessary knowledge to begin to explore Active Records validation and custom validation especially. Whenever you have a validation rule that is not part of the existing active record validation API, you can write one yourself.</p><p><a href=\"https://guides.rubyonrails.org/active_record_validations.html\" rel=\"noopener\"><strong>Active Record Validations \u2014 Ruby on Rails Guides</strong></a><br/><a href=\"https://guides.rubyonrails.org/active_record_validations.html\" rel=\"noopener\"><em>Validations are used to ensure that only valid data is saved into your database. For example, it may be important to\u2026</em>guides.rubyonrails.org</a></p>\n</section>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nby Raymond BlessedI recently started working with Ruby (almost 2 months now) and Ruby on Rails (a little over 3 weeks). Working with Rails\u2019 Active Record framework is one of my favorite things about Ruby on Rails. In this post, we will be looking at validations in Active Record, custom ones particularly. Here is a quick intro to Active Record before we move to the good stuff.Active Record is one of the core gems that make up Ruby on Rails. It is the part of the framework that deals with databases.It is an ORM (Object Relational Mapping) framework that lets you build a schema for a database using pure ruby and it is based on the Active Record design pattern described by Martin Fowler. So, with Active Records, you are creating your DB, creating tables, storing, retrieving and deleting data using ruby which translates to SQL under the hood.Quick IntroSuppose we have a student model with properties first name and last name. To use Active Record we just need to extend the ApplicationRecord and when we run rails db:migrate it gives us the SQL statement for it.To interact with the database, we use methods inherited from the ApplicationRecord superclass.It also supports associations and other database stuff.For a detailed intro to Active Record, check out the official ruby on rails guide.ValidationBecause we write web applications for users other than ourselves, we cannot be sure that the users will always input valid data into the database. To enforce this, Active Record provides us a mini-validation framework that ensures the presence of data, uniqueness of certain fields, and so on.Let\u2019s look at our students table above. We wouldn\u2019t want to create a user without a first name or last name which presently is possible. To mitigate this, we just need to modify our Student class like so:With this modification, when you create a Student instance without the first name or last name attributes, it is an invalid student and active records will not persist it to the database.Active record also provides us with methods to check if our data is valid or invalid:With this, we do not even have to attempt to save the data.Apart from just preventing the data from being persisted, Active Record also provides an error list that holds the attributes that failed validations and user-friendly messages to present to the users. These errors can be accessed as shown in the snippet below.There is a lot more on validation but it\u2019s not the topic of this article. For a deep dive, you can get an in-depth explanation from the ruby on rails guide chapter on Validation.Custom ValidationSometimes, we might want to use certain validations that are more than just ensuring the presence of an attribute, length, uniqueness, or any of the helpers provided by Active Record. Luckily, Active Record allows us to define our own custom validations, which is the point of this article.So, let\u2019s say for our Student model, we have a compulsory student registration number column. It has to be filled from the registration form (I know this can be auto-generated) which should always start with the registration year. Now, Active Record does not provide this kind of validation out of the box, but has made it possible for us to define it and use it.There are mainly two ways to define your own validation logic:Custom ValidatorCustom MethodsCustom ValidatorTo validate using a custom validator, you just need to define your validation logic in a class that extends ActiveModel::Validator and implements the validate method, which takes the record to be validated as its argument.If validation fails, it adds the attribute to the errors array along with its error message. So, in our case, we\u2019ll have RegNumValidator as seen below:To use this validator in the Student model, we use the validates_with method:With this, when a user tries to create a student with the wrong registration number, the record creation fails and an error message can be shown.Custom MethodsTo use custom methods for validation, you just need to define a method to use for validation in your model class and call it like you would call any of the in-built validations \u2014 using validate. Using the same logic as what we had above, our model would look like this:ConclusionI hope this article has given you the necessary knowledge to begin to explore Active Records validation and custom validation especially. Whenever you have a validation rule that is not part of the existing active record validation API, you can write one yourself.Active Record Validations \u2014 Ruby on Rails GuidesValidations are used to ensure that only valid data is saved into your database. For example, it may be important to\u2026guides.rubyonrails.org\n\n                        \n                    \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 5312, "excerpt": "by Raymond Blessed\n\nA quick look at Rails Custom Validation\nvalidationI recently started working with Ruby (almost 2 months now) and Ruby on\nRails (a little over 3 weeks). Working with Rails\u2019 Active Record framework is\none of my favorite things about Ruby on Rails. In this post, we will be looking\nat validations in Active Record, custom ones particularly. Here is a quick intro\nto Active Record before we move to the good stuff.\n\nActive Record is one of the core gems that make up Ruby on Rails. It", "siteName": "freeCodeCamp.org", "publishedTime": "2019-05-08T16:33:30.000Z", "id": "a62b313f53c841c0ebcb90a8dbbedd9c3086295a", "url": "https://www.freecodecamp.org/news/a-quick-look-at-rails-custom-validation-9ab7e0f1af81/", "domain": "freecodecamp.org", "date": "2023-12-27T18:10:22.670276", "resultUri": "http://localhost:3000/result/a62b313f53c841c0ebcb90a8dbbedd9c3086295a", "query": {"url": ["https://www.freecodecamp.org/news/a-quick-look-at-rails-custom-validation-9ab7e0f1af81/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "A quick look at Rails Custom Validation", "description": "by Raymond Blessed A quick look at Rails Custom Validation validationI recently started working with Ruby (almost 2 months now) and Ruby on Rails (a little over 3 weeks). Working with Rails\u2019 Active Record framework is one of my favorite things about Ruby on Rails. In this post, we will", "url": "https://www.freecodecamp.org/news/a-quick-look-at-rails-custom-validation-9ab7e0f1af81/", "image": "https://cdn-media-1.freecodecamp.org/images/1*otuQiVYDCBjZee9xZ0UnvA.jpeg", "image:width": "800", "image:height": "329"}, "twitter": {"card": "summary_large_image", "title": "A quick look at Rails Custom Validation", "description": "by Raymond Blessed A quick look at Rails Custom Validation validationI recently started working with Ruby (almost 2 months now) and Ruby on Rails (a little over 3 weeks). Working with Rails\u2019 Active Record framework is one of my favorite things about Ruby on Rails. In this post, we will", "url": "https://www.freecodecamp.org/news/a-quick-look-at-rails-custom-validation-9ab7e0f1af81/", "image": "https://cdn-media-1.freecodecamp.org/images/1*otuQiVYDCBjZee9xZ0UnvA.jpeg", "label1": "Written by", "data1": "freeCodeCamp.org", "label2": "Filed under", "data2": "Ruby on Rails, Tech, Programming, Productivity, Coding", "site": "@freecodecamp"}}}