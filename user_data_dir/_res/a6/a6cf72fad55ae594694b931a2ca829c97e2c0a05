{"title": "Simple RegEx tricks for beginners", "byline": "Andrei Chernikov", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>Simple RegEx tricks for beginners</h1>\n<section>\n<section data-test-label=\"post-content\">\n<p>Always wanted to learn Regular Expressions but got put off by their complexity? In this article, I will show you five easy-to-learn RegEx tricks which you can start using immediately in your favorite text editor.</p><h3 id=\"text-editor-setup\">Text Editor Setup</h3><p>While almost any text editor supports Regular Expressions now, I will use Visual Studio Code for this tutorial, but you can use any editor you like. Also, note that you usually need to turn on RegEx somewhere near the search input. Here is how you do this in VS Code:</p><figure><img alt=\"GjEq59Gj7Io7MWY4OuayOCmqZo0f5ezXyvOS\" height=\"64\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/GjEq59Gj7Io7MWY4OuayOCmqZo0f5ezXyvOS\" width=\"309\"/><figcaption>You need to enable RegEx by checking this option</figcaption></figure><h3 id=\"1-match-any-character\">1) <code>. </code>\u2014 Match Any Character</h3><p>Let\u2019s start simple. The dot symbol <code>.</code> matches any character:</p><pre><code>b.t</code></pre><figure><img alt=\"tMEDSKS2mHfOfqYTQP-elCZI5OnGUObC484v\" height=\"148\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/tMEDSKS2mHfOfqYTQP-elCZI5OnGUObC484v\" width=\"794\"/></figure><p>Above RegEx matches <code>\"bot\u201d</code>, <code>\"bat\u201d</code> and any other word of three characters which starts with <code>b</code> and ends in <code>t</code>. But if you want to search for the dot symbol, you need to escape it with <code>\\</code>, so this RegEx will only match the exact text <code>\"b.t\"</code>:</p><pre><code>b\\.t</code></pre><figure><img alt=\"anNgoajLGzpFhPWYRnVGlowi0bL4Z4xni59R\" height=\"183\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/anNgoajLGzpFhPWYRnVGlowi0bL4Z4xni59R\" width=\"631\"/></figure><h3 id=\"2-match-anything\">2) .* \u2014 Match Anything</h3><p>Here <code>.</code> means <em>\u201cany character\u201d</em> and <code>*</code> means <em>\u201canything before this symbol repeated any number of times.\u201d</em> Together (<code>.*</code>) they mean <em>\u201cany symbol any number of times.\u201d</em> You can use it, for example, to find matches starting with or ending in some text. Let\u2019s suppose we have a javascript method with the following signature:</p><pre><code>loadScript(scriptName: string, pathToFile: string)</code></pre><p>And we want to find all calls of this method where<code>pathToFile</code> points to any file in the folder <code>\u201clua\u201d</code> . You can use the following Regular Expression for this:</p><pre><code>loadScript.*lua</code></pre><p>Which means, <em>\u201cmatch all text starting with<code>\u201cloadScript\u201d</code> followed by anything up to the last occurrence of <code>\u201clua\u201d</code>\u201c</em></p><figure><img alt=\"wCWC964KLZKxEHdW0fZlr4Z-X-vdcbYX-ogk\" height=\"321\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/wCWC964KLZKxEHdW0fZlr4Z-X-vdcbYX-ogk\" width=\"800\"/><figcaption><code>loadScript.*lua: matches everything starting with \"loadScript\" and ending in \"lua\"</code></figcaption></figure><h3 id=\"3-non-greedy-match\">3) ? \u2014 Non-Greedy Match</h3><p>The <code>?</code> symbol after <code>.*</code> and some other RegEx sequences means \u201cmatch as little as possible.\u201d If you look at the previous picture, you will see that text <code>\u201clua\u201d</code> is seen twice in every match, and everything up to the second <code>\u201clua\u201d</code> was matched. If you wanted to match everything up to the first occurrence of <code>\"lua\"</code> instead, you would use the following RegEx:</p><pre><code>loadScript.*?lua</code></pre><p>Which means, <em>\u201cmatch everything starting with<code>\"loadScript\"</code> followed by anything up to the first occurrence of <code>\"lua\"</code>\"</em></p><figure><img alt=\"NnHX2yevennzK3Z9ddpq1NPBsbfWnyalfFrw\" height=\"352\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/NnHX2yevennzK3Z9ddpq1NPBsbfWnyalfFrw\" width=\"800\"/><figcaption><code>loadScript.*?lua: matches </code>everything starting with loadScript and up to the first occurrence of \u201clua\u201d</figcaption></figure><h3 id=\"4-capture-groups-and-backreferences\">4) ( ) $ \u2014 Capture Groups and Backreferences</h3><p>Okay, now we can match some text. But what if we want to change parts of the text we found? We often have to make use of capture groups for that.</p><p>Let\u2019s suppose we changed our <code>loadScript</code> method and now it suddenly needs another argument inserted between its two arguments. Let\u2019s name this new argument <code>id</code>, so the new function signature should look like this: <code>loadScript(scriptName, id, pathToFile)</code>. We can\u2019t use normal replace feature of our text editor here, but a Regular Expression is exactly what we need.</p><figure><img alt=\"hRdlYnNzYuX64kcVoXrvtH2RfwaY3FzNZedD\" height=\"365\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/hRdlYnNzYuX64kcVoXrvtH2RfwaY3FzNZedD\" width=\"800\"/><figcaption>loadScript\\(.*?,.*?\\)</figcaption></figure><p>Above you can see the result of running the following Regular Expression:</p><pre><code>loadScript\\(.*?,.*?\\)</code></pre><p>Which means: <em>\u201cmatch everything starting with <code>\"loadScript(\"</code> followed by anything up to the first <code>,</code>, then followed by anything up to the first <code>)</code>\u201d</em></p><p>The only things which might seem strange here for you are the <code>\\</code> symbols. They are used to escape brackets.</p><p>We need to escape symbols <code>(</code> and <code>)</code> because they are special characters used by RegEx to capture parts of the matched text. But we need to match actual bracket characters.</p><p>In the previous RegEx, we defined two arguments of our method call with the <code>.*?</code> symbols. Let\u2019s make each of our arguments a separate <strong>capture group </strong>by adding <code>(</code> and <code>)</code> symbols around them:</p><pre><code>loadScript\\((.*?),(.*?)\\)</code></pre><p>If you run this RegEx, you will see that nothing changed. This is because it matches the same text. But now we can refer to the first argument as <code>$1</code> and to the second argument as <code>$2</code>. This is called backreference, and it will help us do what we want: add another argument in the middle of the call:</p><p>Search input:</p><pre><code>loadScript\\((.*?),(.*?)\\)</code></pre><p>Which means the same thing as the previous RegEx but maps arguments to capture groups 1 and 2 respectively.</p><p>Replace input:</p><pre><code>loadScript($1,id,$2)</code></pre><p>Which means <em>\u201creplace every matched text with text <code>\u201cloadScript(\u201c</code> followed by capture group 1, <code>\u201cid\u201d</code>, capture group 2 and <code>)</code>\u201d. </em>Note that you do not need to escape brackets in the replace input.</p><figure><img alt=\"w27UNrc7N2hkWAO1DmU6p0gulIYiwU-oYjpT\" height=\"354\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/w27UNrc7N2hkWAO1DmU6p0gulIYiwU-oYjpT\" width=\"800\"/><figcaption>Replacement Result</figcaption></figure><h3 id=\"5-character-classes\">5) [ ] \u2014 Character Classes</h3><p>You can list characters you want to match at a specific position by placing <code>[</code> and <code>]</code> symbols around these characters. For example, class <code>[0-9]</code> matches all digits from 0 to 9. You can also list all digits explicitly: <code>[0123456789]</code> \u2014 the meaning is the same. You can use dash with letters too, <code>[a-z]</code> will match any lowercase Latin character,<code>[A-Z]</code> will match any uppercase Latin character and <code>[a-zA-Z]</code> will match both.</p><p>You can also use <code>*</code> after a character class just like after <code>.</code>, which in this case means: <em>\u201cmatch any number of occurrences of the characters in this class\u201d</em></p><figure><img alt=\"2aTqw0lDyht0cE1gqoF3O5eYcemyzhIBhSzU\" height=\"463\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/2aTqw0lDyht0cE1gqoF3O5eYcemyzhIBhSzU\" width=\"800\"/><figcaption>expect.*to.equal\\([0\u20139]*\\): Match only those lines where we expect tested variable to equal a number</figcaption></figure><h3 id=\"last-word\">Last Word</h3><p>You should know that there are several RegEx flavors. The one I discussed here is javascript RegEx engine. Most modern engines are similar, but there may be some differences. Usually, these differences include escape characters and backreferences marks.</p><p>I urge you to open your text editor and start using some of these tricks right now. You will see that you can now complete many refactoring tasks much faster than before. Once you are comfortable with these tricks, <a href=\"https://www.regular-expressions.info/\" rel=\"noopener\">you can start researching more into regular expressions</a>.</p><p><strong>Thank you for reading my article to the end. Add claps if you found it useful and subscribe for more updates. I will publish more articles on regular expressions, javascript, and programming in general.</strong></p>\n</section>\n<hr/>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nAlways wanted to learn Regular Expressions but got put off by their complexity? In this article, I will show you five easy-to-learn RegEx tricks which you can start using immediately in your favorite text editor.Text Editor SetupWhile almost any text editor supports Regular Expressions now, I will use Visual Studio Code for this tutorial, but you can use any editor you like. Also, note that you usually need to turn on RegEx somewhere near the search input. Here is how you do this in VS Code:You need to enable RegEx by checking this option1) . \u2014 Match Any CharacterLet\u2019s start simple. The dot symbol . matches any character:b.tAbove RegEx matches \"bot\u201d, \"bat\u201d and any other word of three characters which starts with b and ends in t. But if you want to search for the dot symbol, you need to escape it with \\, so this RegEx will only match the exact text \"b.t\":b\\.t2) .* \u2014 Match AnythingHere . means \u201cany character\u201d and * means \u201canything before this symbol repeated any number of times.\u201d Together (.*) they mean \u201cany symbol any number of times.\u201d You can use it, for example, to find matches starting with or ending in some text. Let\u2019s suppose we have a javascript method with the following signature:loadScript(scriptName: string, pathToFile: string)And we want to find all calls of this method wherepathToFile points to any file in the folder \u201clua\u201d . You can use the following Regular Expression for this:loadScript.*luaWhich means, \u201cmatch all text starting with\u201cloadScript\u201d followed by anything up to the last occurrence of \u201clua\u201d\u201cloadScript.*lua: matches everything starting with \"loadScript\" and ending in \"lua\"3) ? \u2014 Non-Greedy MatchThe ? symbol after .* and some other RegEx sequences means \u201cmatch as little as possible.\u201d If you look at the previous picture, you will see that text \u201clua\u201d is seen twice in every match, and everything up to the second \u201clua\u201d was matched. If you wanted to match everything up to the first occurrence of \"lua\" instead, you would use the following RegEx:loadScript.*?luaWhich means, \u201cmatch everything starting with\"loadScript\" followed by anything up to the first occurrence of \"lua\"\"loadScript.*?lua: matches everything starting with loadScript and up to the first occurrence of \u201clua\u201d4) ( ) $ \u2014 Capture Groups and BackreferencesOkay, now we can match some text. But what if we want to change parts of the text we found? We often have to make use of capture groups for that.Let\u2019s suppose we changed our loadScript method and now it suddenly needs another argument inserted between its two arguments. Let\u2019s name this new argument id, so the new function signature should look like this: loadScript(scriptName, id, pathToFile). We can\u2019t use normal replace feature of our text editor here, but a Regular Expression is exactly what we need.loadScript\\(.*?,.*?\\)Above you can see the result of running the following Regular Expression:loadScript\\(.*?,.*?\\)Which means: \u201cmatch everything starting with \"loadScript(\" followed by anything up to the first ,, then followed by anything up to the first )\u201dThe only things which might seem strange here for you are the \\ symbols. They are used to escape brackets.We need to escape symbols ( and ) because they are special characters used by RegEx to capture parts of the matched text. But we need to match actual bracket characters.In the previous RegEx, we defined two arguments of our method call with the .*? symbols. Let\u2019s make each of our arguments a separate capture group by adding ( and ) symbols around them:loadScript\\((.*?),(.*?)\\)If you run this RegEx, you will see that nothing changed. This is because it matches the same text. But now we can refer to the first argument as $1 and to the second argument as $2. This is called backreference, and it will help us do what we want: add another argument in the middle of the call:Search input:loadScript\\((.*?),(.*?)\\)Which means the same thing as the previous RegEx but maps arguments to capture groups 1 and 2 respectively.Replace input:loadScript($1,id,$2)Which means \u201creplace every matched text with text \u201cloadScript(\u201c followed by capture group 1, \u201cid\u201d, capture group 2 and )\u201d. Note that you do not need to escape brackets in the replace input.Replacement Result5) [ ] \u2014 Character ClassesYou can list characters you want to match at a specific position by placing [ and ] symbols around these characters. For example, class [0-9] matches all digits from 0 to 9. You can also list all digits explicitly: [0123456789] \u2014 the meaning is the same. You can use dash with letters too, [a-z] will match any lowercase Latin character,[A-Z] will match any uppercase Latin character and [a-zA-Z] will match both.You can also use * after a character class just like after ., which in this case means: \u201cmatch any number of occurrences of the characters in this class\u201dexpect.*to.equal\\([0\u20139]*\\): Match only those lines where we expect tested variable to equal a numberLast WordYou should know that there are several RegEx flavors. The one I discussed here is javascript RegEx engine. Most modern engines are similar, but there may be some differences. Usually, these differences include escape characters and backreferences marks.I urge you to open your text editor and start using some of these tricks right now. You will see that you can now complete many refactoring tasks much faster than before. Once you are comfortable with these tricks, you can start researching more into regular expressions.Thank you for reading my article to the end. Add claps if you found it useful and subscribe for more updates. I will publish more articles on regular expressions, javascript, and programming in general.\n\n                        \n                    \n                    \n                        \n                        \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 6315, "excerpt": "Always wanted to learn Regular Expressions but got put off by their complexity?\nIn this article, I will show you five easy-to-learn RegEx tricks which you can\nstart using immediately in your favorite text editor.\n\nText Editor Setup\nWhile almost any text editor supports Regular Expressions now, I will use Visual\nStudio Code for this tutorial, but you can use any editor you like. Also, note\nthat you usually need to turn on RegEx somewhere near the search input. Here is\nhow you do this in VS Code:", "siteName": "freeCodeCamp.org", "publishedTime": "2019-05-08T16:40:49.000Z", "id": "a6cf72fad55ae594694b931a2ca829c97e2c0a05", "url": "https://www.freecodecamp.org/news/simple-regex-tricks-for-beginners-3acb3fa257cb/", "domain": "freecodecamp.org", "date": "2023-12-27T18:10:20.800976", "resultUri": "http://localhost:3000/result/a6cf72fad55ae594694b931a2ca829c97e2c0a05", "query": {"url": ["https://www.freecodecamp.org/news/simple-regex-tricks-for-beginners-3acb3fa257cb/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "Simple RegEx tricks for beginners", "description": "Always wanted to learn Regular Expressions but got put off by their complexity? In this article, I will show you five easy-to-learn RegEx tricks which you can start using immediately in your favorite text editor. Text Editor Setup While almost any text editor supports Regular Expressions now, I will use", "url": "https://www.freecodecamp.org/news/simple-regex-tricks-for-beginners-3acb3fa257cb/", "image": "https://cdn-media-1.freecodecamp.org/images/1*wUY_k-Q4q-z10Zo425qC5Q.png", "image:width": "374", "image:height": "374"}, "twitter": {"card": "summary_large_image", "title": "Simple RegEx tricks for beginners", "description": "Always wanted to learn Regular Expressions but got put off by their complexity? In this article, I will show you five easy-to-learn RegEx tricks which you can start using immediately in your favorite text editor. Text Editor Setup While almost any text editor supports Regular Expressions now, I will use", "url": "https://www.freecodecamp.org/news/simple-regex-tricks-for-beginners-3acb3fa257cb/", "image": "https://cdn-media-1.freecodecamp.org/images/1*wUY_k-Q4q-z10Zo425qC5Q.png", "label1": "Written by", "data1": "Andrei Chernikov", "label2": "Filed under", "data2": "Regex, Tech, Technology, Programming, Productivity", "site": "@freecodecamp", "creator": "@aikei_en"}}}