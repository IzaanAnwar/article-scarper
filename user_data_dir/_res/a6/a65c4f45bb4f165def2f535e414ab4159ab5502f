{"title": "The Best JavaScript Meme I've Ever Seen, Explained in detail", "byline": "Yazeed Bzadough", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>The Best JavaScript Meme I've Ever Seen, Explained in detail</h1>\n<section>\n<section data-test-label=\"post-content\">\n<h3 id=\"tldrcoerceyourselftousetripleequals\">TLDR: Coerce yourself to use triple equals.</h3>\n<p>I unintentionally found this JavaScript meme on Reddit, and it's the best one I've ever seen.</p>\n<p><img alt=\"best-js-meme-to-date-2\" height=\"760\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2019/07/best-js-meme-to-date-2.png\" width=\"500\"/></p>\n<p>You can verify this meme's accuracy by running each code snippet in Developer Tools. The result isn't surprising, but still kind of disappointing.</p>\n<p>Of course this little experiment lead me to wonder...</p>\n<h2 id=\"whydoesthishappen\">Why Does This Happen?</h2>\n<p><img alt=\"why-does-this-happen\" height=\"295\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2019/07/why-does-this-happen.png\" width=\"400\"/></p>\n<p>With experience, I've learned to embrace JavaScript's smooth sides while bewaring its prickly pines. Nonetheless, this corner case's details still nicked me.</p>\n<p>It's just as Kyle Simpson says...</p>\n<blockquote>\n<p>\"I don\u2019t think anyone ever really knows JS, not completely anyway.\"</p>\n</blockquote>\n<p>When these cases pop up, it's best to consult the source\u2013the <a href=\"http://ecma-international.org/ecma-262/\">official ECMAScript specification</a> that JavaScript is built from.</p>\n<p>With the spec in hand, let's deeply understand what's going on here.</p>\n<h2 id=\"panel1introducingcoercion\">Panel 1 - Introducing Coercion</h2>\n<p><img alt=\"panel-1-1\" height=\"190\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2019/07/panel-1-1.png\" width=\"500\"/></p>\n<p>If you run <code>0 == \"0\"</code> in your developer console, why does it return <code>true</code>?</p>\n<p><code>0</code> is a number, and <code>\"0\"</code> is a string, they should never be the same! Most programming languages respect that. <code>0 == \"0\"</code> in Java, for example, returns this:</p>\n<pre><code>error: incomparable types: int and String\n</code></pre>\n<p>This makes perfect sense. If you want to compare an int and String in Java, you must first convert them to the same type.</p>\n<p>But this is JavaScript, y'all!<br/>\n<img alt=\"this-is-javascript\" height=\"467\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2019/07/this-is-javascript.jpeg\" width=\"534\"/></p>\n<p>When you compare two values via <code>==</code>, one of the values may undergo <em>coercion</em>.</p>\n<blockquote>\n<p>Coercion\u2013<strong>Automatically</strong> changing a value from one type to another.</p>\n</blockquote>\n<p><em><strong>Automatically</strong></em> is the key word here. Instead of you <em>explicitly</em> converting your types, JavaScript does it for you behind the scenes.</p>\n<p><img alt=\"scumbag-javascript\" height=\"500\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2019/07/scumbag-javascript.jpeg\" width=\"500\"/></p>\n<p>This is convenient if you're purposely exploiting it, but potentially harmful if you're unaware of its implications.</p>\n<p>Here's the official <a href=\"https://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3\">ECMAScript Language Specification</a> on that. I'll paraphrase the relevant part:</p>\n<blockquote>\n<p>If x is Number and y is String, return x == ToNumber(y)</p>\n</blockquote>\n<p>So for our case of <code>0 == \"0\"</code>:</p>\n<blockquote>\n<p>Since 0 is Number and \"0\" is String, return 0 == ToNumber(\"0\")</p>\n</blockquote>\n<p>Our string <code>\"0\"</code> has been secretly converted to <code>0</code>, and now we have a match!</p>\n<pre tabindex=\"0\"><code>0 == \"0\" // true\n// The second 0 became a number!\n// so 0 equals 0 is true....\n</code></pre>\n<p><img alt=\"that-string-secretly-became-a-number\" height=\"429\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2019/07/that-string-secretly-became-a-number.jpeg\" width=\"581\"/></p>\n<p>Weird right? Well get used to it, we're not even halfway done.</p>\n<h2 id=\"panel2arraysgetcoercedtoo\">Panel 2 - Arrays Get Coerced Too</h2>\n<p><img alt=\"panel-2\" height=\"182\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2019/07/panel-2.png\" width=\"500\"/></p>\n<p>This nonsense isn't limited to primitives like strings, numbers, or booleans. Here's our next comparison:</p>\n<pre tabindex=\"0\"><code>0 == [] // true\n// What happened...?\n</code></pre>\n<p>Coercion again! I'll paraphrase the spec's relevant part:</p>\n<blockquote>\n<p>If x is String or Number and y is Object, return x == ToPrimitive(y)</p>\n</blockquote>\n<p>Three things here:</p>\n<h3 id=\"1yesarraysareobjects\">1. Yes, arrays are objects</h3>\n<p><img alt=\"arrays-are-objects\" height=\"499\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2019/07/arrays-are-objects.jpg\" width=\"618\"/></p>\n<p>Sorry to break it you.</p>\n<h3 id=\"2emptyarraybecomesemptystring\">2. Empty array becomes empty string</h3>\n<p>Again <a href=\"https://www.ecma-international.org/ecma-262/5.1/#sec-8.12.8\">according to the spec</a>, JS first looks for an object's <code>toString</code> method to coerce it.</p>\n<p>In the case of arrays, <code>toString</code> joins all of its elements and returns them as a string.</p>\n<pre tabindex=\"0\"><code>[1, 2, 3].toString() // \"1,2,3\"\n['hello', 'world'].toString() // \"hello,world\"\n</code></pre>\n<p>Since our array's empty, we have nothing to join! Therefore...</p>\n<pre tabindex=\"0\"><code>[].toString() // \"\"\n</code></pre>\n<p><img alt=\"empty-array-coerces-to-empty-string-1\" height=\"403\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2019/07/empty-array-coerces-to-empty-string-1.jpeg\" width=\"619\"/></p>\n<p>The spec's <code>ToPrimitive</code> turns this empty array into an empty string. References are <a href=\"https://www.ecma-international.org/ecma-262/5.1/#sec-9.1\">here</a> and <a href=\"https://www.ecma-international.org/ecma-262/5.1/#sec-8.12.8\">here</a> for your convenience (or confusion).</p>\n<h3 id=\"3emptystringthenbecomes0\">3. Empty string then becomes 0</h3>\n<p><img alt=\"empty-strings-become-0\" height=\"475\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2019/07/empty-strings-become-0.jpeg\" width=\"525\"/></p>\n<p>You can't make this stuff up. Now that we've coerced the array to <code>\"\"</code>, we're back to the first algorithm...</p>\n<blockquote>\n<p>If x is Number and y is String, return x == ToNumber(y)</p>\n</blockquote>\n<p>So for <code>0 == \"\"</code></p>\n<blockquote>\n<p>Since 0 is Number and \"\" is String, return 0 == ToNumber(\"\")</p>\n</blockquote>\n<p><code>ToNumber(\"\")</code> returns 0.</p>\n<p>Therefore, <code>0 == 0</code> once again...</p>\n<p><img alt=\"coercion-every-time-2\" height=\"499\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2019/07/coercion-every-time-2.jpeg\" width=\"524\"/></p>\n<h2 id=\"panel3quickrecap\">Panel 3 - Quick Recap</h2>\n<p><img alt=\"panel-3-1\" height=\"184\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2019/07/panel-3-1.png\" width=\"500\"/></p>\n<h3 id=\"thisistrue\">This is true</h3>\n<pre tabindex=\"0\"><code>0 == \"0\" // true\n</code></pre>\n<p>Because coercion turns this into <code>0 == ToNumber(\"0\")</code>.</p>\n<h3 id=\"thisistrue\">This is true</h3>\n<pre tabindex=\"0\"><code>0 == [] // true\n</code></pre>\n<p>Because coercion runs twice:</p>\n<ol>\n<li><code>ToPrimitive([])</code> gives empty string</li>\n<li>Then <code>ToNumber(\"\")</code> gives 0.</li>\n</ol>\n<p>So then tell me...according to the above rules, what should this return?</p>\n<pre tabindex=\"0\"><code>\"0\" == []\n</code></pre>\n<h2 id=\"panel4false\">Panel 4 - FALSE!</h2>\n<p><img alt=\"panel-4-1\" height=\"190\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2019/07/panel-4-1.png\" width=\"500\"/></p>\n<p>FALSE! Correct.</p>\n<p>This part makes sense if you understood the rules.</p>\n<p>Here's our comparison:</p>\n<pre tabindex=\"0\"><code>\"0\" == [] // false\n</code></pre>\n<p>Referencing the spec once again:</p>\n<blockquote>\n<p>If x is String or Number and y is Object, return x == ToPrimitive(y)</p>\n</blockquote>\n<p>That means...</p>\n<blockquote>\n<p>Since \"0\" is String and [] is Object, return x == ToPrimitive([])</p>\n</blockquote>\n<p><code>ToPrimitive([])</code> returns empty string. The comparison has now become</p>\n<pre tabindex=\"0\"><code>\"0\" == \"\"\n</code></pre>\n<p><code>\"0\"</code> and <code>\"\"</code> are both strings, so JavaScript says <em>no more coercion needed</em>. This is why we get <code>false</code>.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p><img alt=\"just-use-triple-equals\" height=\"395\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2019/07/just-use-triple-equals.jpeg\" width=\"702\"/></p>\n<p>Use triple equals and sleep soundly at night.</p>\n<pre tabindex=\"0\"><code>0 === \"0\" // false\n0 === [] // false\n\"0\" === [] // false\n</code></pre>\n<p>It avoids coercion entirely, so I guess it's more efficient too!</p>\n<p>But the performance increase is almost meaningless. The real win is the increased confidence you'll have in your code, making that extra keystroke totally worth it.</p>\n<h2 id=\"wantfreecoaching\">Want Free Coaching?</h2>\n<p>If you'd like to schedule a <strong>free</strong> 15-30 minute call to discuss Front-End development questions regarding code, interviews, career, or anything else <a href=\"https://twitter.com/yazeedBee\">follow me on Twitter and DM me</a>.</p>\n<p>After that if you enjoy our first meeting, we can discuss an ongoing coaching relationship that'll help you reach your Front-End development goals!</p>\n<h2 id=\"thanksforreading\">Thanks for reading</h2>\n<p>For more content like this, check out <a href=\"https://yazeedb.com/\">https://yazeedb.com!</a></p>\n<p>Until next time!</p>\n<!--kg-card-end: markdown-->\n</section>\n<hr/>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nTLDR: Coerce yourself to use triple equals.\nI unintentionally found this JavaScript meme on Reddit, and it's the best one I've ever seen.\n\nYou can verify this meme's accuracy by running each code snippet in Developer Tools. The result isn't surprising, but still kind of disappointing.\nOf course this little experiment lead me to wonder...\nWhy Does This Happen?\n\nWith experience, I've learned to embrace JavaScript's smooth sides while bewaring its prickly pines. Nonetheless, this corner case's details still nicked me.\nIt's just as Kyle Simpson says...\n\n\"I don\u2019t think anyone ever really knows JS, not completely anyway.\"\n\nWhen these cases pop up, it's best to consult the source\u2013the official ECMAScript specification that JavaScript is built from.\nWith the spec in hand, let's deeply understand what's going on here.\nPanel 1 - Introducing Coercion\n\nIf you run 0 == \"0\" in your developer console, why does it return true?\n0 is a number, and \"0\" is a string, they should never be the same! Most programming languages respect that. 0 == \"0\" in Java, for example, returns this:\nerror: incomparable types: int and String\n\nThis makes perfect sense. If you want to compare an int and String in Java, you must first convert them to the same type.\nBut this is JavaScript, y'all!\n\nWhen you compare two values via ==, one of the values may undergo coercion.\n\nCoercion\u2013Automatically changing a value from one type to another.\n\nAutomatically is the key word here. Instead of you explicitly converting your types, JavaScript does it for you behind the scenes.\n\nThis is convenient if you're purposely exploiting it, but potentially harmful if you're unaware of its implications.\nHere's the official ECMAScript Language Specification on that. I'll paraphrase the relevant part:\n\nIf x is Number and y is String, return x == ToNumber(y)\n\nSo for our case of 0 == \"0\":\n\nSince 0 is Number and \"0\" is String, return 0 == ToNumber(\"0\")\n\nOur string \"0\" has been secretly converted to 0, and now we have a match!\n0 == \"0\" // true\n// The second 0 became a number!\n// so 0 equals 0 is true....\n\n\nWeird right? Well get used to it, we're not even halfway done.\nPanel 2 - Arrays Get Coerced Too\n\nThis nonsense isn't limited to primitives like strings, numbers, or booleans. Here's our next comparison:\n0 == [] // true\n// What happened...?\n\nCoercion again! I'll paraphrase the spec's relevant part:\n\nIf x is String or Number and y is Object, return x == ToPrimitive(y)\n\nThree things here:\n1. Yes, arrays are objects\n\nSorry to break it you.\n2. Empty array becomes empty string\nAgain according to the spec, JS first looks for an object's toString method to coerce it.\nIn the case of arrays, toString joins all of its elements and returns them as a string.\n[1, 2, 3].toString() // \"1,2,3\"\n['hello', 'world'].toString() // \"hello,world\"\n\nSince our array's empty, we have nothing to join! Therefore...\n[].toString() // \"\"\n\n\nThe spec's ToPrimitive turns this empty array into an empty string. References are here and here for your convenience (or confusion).\n3. Empty string then becomes 0\n\nYou can't make this stuff up. Now that we've coerced the array to \"\", we're back to the first algorithm...\n\nIf x is Number and y is String, return x == ToNumber(y)\n\nSo for 0 == \"\"\n\nSince 0 is Number and \"\" is String, return 0 == ToNumber(\"\")\n\nToNumber(\"\") returns 0.\nTherefore, 0 == 0 once again...\n\nPanel 3 - Quick Recap\n\nThis is true\n0 == \"0\" // true\n\nBecause coercion turns this into 0 == ToNumber(\"0\").\nThis is true\n0 == [] // true\n\nBecause coercion runs twice:\n\nToPrimitive([]) gives empty string\nThen ToNumber(\"\") gives 0.\n\nSo then tell me...according to the above rules, what should this return?\n\"0\" == []\n\nPanel 4 - FALSE!\n\nFALSE! Correct.\nThis part makes sense if you understood the rules.\nHere's our comparison:\n\"0\" == [] // false\n\nReferencing the spec once again:\n\nIf x is String or Number and y is Object, return x == ToPrimitive(y)\n\nThat means...\n\nSince \"0\" is String and [] is Object, return x == ToPrimitive([])\n\nToPrimitive([]) returns empty string. The comparison has now become\n\"0\" == \"\"\n\n\"0\" and \"\" are both strings, so JavaScript says no more coercion needed. This is why we get false.\nConclusion\n\nUse triple equals and sleep soundly at night.\n0 === \"0\" // false\n0 === [] // false\n\"0\" === [] // false\n\nIt avoids coercion entirely, so I guess it's more efficient too!\nBut the performance increase is almost meaningless. The real win is the increased confidence you'll have in your code, making that extra keystroke totally worth it.\nWant Free Coaching?\nIf you'd like to schedule a free 15-30 minute call to discuss Front-End development questions regarding code, interviews, career, or anything else follow me on Twitter and DM me.\nAfter that if you enjoy our first meeting, we can discuss an ongoing coaching relationship that'll help you reach your Front-End development goals!\nThanks for reading\nFor more content like this, check out https://yazeedb.com!\nUntil next time!\n\n\n                        \n                    \n                    \n                        \n                        \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 5639, "excerpt": "TLDR: Coerce yourself to use triple equals.\nI unintentionally found this JavaScript meme on Reddit, and it's the best one\nI've ever seen.\n\n\n\nYou can verify this meme's accuracy by running each code snippet in Developer\nTools. The result isn't surprising, but still kind of disappointing.\n\nOf course this little experiment lead me to wonder...\n\nWhy Does This Happen?\n\n\nWith experience, I've learned to embrace JavaScript's smooth sides while\nbewaring its prickly pines. Nonetheless, this corner case's", "siteName": "freeCodeCamp.org", "publishedTime": "2019-07-30T07:00:00.000Z", "id": "a65c4f45bb4f165def2f535e414ab4159ab5502f", "url": "https://www.freecodecamp.org/news/explaining-the-best-javascript-meme-i-have-ever-seen/", "domain": "freecodecamp.org", "date": "2023-12-27T18:08:50.965395", "resultUri": "http://localhost:3000/result/a65c4f45bb4f165def2f535e414ab4159ab5502f", "query": {"url": ["https://www.freecodecamp.org/news/explaining-the-best-javascript-meme-i-have-ever-seen/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "The Best JavaScript Meme I've Ever Seen, Explained in detail", "description": "TLDR: Coerce yourself to use triple equals. I unintentionally found this JavaScript meme on Reddit, and it's the best one I've ever seen. You can verify this meme's accuracy by running each code snippet in Developer Tools. The result isn't surprising, but still kind of disappointing. Of course this little", "url": "https://www.freecodecamp.org/news/explaining-the-best-javascript-meme-i-have-ever-seen/", "image": "https://www.freecodecamp.org/news/content/images/2019/07/cover-photo.png", "image:width": "350", "image:height": "266"}, "twitter": {"card": "summary_large_image", "title": "The Best JavaScript Meme I've Ever Seen, Explained in detail", "description": "TLDR: Coerce yourself to use triple equals. I unintentionally found this JavaScript meme on Reddit, and it's the best one I've ever seen. You can verify this meme's accuracy by running each code snippet in Developer Tools. The result isn't surprising, but still kind of disappointing. Of course this little", "url": "https://www.freecodecamp.org/news/explaining-the-best-javascript-meme-i-have-ever-seen/", "image": "https://www.freecodecamp.org/news/content/images/2019/07/cover-photo.png", "label1": "Written by", "data1": "Yazeed Bzadough", "label2": "Filed under", "data2": "JavaScript, Programming, Technology, React, Arrays", "site": "@freecodecamp", "creator": "@yazeedBee"}}}