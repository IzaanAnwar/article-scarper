{"title": "Statement vs Expression \u2013 What's the Difference in Programming?", "byline": "Ogundiran Ayobami", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>Statement vs Expression \u2013 What's the Difference in Programming?</h1>\n<section>\n<section data-test-label=\"post-content\">\n<p>Learning the syntax of a programming language is key if you want to use that language effectively. This is true for both new and experienced developers.</p><p>And one of the most important things to pay attention to while learning a programming language is whether the code you're dealing with is a statement or an expression.</p><p>It can sometimes be confusing to differentiate between statements and expressions in programming. So this article is meant to simplify the differences so that you can improve your programming skills and become a better developer.</p><figure><img alt=\"Senior caucasian man holding blank empty banner covering mouth with hand, shocked and afraid for mistake. surprised expression \" height=\"1333\" loading=\"lazy\" sizes=\"(min-width: 720px) 720px\" src=\"https://images.unsplash.com/photo-1603792907191-89e55f70099a?crop=entropy&amp;cs=tinysrgb&amp;fit=max&amp;fm=jpg&amp;ixid=MnwxMTc3M3wwfDF8c2VhcmNofDF8fHN1cnByaXNlZHxlbnwwfHx8fDE2NzA1MTMyNzI&amp;ixlib=rb-4.0.3&amp;q=80&amp;w=2000\" srcset=\"https://images.unsplash.com/photo-1603792907191-89e55f70099a?crop=entropy&amp;cs=tinysrgb&amp;fit=max&amp;fm=jpg&amp;ixid=MnwxMTc3M3wwfDF8c2VhcmNofDF8fHN1cnByaXNlZHxlbnwwfHx8fDE2NzA1MTMyNzI&amp;ixlib=rb-4.0.3&amp;q=80&amp;w=600 600w, https://images.unsplash.com/photo-1603792907191-89e55f70099a?crop=entropy&amp;cs=tinysrgb&amp;fit=max&amp;fm=jpg&amp;ixid=MnwxMTc3M3wwfDF8c2VhcmNofDF8fHN1cnByaXNlZHxlbnwwfHx8fDE2NzA1MTMyNzI&amp;ixlib=rb-4.0.3&amp;q=80&amp;w=1000 1000w, https://images.unsplash.com/photo-1603792907191-89e55f70099a?crop=entropy&amp;cs=tinysrgb&amp;fit=max&amp;fm=jpg&amp;ixid=MnwxMTc3M3wwfDF8c2VhcmNofDF8fHN1cnByaXNlZHxlbnwwfHx8fDE2NzA1MTMyNzI&amp;ixlib=rb-4.0.3&amp;q=80&amp;w=1600 1600w, https://images.unsplash.com/photo-1603792907191-89e55f70099a?crop=entropy&amp;cs=tinysrgb&amp;fit=max&amp;fm=jpg&amp;ixid=MnwxMTc3M3wwfDF8c2VhcmNofDF8fHN1cnByaXNlZHxlbnwwfHx8fDE2NzA1MTMyNzI&amp;ixlib=rb-4.0.3&amp;q=80&amp;w=2400 2400w\" width=\"2000\"/><figcaption>Photo by <a href=\"https://unsplash.com/@krakenimages?utm_source=ghost&amp;utm_medium=referral&amp;utm_campaign=api-credit\">krakenimages</a> / <a href=\"https://unsplash.com/?utm_source=ghost&amp;utm_medium=referral&amp;utm_campaign=api-credit\">Unsplash</a></figcaption></figure><p>An expression is any word or group of words or symbols that is a value. In programming, an expression is a value, or anything that executes and ends up being a value.</p><p>It is necessary to understand that a value is unique. For example, <code>const</code>, <code>let</code>, <code>2</code>, <code>4</code>, <code>s</code>, <code>a</code>, <code>true</code>, <code>false</code>, and <code>world</code> are values because each of them is unique in meaning or character.</p><p>Let's look at some code as an example:</p><pre tabindex=\"0\"><code>const price = 500;\n</code></pre><p>Judging from the code above, <code>const</code>, <code>price</code>, <code>=</code>, and <code>500</code> are expressions because each of them has a definite and unique meaning or value. But if we take all of them together <code>const price = 500</code> - then we have a statement.</p><p>Let's look at another example:</p><pre tabindex=\"0\"><code>let multiply = function (firstNumber, secondNumber) {\n    return firstNumber * secondNumber;\n}\n</code></pre><p>Looking at the code above, you can see an anonymous function is assigned to a variable. Oh, wait! You might know that any function is a statement. Can it also be an expression? </p><p>Yes! A \"function\" and a \"class\" are both statements and expressions because they can perform actions (do or not do tasks) and still execute to a value.</p><p>This brings us to statements \u2013 so what are they?</p><h2 id=\"what-is-a-statement-in-programming\">What is a Statement in Programming?</h2><p>A statement is a group of expressions and/or statements that you design to carry out a task or an action. </p><p>Statements are two-sided \u2013 that is, they either do tasks or don't do them. Any statement that can return a value is automatically qualified to be used as an expression. That is why a function or class is a statement and also an expression in JavaScript.</p><p>If you look at the example of the function under the section on expressions, you can see it is assigned and execute to a value passed to a variable. That is why it is an expression in that case.</p><h2 id=\"examples-of-statements-in-programming\">Examples of Statements in Programming</h2><h3 id=\"inline-statements\">Inline statements</h3><pre tabindex=\"0\"><code>let amount = $2000;\n</code></pre><p>The whole of the code above is a statement because it carries out the task of assigning <code>$2000</code> to <code>amount</code>. It is safe to say a line of code is a statement because most compilers or interpreters don't execute any standalone expression.</p><figure><img alt=\"Happy man portraits \" height=\"1333\" loading=\"lazy\" sizes=\"(min-width: 720px) 720px\" src=\"https://images.unsplash.com/photo-1625314517201-dd442445cf42?crop=entropy&amp;cs=tinysrgb&amp;fit=max&amp;fm=jpg&amp;ixid=MnwxMTc3M3wwfDF8c2VhcmNofDF8fGV4Y2l0ZWR8ZW58MHx8fHwxNjcwNTEzMzMx&amp;ixlib=rb-4.0.3&amp;q=80&amp;w=2000\" srcset=\"https://images.unsplash.com/photo-1625314517201-dd442445cf42?crop=entropy&amp;cs=tinysrgb&amp;fit=max&amp;fm=jpg&amp;ixid=MnwxMTc3M3wwfDF8c2VhcmNofDF8fGV4Y2l0ZWR8ZW58MHx8fHwxNjcwNTEzMzMx&amp;ixlib=rb-4.0.3&amp;q=80&amp;w=600 600w, https://images.unsplash.com/photo-1625314517201-dd442445cf42?crop=entropy&amp;cs=tinysrgb&amp;fit=max&amp;fm=jpg&amp;ixid=MnwxMTc3M3wwfDF8c2VhcmNofDF8fGV4Y2l0ZWR8ZW58MHx8fHwxNjcwNTEzMzMx&amp;ixlib=rb-4.0.3&amp;q=80&amp;w=1000 1000w, https://images.unsplash.com/photo-1625314517201-dd442445cf42?crop=entropy&amp;cs=tinysrgb&amp;fit=max&amp;fm=jpg&amp;ixid=MnwxMTc3M3wwfDF8c2VhcmNofDF8fGV4Y2l0ZWR8ZW58MHx8fHwxNjcwNTEzMzMx&amp;ixlib=rb-4.0.3&amp;q=80&amp;w=1600 1600w, https://images.unsplash.com/photo-1625314517201-dd442445cf42?crop=entropy&amp;cs=tinysrgb&amp;fit=max&amp;fm=jpg&amp;ixid=MnwxMTc3M3wwfDF8c2VhcmNofDF8fGV4Y2l0ZWR8ZW58MHx8fHwxNjcwNTEzMzMx&amp;ixlib=rb-4.0.3&amp;q=80&amp;w=2400 2400w\" width=\"2000\"/><figcaption>Photo by <a href=\"https://unsplash.com/@1nimidiffa_?utm_source=ghost&amp;utm_medium=referral&amp;utm_campaign=api-credit\">Nimi Diffa</a> / <a href=\"https://unsplash.com/?utm_source=ghost&amp;utm_medium=referral&amp;utm_campaign=api-credit\">Unsplash</a></figcaption></figure><h3 id=\"block-statements\">Block statements</h3><p>Look at the below <code>if</code> statement:</p><pre tabindex=\"0\"><code>if( iLoveYou ) {\n    let status = \"you should know I mean it\"; \n\n    console.log(status)\n}\n</code></pre><p>The <code>if statement</code> is a statement because it helps us check whether <code>I love you</code> or not. As I have said before, it is two-sided: this code finds out whether \"I love you\" or not, and that is why it is a statement. Also, it doesn't return any value but it can create side effects.</p><p>Here's a <code>loop</code> statement:</p><pre tabindex=\"0\"><code>for( ) {\n   //code block\n}\n\nwhile ( counter &lt; 5 ) {\n   console.log(' less than 5' );\n}\n</code></pre><p>In short, any loop is a statement because if it can only do the tasks it is meant to do or not \u2013 does loop and doesn't loop. But a loop can't execute to a value in the end. They can only have side effects in JavaScript. Once they can execute to a value in a programming language, then they can also be used as an expression.</p><p>For example, you can use forloop and if statement as expressions in Python.</p><pre tabindex=\"0\"><code># Define a list of numbers\nnumbers = [1, 2, 3, 4, 5]\n\n# compute the sum of the numbers\ntotal = sum([num for num in numbers])</code></pre><p>There is also an \"IF\" expression in Python. That means that something that is a statement in one language can be an expression (or both statement and expression) in another.</p><pre tabindex=\"0\"><code>a = 1\nresult = 'even' if a % 2 == 0 else 'odd'\nprint(result)\n</code></pre><p>Look at the below function statement:</p><figure><pre tabindex=\"0\"><code>//we define the function as a statement\nfunction add(firstNumber, secondNumber) {\n    return firstNumber * secondNumber;\n}\n\n//we call it as a statement\nadd(2, 3);\n</code></pre><figcaption>\u0019</figcaption></figure><p>We declare the function <code>add(firstNumber, secondNumber)</code> and it returns a value. The function is called with two arguments as in <code>add(2, 3)</code> by declaration and so it is a statement. If you pay close attention, you will realize that calling the function as a statement is useless since it has no side effect.</p><p>Hey, stop! How can we turn it into an expression? Oh yeah, we can do it like this:</p><pre tabindex=\"0\"><code>   const five = add(2, 3)\n</code></pre><p>Though the function is now an expression the way it is called above, the whole of the code is still a statement.</p><p>Check out this class statement:</p><pre tabindex=\"0\"><code>let User = class Person {\n  sayHi() {\n    alert(\"Hi\");\n  }\n};\n</code></pre><p>You can see that we declare the class \"Person\" and <strong>instantiate and assign</strong> it to \"User\" immediately. So, it is used as an expression. </p><p>Now, let's use it as a statement:</p><pre tabindex=\"0\"><code>//We write class as a statement\nclass Person {\n  sayHi() {\n    alert(\"Hi\");\n  }\n}\n\n// we instantiate it as a statement.\nnew Person().sayHi();\n\n// we instantiate it as an expression\nlet User = Person();\n</code></pre><p><a href=\"https://www.techtarget.com/whatis/definition/class#:~:text=In%20object-oriented%20programming%20%2C%20a,ideas%20of%20object-oriented%20programming.\">A class</a> is similar to a function in the sense that it can be declared, assigned, or used as an operand just like a class. So, a class is a statement and/or an expression.</p><h2 id=\"the-main-differences-between-an-expression-and-a-statement-in-programming\">The Main Differences Between an Expression and a Statement in Programming</h2><p>Expressions can be assigned or used as operands, while statements can only be declared.</p><p>Statements create side effects to be useful, while expressions are values or execute to values.</p><p>Expressions are unique in meaning, while statements are two-sided in execution. For example, 1 has a certain value while <code>go( )</code> may be executed or not.</p><p>Statements are the whole structure, while expressions are the building blocks. For example, a line or a block of code is a statement.</p><h2 id=\"why-you-should-know-the-difference\">Why You Should Know the Difference</h2><p>First of all, understanding the difference between statements and expressions should make learning new programming languages less surprising. If you're used to JavaScript, you may be surprised by Python's ability to assign an if statement as a variable which is not possible in JavaScript.</p><p>Second, it makes it easy to use programming paradigms across different programming languages. </p><p>For example, a JavaScript \"if statement\" cannot be used as an expression because it can't execute to a value \u2013 it can only create side effects. Yet, you can use the ternary operator if you want to avoid the side effects of using an if statement in JavaScript. </p><p>For this reason, you can understand why some programmers avoid if statements by using the ternary operator in JavaScript. It is because they want to avoid <a href=\"https://en.wikipedia.org/wiki/Side_effect_(computer_science)\">side effects</a>. </p><p>It also makes your realize why you have to be always careful about the scope of your variables whenever you use a statement. This is true because statements mostly have side effects to be useful, and it is reasonable to understand the scope of your variables and operations. For example,</p><pre tabindex=\"0\"><code>let counter = 0;\n\nfunction addFive() {\n    counter += 5\n    console.log(counter)\n}\n\nfunction addTwo() {\n    counter += 2\n    console.log(counter)\n}\n\naddFive(counter);// what will this show in the console?\naddTwo(counter);// what will this show in the console?</code></pre><p>Hey wait! What would be logged in the console if you ran the code above? </p><p>Tell yourself the answer first and then paste the code in the console to confirm. If you you're wrong, you need to learn more about scope and side effects. But if you're right, try to make those functions a bit better to avoid the confusion they may generate.</p><p>Knowing the difference also helps you to easily identify non-composable and composable syntaxes (functions, classes, modules, and so on) of a programming language. This makes porting your experience from one programming language to another more interesting and direct.</p><h2 id=\"wrapping-up\"><strong>Wrapping Up</strong></h2><p>Now that you understand the difference between expressions and statements in programming, and you know why understanding the differences is important, you can identify pieces of code as expressions or statements while coding. </p><p>Next time, we'll go even further and help make learning a second programming language easier.</p><p>Go and get things done now! See you soon.</p><p>I am planning to share a lot about programming tips and tutorials in 2023. If you're struggling to build projects or you want to stay connected with my write-ups and videos, please join my list at <a href=\"https://youtoocancode.aweb.page/\">YouTooCanCode</a> or subscribe to my YouTube channel at <a href=\"https://www.youtube.com/c/youtoocancode\">You Too Can Code on YouTube</a>.</p>\n</section>\n<hr/>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nLearning the syntax of a programming language is key if you want to use that language effectively. This is true for both new and experienced developers.And one of the most important things to pay attention to while learning a programming language is whether the code you're dealing with is a statement or an expression.It can sometimes be confusing to differentiate between statements and expressions in programming. So this article is meant to simplify the differences so that you can improve your programming skills and become a better developer.Photo by krakenimages / UnsplashAn expression is any word or group of words or symbols that is a value. In programming, an expression is a value, or anything that executes and ends up being a value.It is necessary to understand that a value is unique. For example, const, let, 2, 4, s, a, true, false, and world are values because each of them is unique in meaning or character.Let's look at some code as an example:const price = 500;\nJudging from the code above, const, price, =, and 500 are expressions because each of them has a definite and unique meaning or value. But if we take all of them together const price = 500 - then we have a statement.Let's look at another example:let multiply = function (firstNumber, secondNumber) {\n    return firstNumber * secondNumber;\n}\nLooking at the code above, you can see an anonymous function is assigned to a variable. Oh, wait! You might know that any function is a statement. Can it also be an expression? Yes! A \"function\" and a \"class\" are both statements and expressions because they can perform actions (do or not do tasks) and still execute to a value.This brings us to statements \u2013 so what are they?What is a Statement in Programming?A statement is a group of expressions and/or statements that you design to carry out a task or an action. Statements are two-sided \u2013 that is, they either do tasks or don't do them. Any statement that can return a value is automatically qualified to be used as an expression. That is why a function or class is a statement and also an expression in JavaScript.If you look at the example of the function under the section on expressions, you can see it is assigned and execute to a value passed to a variable. That is why it is an expression in that case.Examples of Statements in ProgrammingInline statementslet amount = $2000;\nThe whole of the code above is a statement because it carries out the task of assigning $2000 to amount. It is safe to say a line of code is a statement because most compilers or interpreters don't execute any standalone expression.Photo by Nimi Diffa / UnsplashBlock statementsLook at the below if statement:if( iLoveYou ) {\n    let status = \"you should know I mean it\"; \n\n    console.log(status)\n}\nThe if statement is a statement because it helps us check whether I love you or not. As I have said before, it is two-sided: this code finds out whether \"I love you\" or not, and that is why it is a statement. Also, it doesn't return any value but it can create side effects.Here's a loop statement:for( ) {\n   //code block\n}\n\nwhile ( counter < 5 ) {\n   console.log(' less than 5' );\n}\nIn short, any loop is a statement because if it can only do the tasks it is meant to do or not \u2013 does loop and doesn't loop. But a loop can't execute to a value in the end. They can only have side effects in JavaScript. Once they can execute to a value in a programming language, then they can also be used as an expression.For example, you can use forloop and if statement as expressions in Python.# Define a list of numbers\nnumbers = [1, 2, 3, 4, 5]\n\n# compute the sum of the numbers\ntotal = sum([num for num in numbers])There is also an \"IF\" expression in Python. That means that something that is a statement in one language can be an expression (or both statement and expression) in another.a = 1\nresult = 'even' if a % 2 == 0 else 'odd'\nprint(result)\nLook at the below function statement://we define the function as a statement\nfunction add(firstNumber, secondNumber) {\n    return firstNumber * secondNumber;\n}\n\n//we call it as a statement\nadd(2, 3);\n\u0019We declare the function add(firstNumber, secondNumber) and it returns a value. The function is called with two arguments as in add(2, 3) by declaration and so it is a statement. If you pay close attention, you will realize that calling the function as a statement is useless since it has no side effect.Hey, stop! How can we turn it into an expression? Oh yeah, we can do it like this:   const five = add(2, 3)\nThough the function is now an expression the way it is called above, the whole of the code is still a statement.Check out this class statement:let User = class Person {\n  sayHi() {\n    alert(\"Hi\");\n  }\n};\nYou can see that we declare the class \"Person\" and instantiate and assign it to \"User\" immediately. So, it is used as an expression. Now, let's use it as a statement://We write class as a statement\nclass Person {\n  sayHi() {\n    alert(\"Hi\");\n  }\n}\n\n// we instantiate it as a statement.\nnew Person().sayHi();\n\n// we instantiate it as an expression\nlet User = Person();\nA class is similar to a function in the sense that it can be declared, assigned, or used as an operand just like a class. So, a class is a statement and/or an expression.The Main Differences Between an Expression and a Statement in ProgrammingExpressions can be assigned or used as operands, while statements can only be declared.Statements create side effects to be useful, while expressions are values or execute to values.Expressions are unique in meaning, while statements are two-sided in execution. For example, 1 has a certain value while go( ) may be executed or not.Statements are the whole structure, while expressions are the building blocks. For example, a line or a block of code is a statement.Why You Should Know the DifferenceFirst of all, understanding the difference between statements and expressions should make learning new programming languages less surprising. If you're used to JavaScript, you may be surprised by Python's ability to assign an if statement as a variable which is not possible in JavaScript.Second, it makes it easy to use programming paradigms across different programming languages. For example, a JavaScript \"if statement\" cannot be used as an expression because it can't execute to a value \u2013 it can only create side effects. Yet, you can use the ternary operator if you want to avoid the side effects of using an if statement in JavaScript. For this reason, you can understand why some programmers avoid if statements by using the ternary operator in JavaScript. It is because they want to avoid side effects. It also makes your realize why you have to be always careful about the scope of your variables whenever you use a statement. This is true because statements mostly have side effects to be useful, and it is reasonable to understand the scope of your variables and operations. For example,let counter = 0;\n\nfunction addFive() {\n    counter += 5\n    console.log(counter)\n}\n\nfunction addTwo() {\n    counter += 2\n    console.log(counter)\n}\n\naddFive(counter);// what will this show in the console?\naddTwo(counter);// what will this show in the console?Hey wait! What would be logged in the console if you ran the code above? Tell yourself the answer first and then paste the code in the console to confirm. If you you're wrong, you need to learn more about scope and side effects. But if you're right, try to make those functions a bit better to avoid the confusion they may generate.Knowing the difference also helps you to easily identify non-composable and composable syntaxes (functions, classes, modules, and so on) of a programming language. This makes porting your experience from one programming language to another more interesting and direct.Wrapping UpNow that you understand the difference between expressions and statements in programming, and you know why understanding the differences is important, you can identify pieces of code as expressions or statements while coding. Next time, we'll go even further and help make learning a second programming language easier.Go and get things done now! See you soon.I am planning to share a lot about programming tips and tutorials in 2023. If you're struggling to build projects or you want to stay connected with my write-ups and videos, please join my list at YouTooCanCode or subscribe to my YouTube channel at You Too Can Code on YouTube.\n\n                        \n                    \n                    \n                        \n                        \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 9125, "excerpt": "Learning the syntax of a programming language is key if you want to use that\nlanguage effectively. This is true for both new and experienced developers.\n\nAnd one of the most important things to pay attention to while learning a\nprogramming language is whether the code you're dealing with is a statement or\nan expression.\n\nIt can sometimes be confusing to differentiate between statements and\nexpressions in programming. So this article is meant to simplify the differences\nso that you can improve yo", "siteName": "freeCodeCamp.org", "publishedTime": "2022-12-08T23:44:58.000Z", "id": "567297d6b16136bf265d5f0dc4929d231f892f61", "url": "https://www.freecodecamp.org/news/statement-vs-expression-whats-the-difference-in-programming/", "domain": "freecodecamp.org", "date": "2023-12-27T18:05:09.125325", "resultUri": "http://localhost:3000/result/567297d6b16136bf265d5f0dc4929d231f892f61", "query": {"url": ["https://www.freecodecamp.org/news/statement-vs-expression-whats-the-difference-in-programming/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "Statement vs Expression \u2013 What's the Difference in Programming?", "description": "Learning the syntax of a programming language is key if you want to use that language effectively. This is true for both new and experienced developers. And one of the most important things to pay attention to while learning a programming language is whether the code you're dealing with is", "url": "https://www.freecodecamp.org/news/statement-vs-expression-whats-the-difference-in-programming/", "image": "https://www.freecodecamp.org/news/content/images/2022/12/kaleidico-7lryofJ0H9s-unsplash.jpg", "image:width": "1920", "image:height": "1280"}, "twitter": {"card": "summary_large_image", "title": "Statement vs Expression \u2013 What's the Difference in Programming?", "description": "Learning the syntax of a programming language is key if you want to use that language effectively. This is true for both new and experienced developers. And one of the most important things to pay attention to while learning a programming language is whether the code you're dealing with is", "url": "https://www.freecodecamp.org/news/statement-vs-expression-whats-the-difference-in-programming/", "image": "https://www.freecodecamp.org/news/content/images/2022/12/kaleidico-7lryofJ0H9s-unsplash.jpg", "label1": "Written by", "data1": "Ogundiran Ayobami", "label2": "Filed under", "data2": "Programming, syntax, Beginner, Tutorial, Self Improvement", "site": "@freecodecamp", "creator": "@codingnninja"}}}