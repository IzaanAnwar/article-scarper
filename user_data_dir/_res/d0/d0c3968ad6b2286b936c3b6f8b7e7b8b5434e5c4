{"title": "JavaScript Functions Tutorial \u2013 IIFE, Function Parameters, and Code Blocks Explained", "byline": "Oluwatobi Sofela", "dir": null, "lang": "en", "content": "<article><h1>JavaScript Functions Tutorial \u2013 IIFE, Function Parameters, and Code Blocks Explained</h1><div class=\"page\" id=\"readability-page-1\"><section data-test-label=\"post-content\">\n<p>Functions are one of the most widely-used features in programming. So, it helps to have a solid understanding of how they work.</p><p>This tutorial discusses everything you need to know to use JavaScript functions like a pro.</p><h2 id=\"table-of-contents\">Table of Contents</h2><ol><li><a href=\"#what-is-a-function\">What Is a Function?</a></li><li><a href=\"#why-functions\">Why Functions?</a></li><li><a href=\"#syntax-of-a-javascript-function\">Syntax of a JavaScript Function</a></li><li><a href=\"#what-is-a-function-keyword\">What Is a <code>function</code> Keyword?</a></li><li><a href=\"#what-is-a-function-name\">What Is a Function Name?</a></li><li><a href=\"#what-is-a-parameter\">What Is a Parameter?</a></li><li><a href=\"#what-is-a-code-block\">What Is a Code Block?</a></li><li><a href=\"#what-is-a-function-body\">What Is a Function Body?</a></li><li><a href=\"#types-of-javascript-functions\">Types of JavaScript Functions</a></li><li><a href=\"#what-is-a-javascript-function-declaration\">What Is a JavaScript Function Declaration?</a></li><li><a href=\"#what-is-a-javascript-function-expression\">What Is a JavaScript Function Expression?</a></li><li><a href=\"#what-is-a-javascript-arrow-function-expression\">What Is a JavaScript Arrow Function Expression?</a></li><li><a href=\"#what-is-a-javascript-immediately-invoked-function-expression\">What Is a JavaScript Immediately Invoked Function Expression?</a></li><li><a href=\"#overview\">Overview</a></li></ol><p>So, let's get started from the basics.</p><h2 id=\"what-is-a-function\">What Is a Function?</h2><p>A <strong>JavaScript function</strong> is an executable piece of code developers use to bundle a block of zero or more statements.</p><p>In other words, a function is an executable subprogram (mini-program).</p><p>A JavaScript function is a subprogram because its body consists of a series of statements (instructions) to computers\u2014just like a regular program.</p><p>The instructions in a function's body can be a <a href=\"https://codesweetly.com/javascript-variable#example-3-javascript-variable\">variable</a> declaration, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return\">return</a> call, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/console/log\">console.log()</a> invocation, <a href=\"#syntax-of-a-javascript-function\">function</a> definition, or any other JavaScript <a href=\"https://codesweetly.com/javascript-statement\">statements</a>.</p><ul><li>A program is a list of instructions written for computers to execute.</li><li>Unlike other <a href=\"https://codesweetly.com/javascript-non-primitive-data-type#types-of-javascript-objects\">object types</a>, you can invoke a function without storing it in a variable.</li><li>A JavaScript function is similar to other programming languages' procedures or subroutines.</li></ul><p>Functions provide a way to bundle pieces of code together and reuse them anytime, anywhere, for an unlimited period. This helps you eliminate the burden of writing the same set of code repeatedly.</p><p>For instance, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/alert\">alert()</a> is a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window\">built-in window function</a> that someone wrote once for all developers to use anytime, anywhere.</p><h2 id=\"syntax-of-a-javascript-function\">Syntax of a JavaScript Function</h2><pre tabindex=\"0\"><code>function nameOfFunction(parameter1, parameter2, ..., parameterX) {\n  // function's body\n}</code></pre><p>A function is composed of five elements:</p><ol><li>A <code>function</code> keyword</li><li>The function's name</li><li>A list of zero or more parameters</li><li>A code block (<code>{...}</code>)</li><li>The function's body</li></ol><p>Let's discuss each element.</p><h2 id=\"what-is-a-function-keyword\">What Is a <code>function</code> Keyword?</h2><p>We use the <code>function</code> keyword to declare to browsers that a specific piece of code is a JavaScript function\u2014not a mathematical or other generic function.</p><h2 id=\"what-is-a-function-name\">What Is a Function Name?</h2><p>A <strong>function's name</strong> allows you to create an identifier for your function, which you can use to reference it.</p><h2 id=\"what-is-a-parameter\">What Is a Parameter?</h2><p>A <strong>parameter</strong> specifies the name you wish to call your function's <a href=\"https://codesweetly.com/javascript-arguments\">argument</a>.</p><p>A parameter is an optional component of a function. In other words, you do not need to specify a parameter if your function does not accept any argument.</p><p>For instance, JavaScript's <a href=\"https://codesweetly.com/javascript-pop-method\">pop()</a> method is a function without any parameter because it does not accept arguments.</p><p>On the other hand, <a href=\"https://codesweetly.com/javascript-foreach-method\">forEach()</a> has two parameters that accept two arguments.</p><h3 id=\"example-of-a-javascript-parameter\">Example of a JavaScript parameter</h3><pre tabindex=\"0\"><code>// Define a function with two parameters:\nfunction myName(firstName, lastName) {\n  console.log(`My full name is ${firstName} ${lastName}.`);\n}\n\n// Invoke myName function while passing two arguments to its parameters:\nmyName(\"Oluwatobi\", \"Sofela\");\n\n// The invocation above will return:\n\"My full name is Oluwatobi Sofela.\"</code></pre><p><a href=\"https://stackblitz.com/edit/js-edvj3g?devToolsHeight=33&amp;file=index.js\"><strong>Try it on StackBlitz</strong></a></p><p>The <code>myName()</code> function in the snippet above has two parameters: <code>firstName</code> and <code>lastName</code>.</p><p>Suppose you wish to pre-define values for your parameters that browsers can use if users do not invoke the function with the required arguments. In that case, you can create default parameters.</p><h3 id=\"what-is-a-default-parameter\">What is a default parameter?</h3><p><strong>Default parameters</strong> allow you to initialize your function's parameters with default values.</p><p>For instance, suppose users invoke your function without providing a required argument. In such a case, browsers will set the parameter's value to <code>undefined</code>.</p><p>However, default parameters allow you to define the values browsers should use instead of <code>undefined</code>.</p><h3 id=\"examples-of-default-parameters\">Examples of default parameters</h3><p>Below are examples of how default parameters work in JavaScript.</p><h4 id=\"how-to-define-a-function-with-no-default-parameters\">How to define a function with no default parameters</h4><pre tabindex=\"0\"><code>// Define a function with two parameters:\nfunction myName(firstName, lastName) {\n  console.log(`My full name is ${firstName} ${lastName}.`);\n}\n\n// Invoke myName function while passing one argument to its parameters:\nmyName(\"Oluwatobi\");\n\n// The invocation above will return:\n\"My full name is Oluwatobi undefined.\"</code></pre><p><a href=\"https://stackblitz.com/edit/js-9ce3xt?devToolsHeight=33&amp;file=index.js\"><strong>Try it on StackBlitz</strong></a></p><p>The computer automatically set the <code>lastName</code> parameter to <code>undefined</code> because we did not provide a default value.</p><h4 id=\"how-to-define-a-function-with-an-undefined-argument-and-no-default-parameter\">How to define a function with an <code>undefined</code> argument and no default parameter</h4><pre tabindex=\"0\"><code>// Define a function with two parameters:\nfunction myName(firstName, lastName) {\n  console.log(`My full name is ${firstName} ${lastName}.`);\n}\n\n// Invoke myName function while passing two arguments to its parameters:\nmyName(\"Oluwatobi\", undefined);\n\n// The invocation above will return:\n\"My full name is Oluwatobi undefined.\"</code></pre><p><a href=\"https://stackblitz.com/edit/js-csbxta?devToolsHeight=33&amp;file=index.js\"><strong>Try it on StackBlitz</strong></a></p><p>The computer set the <code>lastName</code> parameter to <code>undefined</code> because we provided <code>undefined</code> as <code>myName()</code>'s second argument.</p><h4 id=\"how-to-define-a-function-with-a-default-parameter\">How to define a function with a default parameter</h4><pre tabindex=\"0\"><code>// Define a function with two parameters:\nfunction myName(firstName, lastName = \"Sofela\") {\n  console.log(`My full name is ${firstName} ${lastName}.`);\n}\n\n// Invoke myName function while passing one argument to its parameters:\nmyName(\"Oluwatobi\");\n\n// The invocation above will return:\n\"My full name is Oluwatobi Sofela.\"</code></pre><p><a href=\"https://stackblitz.com/edit/js-ghiyzm?devToolsHeight=33&amp;file=index.js\"><strong>Try it on StackBlitz</strong></a></p><p>Instead of <code>undefined</code>, JavaScript used <code>\"Sofela\"</code> as the <code>lastName</code> parameter's default argument.</p><h4 id=\"how-to-define-a-function-with-an-undefined-argument-and-a-default-parameter\">How to define a function with an <code>undefined</code> argument and a default parameter</h4><pre tabindex=\"0\"><code>// Define a function with two parameters:\nfunction myName(firstName, lastName = \"Sofela\") {\n  console.log(`My full name is ${firstName} ${lastName}.`);\n}\n\n// Invoke myName function while passing two arguments to its parameters:\nmyName(\"Oluwatobi\", undefined);\n\n// The invocation above will return:\n\"My full name is Oluwatobi Sofela.\"</code></pre><p><a href=\"https://stackblitz.com/edit/js-umqgqp?devToolsHeight=33&amp;file=index.js\"><strong>Try it on StackBlitz</strong></a></p><p>Instead of <code>undefined</code>, JavaScript used <code>\"Sofela\"</code> as the <code>lastName</code> parameter's default argument.</p><p>Let's now discuss the fourth element of a JavaScript function: a<strong> code block.</strong></p><h2 id=\"what-is-a-code-block\">What Is a Code Block?</h2><p>A <strong>block</strong> is a pair of braces (<code>{...}</code>) used to group multiple statements together.</p><p><strong>Here's an example:</strong></p><pre tabindex=\"0\"><code>{\n  const hourNow = new Date().getHours();\n}</code></pre><p>The block in the snippet above encased one JavaScript <a href=\"https://codesweetly.com/javascript-statement\">statement</a>.</p><p><strong>Here's another example:</strong></p><pre tabindex=\"0\"><code>if (new Date().getHours() &lt; 18) {\n  const hourNow = new Date().getHours();\n  const minutesNow = new Date().getMinutes();\n  console.log(`The time is ${hourNow}:${minutesNow}.`);\n}</code></pre><p>The <code>if</code> condition's code block grouped three JavaScript statements together.</p><p><strong>Now, consider this snippet:</strong></p><pre tabindex=\"0\"><code>function getTime() {\n  const hourNow = new Date().getHours();\n  const minutesNow = new Date().getMinutes();\n  console.log(`The time is ${hourNow}:${minutesNow}.`);\n}</code></pre><p>The <code>getTime()</code> function's code block grouped three JavaScript statements. Note that the \"function body\" is the space inside the function's code block. Let's talk more about it now.</p><h2 id=\"what-is-a-function-body\">What Is a Function Body?</h2><p>A <strong>function body</strong> is where you place a sequence of statements you want to execute.</p><h3 id=\"syntax-of-a-javascript-function-body\">Syntax of a JavaScript function body</h3><pre tabindex=\"0\"><code>function nameOfFunction() {\n  // function's body\n}\n</code></pre><h3 id=\"function-body-examples\">Function body examples</h3><p>Below are examples of how we use the function body.</p><h4 id=\"how-to-define-a-function-with-three-statements-in-its-body\">How to define a function with three statements in its body</h4><pre tabindex=\"0\"><code>function getName() {\n  const firstName = \"Oluwatobi\";\n  const lastName = \"Sofela\";\n  console.log(firstName + \" \" + lastName);\n}\n</code></pre><p><a href=\"https://stackblitz.com/edit/js-flz5tf?devToolsHeight=33&amp;file=index.js\"><strong>Try it on StackBlitz</strong></a></p><p>In the snippet above, the function's body contains three statements that the computer will execute whenever the function gets invoked.</p><p><strong>Note:</strong> <code>console.log()</code> is a <a href=\"https://codesweetly.com/web-tech-terms-m#method\">method</a> we use to log (write) messages to a web console.</p><h4 id=\"how-to-define-a-function-with-two-statements-in-its-body\">How to define a function with two statements in its body</h4><pre tabindex=\"0\"><code>const bestColors = [\"Coral\", \"Blue\", \"DeepPink\"];\n\nfunction updateMyBestColors(previousColors, newColor) {\n   const mybestColors = [...previousColors, newColor];\n   return mybestColors;\n}\n\nupdateMyBestColors(bestColors, \"GreenYellow\");</code></pre><p><a href=\"https://stackblitz.com/edit/js-nb9sr6?devToolsHeight=33&amp;file=index.js\"><strong>Try it on StackBlitz</strong></a></p><p>In the snippet above, the function's body contains two statements that the computer will execute whenever the function gets invoked.</p><ul><li>The three dots we prepended to <code>previousColors</code> is called a <a href=\"https://codesweetly.com/spread-operator\">spread operator</a>. We used it to expand the <a href=\"https://codesweetly.com/javascript-array-object\">array</a> argument into individual elements.</li><li>You can also prepend the <code>newColor</code> parameter with a <a href=\"https://codesweetly.com/javascript-rest-operator\">rest operator</a> if you wish to add two or more new colors.</li><li>The <code>return</code> keyword ends its function's execution and returns the specified <a href=\"https://codesweetly.com/javascript-statement#what-is-a-javascript-expression-statement\">expression</a> (or <code>undefined</code> if you provide no expression).</li></ul><p>So, now that we know the components of a JavaScript function, we can discuss its types.</p><h2 id=\"types-of-javascript-functions\">Types of JavaScript Functions</h2><p>The four types of JavaScript functions are:</p><ul><li>Function declaration</li><li>Function expression</li><li>Arrow function expression</li><li>Immediately invoking function expression</li></ul><p>Let's discuss each type.</p><h2 id=\"what-is-a-javascript-function-declaration\">What Is a JavaScript Function Declaration?</h2><p>A <strong>function declaration</strong> is a function created without assigning it to a <a href=\"https://codesweetly.com/javascript-variable\">variable</a>.</p><p><strong>Note:</strong> We sometimes call function declaration a \"function definition\" or \"function statement.\"</p><p><strong>Here's an example:</strong></p><pre tabindex=\"0\"><code>function addNumbers() {\n  return 100 + 20;\n}\n</code></pre><p><a href=\"https://stackblitz.com/edit/js-pwh2jr?devToolsHeight=33&amp;file=index.js\"><strong>Try it on StackBlitz</strong></a></p><p>The function above is a function declaration because we defined it without storing it in a variable.</p><h2 id=\"what-is-a-javascript-function-expression\">What Is a JavaScript Function Expression?</h2><p>A <strong>function expression</strong> is a function you create and assign to a variable.</p><p><strong>Here's an example:</strong></p><pre tabindex=\"0\"><code>const myFuncExpr = function addNumbers() {\n  return 100 + 20;\n};\n</code></pre><p><a href=\"https://stackblitz.com/edit/js-hjg1iq?devToolsHeight=33&amp;file=index.js\"><strong>Try it on StackBlitz</strong></a></p><p>The function above is a <strong>named</strong> function expression that we assigned to the <code>myFuncExpr</code> variable.</p><p>You can also write the snippet above as an <strong>anonymous </strong>function expression like so:</p><pre tabindex=\"0\"><code>const myFuncExpr = function() {\n  return 100 + 20;\n};\n</code></pre><p><a href=\"https://stackblitz.com/edit/js-pmeqy4?devToolsHeight=33&amp;file=index.js\"><strong>Try it on StackBlitz</strong></a></p><p>The function above is an anonymous function expression that we assigned to the <code>myFuncExpr</code> variable.</p><ul><li>An <strong>anonymous function</strong> is a function with no name.</li><li>A <strong>named function</strong> is a function with a name.</li></ul><p>A named function's main advantage is that the name makes it easier to trace an error's origin.</p><p>In other words, suppose your function threw an error. In such a case, if the function is named, a debugger's <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/stack\">stack trace</a> will contain the function's name. Therefore, you will find it easier to identify the error's origin.</p><h2 id=\"what-is-a-javascript-arrow-function-expression\">What Is a JavaScript Arrow Function Expression?</h2><p>An <strong>arrow function expression</strong> is a shorthand way to write a function expression.</p><h3 id=\"syntax-of-an-arrow-function\">Syntax of an arrow function</h3><p>We define an arrow function with the equality and the greater-than symbols (<code>=&gt;</code>). Here is the syntax:</p><pre tabindex=\"0\"><code>const variableName = () =&gt; {\n  // function's body\n}\n</code></pre><h3 id=\"example-of-an-arrow-function\">Example of an arrow function</h3><pre tabindex=\"0\"><code>const myFuncExpr = () =&gt; {\n  return 100 + 20;\n};\n</code></pre><p><a href=\"https://stackblitz.com/edit/js-1euhch?devToolsHeight=33&amp;file=index.js\"><strong>Try it on StackBlitz</strong></a></p><p>You can see that we defined the function without a <code>function</code> keyword and a function name.</p><p>You have to omit the <code>function</code> keyword and function name while writing an arrow function expression. Otherwise, JavaScript will throw a <code>SyntaxError</code>.</p><h3 id=\"important-stuff-to-know-about-the-javascript-arrow-function-expression\">Important stuff to know about the JavaScript arrow function expression</h3><p>Here are three essential facts to remember when using an arrow function expression.</p><h4 id=\"1-the-parameters-parentheses-are-optional\">1. The parameters' parentheses are optional</h4><p>Suppose your arrow function contains only a single parameter. In such a case, you can omit its parentheses.</p><pre tabindex=\"0\"><code>const myFuncExpr = a =&gt; {\n  return a + 20;\n};\n</code></pre><p><a href=\"https://codepen.io/oluwatobiss/pen/OJQJejr\"><strong>Try it on CodePen</strong></a></p><h4 id=\"2-the-curly-brackets-and-return-keyword-are-optional\">2. The curly brackets and <code>return</code> keyword are optional</h4><p>Suppose your arrow function contains only a single statement. In that case, you can omit its curly brackets and the <code>return</code> keyword.</p><pre tabindex=\"0\"><code>const myFuncExpr = (x, y) =&gt; x + y;</code></pre><p><a href=\"https://stackblitz.com/edit/js-8t2udu?devToolsHeight=33&amp;file=index.js\"><strong>Try it on StackBlitz</strong></a></p><p>In the snippet above, we implicitly returned the sum of parameters <code>x</code> and <code>y</code> by removing the curly brackets and the <code>return</code> keyword.</p><p><strong>Note:</strong> Whenever you choose to omit the curly brackets, also make sure that you remove the <code>return</code> keyword. Otherwise, the computer will throw a <code>SyntaxError</code>.</p><h4 id=\"3-use-parentheses-to-wrap-any-implicit-object-return\">3. Use parentheses to wrap any implicit object return</h4><p>Suppose you wish to return an object implicitly. In such a case, wrap the object in a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Grouping\">grouping operator</a> <code>(...)</code>.</p><p>For instance, consider the code below:</p><pre tabindex=\"0\"><code>const myFuncExpr = () =&gt; {\n  carColor: \"White\",\n  shoeColor: \"Yellow\",\n};\n</code></pre><p><a href=\"https://codesandbox.io/s/wrong-way-to-use-an-arrow-function-expression-to-return-an-object-implicitly-s8w132?file=/src/index.js\"><strong>Try it on CodeSandbox</strong></a></p><p>The snippet above will throw a <code>SyntaxError</code> because JavaScript assumed the curly brackets (<code>{}</code>) to be the function body's code block\u2014not an <a href=\"https://codesweetly.com/javascript-properties-object\">object literal</a>.</p><p>Therefore, whenever you wish to return an object literal implicitly\u2013without using the <code>return</code> keyword explicitly\u2013make sure to encase the object literal in a grouping operator.</p><p><strong>Here's an example:</strong></p><pre tabindex=\"0\"><code>const myFuncExpr = () =&gt; ({\n  carColor: \"White\",\n  shoeColor: \"Yellow\",\n});\n</code></pre><p><a href=\"https://codesandbox.io/s/correct-way-to-use-an-arrow-function-expression-to-return-an-object-implicitly-p61l5c?file=/src/index.js\"><strong>Try it on CodeSandbox</strong></a></p><p>Note that you can use the grouping operator to return any single value. For instance, the snippet below grouped the sum of <code>x</code> and <code>56</code>.</p><pre tabindex=\"0\"><code>const myFuncExpr = x =&gt; (x + 56);</code></pre><p><a href=\"https://codepen.io/oluwatobiss/pen/rNJNXeG\"><strong>Try it on CodePen</strong></a></p><p>Let's now discuss the fourth type of JavaScript function.</p><p>An <strong>immediately invoked function expression (IIFE)</strong> is a function expression that invokes itself automatically.</p><p><strong>Note:</strong> We sometimes call an IIFE a \"Self-Invoking Function Expression\" or \"Self-Executing Anonymous Function Expression.\"</p><h3 id=\"syntax-of-an-iife\">Syntax of an IIFE</h3><pre tabindex=\"0\"><code>(function() {\n  /* ... */\n})();\n</code></pre><p>An IIFE is composed of three main components:</p><ol><li><strong>A grouping operator:</strong> The first pair of parentheses <code>()</code></li><li><strong>A function:</strong> Enclosed within the grouping operator</li><li><strong>An invocator:</strong> The last pair of parentheses <code>()</code></li></ol><h3 id=\"examples\">Examples</h3><p>Below are examples of an IIFE.</p><h4 id=\"how-to-define-a-named-iife\">How to define a named IIFE</h4><pre tabindex=\"0\"><code>(function addNumbers() {\n  console.log(100 + 20);\n})();\n</code></pre><p><a href=\"https://stackblitz.com/edit/js-nkjjnz?devToolsHeight=33&amp;file=index.js\"><strong>Try it on StackBlitz</strong></a></p><p>The function in the snippet above is a named self-invoking function expression.</p><h4 id=\"how-to-define-an-anonymous-iife\">How to define an anonymous IIFE</h4><pre tabindex=\"0\"><code>(function() {\n  console.log(100 + 20);\n})();\n</code></pre><p><a href=\"https://stackblitz.com/edit/js-ywrmkt?devToolsHeight=33&amp;file=index.js\"><strong>Try it on StackBlitz</strong></a></p><p>The function in the snippet above is an anonymous self-invoking function expression.</p><h4 id=\"how-to-define-an-arrow-function-iife\">How to define an arrow function IIFE</h4><pre tabindex=\"0\"><code>(() =&gt; console.log(100 + 20))();</code></pre><p><a href=\"https://stackblitz.com/edit/js-xqlfgi?devToolsHeight=33&amp;file=index.js\"><strong>Try it on StackBlitz</strong></a></p><p>The function in the snippet above is an arrow self-invoking function expression.</p><h4 id=\"how-to-define-an-async-iife\">How to define an async IIFE</h4><pre tabindex=\"0\"><code>(async () =&gt; console.log(await 100 + 20))();</code></pre><p><a href=\"https://stackblitz.com/edit/js-ryxftq?devToolsHeight=33&amp;file=index.js\"><strong>Try it on StackBlitz</strong></a></p><p>The function in the snippet above is an <a href=\"https://codesweetly.com/asynchronous-javascript\">asynchronous</a> self-invoking function expression.</p><p>So, now that we know what an Immediately Invoked Function Expression is, we can discuss how it works.</p><h3 id=\"how-does-an-iife-work\">How does an IIFE work?</h3><p>By default, the computer does not know what <a href=\"https://codesweetly.com/javascript-data-types\">data type</a> <a href=\"https://codesweetly.com/document-vs-data-vs-code#what-exactly-is-code\">code</a> is until it evaluates it.</p><p>For instance, suppose you ask the computer to process <code>4</code>. In such a case, the system won't know if <code>4</code> is a number type until it evaluates it.</p><p>Therefore, JavaScript will throw a <code>SyntaxError</code> if you use any number method directly on <code>4</code>.</p><p><strong>Here's an example:</strong></p><pre tabindex=\"0\"><code>// Convert 4 to a string value:\n4.toString();\n\n// The invocation above will return:\n\"Uncaught SyntaxError: Invalid or unexpected token\"\n</code></pre><p><a href=\"https://codesandbox.io/s/how-iife-works-example-1-kc8g5b\"><strong>Try it on CodeSandbox</strong></a></p><p>The computer threw a <code>SyntaxError</code> because it does not recognize <code>4</code> as a number data type.</p><p>However, suppose you assign <code>4</code> to a variable. In such a case, the computer will first convert it to a number data type before storing it into the variable.</p><p>Afterward, JavaScript will allow you to use any number methods on the number variable.</p><p><strong>Here's an example:</strong></p><pre tabindex=\"0\"><code>// Assign 4 to a variable:\nconst myNum = 4;\n\n// Convert myNum's content to a string value:\nmyNum.toString();\n\n// The invocation above will return:\n\"4\"\n</code></pre><p><a href=\"https://codesandbox.io/s/how-iife-works-example-2-jz4kwi\"><strong>Try it on CodeSandbox</strong></a></p><p>The snippet above did not return any error because JavaScript evaluated <code>myNum</code> as a number data type.</p><p>But you don't have to assign <code>4</code> to a variable before the computer can evaluate its data type appropriately.</p><p>You can alternatively put your value in <a href=\"https://www.computerhope.com/jargon/p/parenthe.htm\">parentheses</a> to force the computer to evaluate its data type before using it for other things.</p><p>For instance, consider this snippet:</p><pre tabindex=\"0\"><code>// Evaluate 4's data type and turn it into a string value:\n(4).toString();\n\n// The invocation above will return:\n\"4\"\n</code></pre><p><a href=\"https://codesandbox.io/s/how-iife-works-example-3-rz4j9b\"><strong>Try it on CodeSandbox</strong></a></p><p>The snippet above enclosed <code>4</code> in parentheses to make the computer evaluate its data type before using the <a href=\"https://codesweetly.com/javascript-number-tostring-method\"><code>toString()</code></a> method to convert it to a string value.</p><p>Using parentheses to make JavaScript evaluate your code's data type first is what happens in an Immediately Invoking Function Expression (IIFE).</p><p>For instance, consider this example:</p><pre tabindex=\"0\"><code>// Evaluate the function's data type and immediately invoke it:\n(function addNumbers() {\n  console.log(100 + 20);\n})();\n\n// The invocation above will return:\n120\n</code></pre><p><a href=\"https://stackblitz.com/edit/js-nkjjnz?devToolsHeight=33&amp;file=index.js\"><strong>Try it on StackBlitz</strong></a></p><p>The snippet above enclosed the <code>addNumbers</code> function in parentheses to make the computer evaluate its data type before invoking it immediately after the evaluation.</p><h2 id=\"overview\">Overview</h2><p>In this article, we discussed what a JavaScript function object is. We also used examples to see how it works.</p><p>Thanks for reading.</p><h3 id=\"and-here-s-a-useful-reactjs-resource-\"><strong>And here's a useful ReactJS resource:</strong></h3><p>I wrote a book about React!</p><ul><li>It's beginner friendly \u2714</li><li>It has live code snippets \u2714</li><li>It contains scalable projects \u2714</li><li>It has plenty of easy-to-grasp examples \u2714</li></ul><p>The <a href=\"https://www.amazon.com/dp/B09KYGDQYW\">React Explained Clearly</a> book is all you need to understand ReactJS.</p><!--kg-card-begin: markdown--><p><a href=\"https://www.amazon.com/dp/B09KYGDQYW\"><img alt=\"React Explained Clearly Book Now Available at Amazon\" height=\"500\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2022/01/Twitter-React_Explained_Clearly-CodeSweetly-Oluwatobi_Sofela.jpg\" width=\"1500\"/></a></p>\n<!--kg-card-end: markdown-->\n</section><p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p></div></article>", "textContent": "\n                            \nFunctions are one of the most widely-used features in programming. So, it helps to have a solid understanding of how they work.This tutorial discusses everything you need to know to use JavaScript functions like a pro.Table of ContentsWhat Is a Function?Why Functions?Syntax of a JavaScript FunctionWhat Is a function Keyword?What Is a Function Name?What Is a Parameter?What Is a Code Block?What Is a Function Body?Types of JavaScript FunctionsWhat Is a JavaScript Function Declaration?What Is a JavaScript Function Expression?What Is a JavaScript Arrow Function Expression?What Is a JavaScript Immediately Invoked Function Expression?OverviewSo, let's get started from the basics.What Is a Function?A JavaScript function is an executable piece of code developers use to bundle a block of zero or more statements.In other words, a function is an executable subprogram (mini-program).A JavaScript function is a subprogram because its body consists of a series of statements (instructions) to computers\u2014just like a regular program.The instructions in a function's body can be a variable declaration, return call, console.log() invocation, function definition, or any other JavaScript statements.Note:A program is a list of instructions written for computers to execute.Unlike other object types, you can invoke a function without storing it in a variable.A JavaScript function is similar to other programming languages' procedures or subroutines.Functions provide a way to bundle pieces of code together and reuse them anytime, anywhere, for an unlimited period. This helps you eliminate the burden of writing the same set of code repeatedly.For instance, alert() is a built-in window function that someone wrote once for all developers to use anytime, anywhere.Syntax of a JavaScript Functionfunction nameOfFunction(parameter1, parameter2, ..., parameterX) {\n  // function's body\n}A function is composed of five elements:A function keywordThe function's nameA list of zero or more parametersA code block ({...})The function's bodyLet's discuss each element.What Is a function Keyword?We use the function keyword to declare to browsers that a specific piece of code is a JavaScript function\u2014not a mathematical or other generic function.What Is a Function Name?A function's name allows you to create an identifier for your function, which you can use to reference it.What Is a Parameter?A parameter specifies the name you wish to call your function's argument.A parameter is an optional component of a function. In other words, you do not need to specify a parameter if your function does not accept any argument.For instance, JavaScript's pop() method is a function without any parameter because it does not accept arguments.On the other hand, forEach() has two parameters that accept two arguments.Example of a JavaScript parameter// Define a function with two parameters:\nfunction myName(firstName, lastName) {\n  console.log(`My full name is ${firstName} ${lastName}.`);\n}\n\n// Invoke myName function while passing two arguments to its parameters:\nmyName(\"Oluwatobi\", \"Sofela\");\n\n// The invocation above will return:\n\"My full name is Oluwatobi Sofela.\"Try it on StackBlitzThe myName() function in the snippet above has two parameters: firstName and lastName.Suppose you wish to pre-define values for your parameters that browsers can use if users do not invoke the function with the required arguments. In that case, you can create default parameters.What is a default parameter?Default parameters allow you to initialize your function's parameters with default values.For instance, suppose users invoke your function without providing a required argument. In such a case, browsers will set the parameter's value to undefined.However, default parameters allow you to define the values browsers should use instead of undefined.Examples of default parametersBelow are examples of how default parameters work in JavaScript.How to define a function with no default parameters// Define a function with two parameters:\nfunction myName(firstName, lastName) {\n  console.log(`My full name is ${firstName} ${lastName}.`);\n}\n\n// Invoke myName function while passing one argument to its parameters:\nmyName(\"Oluwatobi\");\n\n// The invocation above will return:\n\"My full name is Oluwatobi undefined.\"Try it on StackBlitzThe computer automatically set the lastName parameter to undefined because we did not provide a default value.How to define a function with an undefined argument and no default parameter// Define a function with two parameters:\nfunction myName(firstName, lastName) {\n  console.log(`My full name is ${firstName} ${lastName}.`);\n}\n\n// Invoke myName function while passing two arguments to its parameters:\nmyName(\"Oluwatobi\", undefined);\n\n// The invocation above will return:\n\"My full name is Oluwatobi undefined.\"Try it on StackBlitzThe computer set the lastName parameter to undefined because we provided undefined as myName()'s second argument.How to define a function with a default parameter// Define a function with two parameters:\nfunction myName(firstName, lastName = \"Sofela\") {\n  console.log(`My full name is ${firstName} ${lastName}.`);\n}\n\n// Invoke myName function while passing one argument to its parameters:\nmyName(\"Oluwatobi\");\n\n// The invocation above will return:\n\"My full name is Oluwatobi Sofela.\"Try it on StackBlitzInstead of undefined, JavaScript used \"Sofela\" as the lastName parameter's default argument.How to define a function with an undefined argument and a default parameter// Define a function with two parameters:\nfunction myName(firstName, lastName = \"Sofela\") {\n  console.log(`My full name is ${firstName} ${lastName}.`);\n}\n\n// Invoke myName function while passing two arguments to its parameters:\nmyName(\"Oluwatobi\", undefined);\n\n// The invocation above will return:\n\"My full name is Oluwatobi Sofela.\"Try it on StackBlitzInstead of undefined, JavaScript used \"Sofela\" as the lastName parameter's default argument.Let's now discuss the fourth element of a JavaScript function: a code block.What Is a Code Block?A block is a pair of braces ({...}) used to group multiple statements together.Here's an example:{\n  const hourNow = new Date().getHours();\n}The block in the snippet above encased one JavaScript statement.Here's another example:if (new Date().getHours() < 18) {\n  const hourNow = new Date().getHours();\n  const minutesNow = new Date().getMinutes();\n  console.log(`The time is ${hourNow}:${minutesNow}.`);\n}The if condition's code block grouped three JavaScript statements together.Now, consider this snippet:function getTime() {\n  const hourNow = new Date().getHours();\n  const minutesNow = new Date().getMinutes();\n  console.log(`The time is ${hourNow}:${minutesNow}.`);\n}The getTime() function's code block grouped three JavaScript statements. Note that the \"function body\" is the space inside the function's code block. Let's talk more about it now.What Is a Function Body?A function body is where you place a sequence of statements you want to execute.Syntax of a JavaScript function bodyfunction nameOfFunction() {\n  // function's body\n}\nFunction body examplesBelow are examples of how we use the function body.How to define a function with three statements in its bodyfunction getName() {\n  const firstName = \"Oluwatobi\";\n  const lastName = \"Sofela\";\n  console.log(firstName + \" \" + lastName);\n}\nTry it on StackBlitzIn the snippet above, the function's body contains three statements that the computer will execute whenever the function gets invoked.Note: console.log() is a method we use to log (write) messages to a web console.How to define a function with two statements in its bodyconst bestColors = [\"Coral\", \"Blue\", \"DeepPink\"];\n\nfunction updateMyBestColors(previousColors, newColor) {\n   const mybestColors = [...previousColors, newColor];\n   return mybestColors;\n}\n\nupdateMyBestColors(bestColors, \"GreenYellow\");Try it on StackBlitzIn the snippet above, the function's body contains two statements that the computer will execute whenever the function gets invoked.Note:The three dots we prepended to previousColors is called a spread operator. We used it to expand the array argument into individual elements.You can also prepend the newColor parameter with a rest operator if you wish to add two or more new colors.The return keyword ends its function's execution and returns the specified expression (or undefined if you provide no expression).So, now that we know the components of a JavaScript function, we can discuss its types.Types of JavaScript FunctionsThe four types of JavaScript functions are:Function declarationFunction expressionArrow function expressionImmediately invoking function expressionLet's discuss each type.What Is a JavaScript Function Declaration?A function declaration is a function created without assigning it to a variable.Note: We sometimes call function declaration a \"function definition\" or \"function statement.\"Here's an example:function addNumbers() {\n  return 100 + 20;\n}\nTry it on StackBlitzThe function above is a function declaration because we defined it without storing it in a variable.What Is a JavaScript Function Expression?A function expression is a function you create and assign to a variable.Here's an example:const myFuncExpr = function addNumbers() {\n  return 100 + 20;\n};\nTry it on StackBlitzThe function above is a named function expression that we assigned to the myFuncExpr variable.You can also write the snippet above as an anonymous function expression like so:const myFuncExpr = function() {\n  return 100 + 20;\n};\nTry it on StackBlitzThe function above is an anonymous function expression that we assigned to the myFuncExpr variable.Note:An anonymous function is a function with no name.A named function is a function with a name.A named function's main advantage is that the name makes it easier to trace an error's origin.In other words, suppose your function threw an error. In such a case, if the function is named, a debugger's stack trace will contain the function's name. Therefore, you will find it easier to identify the error's origin.What Is a JavaScript Arrow Function Expression?An arrow function expression is a shorthand way to write a function expression.Syntax of an arrow functionWe define an arrow function with the equality and the greater-than symbols (=>). Here is the syntax:const variableName = () => {\n  // function's body\n}\nExample of an arrow functionconst myFuncExpr = () => {\n  return 100 + 20;\n};\nTry it on StackBlitzYou can see that we defined the function without a function keyword and a function name.You have to omit the function keyword and function name while writing an arrow function expression. Otherwise, JavaScript will throw a SyntaxError.Important stuff to know about the JavaScript arrow function expressionHere are three essential facts to remember when using an arrow function expression.1. The parameters' parentheses are optionalSuppose your arrow function contains only a single parameter. In such a case, you can omit its parentheses.const myFuncExpr = a => {\n  return a + 20;\n};\nTry it on CodePen2. The curly brackets and return keyword are optionalSuppose your arrow function contains only a single statement. In that case, you can omit its curly brackets and the return keyword.const myFuncExpr = (x, y) => x + y;Try it on StackBlitzIn the snippet above, we implicitly returned the sum of parameters x and y by removing the curly brackets and the return keyword.Note: Whenever you choose to omit the curly brackets, also make sure that you remove the return keyword. Otherwise, the computer will throw a SyntaxError.3. Use parentheses to wrap any implicit object returnSuppose you wish to return an object implicitly. In such a case, wrap the object in a grouping operator (...).For instance, consider the code below:const myFuncExpr = () => {\n  carColor: \"White\",\n  shoeColor: \"Yellow\",\n};\nTry it on CodeSandboxThe snippet above will throw a SyntaxError because JavaScript assumed the curly brackets ({}) to be the function body's code block\u2014not an object literal.Therefore, whenever you wish to return an object literal implicitly\u2013without using the return keyword explicitly\u2013make sure to encase the object literal in a grouping operator.Here's an example:const myFuncExpr = () => ({\n  carColor: \"White\",\n  shoeColor: \"Yellow\",\n});\nTry it on CodeSandboxNote that you can use the grouping operator to return any single value. For instance, the snippet below grouped the sum of x and 56.const myFuncExpr = x => (x + 56);Try it on CodePenLet's now discuss the fourth type of JavaScript function.An immediately invoked function expression (IIFE) is a function expression that invokes itself automatically.Note: We sometimes call an IIFE a \"Self-Invoking Function Expression\" or \"Self-Executing Anonymous Function Expression.\"Syntax of an IIFE(function() {\n  /* ... */\n})();\nAn IIFE is composed of three main components:A grouping operator: The first pair of parentheses ()A function: Enclosed within the grouping operatorAn invocator: The last pair of parentheses ()ExamplesBelow are examples of an IIFE.How to define a named IIFE(function addNumbers() {\n  console.log(100 + 20);\n})();\nTry it on StackBlitzThe function in the snippet above is a named self-invoking function expression.How to define an anonymous IIFE(function() {\n  console.log(100 + 20);\n})();\nTry it on StackBlitzThe function in the snippet above is an anonymous self-invoking function expression.How to define an arrow function IIFE(() => console.log(100 + 20))();Try it on StackBlitzThe function in the snippet above is an arrow self-invoking function expression.How to define an async IIFE(async () => console.log(await 100 + 20))();Try it on StackBlitzThe function in the snippet above is an asynchronous self-invoking function expression.So, now that we know what an Immediately Invoked Function Expression is, we can discuss how it works.How does an IIFE work?By default, the computer does not know what data type code is until it evaluates it.For instance, suppose you ask the computer to process 4. In such a case, the system won't know if 4 is a number type until it evaluates it.Therefore, JavaScript will throw a SyntaxError if you use any number method directly on 4.Here's an example:// Convert 4 to a string value:\n4.toString();\n\n// The invocation above will return:\n\"Uncaught SyntaxError: Invalid or unexpected token\"\nTry it on CodeSandboxThe computer threw a SyntaxError because it does not recognize 4 as a number data type.However, suppose you assign 4 to a variable. In such a case, the computer will first convert it to a number data type before storing it into the variable.Afterward, JavaScript will allow you to use any number methods on the number variable.Here's an example:// Assign 4 to a variable:\nconst myNum = 4;\n\n// Convert myNum's content to a string value:\nmyNum.toString();\n\n// The invocation above will return:\n\"4\"\nTry it on CodeSandboxThe snippet above did not return any error because JavaScript evaluated myNum as a number data type.But you don't have to assign 4 to a variable before the computer can evaluate its data type appropriately.You can alternatively put your value in parentheses to force the computer to evaluate its data type before using it for other things.For instance, consider this snippet:// Evaluate 4's data type and turn it into a string value:\n(4).toString();\n\n// The invocation above will return:\n\"4\"\nTry it on CodeSandboxThe snippet above enclosed 4 in parentheses to make the computer evaluate its data type before using the toString() method to convert it to a string value.Using parentheses to make JavaScript evaluate your code's data type first is what happens in an Immediately Invoking Function Expression (IIFE).For instance, consider this example:// Evaluate the function's data type and immediately invoke it:\n(function addNumbers() {\n  console.log(100 + 20);\n})();\n\n// The invocation above will return:\n120\nTry it on StackBlitzThe snippet above enclosed the addNumbers function in parentheses to make the computer evaluate its data type before invoking it immediately after the evaluation.OverviewIn this article, we discussed what a JavaScript function object is. We also used examples to see how it works.Thanks for reading.And here's a useful ReactJS resource:I wrote a book about React!It's beginner friendly \u2714It has live code snippets \u2714It contains scalable projects \u2714It has plenty of easy-to-grasp examples \u2714The React Explained Clearly book is all you need to understand ReactJS.\n\n\n                        \n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    ", "length": 16703, "excerpt": "Functions are one of the most widely-used features in programming. So, it helps\nto have a solid understanding of how they work.\n\nThis tutorial discusses everything you need to know to use JavaScript functions\nlike a pro.\n\nTable of Contents\n 1.  What Is a Function?\n 2.  Why Functions?\n 3.  Syntax of a JavaScript Function\n 4.  What Is a function Keyword?\n 5.  What Is a Function Name?\n 6.  What Is a Parameter?\n 7.  What Is a Code Block?\n 8.  What Is a Function Body?\n 9.  Types of JavaScript Functio", "siteName": "freeCodeCamp.org", "publishedTime": "2022-10-05T16:06:29.000Z", "id": "d0c3968ad6b2286b936c3b6f8b7e7b8b5434e5c4", "url": "https://www.freecodecamp.org/news/javascript-function-iife-parameters-code-blocks-explained/", "domain": "freecodecamp.org", "date": "2023-12-27T18:05:15.630423", "resultUri": "http://localhost:3000/result/d0c3968ad6b2286b936c3b6f8b7e7b8b5434e5c4", "query": {"url": ["https://www.freecodecamp.org/news/javascript-function-iife-parameters-code-blocks-explained/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "JavaScript Functions Tutorial \u2013 IIFE, Function Parameters, and Code Blocks Explained", "description": "Functions are one of the most widely-used features in programming. So, it helps to have a solid understanding of how they work. This tutorial discusses everything you need to know to use JavaScript functions like a pro. Table of Contents  1.  What Is a Function?  2. ", "url": "https://www.freecodecamp.org/news/javascript-function-iife-parameters-code-blocks-explained/", "image": "https://www.freecodecamp.org/news/content/images/2022/10/programming-image-by-mohamed-hassan-from-pixabay-javascript-function-iffe-parameters-blocks-explained-codesweetly.png", "image:width": "1920", "image:height": "1372"}, "twitter": {"card": "summary_large_image", "title": "JavaScript Functions Tutorial \u2013 IIFE, Function Parameters, and Code Blocks Explained", "description": "Functions are one of the most widely-used features in programming. So, it helps to have a solid understanding of how they work. This tutorial discusses everything you need to know to use JavaScript functions like a pro. Table of Contents  1.  What Is a Function?  2. ", "url": "https://www.freecodecamp.org/news/javascript-function-iife-parameters-code-blocks-explained/", "image": "https://www.freecodecamp.org/news/content/images/2022/10/programming-image-by-mohamed-hassan-from-pixabay-javascript-function-iffe-parameters-blocks-explained-codesweetly.png", "label1": "Written by", "data1": "Oluwatobi Sofela", "label2": "Filed under", "data2": "JavaScript, Programming, Functional Programming, Web Development, Coding", "site": "@freecodecamp", "creator": "@oluwatobiss"}}}