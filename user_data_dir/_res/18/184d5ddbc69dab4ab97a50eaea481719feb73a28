{"title": "How to Write a Good Pull Request Description \u2013 And Why It's Important", "byline": "Sajal Sharma", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>How to Write a Good Pull Request Description \u2013 And Why It's Important</h1>\n<section>\n<section data-test-label=\"post-content\">\n<p>Writing a good Pull Request description is one of the most tedious jobs a developer has to do. And it can feel counter-productive at times. </p><p>But developing this skill goes a long way and really helps your stakeholders and your organization in the long run. </p><p>So it's always better to put in those 10 extra minutes today rather than having to break your head 6 months down the road trying to explain why you did what you did.</p><p>The following article explains the different parts of a Pull Request Description, and why you should include them.</p><h2 id=\"what-is-a-pr-description\">What is a PR description?</h2><p>A pull request description describes what constitutes the Pull Request and what changes you have made to the code.</p><p>It explains what you've done, including any code changes, configuration changes, migrations included, new APIs introduced, changes made to old APIs, any new workers/crons introduced in the system, copy changes, and so on. You get the gist.</p><p>You should include this section because it gives a glimpse to different stakeholders into what the PR is doing. </p><p>For a non-technical person, the description should explain what the impact will be on the system when these code changes are deployed to production. </p><p>It will also help the reviewer in understanding what they will be reviewing (kind of a prologue/trailer). </p><p>And finally it helps QA/SDET in understanding the scope of the PR as well. </p><p>So the \"what\" of the PR should give a glimpse into what constitutes the changes in the PR.</p><h2 id=\"the-why-section\">The \"Why\" section</h2><p>This section explains why the above changes explained were done.</p><p>Sometimes a developer feels that it's okay to write \"Business/Product requirement\" in the description. That's fine, but doing so defeats the purpose of this section. </p><p>If there is a better explanation as to why the changes were suggested, it's always good to attach a document reference link for that information. A good \"Why\" section should explain the reasoning behind any changes.</p><p>You should include this section because it gives an explanation of why you suggested your changes. It might not sound reasonable to include this section in the shorter term, but it plays a vital role as the product matures and spans years. </p><p>Developers/Product folks comes and goes, but the code remains. And when a new developer works on a piece of code and finds a discrepancy there, they can dig deeper and get to the pull request from 2 years ago which made those changes. </p><p>A good \"why\" gives them the explanation and assumptions made at that time.</p><p><strong>GoJek's CTO</strong> once explained that they don't challenge their legacy code and don't question why there seems to be some absurd looking feature in the product. </p><p>They just go back and check the documentation. </p><p>The assumptions and circumstances might have changed, and hence the code evolves. What seems to be quite absurd today might have been relevant 2 years ago. So it's better to explain today why you are making a particular change.</p><h2 id=\"testing-scope\">Testing Scope</h2><p>This section should comprise a list of scenarios you need to keep an eye on when testing this particular PR. (This will include flows, APIs, crons, workers, and so on.)</p><p>A good testing scope gives visibility to the QA/SDET team about the scenarios and flows that they need to test.</p><p>It can also help you while you're writing this section. I have come across issues myself, which prompted me to go back to the development phase and test them again. </p><p>A thoroughly written Testing Scope helps developers test the PR more efficiently, and gives a thorough picture of the PR to the person testing it.</p><h2 id=\"relevant-document-s-\">Relevant Document(s)</h2><p>This section includes any relevant document that needs to be attached with the PR description.</p><p>That might include product requirement documents, architectural diagrams, database system diagrams, design patterns used, class diagrams, external library documentation, and so on.</p><p>This section helps explain any assumptions and references you made while working on this feature request. And it plays a major role in the long run. </p><p>When someone comes back and sees why such a change was suggested, the relevant documents section will take them to the specific documentation so they can understand the issue clearly. Or it can take them to the technical implementation details of the scenario at the time of development.</p><h2 id=\"dependent-pr-s-if-any-\">Dependent PR(s) (if any)</h2><p>There are times when a particular feature spans across multiple GitHub repositories and it's important to release them in a certain order. </p><p>For example, you might need to deploy one repo prior to another, or you might need to deploy them side by side.</p><p>Whatever the case may be, this section explains any dependent code that this PR relies upon.</p><p>You should include this section because it really helps the deployer understand the order of deployment. If another repo's code needs to go first, then the deployer will contact the person responsible for deployment of the other repo to make sure that their deployment happens first. Overall it helps smooth out the deployment process.</p><h2 id=\"configuration-changes-if-any-\">Configuration Changes (if any)</h2><p>This section should include all the config changes that need to be added to the secrets before the PR is deployed into production.</p><p>There will be times when the deployer will merge 10-20 PRs at a time and it becomes hard for them to keep track of all the config changes. </p><p>Because of this, it's always better to include them in the config changes section. (Don't put the secret keys there, just include the key names and how to get the secrets.)</p><p>These are very important in a pull request description and convey a lot of meaning when the team grows. </p><p>Following are some tags that I use, but you can add different tags according to your needs.</p><ul><li><strong>Dev Completed - </strong>When the development is completed from the dev's side.</li><li><strong>Self Reviewed - </strong>When the developer(s) of the Pull Request has reviewed the Pull Request from their side, and can now give it to their peers for a Peer Review.</li><li><strong>Self Tested - </strong>When the developer(s) of the Pull Request has tested the changes themself according to the description they have given in the Testing Scope section.</li><li><strong>Config Changes - </strong>This tag indicates that there are some configuration changes that need to be done before deploying the PR to production. (This includes secret keys that needs to be put into the system.)</li><li><strong>Contains Migration(s) - </strong>This indicates that the PR contains a Migration. If it is a long running migration, it should be specified beforehand.</li><li><strong>Release Ready - </strong>This indicates to the Deployer that the PR is ready for deployment and will be picked up by the deployer in the next deployment cycle.</li><li><strong>Peer Reviewed - </strong>When the Peer has reviewed the PR and the suggested changes are made by the developer(s). This is put up by the Peer who has reviewed the PR.</li><li><strong>QA Tested - </strong>This indicates that the QA/SDET has tested the PR and it is good to be deployed to production.</li></ul><h2 id=\"conclusion\">Conclusion</h2><p>In this article, we went through the different parts of a PR description. Most of the PRs you make will not need all these sections and tags, but you should try to include as many of them as you can. </p><p>Writing this description might not seem productive at the time when you create a PR, but it can definitely prove helpful in the future.</p><p>A final note: The above are my views and might differ from your perspective. But I've developed this strategy over the years, and it contains the input and experience of a lot of people I have worked with in the Industry. So you can feel good knowing that it's been battle tested to a high degree.</p>\n</section>\n<hr/>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nWriting a good Pull Request description is one of the most tedious jobs a developer has to do. And it can feel counter-productive at times. But developing this skill goes a long way and really helps your stakeholders and your organization in the long run. So it's always better to put in those 10 extra minutes today rather than having to break your head 6 months down the road trying to explain why you did what you did.The following article explains the different parts of a Pull Request Description, and why you should include them.What is a PR description?A pull request description describes what constitutes the Pull Request and what changes you have made to the code.It explains what you've done, including any code changes, configuration changes, migrations included, new APIs introduced, changes made to old APIs, any new workers/crons introduced in the system, copy changes, and so on. You get the gist.You should include this section because it gives a glimpse to different stakeholders into what the PR is doing. For a non-technical person, the description should explain what the impact will be on the system when these code changes are deployed to production. It will also help the reviewer in understanding what they will be reviewing (kind of a prologue/trailer). And finally it helps QA/SDET in understanding the scope of the PR as well. So the \"what\" of the PR should give a glimpse into what constitutes the changes in the PR.The \"Why\" sectionThis section explains why the above changes explained were done.Sometimes a developer feels that it's okay to write \"Business/Product requirement\" in the description. That's fine, but doing so defeats the purpose of this section. If there is a better explanation as to why the changes were suggested, it's always good to attach a document reference link for that information. A good \"Why\" section should explain the reasoning behind any changes.You should include this section because it gives an explanation of why you suggested your changes. It might not sound reasonable to include this section in the shorter term, but it plays a vital role as the product matures and spans years. Developers/Product folks comes and goes, but the code remains. And when a new developer works on a piece of code and finds a discrepancy there, they can dig deeper and get to the pull request from 2 years ago which made those changes. A good \"why\" gives them the explanation and assumptions made at that time.GoJek's CTO once explained that they don't challenge their legacy code and don't question why there seems to be some absurd looking feature in the product. They just go back and check the documentation. The assumptions and circumstances might have changed, and hence the code evolves. What seems to be quite absurd today might have been relevant 2 years ago. So it's better to explain today why you are making a particular change.Testing ScopeThis section should comprise a list of scenarios you need to keep an eye on when testing this particular PR. (This will include flows, APIs, crons, workers, and so on.)A good testing scope gives visibility to the QA/SDET team about the scenarios and flows that they need to test.It can also help you while you're writing this section. I have come across issues myself, which prompted me to go back to the development phase and test them again. A thoroughly written Testing Scope helps developers test the PR more efficiently, and gives a thorough picture of the PR to the person testing it.Relevant Document(s)This section includes any relevant document that needs to be attached with the PR description.That might include product requirement documents, architectural diagrams, database system diagrams, design patterns used, class diagrams, external library documentation, and so on.This section helps explain any assumptions and references you made while working on this feature request. And it plays a major role in the long run. When someone comes back and sees why such a change was suggested, the relevant documents section will take them to the specific documentation so they can understand the issue clearly. Or it can take them to the technical implementation details of the scenario at the time of development.Dependent PR(s) (if any)There are times when a particular feature spans across multiple GitHub repositories and it's important to release them in a certain order. For example, you might need to deploy one repo prior to another, or you might need to deploy them side by side.Whatever the case may be, this section explains any dependent code that this PR relies upon.You should include this section because it really helps the deployer understand the order of deployment. If another repo's code needs to go first, then the deployer will contact the person responsible for deployment of the other repo to make sure that their deployment happens first. Overall it helps smooth out the deployment process.Configuration Changes (if any)This section should include all the config changes that need to be added to the secrets before the PR is deployed into production.There will be times when the deployer will merge 10-20 PRs at a time and it becomes hard for them to keep track of all the config changes. Because of this, it's always better to include them in the config changes section. (Don't put the secret keys there, just include the key names and how to get the secrets.)These are very important in a pull request description and convey a lot of meaning when the team grows. Following are some tags that I use, but you can add different tags according to your needs.Dev Completed - When the development is completed from the dev's side.Self Reviewed - When the developer(s) of the Pull Request has reviewed the Pull Request from their side, and can now give it to their peers for a Peer Review.Self Tested - When the developer(s) of the Pull Request has tested the changes themself according to the description they have given in the Testing Scope section.Config Changes - This tag indicates that there are some configuration changes that need to be done before deploying the PR to production. (This includes secret keys that needs to be put into the system.)Contains Migration(s) - This indicates that the PR contains a Migration. If it is a long running migration, it should be specified beforehand.Release Ready - This indicates to the Deployer that the PR is ready for deployment and will be picked up by the deployer in the next deployment cycle.Peer Reviewed - When the Peer has reviewed the PR and the suggested changes are made by the developer(s). This is put up by the Peer who has reviewed the PR.QA Tested - This indicates that the QA/SDET has tested the PR and it is good to be deployed to production.ConclusionIn this article, we went through the different parts of a PR description. Most of the PRs you make will not need all these sections and tags, but you should try to include as many of them as you can. Writing this description might not seem productive at the time when you create a PR, but it can definitely prove helpful in the future.A final note: The above are my views and might differ from your perspective. But I've developed this strategy over the years, and it contains the input and experience of a lot of people I have worked with in the Industry. So you can feel good knowing that it's been battle tested to a high degree.\n\n                        \n                    \n                    \n                        \n                        \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 8064, "excerpt": "Writing a good Pull Request description is one of the most tedious jobs a\ndeveloper has to do. And it can feel counter-productive at times. \n\nBut developing this skill goes a long way and really helps your stakeholders and\nyour organization in the long run. \n\nSo it's always better to put in those 10 extra minutes today rather than having\nto break your head 6 months down the road trying to explain why you did what you\ndid.\n\nThe following article explains the different parts of a Pull Request\nDesc", "siteName": "freeCodeCamp.org", "publishedTime": "2020-08-31T22:01:49.000Z", "id": "184d5ddbc69dab4ab97a50eaea481719feb73a28", "url": "https://www.freecodecamp.org/news/how-to-write-a-pull-request-description/", "domain": "freecodecamp.org", "date": "2023-12-27T18:06:36.505225", "resultUri": "http://localhost:3000/result/184d5ddbc69dab4ab97a50eaea481719feb73a28", "query": {"url": ["https://www.freecodecamp.org/news/how-to-write-a-pull-request-description/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "How to Write a Good Pull Request Description \u2013 And Why It's Important", "description": "Writing a good Pull Request description is one of the most tedious jobs a developer has to do. And it can feel counter-productive at times.  But developing this skill goes a long way and really helps your stakeholders and your organization in the long run.  So it's always", "url": "https://www.freecodecamp.org/news/how-to-write-a-pull-request-description/", "image": "https://www.freecodecamp.org/news/content/images/2020/08/wp3082255.jpg", "image:width": "2000", "image:height": "1125"}, "twitter": {"card": "summary_large_image", "title": "How to Write a Good Pull Request Description \u2013 And Why It's Important", "description": "Writing a good Pull Request description is one of the most tedious jobs a developer has to do. And it can feel counter-productive at times.  But developing this skill goes a long way and really helps your stakeholders and your organization in the long run.  So it's always", "url": "https://www.freecodecamp.org/news/how-to-write-a-pull-request-description/", "image": "https://www.freecodecamp.org/news/content/images/2020/08/wp3082255.jpg", "label1": "Written by", "data1": "Sajal Sharma", "label2": "Filed under", "data2": "Version Control, Productivity, Programming, Code Review, Testing", "site": "@freecodecamp", "creator": "@cosmos_sajal"}}}