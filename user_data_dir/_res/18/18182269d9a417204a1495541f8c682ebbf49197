{"title": "An intro to Redux and how state is updated in a Redux application", "byline": "freeCodeCamp.org", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>An intro to Redux and how state is updated in a Redux application</h1>\n<section>\n<section data-test-label=\"post-content\">\n<p>by Syeda Aimen Batool</p><p>I started learning Redux a few days back and it was an overwhelming concept for me at the start. After polishing my skills in ReactJS by making a <a href=\"https://github.com/aimenbatool/my-reads\" rel=\"noopener\">personal book reading application</a>, I headed towards Redux to learn more about it.</p><p>Today, I\u2019m going to share a few core Redux concepts without using any view library (React or Angular). This is a kind of a personal note for future reference but it can help others as well.</p><p>Let\u2019s dig in together!</p><h3 id=\"what-is-redux\">What is Redux?</h3><p>Redux is an open-source library to improve the predictability of the state in a JavaScript application. It is an independent library. It is commonly used with other libraries like React and Angular for better state management of the application. Redux was created by Dan Abramov in 2015 to handle complex state management in an efficient way.</p><p>When an application grows larger it becomes harder to manage the state and debug for issues. It becomes a challenge to track when and where the state is changed and where the changes need to be reflected. Sometimes a user input triggers some API call which updates some model. That model in turn updates some state or maybe the other model and so on.</p><p>In such a situation it becomes grinding to track the state changes. It happens mainly because there is no defined rule to update a state and state can be changed from anywhere inside the application.</p><p>Redux tries to solve this issue by providing a few simple rules to update the state to keep it predictable. Those rules are the building blocks of Redux.</p><h3 id=\"redux-store-\">Redux Store:</h3><p>As we discussed earlier, the main purpose of Redux is to provide predictable state management in our applications. Redux achieves this by having a single source of truth, that is a <strong>single state tree</strong>. The state tree is a simple JavaScript object which holds the whole state of our application. There are only a few ways to interact with the state. And this makes it easy for us to debug or track our state.</p><p>We now have only one main state which occupies the whole state of the application located at a single location. Any changes made into the state tree are reflected in the whole application because this is the only source of data for the app. And, this is the first fundamental principle of Redux.</p><h4 id=\"rule-1-single-source-of-truth\">Rule #1 \u2014 <a href=\"https://redux.js.org/introduction/three-principles#single-source-of-truth\" rel=\"noopener\">Single source of truth</a></h4><blockquote>The state of your whole application is stored in an object tree within a single store. \u2014 Official docs</blockquote><p>The ways you can interact with a state tree are:</p><ul><li>Getting the state</li><li>Listening to the changes in the state</li><li>Updating the state</li></ul><p>A <strong>store</strong> is a single unit that holds the <strong>state tree</strong> and the <strong>methods</strong> to interact with the state tree. There is no other way to interact with a state inside the store except through these given methods.</p><figure><img alt=\"cDBhHN7x5f-p6JRrZ-1ekpbDx7s0aW4j3jUr\" height=\"450\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/cDBhHN7x5f-p6JRrZ-1ekpbDx7s0aW4j3jUr\" width=\"800\"/></figure><p>Let\u2019s talk about the methods a store gives us to interact with the state.</p><ul><li>getState() \u2014 Returns the current state of the application.</li><li>dispatch(action) \u2014 The only way to update a state is by dispatching an action and <code>dispatch(action)</code> serves the purpose. We will talk more in detail in a bit.</li><li>subscribe(listener) \u2014 The purpose of this method is to listen for the state changes. Every time a state is changed, it will be called and will return the updated state.</li><li>replaceReducer(nextReducer) \u2014 Replaces the reducer currently used by the store to calculate the state.</li></ul><p>Now when we have a store which contains a state tree and a few ways to interact with the state, how can we update application state?</p><h3 id=\"updating-state-in-the-application-\">Updating state in the application:</h3><p><em>The only way to update a state is to dispatch an action. This is the 2nd rule.</em></p><h4 id=\"rule-2-state-is-read-only\">Rule #2 \u2014 <a href=\"https://redux.js.org/introduction/three-principles#state-is-read-only\" rel=\"noopener\">State is read-only</a></h4><p>An action is a plain JavaScript object to keep track of the specific event taking place in the application. What makes it special is a \u2018type\u2019 property which is a necessary part of it.</p><pre><code>{  type: \"ADD_BOOK_TO_THE_CART\"}</code></pre><p>The main purpose of this property is to let Redux know about the event taking place. This type should be descriptive about the action. Along with the \u2018type\u2019 property, it can have other information about the event taking place.</p><p>Actions can have as much information as you want. It is a good practice to provide less and necessary information \u2014 preferably an id or any unique identifier wherever possible.</p><p>Here we have an action to add a book to the cart.</p><p>Once we define our action we pass it to the dispatcher. <strong>store.dispatch()</strong> is a function provided by the library which accepts an action to perform an action against the state. Redux restricts updating the state to this method only.</p><p>This strict way of updating the state ensures that the state can not be changed directly either by view or any network callback. The only way to update a state is by defining the action and then dispatching it. Remember that actions are plain JavaScript objects. Actions can be logged, serialized, and replayed for debugging purposes.</p><p>We now have a store, a state, and an action in our app to perform some tasks against the state. Now we need a way to use these actions to actually do the update. This can be done by using a pure function and this is rule #3.</p><figure><img alt=\"h4w-r3zcxAOODzC-u5TKDip1joPotFfNCzVx\" height=\"400\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/h4w-r3zcxAOODzC-u5TKDip1joPotFfNCzVx\" width=\"600\"/></figure><h4 id=\"rule-3-changes-are-made-with-pure-functions\">Rule#3 \u2014 <a href=\"https://redux.js.org/introduction/three-principles#state-is-read-only\" rel=\"noopener\">Changes are made with pure functions</a></h4><p>Magic happens here. We need a simple pure function, which, as a parameter, takes the current state of the application and an action to perform on the state, and then returns the updated state. These functions are called reducers.</p><p>These are called reducers because they take the collection of values, reduce it to an updated state and then return it. Since reducers are pure functions they do not mutate the original state. Instead, they return the updated state in a new object. Our application can have one or more than one reducer. Each reducer can have a relevant state to perform specific tasks.</p><p>Since reducers are pure functions, they should have the following attributes:</p><ul><li>Given the same input, it should return the same output every time \u2014 No mutation is allowed.</li><li>No side effects \u2014 No API call data change from an external source.</li></ul><h4 id=\"the-process-\">The process.</h4><p>If we connect the dots, Redux is a library which has a store that contains a state tree and a few methods to interact with the state. The only way to update a state inside a store is to dispatch an action and define a reducer function to perform tasks based on the given actions. Once dispatched, the action goes inside the reducer functions which performs the tasks and return the updated state to the store. This is what Redux is all about.</p><figure><img alt=\"MNhhFTlpazu2H0YgQ7D7BhtZ7SYfdI4xA5Gk\" height=\"400\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/MNhhFTlpazu2H0YgQ7D7BhtZ7SYfdI4xA5Gk\" width=\"600\"/><figcaption>State update flow in Redux</figcaption></figure><h3 id=\"what-have-we-learned-so-far\">What have we learned so far?</h3><p>Let\u2019s summarize what we have learned so far to connect the dots.</p><ul><li><a href=\"https://redux.js.org/introduction/getting-started#getting-started-with-redux\" rel=\"noopener\">Redux</a> \u2014 An opensource predictable state container</li><li>State Tree \u2014 A plain JavaScript object which contains whole application state</li><li>Three ways to interact with a state (the only ways):<br/><a href=\"https://redux.js.org/basics/store#store\" rel=\"noopener\"><strong>Store</strong></a> \u2014 A single unit which contains state tree &amp; methods to interact with the state tree<br/><strong>Actions</strong> \u2014 Plan Javascript objects to describe the action taking place<br/><strong>Reducers</strong> \u2014 Pure Javascript functions to take current state and an action to return a new state</li></ul><p>Since Redux is an independent library which can be used with React, Angular or any other library, I avoided making a sample application with any of these view libraries. Instead, I focused on the core Redux concepts only.</p><p>Redux can be overwhelming at first and if you are a newbie or junior developer it can give you a tough time. But consistency and a positive attitude is the key to success. If you are struggling to survive as a junior developer and looking for some motivation, you can read how <a href=\"https://medium.freecodecamp.org/how-im-working-to-overcome-my-struggles-as-a-junior-developer-a6ab18ac29b2\" rel=\"noopener\">I struggled to overcome the challenges I faced as a junior dev.</a></p><p>Say Hi <a href=\"https://twitter.com/AimenBatool\" rel=\"noopener\">@aimenbatool.</a></p>\n</section>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nby Syeda Aimen BatoolI started learning Redux a few days back and it was an overwhelming concept for me at the start. After polishing my skills in ReactJS by making a personal book reading application, I headed towards Redux to learn more about it.Today, I\u2019m going to share a few core Redux concepts without using any view library (React or Angular). This is a kind of a personal note for future reference but it can help others as well.Let\u2019s dig in together!What is Redux?Redux is an open-source library to improve the predictability of the state in a JavaScript application. It is an independent library. It is commonly used with other libraries like React and Angular for better state management of the application. Redux was created by Dan Abramov in 2015 to handle complex state management in an efficient way.When an application grows larger it becomes harder to manage the state and debug for issues. It becomes a challenge to track when and where the state is changed and where the changes need to be reflected. Sometimes a user input triggers some API call which updates some model. That model in turn updates some state or maybe the other model and so on.In such a situation it becomes grinding to track the state changes. It happens mainly because there is no defined rule to update a state and state can be changed from anywhere inside the application.Redux tries to solve this issue by providing a few simple rules to update the state to keep it predictable. Those rules are the building blocks of Redux.Redux Store:As we discussed earlier, the main purpose of Redux is to provide predictable state management in our applications. Redux achieves this by having a single source of truth, that is a single state tree. The state tree is a simple JavaScript object which holds the whole state of our application. There are only a few ways to interact with the state. And this makes it easy for us to debug or track our state.We now have only one main state which occupies the whole state of the application located at a single location. Any changes made into the state tree are reflected in the whole application because this is the only source of data for the app. And, this is the first fundamental principle of Redux.Rule #1 \u2014 Single source of truthThe state of your whole application is stored in an object tree within a single store. \u2014 Official docsThe ways you can interact with a state tree are:Getting the stateListening to the changes in the stateUpdating the stateA store is a single unit that holds the state tree and the methods to interact with the state tree. There is no other way to interact with a state inside the store except through these given methods.Let\u2019s talk about the methods a store gives us to interact with the state.getState() \u2014 Returns the current state of the application.dispatch(action) \u2014 The only way to update a state is by dispatching an action and dispatch(action) serves the purpose. We will talk more in detail in a bit.subscribe(listener) \u2014 The purpose of this method is to listen for the state changes. Every time a state is changed, it will be called and will return the updated state.replaceReducer(nextReducer) \u2014 Replaces the reducer currently used by the store to calculate the state.Now when we have a store which contains a state tree and a few ways to interact with the state, how can we update application state?Updating state in the application:The only way to update a state is to dispatch an action. This is the 2nd rule.Rule #2 \u2014 State is read-onlyAn action is a plain JavaScript object to keep track of the specific event taking place in the application. What makes it special is a \u2018type\u2019 property which is a necessary part of it.{  type: \"ADD_BOOK_TO_THE_CART\"}The main purpose of this property is to let Redux know about the event taking place. This type should be descriptive about the action. Along with the \u2018type\u2019 property, it can have other information about the event taking place.Actions can have as much information as you want. It is a good practice to provide less and necessary information \u2014 preferably an id or any unique identifier wherever possible.Here we have an action to add a book to the cart.Once we define our action we pass it to the dispatcher. store.dispatch() is a function provided by the library which accepts an action to perform an action against the state. Redux restricts updating the state to this method only.This strict way of updating the state ensures that the state can not be changed directly either by view or any network callback. The only way to update a state is by defining the action and then dispatching it. Remember that actions are plain JavaScript objects. Actions can be logged, serialized, and replayed for debugging purposes.We now have a store, a state, and an action in our app to perform some tasks against the state. Now we need a way to use these actions to actually do the update. This can be done by using a pure function and this is rule #3.Rule#3 \u2014 Changes are made with pure functionsMagic happens here. We need a simple pure function, which, as a parameter, takes the current state of the application and an action to perform on the state, and then returns the updated state. These functions are called reducers.These are called reducers because they take the collection of values, reduce it to an updated state and then return it. Since reducers are pure functions they do not mutate the original state. Instead, they return the updated state in a new object. Our application can have one or more than one reducer. Each reducer can have a relevant state to perform specific tasks.Since reducers are pure functions, they should have the following attributes:Given the same input, it should return the same output every time \u2014 No mutation is allowed.No side effects \u2014 No API call data change from an external source.The process.If we connect the dots, Redux is a library which has a store that contains a state tree and a few methods to interact with the state. The only way to update a state inside a store is to dispatch an action and define a reducer function to perform tasks based on the given actions. Once dispatched, the action goes inside the reducer functions which performs the tasks and return the updated state to the store. This is what Redux is all about.State update flow in ReduxWhat have we learned so far?Let\u2019s summarize what we have learned so far to connect the dots.Redux \u2014 An opensource predictable state containerState Tree \u2014 A plain JavaScript object which contains whole application stateThree ways to interact with a state (the only ways):Store \u2014 A single unit which contains state tree & methods to interact with the state treeActions \u2014 Plan Javascript objects to describe the action taking placeReducers \u2014 Pure Javascript functions to take current state and an action to return a new stateSince Redux is an independent library which can be used with React, Angular or any other library, I avoided making a sample application with any of these view libraries. Instead, I focused on the core Redux concepts only.Redux can be overwhelming at first and if you are a newbie or junior developer it can give you a tough time. But consistency and a positive attitude is the key to success. If you are struggling to survive as a junior developer and looking for some motivation, you can read how I struggled to overcome the challenges I faced as a junior dev.Say Hi @aimenbatool.\n\n                        \n                    \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 8042, "excerpt": "by Syeda Aimen Batool\n\nAn intro to Redux and how state is updated in a Redux application\nPhoto by Fabian Grohs\n[https://unsplash.com/photos/XMFZqrGyV-Q?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText] \non Unsplash\n[https://unsplash.com/search/photos/programming?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText]\nI started learning Redux a few days back and it was an overwhelming concept for\nme at the start. After polishing my skills in ReactJS by making a perso", "siteName": "freeCodeCamp.org", "publishedTime": "2019-05-07T16:24:19.000Z", "id": "18182269d9a417204a1495541f8c682ebbf49197", "url": "https://www.freecodecamp.org/news/an-intro-to-redux-and-how-state-is-updated-in-a-redux-application-839c8334d1b1/", "domain": "freecodecamp.org", "date": "2023-12-27T18:10:27.476066", "resultUri": "http://localhost:3000/result/18182269d9a417204a1495541f8c682ebbf49197", "query": {"url": ["https://www.freecodecamp.org/news/an-intro-to-redux-and-how-state-is-updated-in-a-redux-application-839c8334d1b1/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "An intro to Redux and how state is updated in a Redux application", "description": "by Syeda Aimen Batool An intro to Redux and how state is updated in a Redux application Photo by Fabian Grohs [https://unsplash.com/photos/XMFZqrGyV-Q?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText]  on Unsplash [https://unsplash.com/search/photos/programming?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText] I started learning Redux a few days back and it was an overwhelming concept for me at the start. After polishing my skills in", "url": "https://www.freecodecamp.org/news/an-intro-to-redux-and-how-state-is-updated-in-a-redux-application-839c8334d1b1/", "image": "https://cdn-media-1.freecodecamp.org/images/1*VLQNO9Apn9qfm6BPYXG8TA.png", "image:width": "800", "image:height": "450"}, "twitter": {"card": "summary_large_image", "title": "An intro to Redux and how state is updated in a Redux application", "description": "by Syeda Aimen Batool An intro to Redux and how state is updated in a Redux application Photo by Fabian Grohs [https://unsplash.com/photos/XMFZqrGyV-Q?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText]  on Unsplash [https://unsplash.com/search/photos/programming?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText] I started learning Redux a few days back and it was an overwhelming concept for me at the start. After polishing my skills in", "url": "https://www.freecodecamp.org/news/an-intro-to-redux-and-how-state-is-updated-in-a-redux-application-839c8334d1b1/", "image": "https://cdn-media-1.freecodecamp.org/images/1*VLQNO9Apn9qfm6BPYXG8TA.png", "label1": "Written by", "data1": "freeCodeCamp.org", "label2": "Filed under", "data2": "Redux, React, Tech, Programming, Coding", "site": "@freecodecamp"}}}