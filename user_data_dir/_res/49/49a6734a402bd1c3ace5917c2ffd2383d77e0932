{"title": "Why I think Flutter is the future of mobile app development", "byline": "Eric Grandt", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>Why I think Flutter is the future of mobile app development</h1>\n<section>\n<section data-test-label=\"post-content\">\n<p>I dabbled a bit in Android and iOS development quite a few years back using Java and Objective-C. After spending about a month working with both of them, I decided to move on. I just couldn\u2019t get into it.</p><p>But recently, I learned about Flutter and decided to give mobile app development another shot. I instantly fell in love with it as it made developing multi-platform apps a ton of fun. Since learning about it, I\u2019ve created an app and a library using it. Flutter seems to be a very promising step forward and I\u2019d like to explain a few different reasons why I believe this.</p><h3 id=\"powered-by-dart\">Powered by Dart</h3><p>Flutter uses the Google-developed Dart language. If you\u2019ve used Java before, you\u2019ll be fairly familiar with the syntax of Dart as they are quite similar. Besides the syntax, Dart is a fairly different language.</p><p>I\u2019m not going to be talking about Dart in depth as it\u2019s a bit out of scope, but I\u2019d like to discuss one of the most helpful features in my opinion. This feature being support for asynchronous operations. Not only does Dart support it, but it makes it exceptionally easy.</p><p>This is something you\u2019ll most likely be using throughout all of your Flutter applications if you\u2019re doing IO or other time-consuming operations such as querying a database. Without asynchronous operations, any time-consuming operations will cause the program to freeze up until they complete. To prevent this, Dart provides us with the <code>async</code> and <code>await</code> keywords which allow our program to continue execution while waiting for these longer operations to complete.</p><p>Let's take a look at a couple of examples: one without asynchronous operations and one with.</p><!--kg-card-begin: html--><!--kg-card-end: html--><p>And the output:</p><!--kg-card-begin: html--><!--kg-card-end: html--><p>This isn\u2019t ideal. No one wants to use an app that freezes up when it executes long operations. So let\u2019s modify this a bit and make use of the <code>async</code> and <code>await</code> keywords.</p><!--kg-card-begin: html--><!--kg-card-end: html--><p>And the output once again:</p><!--kg-card-begin: html--><!--kg-card-end: html--><p>Thanks to asynchronous operations, we\u2019re able to execute code that takes a while to complete without blocking the execution of the rest of our code.</p><h3 id=\"write-once-run-on-android-and-ios\">Write Once, Run on Android and iOS</h3><p>Developing mobile apps can take a lot of time considering you need to use a different codebase for Android and iOS. That is unless you use an SDK like Flutter, where you have a single codebase that allows you to build your app for both operating systems. Not only that, but you can run them completely natively. This means things such as scrolling and navigation, to name a few, act just like they should for the OS being used.</p><p>To keep with the theme of simplicity, as long as you have a device or simulator running, Flutter makes building and running your app for testing as simple as clicking a button.</p><h3 id=\"ui-development\">UI Development</h3><p>UI development is one of those things that I almost never look forward to. I\u2019m more of a backend developer, so when it comes to working on something that is heavily dependent on it, I want something simple. This is where Flutter shines in my eyes.</p><p>UI is created by combining different widgets together and modifying them to fit the look of your app. You have near full control over how these widgets display, so you\u2019ll always end up with exactly what you\u2019re looking for. For laying out the UI, you have widgets such as <code>Row</code>, <code>Column</code>, and <code>Container</code>. For content, you have widgets like <code>Text</code> and <code>RaisedButton</code>. This is only a few of the widgets Flutter offers, there are a lot more. Using these widgets, we can build a very simple UI:</p><!--kg-card-begin: html--><!--kg-card-end: html--><figure><img alt=\"9hlvITfh5FnClzD6qa-xCsnSz-Zngd38EFV8\" height=\"790\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/9hlvITfh5FnClzD6qa-xCsnSz-Zngd38EFV8\" width=\"365\"/></figure><p>Flutter has more tricks up its sleeve that makes theming your app a breeze. You could go through and manually change the fonts, colors, and looks for everything one by one, but that takes way too long. Instead, Flutter provides us with something called <code>ThemeData</code> that allows us to set values for colors, fonts, input fields, and much more. This feature is great for keeping the look of your app consistent.</p><!--kg-card-begin: html--><!--kg-card-end: html--><p>With this <code>ThemeData</code>, we set the apps colors, font family, and some text styles. Everything besides the text styles will automatically be applied app-wide. Text styles have to be set manually for each text widget, but it's still simple:</p><!--kg-card-begin: html--><!--kg-card-end: html--><figure><img alt=\"55hxft9gL1AxB7U4xIWcebrMTOpS-TY1Y1Xn\" height=\"790\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/55hxft9gL1AxB7U4xIWcebrMTOpS-TY1Y1Xn\" width=\"365\"/><figcaption>Flutter app using the above ThemeData</figcaption></figure><p>To make things even more efficient, Flutter can hot reload apps so you don\u2019t need to restart it every time you make a change to the UI. You can now make a change, save it, then see the change within a second or so.</p><h3 id=\"libraries\">Libraries</h3><p>Flutter provides a lot of great features out of the box, but there are times when you need a bit more than it offers. This is no problem at all considering the extensive number of <a href=\"https://pub.dev/\" rel=\"noopener\">libraries available for Dart and Flutter</a>. Interested in putting ads in your app? There\u2019s a library for that. Want new widgets? There are libraries for that.</p><p>If you\u2019re more of a do-it-yourselfer, make your own library and share it with the rest of the community in no time at all. Adding libraries to your project is simple and can be done by adding a single line to your <code>pubspec.yaml</code> file. For example, if you wanted to add the <code>sqflite</code> library:</p><!--kg-card-begin: html--><!--kg-card-end: html--><p>After adding it to the file, run <code>flutter packages get</code> and you're good to go. Libraries make developing Flutter apps a breeze and save a lot of time during development.</p><h3 id=\"backend-development\">Backend Development</h3><p>Most apps nowadays depend on some sort of data, and that data needs to be stored somewhere so it can be displayed and worked with later on. So keeping this in mind when looking to create apps with a new SDK, such as Flutter, is important.</p><p>Once again, Flutter apps are made using Dart, and Dart is great when it comes to backend development. I\u2019ve talked a lot about simplicity in this article, and backend development with Dart and Flutter is no exception to this. It\u2019s incredibly simple to create data-driven apps, for beginners and experts alike, but this simplicity by no means equates to a lack of quality.</p><p>To tie this in with the previous section, libraries are available so you can work with the database of your choosing. Using the <code>sqflite</code> library, we can be up and running with an SQLite database fairly quickly. And thanks to singletons, we can access the database and query it from practically anywhere without needing to recreate an object every single time.</p><!--kg-card-begin: html--><!--kg-card-end: html--><p>After retrieving data from a database, you can convert that to an object using a model. Or if you want to store an object in the database, you can convert it to JSON using the same model.</p><!--kg-card-begin: html--><!--kg-card-end: html--><p>This data isn\u2019t all that useful without a way to display it to the user. This is where Flutter comes in with widgets such as the <code>FutureBuilder</code> or <code>StreamBuilder</code>. If you're interested in a more in-depth look at creating data-driven apps using Flutter, SQLite, and other technologies, I encourage you to check out the article I wrote on that:</p><p><strong><a href=\"https://www.freecodecamp.org/news/using-streams-blocs-and-sqlite-in-flutter-2e59e1f7cdce/\">Using Streams, BLoCs, and SQLite in Flutter</a></strong><br/><a href=\"https://medium.com/@erigitic/using-streams-blocs-and-sqlite-in-flutter-2e59e1f7cdce\" rel=\"noopener\"><em>Streams, BLoCs, and SQLite make for a great combination when it comes to working with data in your Flutter\u2026</em></a></p><h3 id=\"final-thoughts\">Final Thoughts</h3><p>With Flutter, the possibilities are practically endless, so even super extensive apps can be created with ease. If you develop mobile apps and have yet to give Flutter a try, I highly recommend you do as I\u2019m sure you\u2019ll fall in love with it as well. After using Flutter for quite a few months, I think it\u2019s safe to say that it\u2019s the future of mobile development. If not, it\u2019s definitely a step in the right direction.</p>\n</section>\n<hr/>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nI dabbled a bit in Android and iOS development quite a few years back using Java and Objective-C. After spending about a month working with both of them, I decided to move on. I just couldn\u2019t get into it.But recently, I learned about Flutter and decided to give mobile app development another shot. I instantly fell in love with it as it made developing multi-platform apps a ton of fun. Since learning about it, I\u2019ve created an app and a library using it. Flutter seems to be a very promising step forward and I\u2019d like to explain a few different reasons why I believe this.Powered by DartFlutter uses the Google-developed Dart language. If you\u2019ve used Java before, you\u2019ll be fairly familiar with the syntax of Dart as they are quite similar. Besides the syntax, Dart is a fairly different language.I\u2019m not going to be talking about Dart in depth as it\u2019s a bit out of scope, but I\u2019d like to discuss one of the most helpful features in my opinion. This feature being support for asynchronous operations. Not only does Dart support it, but it makes it exceptionally easy.This is something you\u2019ll most likely be using throughout all of your Flutter applications if you\u2019re doing IO or other time-consuming operations such as querying a database. Without asynchronous operations, any time-consuming operations will cause the program to freeze up until they complete. To prevent this, Dart provides us with the async and await keywords which allow our program to continue execution while waiting for these longer operations to complete.Let's take a look at a couple of examples: one without asynchronous operations and one with.And the output:This isn\u2019t ideal. No one wants to use an app that freezes up when it executes long operations. So let\u2019s modify this a bit and make use of the async and await keywords.And the output once again:Thanks to asynchronous operations, we\u2019re able to execute code that takes a while to complete without blocking the execution of the rest of our code.Write Once, Run on Android and iOSDeveloping mobile apps can take a lot of time considering you need to use a different codebase for Android and iOS. That is unless you use an SDK like Flutter, where you have a single codebase that allows you to build your app for both operating systems. Not only that, but you can run them completely natively. This means things such as scrolling and navigation, to name a few, act just like they should for the OS being used.To keep with the theme of simplicity, as long as you have a device or simulator running, Flutter makes building and running your app for testing as simple as clicking a button.UI DevelopmentUI development is one of those things that I almost never look forward to. I\u2019m more of a backend developer, so when it comes to working on something that is heavily dependent on it, I want something simple. This is where Flutter shines in my eyes.UI is created by combining different widgets together and modifying them to fit the look of your app. You have near full control over how these widgets display, so you\u2019ll always end up with exactly what you\u2019re looking for. For laying out the UI, you have widgets such as Row, Column, and Container. For content, you have widgets like Text and RaisedButton. This is only a few of the widgets Flutter offers, there are a lot more. Using these widgets, we can build a very simple UI:Flutter has more tricks up its sleeve that makes theming your app a breeze. You could go through and manually change the fonts, colors, and looks for everything one by one, but that takes way too long. Instead, Flutter provides us with something called ThemeData that allows us to set values for colors, fonts, input fields, and much more. This feature is great for keeping the look of your app consistent.With this ThemeData, we set the apps colors, font family, and some text styles. Everything besides the text styles will automatically be applied app-wide. Text styles have to be set manually for each text widget, but it's still simple:Flutter app using the above ThemeDataTo make things even more efficient, Flutter can hot reload apps so you don\u2019t need to restart it every time you make a change to the UI. You can now make a change, save it, then see the change within a second or so.LibrariesFlutter provides a lot of great features out of the box, but there are times when you need a bit more than it offers. This is no problem at all considering the extensive number of libraries available for Dart and Flutter. Interested in putting ads in your app? There\u2019s a library for that. Want new widgets? There are libraries for that.If you\u2019re more of a do-it-yourselfer, make your own library and share it with the rest of the community in no time at all. Adding libraries to your project is simple and can be done by adding a single line to your pubspec.yaml file. For example, if you wanted to add the sqflite library:After adding it to the file, run flutter packages get and you're good to go. Libraries make developing Flutter apps a breeze and save a lot of time during development.Backend DevelopmentMost apps nowadays depend on some sort of data, and that data needs to be stored somewhere so it can be displayed and worked with later on. So keeping this in mind when looking to create apps with a new SDK, such as Flutter, is important.Once again, Flutter apps are made using Dart, and Dart is great when it comes to backend development. I\u2019ve talked a lot about simplicity in this article, and backend development with Dart and Flutter is no exception to this. It\u2019s incredibly simple to create data-driven apps, for beginners and experts alike, but this simplicity by no means equates to a lack of quality.To tie this in with the previous section, libraries are available so you can work with the database of your choosing. Using the sqflite library, we can be up and running with an SQLite database fairly quickly. And thanks to singletons, we can access the database and query it from practically anywhere without needing to recreate an object every single time.After retrieving data from a database, you can convert that to an object using a model. Or if you want to store an object in the database, you can convert it to JSON using the same model.This data isn\u2019t all that useful without a way to display it to the user. This is where Flutter comes in with widgets such as the FutureBuilder or StreamBuilder. If you're interested in a more in-depth look at creating data-driven apps using Flutter, SQLite, and other technologies, I encourage you to check out the article I wrote on that:Using Streams, BLoCs, and SQLite in FlutterStreams, BLoCs, and SQLite make for a great combination when it comes to working with data in your Flutter\u2026Final ThoughtsWith Flutter, the possibilities are practically endless, so even super extensive apps can be created with ease. If you develop mobile apps and have yet to give Flutter a try, I highly recommend you do as I\u2019m sure you\u2019ll fall in love with it as well. After using Flutter for quite a few months, I think it\u2019s safe to say that it\u2019s the future of mobile development. If not, it\u2019s definitely a step in the right direction.\n\n                        \n                    \n                    \n                        \n                        \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 7827, "excerpt": "I dabbled a bit in Android and iOS development quite a few years back using Java\nand Objective-C. After spending about a month working with both of them, I\ndecided to move on. I just couldn\u2019t get into it.\n\nBut recently, I learned about Flutter and decided to give mobile app development\nanother shot. I instantly fell in love with it as it made developing\nmulti-platform apps a ton of fun. Since learning about it, I\u2019ve created an app\nand a library using it. Flutter seems to be a very promising step", "siteName": "freeCodeCamp.org", "publishedTime": "2019-05-20T17:37:07.000Z", "id": "49a6734a402bd1c3ace5917c2ffd2383d77e0932", "url": "https://www.freecodecamp.org/news/why-i-think-flutter-is-the-future-of-mobile-app-development-768332b73c0d/", "domain": "freecodecamp.org", "date": "2023-12-27T18:09:34.279669", "resultUri": "http://localhost:3000/result/49a6734a402bd1c3ace5917c2ffd2383d77e0932", "query": {"url": ["https://www.freecodecamp.org/news/why-i-think-flutter-is-the-future-of-mobile-app-development-768332b73c0d/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "Why I think Flutter is the future of mobile app development", "description": "I dabbled a bit in Android and iOS development quite a few years back using Java and Objective-C. After spending about a month working with both of them, I decided to move on. I just couldn\u2019t get into it. But recently, I learned about Flutter and decided to give mobile", "url": "https://www.freecodecamp.org/news/why-i-think-flutter-is-the-future-of-mobile-app-development-768332b73c0d/", "image": "https://cdn-media-1.freecodecamp.org/images/1*YS1KCJ51iHT9vaQAoNOtIA.png", "image:width": "800", "image:height": "450"}, "twitter": {"card": "summary_large_image", "title": "Why I think Flutter is the future of mobile app development", "description": "I dabbled a bit in Android and iOS development quite a few years back using Java and Objective-C. After spending about a month working with both of them, I decided to move on. I just couldn\u2019t get into it. But recently, I learned about Flutter and decided to give mobile", "url": "https://www.freecodecamp.org/news/why-i-think-flutter-is-the-future-of-mobile-app-development-768332b73c0d/", "image": "https://cdn-media-1.freecodecamp.org/images/1*YS1KCJ51iHT9vaQAoNOtIA.png", "label1": "Written by", "data1": "Eric Grandt", "label2": "Filed under", "data2": "Mobile App Development, Flutter, Dart, Programming, Technology", "site": "@freecodecamp", "creator": "@ericgrandt"}}}