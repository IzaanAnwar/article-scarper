{"title": "An explanation of Progressive Web Apps for the non-PWA crowd", "byline": "Tomer Ben Rachel", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>An explanation of Progressive Web Apps for the non-PWA crowd</h1>\n<section>\n<section data-test-label=\"post-content\">\n<p>The world of applications was classified into two categories not too long ago. You were either creating an application for Android devices or for iOS. Enter PWAs, or elongated, <strong>P</strong>rogressive <strong>W</strong>eb <strong>A</strong>pplications. You have probably been hearing all about them for the past couple of years, but besides a nice acronym, you have no idea what a PWA is. As their popularity increases, it might be a good idea to get to know what all the fuss is about.</p><p>In this article, I\u2019ll take you on a tour of what a PWA is, what components it is built from, and show you how you can make one on your own.</p><h4 id=\"the-basics\">The Basics</h4><p>A progressive web application is a website turned into an application. What this means is, that instead of having to code either in Java or Objective-C (or more recent mobile coding languages), you can write the code for the application, like you would for a website. You have your html files, your stylesheets, and your scripts.</p><p>Why would you build a PWA instead of a native application? For starters, imagine that once you release a PWA, you can change it constantly without having to republish your application. Since all the code is hosted on a server and not part of the APK/IPA, any change you make happens in real time.</p><p>If you have ever used an application that relies on a network connection, you are familiar with the frustration of not being able to do anything. With PWAs, you have the ability to offer an offline experience to your users in case of network issues.</p><p>And to add the cherry on top, there is an ability to prompt the user to add your PWA to their home screen. Something that native applications do not possess.</p><h4 id=\"components\">Components</h4><p>There is a standard regarding a PWA, and you must adhere to it if you want to publish one. Each PWA is built from the following components:</p><ul><li>A web app manifest</li><li>A service worker</li><li>Install experience</li><li>HTTPS</li><li>Creating an APK</li><li>Lighthouse audit</li></ul><h4 id=\"the-manifest\">The Manifest</h4><p>This is purely a configuration file (<strong><em>.JSON</em></strong>), enabling you to change various settings of your PWA and how it will appear to the user. Below is an example of one:</p><p>You must set either a name/short name key. When setting both, short name will be used on the home screen and the launcher. The name value will be used in the Add to Home Screen experience (or, application install prompt).</p><p>Display can have four different values:</p><ul><li><strong>fullscreen </strong>- this allows your application to take up the whole screen when it is opened</li><li><strong>standalone </strong>- your application looks like a native application, hiding browser elements</li><li><strong>minimal-ui</strong> - provides some browsing controls (only supported for Chrome mobile)</li><li><strong>browser </strong>- like the name says your application\u2019s look will be identical to a browsing experience</li></ul><p>You can also set the <strong>orientation </strong>of your application and the <strong>scope </strong>of the pages considered to be within your application.</p><p>Don\u2019t forget to add the manifest to your main html file by putting the following meta tag inside of your head tag:</p><figure><img alt=\"-sgj8knyKimbaSIeLGhmo5oflTKZzHunce4V\" height=\"534\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/-sgj8knyKimbaSIeLGhmo5oflTKZzHunce4V\" width=\"800\"/><figcaption>Photo by <a href=\"https://unsplash.com/@solimonster?utm_source=medium&amp;utm_medium=referral\" rel=\"noopener\" target=\"_blank\" title=\"\">sol</a> on <a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\" rel=\"noopener\" target=\"_blank\" title=\"\">Unsplash</a></figcaption></figure><h4 id=\"the-service-worker\">The Service Worker</h4><p>A service worker is a component running in the background of your website on the browser. It has a wide set of functionalities including, push notifications, caching assets and providing them for an offline experience and the ability to defer actions until the user has a stable connection to the internet. A service worker can be a whole Medium article on its own, so I won\u2019t delve into the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API\" rel=\"noopener\">inner details</a> of how it works. But, I will supply a vanilla example of one for you to use in your PWA.</p><p>It is customary to save the code related to the service worker in a file called <strong><em>sw.js</em></strong>.</p><blockquote>\u270b The location of the service worker is important since it can only access files that are in the same directory or subdirectory as itself.</blockquote><p>A service worker has a lifecycle that can be summed up to the following phases:</p><ul><li>Registration</li><li>Installation/Activation</li><li>Responding to various events</li></ul><h4 id=\"install-experience\">Install Experience</h4><p>One of the unique features of a PWA is its install experience. What this translates to is prompting the user to install your application. To allow us to present this ability to the user, we will need to listen in on an event called <strong><em>beforeinstallprompt</em></strong>.<strong><em> </em></strong>Below is a code sample demonstrating the flow from presenting the user with the option to add the application to activating logic based on their choice.</p><figure><img alt=\"LG4XqHneeagI9dGNOJ28F2oYInSR6vjQRTvy\" height=\"533\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/LG4XqHneeagI9dGNOJ28F2oYInSR6vjQRTvy\" width=\"800\"/><figcaption>Photo by <a href=\"https://unsplash.com/@jamessutton_photography?utm_source=medium&amp;utm_medium=referral\" rel=\"noopener\" target=\"_blank\" title=\"\">James Sutton</a> on <a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\" rel=\"noopener\" target=\"_blank\" title=\"\">Unsplash</a></figcaption></figure><h4 id=\"https\">HTTPS</h4><p>Not too long ago, websites could still use the all too common <a href=\"https://www.w3schools.com/whatis/whatis_http.asp\" rel=\"noopener\">http</a> protocol. Due to recent changes in security and in <a href=\"https://searchengineland.com/effective-july-2018-googles-chrome-browser-will-mark-non-https-sites-as-not-secure-291623\" rel=\"noopener\">Chrome</a>, all websites that do not operate under the https protocol will be marked as not secured. Even if your website does not handle user data or sensitive communication, it is still good practice to switch over to https.</p><p>And like I mentioned earlier, if you want to be able to release a PWA, it has to use the https protocol. If you don\u2019t want to get into the hassle of acquiring a domain, finding a proper host for it and then enabling SSL, you can go for the easy option of Github. If you have an account, you can open a repository and set up a <a href=\"https://pages.github.com/\" rel=\"noopener\">GitHub Page</a>. This process is fairly simple and straightforward and the bonus is getting the HTTPS built in as part of Github.</p><h4 id=\"creating-an-apk\">Creating An APK</h4><p>In order for our PWA to be available inside the Google Play Store, we need to create an APK. You can use the popular tool, <a href=\"https://pwa2apk.com/?ref=steemhunt\" rel=\"noopener\">PWA2APK</a>, which will do the hard work for you. But if you prefer to learn how to do it yourself, keep reading.</p><p>Google has introduced a new way to integrate your PWA into the Play store using what is called a <strong><em>T</em></strong>rusted <strong><em>W</em></strong>eb <strong><em>A</em></strong>ctivity, or TWA. With just a few simple steps you will learn how to create a TWA, which you can then upload to the Play store.</p><ol><li>Open Android Studio and create an empty activity</li><li>Go to the project\u2019s build.gradle file and add the jitpack repository</li></ol><p>3. Go to the <strong><em>module level</em></strong> build.gradle file and add the following lines to enable Java8 compatibility</p><p>4. Add the TWA support library as a dependency</p><p>5. Add the activity XML inside your AndroidManifest file between the application tags</p><p>6. We need to create an association from the application to the website using a digital assets link. Paste the following inside your <strong><em>strings.xml</em></strong> file</p><p>7. Add the next meta tag as a child to your application tag inside the AndroidManifest.xml</p><p>8. <a href=\"https://developer.android.com/studio/publish/app-signing#generate-key\" rel=\"noopener\">Create an upload key and keystore</a></p><p>9. Use the following command to extract the SHA-256</p><p>10. Go to the <a href=\"https://developers.google.com/digital-asset-links/tools/generator\" rel=\"noopener\">assets link generator</a>, supply the SHA-256 fingerprint, the package of your application and the web site's domain</p><p>11. Place the result in a file named <strong><em>assetlinks.json</em></strong> under the location<strong><em> /.well-known</em></strong> in your website\u2019s directory. Chrome will look for this destination specifically.</p><p>12.<a href=\"https://medium.freecodecamp.org/how-to-publish-an-application-in-the-play-store-8ddcc6dc3587\" rel=\"noopener\"> Generate a signed APK and upload to the Play store</a></p><figure><img alt=\"mp3eDdZW9F9StMhoajqbVozrN3FPeyDgQw8s\" height=\"599\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/mp3eDdZW9F9StMhoajqbVozrN3FPeyDgQw8s\" width=\"800\"/><figcaption>Photo by <a href=\"https://unsplash.com/@aaronburden?utm_source=medium&amp;utm_medium=referral\" rel=\"noopener\" target=\"_blank\" title=\"\">Aaron Burden</a> on <a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\" rel=\"noopener\" target=\"_blank\" title=\"\">Unsplash</a></figcaption></figure><h4 id=\"lighthouse\">Lighthouse</h4><p>By now, I am sure you have already lost track of what is required from your PWA so it will be valid for publishing. There are so many things to take into consideration, that it is easy to lose track of what the requirements are.</p><p>Luckily for us, Google has created <a href=\"https://developers.google.com/web/tools/lighthouse/#devtools\" rel=\"noopener\">Lighthouse</a>. It can be found in the Chrome Developer Tools (from Chrome version 60). It can be accessed easily by right-clicking inside the browser and selecting inspect. When the new pane opens, you will see an <strong><em>Audits</em></strong> tab at the far right corner.</p><figure><img alt=\"iUXU9aPKpNWuJnHTDj6gfjsMpDewFzo4Zvy4\" height=\"155\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/iUXU9aPKpNWuJnHTDj6gfjsMpDewFzo4Zvy4\" width=\"800\"/><figcaption>The Audits Tab</figcaption></figure><p>Leaving the settings in this tab as they are, you can now run an audit by clicking on the \u201cRun audits\u201d button. This will take a minute or two, but by the end of it, you will receive an informative, graphical presentation of where your PWA ranks in respect to three properties:</p><ul><li>Performance</li><li>Accessibility</li><li>Best Practices</li></ul><p>Each property has a breakdown of where your application passed the requirements and where it didn\u2019t. This lets you see where you need to make adjustments and where you are meeting the standard. If you are interested, you can find a breakdown of the checklist <a href=\"https://developers.google.com/web/progressive-web-apps/checklist#baseline\" rel=\"noopener\">here</a>.</p><h4 id=\"pwa-it-up\">PWA it up</h4><p>We are at our journey\u2019s end and hopefully you are feeling better prepared to navigate the world of PWAs. This article was inspired by the process I went through when creating one recently. You can check it out below:</p><p><a href=\"https://play.google.com/store/apps/details?id=com.tomerpacific.androidmenugenerator\" rel=\"noopener\"><strong>Android Menu XML Generator - Apps on Google Play</strong></a><br/><a href=\"https://play.google.com/store/apps/details?id=com.tomerpacific.androidmenugenerator\" rel=\"noopener\"><em>Generate any type of menu you need for your Android application. Choose from an Options, Context or Popup menu and\u2026</em>play.google.com</a></p>\n</section>\n<hr/>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nThe world of applications was classified into two categories not too long ago. You were either creating an application for Android devices or for iOS. Enter PWAs, or elongated, Progressive Web Applications. You have probably been hearing all about them for the past couple of years, but besides a nice acronym, you have no idea what a PWA is. As their popularity increases, it might be a good idea to get to know what all the fuss is about.In this article, I\u2019ll take you on a tour of what a PWA is, what components it is built from, and show you how you can make one on your own.The BasicsA progressive web application is a website turned into an application. What this means is, that instead of having to code either in Java or Objective-C (or more recent mobile coding languages), you can write the code for the application, like you would for a website. You have your html files, your stylesheets, and your scripts.Why would you build a PWA instead of a native application? For starters, imagine that once you release a PWA, you can change it constantly without having to republish your application. Since all the code is hosted on a server and not part of the APK/IPA, any change you make happens in real time.If you have ever used an application that relies on a network connection, you are familiar with the frustration of not being able to do anything. With PWAs, you have the ability to offer an offline experience to your users in case of network issues.And to add the cherry on top, there is an ability to prompt the user to add your PWA to their home screen. Something that native applications do not possess.ComponentsThere is a standard regarding a PWA, and you must adhere to it if you want to publish one. Each PWA is built from the following components:A web app manifestA service workerInstall experienceHTTPSCreating an APKLighthouse auditThe ManifestThis is purely a configuration file (.JSON), enabling you to change various settings of your PWA and how it will appear to the user. Below is an example of one:You must set either a name/short name key. When setting both, short name will be used on the home screen and the launcher. The name value will be used in the Add to Home Screen experience (or, application install prompt).Display can have four different values:fullscreen - this allows your application to take up the whole screen when it is openedstandalone - your application looks like a native application, hiding browser elementsminimal-ui - provides some browsing controls (only supported for Chrome mobile)browser - like the name says your application\u2019s look will be identical to a browsing experienceYou can also set the orientation of your application and the scope of the pages considered to be within your application.Don\u2019t forget to add the manifest to your main html file by putting the following meta tag inside of your head tag:Photo by sol on UnsplashThe Service WorkerA service worker is a component running in the background of your website on the browser. It has a wide set of functionalities including, push notifications, caching assets and providing them for an offline experience and the ability to defer actions until the user has a stable connection to the internet. A service worker can be a whole Medium article on its own, so I won\u2019t delve into the inner details of how it works. But, I will supply a vanilla example of one for you to use in your PWA.It is customary to save the code related to the service worker in a file called sw.js.\u270b The location of the service worker is important since it can only access files that are in the same directory or subdirectory as itself.A service worker has a lifecycle that can be summed up to the following phases:RegistrationInstallation/ActivationResponding to various eventsInstall ExperienceOne of the unique features of a PWA is its install experience. What this translates to is prompting the user to install your application. To allow us to present this ability to the user, we will need to listen in on an event called beforeinstallprompt. Below is a code sample demonstrating the flow from presenting the user with the option to add the application to activating logic based on their choice.Photo by James Sutton on UnsplashHTTPSNot too long ago, websites could still use the all too common http protocol. Due to recent changes in security and in Chrome, all websites that do not operate under the https protocol will be marked as not secured. Even if your website does not handle user data or sensitive communication, it is still good practice to switch over to https.And like I mentioned earlier, if you want to be able to release a PWA, it has to use the https protocol. If you don\u2019t want to get into the hassle of acquiring a domain, finding a proper host for it and then enabling SSL, you can go for the easy option of Github. If you have an account, you can open a repository and set up a GitHub Page. This process is fairly simple and straightforward and the bonus is getting the HTTPS built in as part of Github.Creating An APKIn order for our PWA to be available inside the Google Play Store, we need to create an APK. You can use the popular tool, PWA2APK, which will do the hard work for you. But if you prefer to learn how to do it yourself, keep reading.Google has introduced a new way to integrate your PWA into the Play store using what is called a Trusted Web Activity, or TWA. With just a few simple steps you will learn how to create a TWA, which you can then upload to the Play store.Open Android Studio and create an empty activityGo to the project\u2019s build.gradle file and add the jitpack repository3. Go to the module level build.gradle file and add the following lines to enable Java8 compatibility4. Add the TWA support library as a dependency5. Add the activity XML inside your AndroidManifest file between the application tags6. We need to create an association from the application to the website using a digital assets link. Paste the following inside your strings.xml file7. Add the next meta tag as a child to your application tag inside the AndroidManifest.xml8. Create an upload key and keystore9. Use the following command to extract the SHA-25610. Go to the assets link generator, supply the SHA-256 fingerprint, the package of your application and the web site's domain11. Place the result in a file named assetlinks.json under the location /.well-known in your website\u2019s directory. Chrome will look for this destination specifically.12. Generate a signed APK and upload to the Play storePhoto by Aaron Burden on UnsplashLighthouseBy now, I am sure you have already lost track of what is required from your PWA so it will be valid for publishing. There are so many things to take into consideration, that it is easy to lose track of what the requirements are.Luckily for us, Google has created Lighthouse. It can be found in the Chrome Developer Tools (from Chrome version 60). It can be accessed easily by right-clicking inside the browser and selecting inspect. When the new pane opens, you will see an Audits tab at the far right corner.The Audits TabLeaving the settings in this tab as they are, you can now run an audit by clicking on the \u201cRun audits\u201d button. This will take a minute or two, but by the end of it, you will receive an informative, graphical presentation of where your PWA ranks in respect to three properties:PerformanceAccessibilityBest PracticesEach property has a breakdown of where your application passed the requirements and where it didn\u2019t. This lets you see where you need to make adjustments and where you are meeting the standard. If you are interested, you can find a breakdown of the checklist here.PWA it upWe are at our journey\u2019s end and hopefully you are feeling better prepared to navigate the world of PWAs. This article was inspired by the process I went through when creating one recently. You can check it out below:Android Menu XML Generator - Apps on Google PlayGenerate any type of menu you need for your Android application. Choose from an Options, Context or Popup menu and\u2026play.google.com\n\n                        \n                    \n                    \n                        \n                        \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 8762, "excerpt": "The world of applications was classified into two categories not too long ago.\nYou were either creating an application for Android devices or for iOS. Enter\nPWAs, or elongated, Progressive Web Applications. You have probably been hearing\nall about them for the past couple of years, but besides a nice acronym, you\nhave no idea what a PWA is. As their popularity increases, it might be a good\nidea to get to know what all the fuss is about.\n\nIn this article, I\u2019ll take you on a tour of what a PWA is,", "siteName": "freeCodeCamp.org", "publishedTime": "2019-05-13T16:02:17.000Z", "id": "8abe03aae98cc8a3b0ed55f8dfde4b91776f4de8", "url": "https://www.freecodecamp.org/news/an-explanation-of-progressive-web-apps-for-the-non-pwa-crowd-8a400e275ea1/", "domain": "freecodecamp.org", "date": "2023-12-27T18:10:01.770846", "resultUri": "http://localhost:3000/result/8abe03aae98cc8a3b0ed55f8dfde4b91776f4de8", "query": {"url": ["https://www.freecodecamp.org/news/an-explanation-of-progressive-web-apps-for-the-non-pwa-crowd-8a400e275ea1/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "An explanation of Progressive Web Apps for the non-PWA crowd", "description": "The world of applications was classified into two categories not too long ago. You were either creating an application for Android devices or for iOS. Enter PWAs, or elongated, Progressive Web Applications. You have probably been hearing all about them for the past couple of years, but besides a nice", "url": "https://www.freecodecamp.org/news/an-explanation-of-progressive-web-apps-for-the-non-pwa-crowd-8a400e275ea1/", "image": "https://cdn-media-1.freecodecamp.org/images/0*bFT4XZ6spjmElUly", "image:width": "800", "image:height": "533"}, "twitter": {"card": "summary_large_image", "title": "An explanation of Progressive Web Apps for the non-PWA crowd", "description": "The world of applications was classified into two categories not too long ago. You were either creating an application for Android devices or for iOS. Enter PWAs, or elongated, Progressive Web Applications. You have probably been hearing all about them for the past couple of years, but besides a nice", "url": "https://www.freecodecamp.org/news/an-explanation-of-progressive-web-apps-for-the-non-pwa-crowd-8a400e275ea1/", "image": "https://cdn-media-1.freecodecamp.org/images/0*bFT4XZ6spjmElUly", "label1": "Written by", "data1": "Tomer Ben Rachel", "label2": "Filed under", "data2": "Web Development, Pwa, Tech, Coding, Programming", "site": "@freecodecamp"}}}