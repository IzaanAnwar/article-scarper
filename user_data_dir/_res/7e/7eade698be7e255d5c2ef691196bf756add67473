{"title": "How to understand Git: an intro to basic commands, tips, and tricks", "byline": "Goran Aviani", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>How to understand Git: an intro to basic commands, tips, and tricks</h1>\n<section>\n<section data-test-label=\"post-content\">\n<p>Recently I\u2019ve became a mentor to a colleague of mine. And my mentee has asked me about Git on several occasions. This is for you colleague! P.S. I should have written this article when we started but I hope it will help now!</p><p><em>And remember: The best way to learn anything is to do it by yourself! And as my mentor always says to me: Udaraj!</em></p><h2 id=\"basics\">Basics</h2><figure><img alt=\"0-2GkM1pvDmnI2ksUM\" height=\"438\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2019/08/0-2GkM1pvDmnI2ksUM.png\" width=\"1050\"/></figure><h3 id=\"so-why-is-git-so-important\">So why is Git so important?</h3><p>Let's first start by quoting the first line on Git\u2019s Wikipedia page: </p><blockquote>\u201c<strong><em>Git</em></strong><em> (</em><a href=\"https://en.wikipedia.org/wiki/Help:IPA/English\" rel=\"noopener\"><em>/\u0261\u026at/</em></a><em>) is a</em><a href=\"https://en.wikipedia.org/wiki/Version-control\" rel=\"noopener\"><em> version-control</em></a><em> system for tracking changes in</em><a href=\"https://en.wikipedia.org/wiki/Computer_file\" rel=\"noopener\"><em> computer files</em></a><em> and coordinating work on those files among multiple people.</em>\u201d</blockquote><p>So that means that the most basic and important function of Git is to allow teams to add (and merge) code at the same time to the same project. By adding this ability to projects it makes teams more efficient and gives them the ability to work on bigger projects and more complex problems.</p><p>There are also many other things Git does really well: it allows us to revert changes, create new branches for adding new features, resolve merge conflict, and so on.</p><h3 id=\"how-git-works\">How Git works</h3><p>Git stores projects in <strong>repositories</strong>. <strong>Commits </strong>are made to the project and they tell Git that you are satisfied with the new or changed code you created. </p><p>New code/changes are committed on branches. Most of the work is committed on other branches and then merged with the master branch. All this is stored in the same directory as the project but in a sub-folder called <strong>.git</strong>. </p><p>To share the code with your colleagues you <strong>push </strong>the changes to the repository. To get the new code from your colleagues, you <strong>pull </strong>changes from the repository.</p><figure><img alt=\"0-SBz94SjR2tbvFY6n\" height=\"479\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2019/08/0-SBz94SjR2tbvFY6n.jpg\" width=\"638\"/></figure><h3 id=\"then-what-are-github-gitlab-and-bitbucket\">Then what are GitHub, GitLab and Bitbucket?</h3><p>Well, I am glad you asked! These kinds of applications are called repository management services. They play a crucial role in modern software development. </p><p>Even though Git and GitHub are the go-to version control solutions for most companies, GitHub has some strong competitors such as GitLab and Bitbucket. However, if you know how to use GitHub, you won\u2019t have any problem working with GitLab or Bitbucket.</p><p><em>So, to be clear: Git is the tool, and GitHub is the service for projects that use Git.</em></p><h4 id=\"where-can-i-discover-interesting-projects-and-connect-to-other-developers\">Where can I discover interesting projects and connect to other developers?</h4><p>GitHub, GitLab and Bitbucket have public repository search options and the ability to easily follow other users.</p><p>Can you now see why is it important to know Git and Github (GitLab/Bitbucket)? The only thing left before talking about commands is to tell you few simple rules to always follow when using Git:</p><ul><li><strong>Rule 1:</strong> Create a Git repository for every new project</li><li><strong>Rule 2:</strong> Create a new branch for every new feature</li></ul><p>To get started with Git you must have it on your computer. If you don\u2019t already have it you can go <a href=\"https://git-scm.com/\">here</a> and follow the instructions.</p><h3 id=\"initialize-a-new-git-repository-git-init\">Initialize a new Git repository: Git init</h3><p>Everything you code is tracked in the repository. To initialize a git repository, use this command while inside the project folder. This will create a .git folder.</p><pre><code>git init</code></pre><h3 id=\"git-add\">Git add</h3><p>This command adds one or all changed files to the staging area.</p><p>To just add a specific file to staging:</p><pre><code>git add filename.py</code></pre><p>To stage new, modified, or deleted files:</p><pre><code>git add -A</code></pre><p>To stage new and modified files:</p><pre><code>git add .</code></pre><p>To stage modified and deleted files:</p><pre><code>git add -u</code></pre><h3 id=\"git-commit\">Git commit</h3><p>This command records the file in the version history. The -m means that a commit message follows. This message is a custom one and you should use it to let your colleagues or your future self know what was added in that commit.</p><pre><code>git commit -m \"your text\"</code></pre><h3 id=\"git-status\">Git status</h3><p>This command will list files in green or red colors. Green files have been added to the stage but not committed yet. Files marked as red are the ones not yet added to the stage.</p><pre><code>git status</code></pre><h2 id=\"working-with-branches\">Working with branches</h2><h3 id=\"git-branch-branch_name\">Git branch branch_name</h3><p>This will create a new branch:</p><pre><code>git branch branch_name</code></pre><h3 id=\"git-checkout-branch_name\">Git checkout branch_name</h3><p>To switch from one branch to another:</p><pre><code>git checkout branch_name</code></pre><h4 id=\"git-checkout-b-branch_name\">Git checkout -b branch_name</h4><p>To create a new branch and switch to it automatically:</p><pre><code>git checkout -b branch_name</code></pre><p>This is short for:</p><pre><code>git branch branch_name\ngit checkout branch_name</code></pre><h3 id=\"git-branch\">Git branch</h3><p>To list all the branches and see on what branch you currently are:</p><pre><code>git branch</code></pre><h3 id=\"git-log\">Git log</h3><p>This command will list the version history for the current branch:</p><pre><code>git log</code></pre><hr/><h2 id=\"push-pull\">Push &amp; Pull</h2><h3 id=\"git-push\">Git push</h3><p>This command sends the committed changes to a remote repository:</p><pre><code>git push</code></pre><h3 id=\"git-pull\">Git pull</h3><p>To pull the changes from the remote server to your local computer:</p><pre><code>git pull</code></pre><p>For more commands and a detailed explanation of those listed, I would recommend that you check out the official <a href=\"https://git-scm.com/docs/\">Git documentation</a>.</p><h2 id=\"tips-tricks\">Tips &amp; Tricks</h2><h3 id=\"throw-away-all-your-uncommitted-changes\">Throw away all your uncommitted changes</h3><p>Just as it says, this command will throw away all your uncommitted changes:</p><pre><code>git reset --hard</code></pre><h3 id=\"remove-a-file-from-git-without-removing-it-from-your-computer\">Remove a file from git without removing it from your computer</h3><p>Sometimes, when using the \u201cgit add\u201d command, you might end up adding files that you didn\u2019t want to add.</p><p>If you are not careful during a \u201cgit add\u201d, you may end up adding files that you didn\u2019t want to commit. You should remove the staged version of the file, and then add the file to .gitignore to avoid making the same mistake a second time:</p><pre><code>git reset file_name\necho filename &gt;&gt; .gitignore</code></pre><h3 id=\"edit-a-commit-message\">Edit a commit message</h3><p>It is very easy to fix a commit message:</p><pre><code>git commit --amend -m \"New message\"</code></pre><p>Thank you for reading! Check out more articles like this on my freeCodeCamp profile: <a href=\"https://www.freecodecamp.org/news/author/goran/\">https://www.freecodecamp.org/news/author/goran/</a> and other fun stuff I build on my GitHub page:<a href=\"https://github.com/GoranAviani\" rel=\"noopener\"> https://github.com/GoranAviani</a></p>\n</section>\n<hr/>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nRecently I\u2019ve became a mentor to a colleague of mine. And my mentee has asked me about Git on several occasions. This is for you colleague! P.S. I should have written this article when we started but I hope it will help now!And remember: The best way to learn anything is to do it by yourself! And as my mentor always says to me: Udaraj!BasicsSo why is Git so important?Let's first start by quoting the first line on Git\u2019s Wikipedia page: \u201cGit (/\u0261\u026at/) is a version-control system for tracking changes in computer files and coordinating work on those files among multiple people.\u201dSo that means that the most basic and important function of Git is to allow teams to add (and merge) code at the same time to the same project. By adding this ability to projects it makes teams more efficient and gives them the ability to work on bigger projects and more complex problems.There are also many other things Git does really well: it allows us to revert changes, create new branches for adding new features, resolve merge conflict, and so on.How Git worksGit stores projects in repositories. Commits are made to the project and they tell Git that you are satisfied with the new or changed code you created. New code/changes are committed on branches. Most of the work is committed on other branches and then merged with the master branch. All this is stored in the same directory as the project but in a sub-folder called .git. To share the code with your colleagues you push the changes to the repository. To get the new code from your colleagues, you pull changes from the repository.Then what are GitHub, GitLab and Bitbucket?Well, I am glad you asked! These kinds of applications are called repository management services. They play a crucial role in modern software development. Even though Git and GitHub are the go-to version control solutions for most companies, GitHub has some strong competitors such as GitLab and Bitbucket. However, if you know how to use GitHub, you won\u2019t have any problem working with GitLab or Bitbucket.So, to be clear: Git is the tool, and GitHub is the service for projects that use Git.Where can I discover interesting projects and connect to other developers?GitHub, GitLab and Bitbucket have public repository search options and the ability to easily follow other users.Can you now see why is it important to know Git and Github (GitLab/Bitbucket)? The only thing left before talking about commands is to tell you few simple rules to always follow when using Git:Rule 1: Create a Git repository for every new projectRule 2: Create a new branch for every new featureTo get started with Git you must have it on your computer. If you don\u2019t already have it you can go here and follow the instructions.Initialize a new Git repository: Git initEverything you code is tracked in the repository. To initialize a git repository, use this command while inside the project folder. This will create a .git folder.git initGit addThis command adds one or all changed files to the staging area.To just add a specific file to staging:git add filename.pyTo stage new, modified, or deleted files:git add -ATo stage new and modified files:git add .To stage modified and deleted files:git add -uGit commitThis command records the file in the version history. The -m means that a commit message follows. This message is a custom one and you should use it to let your colleagues or your future self know what was added in that commit.git commit -m \"your text\"Git statusThis command will list files in green or red colors. Green files have been added to the stage but not committed yet. Files marked as red are the ones not yet added to the stage.git statusWorking with branchesGit branch branch_nameThis will create a new branch:git branch branch_nameGit checkout branch_nameTo switch from one branch to another:git checkout branch_nameGit checkout -b branch_nameTo create a new branch and switch to it automatically:git checkout -b branch_nameThis is short for:git branch branch_name\ngit checkout branch_nameGit branchTo list all the branches and see on what branch you currently are:git branchGit logThis command will list the version history for the current branch:git logPush & PullGit pushThis command sends the committed changes to a remote repository:git pushGit pullTo pull the changes from the remote server to your local computer:git pullFor more commands and a detailed explanation of those listed, I would recommend that you check out the official Git documentation.Tips & TricksThrow away all your uncommitted changesJust as it says, this command will throw away all your uncommitted changes:git reset --hardRemove a file from git without removing it from your computerSometimes, when using the \u201cgit add\u201d command, you might end up adding files that you didn\u2019t want to add.If you are not careful during a \u201cgit add\u201d, you may end up adding files that you didn\u2019t want to commit. You should remove the staged version of the file, and then add the file to .gitignore to avoid making the same mistake a second time:git reset file_name\necho filename >> .gitignoreEdit a commit messageIt is very easy to fix a commit message:git commit --amend -m \"New message\"Thank you for reading! Check out more articles like this on my freeCodeCamp profile: https://www.freecodecamp.org/news/author/goran/ and other fun stuff I build on my GitHub page: https://github.com/GoranAviani\n\n                        \n                    \n                    \n                        \n                        \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 6070, "excerpt": "Recently I\u2019ve became a mentor to a colleague of mine. And my mentee has asked me\nabout Git on several occasions. This is for you colleague! P.S. I should have\nwritten this article when we started but I hope it will help now!\n\nAnd remember: The best way to learn anything is to do it by yourself! And as my\nmentor always says to me: Udaraj!\n\nBasics\nSo why is Git so important?\nLet's first start by quoting the first line on Git\u2019s Wikipedia page: \n\n> \u201cGit (/\u0261\u026at/ [https://en.wikipedia.org/wiki/Help:IPA", "siteName": "freeCodeCamp.org", "publishedTime": "2019-08-20T13:31:00.000Z", "id": "7eade698be7e255d5c2ef691196bf756add67473", "url": "https://www.freecodecamp.org/news/understanding-git-basics-commands-tips-tricks/", "domain": "freecodecamp.org", "date": "2023-12-27T18:08:37.900683", "resultUri": "http://localhost:3000/result/7eade698be7e255d5c2ef691196bf756add67473", "query": {"url": ["https://www.freecodecamp.org/news/understanding-git-basics-commands-tips-tricks/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "How to understand Git: an intro to basic commands, tips, and tricks", "description": "Recently I\u2019ve became a mentor to a colleague of mine. And my mentee has asked me about Git on several occasions. This is for you colleague! P.S. I should have written this article when we started but I hope it will help now! And remember: The best way to learn", "url": "https://www.freecodecamp.org/news/understanding-git-basics-commands-tips-tricks/", "image": "https://www.freecodecamp.org/news/content/images/2019/08/brandon-green-321795-unsplash.jpg", "image:width": "2000", "image:height": "1337"}, "twitter": {"card": "summary_large_image", "title": "How to understand Git: an intro to basic commands, tips, and tricks", "description": "Recently I\u2019ve became a mentor to a colleague of mine. And my mentee has asked me about Git on several occasions. This is for you colleague! P.S. I should have written this article when we started but I hope it will help now! And remember: The best way to learn", "url": "https://www.freecodecamp.org/news/understanding-git-basics-commands-tips-tricks/", "image": "https://www.freecodecamp.org/news/content/images/2019/08/brandon-green-321795-unsplash.jpg", "label1": "Written by", "data1": "Goran Aviani", "label2": "Filed under", "data2": "Git, Version Control, Programming", "site": "@freecodecamp"}}}