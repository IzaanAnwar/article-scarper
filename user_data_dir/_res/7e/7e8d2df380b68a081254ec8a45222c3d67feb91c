{"title": "How to build a cryptobot in Python and connect it to Facebook messenger", "byline": "freeCodeCamp.org", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>How to build a cryptobot in Python and connect it to Facebook messenger</h1>\n<section>\n<section data-test-label=\"post-content\">\n<p>by Paul Pinard</p><h4 id=\"meet-sato-the-cryptobot-who-is-able-to-fetch-any-cryptocurrency-price-from-an-external-api-\">Meet Sato the Cryptobot, who is able to fetch any cryptocurrency price from an external API!</h4><p>Chatbots have an incredible potential. Yet, for bots to be efficient, they must integrate and exchange data with existing services and processes.</p><p><strong>The ability to fetch data from external API allows for more complex use case that a simple Q&amp;A logic</strong>. Moreover, this ability combined with NLP offers even more opportunities.</p><p>For instance, Sato \u2014 the cryptobot we\u2019ll be building today \u2014 is able to recognize all cryptocurrencies, even those not even listed yet. I won\u2019t have to do anything for him to be able to process queries on crypto appearing even years from now, because Sato, deep-down, understood what a cryptocurrency symbol is (after being fed with thousands of them).</p><h3 id=\"what-are-we-building-today\">What are we building today?</h3><p>By the end of this tutorial, we will have a bot able to fetch data from a third party API depending on what our users input, and reply to them with the value fetched. Here\u2019s the end-result of what we\u2019ll build today: a cryptobot aka a chatbot able to fetch any cryptocurrency price.</p><figure><img alt=\"mVEyhtJ375H0xIgX8Wiu6h2FgHfbnIKz5Rb6\" height=\"979\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/mVEyhtJ375H0xIgX8Wiu6h2FgHfbnIKz5Rb6\" width=\"711\"/><figcaption>What you\u2019ll have by the end of this tutorial</figcaption></figure><p>In a rush? Here is all you need to build your own:</p><ul><li>A chatbot created with <a href=\"https://medium.freecodecamp.org/how-to-build-your-first-chatbot-with-the-sap-conversational-ai-9a1a2bd44e3c\" rel=\"noopener\">SAP Conversational AI</a>. Sign up <a href=\"https://cai.tools.sap/signup?utm_source=freecodecamp&amp;utm_medium=blog&amp;utm_campaign=LG2019\" rel=\"noopener\">here</a>, it\u2019s totally free!</li><li><a href=\"https://github.com/Ahirice/sato/\" rel=\"noopener\">The GitHub repo</a></li></ul><p>Need to see it to believe it? That\u2019s wise! Click <a href=\"https://www.messenger.com/login.php?next=https%3A%2F%2Fwww.messenger.com%2Ft%2Fsatofolio\" rel=\"noopener\">here</a>!</p><p>Or if you would rather understand how it was made, go through with the tutorial.</p><h3 id=\"1-build-the-base-of-your-chatbot-choose-your-path\">1. Build the base of your chatbot: choose your path</h3><p>The goal today is to build bot able to recognize a question about pricing on any cryptocurrency. Let your imagination flow, <strong>it could be really anything there is involving data available on third party APIs</strong>.</p><p>Before we dive in the tutorial, let me give you some information on how Sato works.</p><h4 id=\"meet-sato-the-cryptobot\">Meet Sato, the cryptobot</h4><p>Sato is a bot made to answer basic questions about cryptocurrencies and fetch their prices. Here\u2019s an overview of what he can do:</p><ol><li>Fetch cryptocurrencies prices (what we\u2019ll build today): Sato recognizes cryptocurrencies symbol (\u201cETH\u201d, \u201cBTC\u201d) and fetch their price on <a href=\"https://www.cryptocompare.com/api/\" rel=\"noopener\">cryptocompare API</a> to finally return BTC and USD value to the user.</li><li>Answer the users\u2019 questions about wallets \u2014 online wallets, exchange wallets, cold wallets and hardware wallets.</li><li>Address questions about private and public keys as well as the security of cryptocurrencies.</li><li>Briefly present the main cryptocurrencies, currently BTC, ETH, BCH and LTC.</li></ol><h4 id=\"inside-sato\">Inside Sato</h4><p>Today, we\u2019ll focus on the skill fetching the crypto prices, as it requires an external API call. Essentially, Sato needs three things to be able to detect a question about crypto price and return the value asked:</p><p>Firstly, he needs an intent <a href=\"https://cai.tools.sap/ahirice/sato-cryptobot/train/crypto_price?utm_source=blog&amp;utm_campaign=sato\" rel=\"noopener\">(@crypto_price</a>) with diverse expressions and cryptocurrencies mentioned, so he can efficiently recognize these questions. Here are some of the expressions used to define the @crypto_price intent:</p><figure><img alt=\"9xvqHOnxa19Q2lJZALPpNX3Drn9ji7GvnPsc\" height=\"733\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/9xvqHOnxa19Q2lJZALPpNX3Drn9ji7GvnPsc\" width=\"450\"/><figcaption>A sample of the expressions used to define the @crypto_price intent</figcaption></figure><p>Secondly, for Sato to be able to recognize all cryptocurrencies, he\u2019ll need the biggest list you can find. I found 1200+ on CoinMarketCap which is good enough to begin with. I created a gazette of the crypto names to improve its understanding.</p><p>Thirdly, we\u2019ll need to build a skill which triggers when the @ask_price intent or #crypto_name entity is recognized:</p><figure><img alt=\"ODAOHbkV4oNuDxMlCBybhtorXtXsrbPDBmdr\" height=\"333\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/ODAOHbkV4oNuDxMlCBybhtorXtXsrbPDBmdr\" width=\"800\"/><figcaption>Sato \u2014 Cryptobot / crypto_main skill triggers</figcaption></figure><p>You can also add #crypto_name as a requirements, to make sure no API called is fired without parameters:</p><figure><img alt=\"bpD4Pbv-Tuxr47GSwC2fqGyhMe-SqHG6uTC4\" height=\"576\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/bpD4Pbv-Tuxr47GSwC2fqGyhMe-SqHG6uTC4\" width=\"779\"/><figcaption>Sato \u2014 Cryptobot / crypto_main skill requirements</figcaption></figure><p>This skill must also call your webhook that we\u2019ll setup below:</p><figure><img alt=\"135D8rog-svOYx2Ypr0trbn0TtGLHM4T6n-w\" height=\"291\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/135D8rog-svOYx2Ypr0trbn0TtGLHM4T6n-w\" width=\"800\"/><figcaption>Sato \u2014 Cryptobot / crypto_main skill actions</figcaption></figure><p>Don\u2019t forget to add a memory reset after the webhook trigger, it\u2019s required to clean the memory after each answer.</p><p>Finally, we\u2019ll test our bot straight in Messenger, so you\u2019ll need to create a page and an app and connect it. Everything is documented in the <code>CONNECT</code> tab and in the <a href=\"https://cai.tools.sap/blog/build-your-first-bot-with-sap-conversational-ai/\" rel=\"noopener\">getting started tutorial</a>.</p><p>To keep it concise<strong>, this tutorial will not detail the creation of a bot</strong>. We\u2019ll start from a functioning bot already.</p><p>To meet me there, you have two options:</p><ul><li>Option A: build your own bot (who doesn\u2019t have to be a cryptobot) by following the getting started tutorial and creating an <a href=\"https://cai.tools.sap/signup?utm_source=freecodecamp&amp;utm_medium=blog&amp;utm_campaign=LG2019\" rel=\"noopener\">account on SAP Conversational AI</a>.</li><li>Option B: <a href=\"https://cai.tools.sap/ahirice/sato-cryptobot/train/intents\" rel=\"noopener\">fork Sato</a> and start from here. That\u2019s why SAP Conversational AI is a collaborative chatbot platform. It works pretty much like GitHub!</li></ul><figure><img alt=\"QZmtXl1BvCSUOw71M02FiAvKyzYnU0tqrYuN\" height=\"123\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/QZmtXl1BvCSUOw71M02FiAvKyzYnU0tqrYuN\" width=\"800\"/><figcaption>Forking a bot on SAP Conversational AI</figcaption></figure><h3 id=\"2-basic-server-code-and-requirements\">2. Basic server code and requirements</h3><p>Since we want to interact with our bot, we\u2019ll need a server to be able to receive the results of the NLP made by SAP Conversational AI and send our responses back.</p><p>On the <a href=\"https://cai.tools.sap/bot-builder\" rel=\"noopener\">bot builder</a>, go to the <code>CODE</code> tab to find an example of base code required to start your API. We give examples in Node.JS, PHP, Python and Ruby. This tutorial will be Python only.</p><p>Here\u2019s the base code for Python:</p><pre><code>from flask import Flask, request, jsonify import json app = Flask(__name__) port = '5000' @app.route('/', methods=['POST']) def index():   print(json.loads(request.get_data()))   return jsonify(     status=200,     replies=[{       'type': 'text',       'content': 'Roger that',     }]  )  @app.route('/errors', methods=['POST']) def errors():   print(json.loads(request.get_data()))   return jsonify(status=200)  app.run(port=port)</code></pre><p>Take some time to look at the code to get a better understanding of what we\u2019ll be doing: we\u2019ll build on this code during this tutorial. You can save it in your favorite text editor for now.</p><h4 id=\"requirements\">Requirements</h4><p>As you can see, the server script uses the <a href=\"http://flask.pocoo.org/\" rel=\"noopener\">Flask as a web framework</a>, so we\u2019ll need it.</p><p>For the API call, we\u2019ll also use <a href=\"http://docs.python-requests.org/en/master/\" rel=\"noopener\">Requests</a>. Let\u2019s go ahead and install both:</p><pre><code>pip install Flaskpip install requests</code></pre><h3 id=\"3-test-the-server-ngrok\">3. Test the server: NGROK</h3><p>Now that we have the base server, let\u2019s make it run and test it. It will allow us to be more incremental in the process so the debugging (if any) is simplified.</p><p>To expose our local server to the internet, we\u2019ll need ngrok.</p><p><em>Note: If you are using Windows like me, there is awesome package manager, <a href=\"https://chocolatey.org/\" rel=\"noopener\">Chocolatey</a> which works pretty much like apt-get on UNIX. With it, you\u2019ll be able to install ngrok in one line <code>choco install ngrok_portable</code>. Moreover, Chocolatey adds ngrok to your PATH, allowing you to start ngrok from any terminal simply by typing <code>ngrok</code>.</em></p><p>Now is the time to start our server and test it, this implies:</p><ol><li>Set a webhook trigger in your bot (detailed in step 1)</li><li>Run your python script</li><li>Expose port 5000 to the internet with ngrok: <code>ngrok http 5000</code></li><li>Copy the forwarding URL form ngrok and past it as your bot base URL on SAP Conversational AI</li></ol><h3 id=\"4-preparing-the-external-api-call\">4. Preparing the external API call</h3><p>It\u2019s about time to start building! Let\u2019s have a look at the api call we\u2019ll be doing to get the price of any cryptocurrency. Several APIs are available for this purpose so I just went ahead and picked one: <a href=\"https://www.cryptocompare.com/api/\" rel=\"noopener\">Cryptocompare API</a>.</p><p><a href=\"https://www.cryptocompare.com/api/\" rel=\"noopener\">Cryptocompare API</a> offers thousands of possibilities, but for the sake of simplicity, we\u2019ll stick with the basics. <strong>We want the price of the matched crypto in BTC, USD and EUR</strong>.</p><p>Here\u2019s how the call is structured (here for ETH):</p><p>You have two parameters:</p><ul><li><code>fsym</code>: the symbol of the cryptocurrency, this is where we\u2019ll need to fetch the crypto_name recognized in the #crypto_name entity.</li><li><code>tsyms</code>: the currency in which the price will be returned. We chose BTC, USD and EUR here.</li></ul><p>So, in our case, we\u2019ll only need to adapt the <code>fsym</code> parameter to the recognized cryptocurrency, while the rest of the call stays the same.</p><h3 id=\"5-adapt-the-api-call-to-include-the-symbol-recognized-in-the-user-input\">5. Adapt the API call to include the symbol recognized in the user input</h3><p>Now that we know how to fetch the prices, we need to go back to our server code and upgrade it so it can:</p><ul><li>Know the #crypto_name recognized by SAP Conversational AI.</li><li>Make an API call to Cryptocompare using the #crypto_name.</li></ul><p>Let\u2019s get started!</p><h4 id=\"step-1-finding-our-data-in-sap-conversational-ai-json\">Step 1: Finding our data in SAP Conversational AI JSON</h4><p>Let\u2019s have a look at the data returned by SAP Conversational AI on a user input. To do so, you click the <code>CHAT WITH YOUR BOT</code> button present on all pages, on the bottom-right corner. Then, you can switch between the conversation and the JSON view by clicking on the orange information circle as below:</p><figure><img alt=\"L640-OoPuVyK3rF5SAEYQXI2ss4qv2sTE4Cf\" height=\"272\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/L640-OoPuVyK3rF5SAEYQXI2ss4qv2sTE4Cf\" width=\"371\"/><figcaption>Check the JSON of the conversation.</figcaption></figure><p>Here, our symbol is accessible with <code>['conversation']['memory']['crypto']['raw']</code>. Since the value and the raw and identical in this case, you can use either.</p><p>On our server, the JSON returned by the website test panel is <strong>encapsulated into the <code>data</code> dictionary</strong> (see server code). So we need an extra step to retrieve it on our server:</p><pre><code># FETCH THE CRYPTO NAMEcrypto_name = data['conversation']['memory']['crypto']['value']</code></pre><h4 id=\"step-2-make-an-api-call-using-the-recognized-entity\">Step 2: Make an API call using the recognized entity</h4><pre><code>import requestsr = requests.get(\"https://min-api.cryptocompare.com/data/price?fsym=\"+crypto_name+\"&amp;tsyms=BTC,USD,EUR\")</code></pre><p>Go ahead and print it, but you may be disappointed:</p><figure><img alt=\"AN1-kvadGRTMSbUU3P0oyVnnHAnvmpcYrOFo\" height=\"60\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/AN1-kvadGRTMSbUU3P0oyVnnHAnvmpcYrOFo\" width=\"194\"/></figure><p>Indeed, if you want to get the values returned by the call, you need to print <code>r.json()</code>. The good news is that JSON returned by Cryptocompare is really as simple as it could be:</p><figure><img alt=\"aDUzK6ox4aFmpZgkZul3M8KKFNZbtyGawLjH\" height=\"84\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/aDUzK6ox4aFmpZgkZul3M8KKFNZbtyGawLjH\" width=\"800\"/><figcaption>Cryptocompare JSON</figcaption></figure><p>Great! Now, we just have one last step to figure out: returning the prices to the user.</p><h4 id=\"step-3-returning-the-data-fetched-to-the-user\">Step 3: Returning the data fetched to the user</h4><p>Now, it\u2019s time to finish our base server code upgrade: we need to edit the replies returned to include our freshly fetched data. To do so, we\u2019ll edit the message returned by our server code:</p><pre><code>return jsonify(     status=200,     replies=[{       'type': 'text',       'content': 'Roger that',     }],</code></pre><p>We\u2019ll be editing the replies only, to include the prices we fetched:</p><pre><code>replies=[{      'type': 'text',      'content': 'The price of %s is %f BTC and %f USD' % (crypto_name, r.json()['BTC'], r.json()['USD'])    }],</code></pre><p>Since the reply is a string, we must use the modulo (%) operator to include our prices in the string. Here, the first %s tells Python to look for a string while the two following %f indicates floats.</p><p>Our upgraded server is now finished, here\u2019s the whole code:</p><pre><code>from flask import Flask, request, jsonifyimport jsonimport requestsapp = Flask(__name__)port = '5000'@app.route('/', methods=['POST'])def index():  data = json.loads(request.get_data())  # FETCH THE CRYPTO NAME  crypto_name = data['conversation']['memory']['crypto']['raw']  # FETCH BTC/USD/EUR PRICES  r = requests.get(\"https://min-api.cryptocompare.com/data/price?fsym=\"+crypto_name+\"&amp;tsyms=BTC,USD,EUR\")  return jsonify(    status=200,    replies=[{      'type': 'text',      'content': 'The price of %s is %f BTC and %f USD' % (crypto_name, r.json()['BTC'], r.json()['USD'])    }]  )@app.route('/errors', methods=['POST'])def errors():  print(json.loads(request.get_data()))  return jsonify(status=200)app.run(port=port)</code></pre><p>With our new server completed, we now have all the pieces of our puzzle. Let\u2019s assemble it:</p><ol><li>Run your python script,</li><li>Expose port 5000 to the internet with ngrok: <code>ngrok http 5000</code>,</li><li>Copy the forwarding URL form ngrok and past it as your bot base URL on SAP Conversational AI</li></ol><p>Now that you have the basics to build a bot able to fetch third party data, what\u2019s it gonna be? You show us!</p><p>PS: Since this tutorial uses ngrok, your computer must be on and ngrok must be running for your bot to function.</p><p>Originally published on <a href=\"https://cai.tools.sap/blog/python-cryptobot/\" rel=\"noopener\">SAP Conversational AI blog</a>.</p>\n</section>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nby Paul PinardMeet Sato the Cryptobot, who is able to fetch any cryptocurrency price from an external API!Chatbots have an incredible potential. Yet, for bots to be efficient, they must integrate and exchange data with existing services and processes.The ability to fetch data from external API allows for more complex use case that a simple Q&A logic. Moreover, this ability combined with NLP offers even more opportunities.For instance, Sato \u2014 the cryptobot we\u2019ll be building today \u2014 is able to recognize all cryptocurrencies, even those not even listed yet. I won\u2019t have to do anything for him to be able to process queries on crypto appearing even years from now, because Sato, deep-down, understood what a cryptocurrency symbol is (after being fed with thousands of them).What are we building today?By the end of this tutorial, we will have a bot able to fetch data from a third party API depending on what our users input, and reply to them with the value fetched. Here\u2019s the end-result of what we\u2019ll build today: a cryptobot aka a chatbot able to fetch any cryptocurrency price.What you\u2019ll have by the end of this tutorialIn a rush? Here is all you need to build your own:A chatbot created with SAP Conversational AI. Sign up here, it\u2019s totally free!The GitHub repoNeed to see it to believe it? That\u2019s wise! Click here!Or if you would rather understand how it was made, go through with the tutorial.1. Build the base of your chatbot: choose your pathThe goal today is to build bot able to recognize a question about pricing on any cryptocurrency. Let your imagination flow, it could be really anything there is involving data available on third party APIs.Before we dive in the tutorial, let me give you some information on how Sato works.Meet Sato, the cryptobotSato is a bot made to answer basic questions about cryptocurrencies and fetch their prices. Here\u2019s an overview of what he can do:Fetch cryptocurrencies prices (what we\u2019ll build today): Sato recognizes cryptocurrencies symbol (\u201cETH\u201d, \u201cBTC\u201d) and fetch their price on cryptocompare API to finally return BTC and USD value to the user.Answer the users\u2019 questions about wallets \u2014 online wallets, exchange wallets, cold wallets and hardware wallets.Address questions about private and public keys as well as the security of cryptocurrencies.Briefly present the main cryptocurrencies, currently BTC, ETH, BCH and LTC.Inside SatoToday, we\u2019ll focus on the skill fetching the crypto prices, as it requires an external API call. Essentially, Sato needs three things to be able to detect a question about crypto price and return the value asked:Firstly, he needs an intent (@crypto_price) with diverse expressions and cryptocurrencies mentioned, so he can efficiently recognize these questions. Here are some of the expressions used to define the @crypto_price intent:A sample of the expressions used to define the @crypto_price intentSecondly, for Sato to be able to recognize all cryptocurrencies, he\u2019ll need the biggest list you can find. I found 1200+ on CoinMarketCap which is good enough to begin with. I created a gazette of the crypto names to improve its understanding.Thirdly, we\u2019ll need to build a skill which triggers when the @ask_price intent or #crypto_name entity is recognized:Sato \u2014 Cryptobot / crypto_main skill triggersYou can also add #crypto_name as a requirements, to make sure no API called is fired without parameters:Sato \u2014 Cryptobot / crypto_main skill requirementsThis skill must also call your webhook that we\u2019ll setup below:Sato \u2014 Cryptobot / crypto_main skill actionsDon\u2019t forget to add a memory reset after the webhook trigger, it\u2019s required to clean the memory after each answer.Finally, we\u2019ll test our bot straight in Messenger, so you\u2019ll need to create a page and an app and connect it. Everything is documented in the CONNECT tab and in the getting started tutorial.To keep it concise, this tutorial will not detail the creation of a bot. We\u2019ll start from a functioning bot already.To meet me there, you have two options:Option A: build your own bot (who doesn\u2019t have to be a cryptobot) by following the getting started tutorial and creating an account on SAP Conversational AI.Option B: fork Sato and start from here. That\u2019s why SAP Conversational AI is a collaborative chatbot platform. It works pretty much like GitHub!Forking a bot on SAP Conversational AI2. Basic server code and requirementsSince we want to interact with our bot, we\u2019ll need a server to be able to receive the results of the NLP made by SAP Conversational AI and send our responses back.On the bot builder, go to the CODE tab to find an example of base code required to start your API. We give examples in Node.JS, PHP, Python and Ruby. This tutorial will be Python only.Here\u2019s the base code for Python:from flask import Flask, request, jsonify import json app = Flask(__name__) port = '5000' @app.route('/', methods=['POST']) def index():   print(json.loads(request.get_data()))   return jsonify(     status=200,     replies=[{       'type': 'text',       'content': 'Roger that',     }]  )  @app.route('/errors', methods=['POST']) def errors():   print(json.loads(request.get_data()))   return jsonify(status=200)  app.run(port=port)Take some time to look at the code to get a better understanding of what we\u2019ll be doing: we\u2019ll build on this code during this tutorial. You can save it in your favorite text editor for now.RequirementsAs you can see, the server script uses the Flask as a web framework, so we\u2019ll need it.For the API call, we\u2019ll also use Requests. Let\u2019s go ahead and install both:pip install Flaskpip install requests3. Test the server: NGROKNow that we have the base server, let\u2019s make it run and test it. It will allow us to be more incremental in the process so the debugging (if any) is simplified.To expose our local server to the internet, we\u2019ll need ngrok.Note: If you are using Windows like me, there is awesome package manager, Chocolatey which works pretty much like apt-get on UNIX. With it, you\u2019ll be able to install ngrok in one line choco install ngrok_portable. Moreover, Chocolatey adds ngrok to your PATH, allowing you to start ngrok from any terminal simply by typing ngrok.Now is the time to start our server and test it, this implies:Set a webhook trigger in your bot (detailed in step 1)Run your python scriptExpose port 5000 to the internet with ngrok: ngrok http 5000Copy the forwarding URL form ngrok and past it as your bot base URL on SAP Conversational AI4. Preparing the external API callIt\u2019s about time to start building! Let\u2019s have a look at the api call we\u2019ll be doing to get the price of any cryptocurrency. Several APIs are available for this purpose so I just went ahead and picked one: Cryptocompare API.Cryptocompare API offers thousands of possibilities, but for the sake of simplicity, we\u2019ll stick with the basics. We want the price of the matched crypto in BTC, USD and EUR.Here\u2019s how the call is structured (here for ETH):https://min-api.cryptocompare.com/data/price?fsym=\"ETH\"&tsyms=BTC,USD,EUR\"You have two parameters:fsym: the symbol of the cryptocurrency, this is where we\u2019ll need to fetch the crypto_name recognized in the #crypto_name entity.tsyms: the currency in which the price will be returned. We chose BTC, USD and EUR here.So, in our case, we\u2019ll only need to adapt the fsym parameter to the recognized cryptocurrency, while the rest of the call stays the same.5. Adapt the API call to include the symbol recognized in the user inputNow that we know how to fetch the prices, we need to go back to our server code and upgrade it so it can:Know the #crypto_name recognized by SAP Conversational AI.Make an API call to Cryptocompare using the #crypto_name.Let\u2019s get started!Step 1: Finding our data in SAP Conversational AI JSONLet\u2019s have a look at the data returned by SAP Conversational AI on a user input. To do so, you click the CHAT WITH YOUR BOT button present on all pages, on the bottom-right corner. Then, you can switch between the conversation and the JSON view by clicking on the orange information circle as below:Check the JSON of the conversation.Here, our symbol is accessible with ['conversation']['memory']['crypto']['raw']. Since the value and the raw and identical in this case, you can use either.On our server, the JSON returned by the website test panel is encapsulated into the data dictionary (see server code). So we need an extra step to retrieve it on our server:# FETCH THE CRYPTO NAMEcrypto_name = data['conversation']['memory']['crypto']['value']Step 2: Make an API call using the recognized entityimport requestsr = requests.get(\"https://min-api.cryptocompare.com/data/price?fsym=\"+crypto_name+\"&tsyms=BTC,USD,EUR\")Go ahead and print it, but you may be disappointed:Indeed, if you want to get the values returned by the call, you need to print r.json(). The good news is that JSON returned by Cryptocompare is really as simple as it could be:Cryptocompare JSONGreat! Now, we just have one last step to figure out: returning the prices to the user.Step 3: Returning the data fetched to the userNow, it\u2019s time to finish our base server code upgrade: we need to edit the replies returned to include our freshly fetched data. To do so, we\u2019ll edit the message returned by our server code:return jsonify(     status=200,     replies=[{       'type': 'text',       'content': 'Roger that',     }],We\u2019ll be editing the replies only, to include the prices we fetched:replies=[{      'type': 'text',      'content': 'The price of %s is %f BTC and %f USD' % (crypto_name, r.json()['BTC'], r.json()['USD'])    }],Since the reply is a string, we must use the modulo (%) operator to include our prices in the string. Here, the first %s tells Python to look for a string while the two following %f indicates floats.Our upgraded server is now finished, here\u2019s the whole code:from flask import Flask, request, jsonifyimport jsonimport requestsapp = Flask(__name__)port = '5000'@app.route('/', methods=['POST'])def index():  data = json.loads(request.get_data())  # FETCH THE CRYPTO NAME  crypto_name = data['conversation']['memory']['crypto']['raw']  # FETCH BTC/USD/EUR PRICES  r = requests.get(\"https://min-api.cryptocompare.com/data/price?fsym=\"+crypto_name+\"&tsyms=BTC,USD,EUR\")  return jsonify(    status=200,    replies=[{      'type': 'text',      'content': 'The price of %s is %f BTC and %f USD' % (crypto_name, r.json()['BTC'], r.json()['USD'])    }]  )@app.route('/errors', methods=['POST'])def errors():  print(json.loads(request.get_data()))  return jsonify(status=200)app.run(port=port)With our new server completed, we now have all the pieces of our puzzle. Let\u2019s assemble it:Run your python script,Expose port 5000 to the internet with ngrok: ngrok http 5000,Copy the forwarding URL form ngrok and past it as your bot base URL on SAP Conversational AINow that you have the basics to build a bot able to fetch third party data, what\u2019s it gonna be? You show us!PS: Since this tutorial uses ngrok, your computer must be on and ngrok must be running for your bot to function.Originally published on SAP Conversational AI blog.\n\n                        \n                    \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 11703, "excerpt": "by Paul Pinard\n\nMeet Sato the Cryptobot, who is able to fetch any cryptocurrency price from an\nexternal API!\nChatbots have an incredible potential. Yet, for bots to be efficient, they must\nintegrate and exchange data with existing services and processes.\n\nThe ability to fetch data from external API allows for more complex use case\nthat a simple Q&A logic. Moreover, this ability combined with NLP offers even\nmore opportunities.\n\nFor instance, Sato \u2014 the cryptobot we\u2019ll be building today \u2014 is able", "siteName": "freeCodeCamp.org", "publishedTime": "2019-04-30T17:03:57.000Z", "id": "7e8d2df380b68a081254ec8a45222c3d67feb91c", "url": "https://www.freecodecamp.org/news/how-to-build-a-cryptobot-in-python-and-connect-it-to-facebook-messenger-4bba14107fcc/", "domain": "freecodecamp.org", "date": "2023-12-27T18:11:01.398698", "resultUri": "http://localhost:3000/result/7e8d2df380b68a081254ec8a45222c3d67feb91c", "query": {"url": ["https://www.freecodecamp.org/news/how-to-build-a-cryptobot-in-python-and-connect-it-to-facebook-messenger-4bba14107fcc/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "How to build a cryptobot in Python and connect it to Facebook messenger", "description": "by Paul Pinard Meet Sato the Cryptobot, who is able to fetch any cryptocurrency price from an external API! Chatbots have an incredible potential. Yet, for bots to be efficient, they must integrate and exchange data with existing services and processes. The ability to fetch data from external API allows", "url": "https://www.freecodecamp.org/news/how-to-build-a-cryptobot-in-python-and-connect-it-to-facebook-messenger-4bba14107fcc/", "image": "https://cdn-media-1.freecodecamp.org/images/1*bXgJOdnBncMGMKKJVPCbmw.png", "image:width": "800", "image:height": "434"}, "twitter": {"card": "summary_large_image", "title": "How to build a cryptobot in Python and connect it to Facebook messenger", "description": "by Paul Pinard Meet Sato the Cryptobot, who is able to fetch any cryptocurrency price from an external API! Chatbots have an incredible potential. Yet, for bots to be efficient, they must integrate and exchange data with existing services and processes. The ability to fetch data from external API allows", "url": "https://www.freecodecamp.org/news/how-to-build-a-cryptobot-in-python-and-connect-it-to-facebook-messenger-4bba14107fcc/", "image": "https://cdn-media-1.freecodecamp.org/images/1*bXgJOdnBncMGMKKJVPCbmw.png", "label1": "Written by", "data1": "freeCodeCamp.org", "label2": "Filed under", "data2": "Python, Cryptocurrency, Chatbots, Tech, Programming", "site": "@freecodecamp"}}}