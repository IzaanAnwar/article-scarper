{"title": "How to Install and Start Using TypeScript", "byline": "Jonathan Sexton", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>How to Install and Start Using TypeScript</h1>\n<section>\n<section data-test-label=\"post-content\">\n<p>TypeScript is one of the current hot topics in web development, and for good reasons.</p><p>It allows us to type cast when declaring variables which means we explicitly set the type of data we expect back. Then it throws errors if the returned data is not the type we expected to get back, or if a function call has too few or too many arguments. And that's just a sampling of everything it offers.</p><p>If you'd like an overview of the data types you will find it helpful to read my <a href=\"https://jonathansexton.me/blog/learn-typescript-data-types-from-zero-to-hero/\">previous article</a>. Reading that article isn't required but it will give you a great understanding of the data types and syntax for TypeScript.</p><p><em>Before we start, it's important to note that TypeScript can be used in conjunction with a framework/library but it can also be used independent of a framework/library. TypeScript is the default in Angular projects and I have an article in the works about getting started with it.</em></p><p><em>Also, this article assumes you have a basic understanding of JavaScript programming.</em></p><p>So, now we're ready to get started with TypeScript and start making use of its awesome features.</p><p>Let's dig in!</p><h2 id=\"installing-typescript\">Installing TypeScript</h2><p>There are two main ways to install TypeScript. \u00a0The first is through <a href=\"https://visualstudio.microsoft.com/vs/\">Visual Studio</a> (not to be confused with <a href=\"https://code.visualstudio.com/?wt.mc_id=DX_841432\">Visual Studio Code</a>) which is an <a href=\"https://en.wikipedia.org/wiki/Integrated_development_environment\">IDE</a>. \u00a0The 2015, 2017, and I believe 2019 versions come with TypeScript installed already.</p><p>This is not the route I'll be covering today since I mainly use Visual Studio Code for all of my needs.</p><p>The second way, and the way we'll focus on, is through <a href=\"https://www.npmjs.com/get-npm\">NPM</a> (Node Package Manager).</p><p>If you don't already have NPM and/or <a href=\"https://nodejs.org/en/\">Node</a> installed (you get NPM when you install Node), now is a great time to do so as it's a requirement for the next steps (and by association a requirement to use TypeScript).</p><figure><img alt=\"the node js download page\" height=\"550\" loading=\"lazy\" src=\"https://jonathansexton.me/blog/wp-content/uploads/2019/12/image-1-1024x550.png\" width=\"1024\"/><figcaption>The Node download page - it's a good idea to use the LTS version as it's the most stable</figcaption></figure><p>Once you have Node and NPM installed, open your terminal in VS Code and run the following command:</p><p><code>npm install -g typescript</code></p><p>Once it's finished installing, you'll see that 1 package has been added. You'll also see a message stating the version of TypeScript that was installed.</p><p>This is everything you need to start compiling TypeScript to JavaScript.</p><p>Now you're ready to start writing TypeScript!</p><h2 id=\"starting-a-typescript-project\">Starting A TypeScript Project</h2><p>Let's create a TypeScript project so we can take advantage of all those great features that come along with using it.</p><p>In your editor of choice (I'm using VS Code) let's create an HTML file to be the visual side of our code. \u00a0Here's what my basic HTML file looks like:</p><figure><img alt=\"html text on a dark background\" height=\"376\" loading=\"lazy\" src=\"https://jonathansexton.me/blog/wp-content/uploads/2019/12/image-2-1024x376.png\" width=\"1024\"/><figcaption>Basic HTML boilerplate with some placeholder text</figcaption></figure><p>Honestly, we're just using this HTML so we can have something to look at on the page. What we're really concerned with is using the console.</p><p>You'll notice I have <code>app.js</code> linked in the head of our <code>index.html</code> file.</p><p>You're probably saying to yourself <em>I thought this was an article about TypeScript?</em></p><p>Well hold your horses, it is. I just want to highlight some of the differences between JavaScript and TypeScript (You'll learn where this file comes from down below).</p><p>Below you'll see a simple variable declaration and a console log statement:</p><figure><img alt=\"javascript code showing a username variable declaration\" height=\"138\" loading=\"lazy\" src=\"https://jonathansexton.me/blog/wp-content/uploads/2019/12/image-4.png\" width=\"509\"/><figcaption>A simple variable declaration and console log statement</figcaption></figure><p>As a side note, if you want to disable some <a href=\"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint\">ES-Lint</a> rules you can place the rules at the top in comments like I've done above. \u00a0Or if you want to <strong>completely</strong> disable ES-Lint for that file only you can place <code>/* eslint-disable */</code> at the top of the file.</p><p>And here is the browser console:</p><figure><img alt=\"the console inside of the firefox browser\" height=\"156\" loading=\"lazy\" src=\"https://jonathansexton.me/blog/wp-content/uploads/2019/12/image-5.png\" width=\"742\"/><figcaption>Our userName variable inside FireFox</figcaption></figure><p>Let's pretend that I'm building an application and for the <code>userName</code> I expect to always get a string back. \u00a0Along the way, I may make a mistake or my data may get mutated from another source.</p><p>Now, <code>userName</code> is a number :(</p><figure><img alt=\"javascript code showing a username variable declaration\" height=\"246\" loading=\"lazy\" src=\"https://jonathansexton.me/blog/wp-content/uploads/2019/12/image-6.png\" width=\"698\"/><figcaption>Now userName is a number!</figcaption></figure><p>And here is the browser console showing the changes to <code>userName</code> that we likely didn't want to happen if this were a production application:</p><figure><img alt=\"image-7\" height=\"172\" loading=\"lazy\" src=\"https://jonathansexton.me/blog/wp-content/uploads/2019/12/image-7.png\" width=\"743\"/><figcaption>The FireFox console showing the results of the variable mutation</figcaption></figure><p>What if the returned <code>userName</code> was then passed into another function or used as a piece of a larger data puzzle?</p><p>It would not only be a mess to figure out where the mutation occurred (especially if we had a larger application), but also would create an untold number of bugs in our code.</p><p>Now, let's try that same experiment in TypeScript. \u00a0To do that, we'll need to create a new file with the<code> .ts</code> extension to denote a TypeScript file.</p><p>I'll name mine <code>app.ts</code> to stay consistent with naming conventions and put the same code from our JavaScript file into our new TypeScript file.</p><figure><img alt=\"typescript code on a dark background \" height=\"318\" loading=\"lazy\" src=\"https://jonathansexton.me/blog/wp-content/uploads/2019/12/image-8.png\" width=\"841\"/><figcaption>The same code from our JavaScript copied over into the TypeScript file</figcaption></figure><p>You'll notice that I'm using type casting when declaring my variable now, and I'm explicitly telling TypeScript that this variable should point to a string value only.</p><p>You'll also notice that I have an error line under <code>userName</code> when I'm reassigning its value.</p><h2 id=\"compiling-typescript-with-the-cli\">Compiling TypeScript With the CLI</h2><p>To see what this looks like in our console we have to compile it to JavaScript. We do that by running <code>tsc app.ts</code> in our VS Code console (you can also run the same command in any terminal as long as you're in the correct directory).</p><p>When we run this command it will compile our TypeScript into JavaScript. It'll also generate another file with the same name, only with a <code>.js</code> extension.</p><p>This is where that <code>app.js</code> file came from that I mentioned earlier in the article.</p><p>To compile multiple files at once, just provide those names in your command, one after the other: <code>tsc app.ts header.component.ts</code></p><p>It's also possible to compile multiple TypeScript files into a single JavaScript file by adding the <code>--out</code> flag:</p><p><code>tsc *.ts --out index.js</code></p><p>There\u2019s also a watch command which will recompile all of the TypeScript automatically anytime a change is detected. This keeps you from having to run the same command over and over:</p><p><code>tsc *.ts\u200a--out app.js\u200a--watch</code></p><p>Here's the output from that <code>tsc app.ts</code> command above:</p><figure><img alt=\"image-9-1024x408\" height=\"408\" loading=\"lazy\" src=\"https://jonathansexton.me/blog/wp-content/uploads/2019/12/image-9-1024x408.png\" width=\"1024\"/><figcaption>The error in my console</figcaption></figure><p>This error tells us that there's a problem with the reassignment of <code>userName</code>. Because we explicitly set our variable to be a string (<em>even if I hadn't set the variable to a string the error would still occur because TypeScript infers data types</em>) we cannot reassign it to a number.</p><p>This is a great feature because it forces us to be explicit with our variable declarations and saves us from making mistakes that could prove annoying and time consuming. If you expect a particular type of data you should get that data, otherwise you should get an error.</p><h2 id=\"using-explicitly-declarative-arrays-and-objects\">Using Explicitly Declarative Arrays and Objects</h2><p>Let's say I'm building a project and instead of manually setting the navigation links, I want to store that info in an array of objects.</p><p>I'll expect a specific format for the information that's stored so it's consistent across all of the links.</p><p>Here's how I can set a \"complex\" array in TypeScript:</p><figure><img alt=\"image-1-1024x51\" height=\"51\" loading=\"lazy\" src=\"https://jonathansexton.me/blog/wp-content/uploads/2020/01/image-1-1024x51.png\" width=\"1024\"/><figcaption>An array with a specific format</figcaption></figure><p>On the left side we declare the name of the variable <code>navLinks</code>, followed by a colon. At the curly braces is where we start declaring the format of the information we expect in this array.</p><p>We're telling TypeScript that we expect this array to contain an object or objects with these property names and types. We expect a <code>name</code> which is a string, a <code>link</code> which is a string, and an <code>alt</code> which is also a string.</p><p>As with other <a href=\"https://jonathansexton.me/blog/learn-typescript-data-types-from-zero-to-hero/\">data types</a>, if we deviate from the format we established for this variable, we run into errors.</p><p>Here we tried to add a new entry that was blank and we got the following error:</p><p><code>Type '{}' is missing the following properties from type '{ name: string; link: string; alt: string; }' : name, link, <sub>alt ts(2739)</sub></code></p><figure><img alt=\"image-3-1024x97\" height=\"97\" loading=\"lazy\" src=\"https://jonathansexton.me/blog/wp-content/uploads/2020/01/image-3-1024x97.png\" width=\"1024\"/></figure><p>We get similar errors if we try to add another entry with the wrong type of information:</p><p><code>{ name: 'Jonathan', link: 15, alt: false }</code> \u00a0\u274c</p><p><code>{ name: ['Jon','Marley'], link: `https://link123.net`, alt: null }</code> \u00a0\u274c</p><p><code>this.navLinks[0].img = '../../assets/img'</code> \u274c</p><p><code>this.navLinks[0].name = 'Barnaby'</code>\u2714\ufe0f</p><p>You get the idea though. Once we establish the format, TypeScript will hold us to that format and inform us if/when we deviate from it with an error.</p><p>Also, here's a few ways to define an array:</p><p><code>const arr1: Array&lt;any&gt; = ['Dave', 35, true];</code><em> // will allow us to have any number of elements with any type</em></p><p><code>const people: [string,string,string] = ['John', 'Sammy', 'Stephanie'];</code> <em>// will throw an error if more than 3 strings or any non string elements appear in the array</em></p><p><code>const people: Array&lt;string&gt; = ['Jimmy', 'Theresa', 'Stanley'];</code> <em>//will allow us to have any number of only string elements in our array</em></p><p>Objects work much the same way as arrays do in TypeScript. They can be explicitly defined with set types or you can let TypeScript do all the inferring. Here's a basic example of an object:</p><p><code>const person: {name:string, address: string, age: number} = {name: 'Willy', address: '123 Sunshine Ln', age: 35}</code></p><p>Again, on the left side we're declaring person as the variable name with the first set of curly braces defining the format we want our data to be in.</p><p>It is important to note that in objects, the order we define our properties in does not have to match the order of the format:</p><figure><img alt=\"image-5\" height=\"125\" loading=\"lazy\" src=\"https://jonathansexton.me/blog/wp-content/uploads/2020/01/image-5.png\" width=\"713\"/><figcaption>The properties do not have to match the order in which they were defined</figcaption></figure><h2 id=\"functions-parameters-arguments\">Functions, Parameters &amp; Arguments</h2><p>Some of the greatest benefits you'll see in TypeScript come when using functions.</p><p>Have you ever built a function to do a specific task only to find out it's not working as you intended?</p><p>While using TypeScript it won't be because you didn't get/send the correct type of data or use the correct number of parameters/arguments.</p><p>Here's a great example:</p><figure><img alt=\"image-1024x454\" height=\"454\" loading=\"lazy\" src=\"https://jonathansexton.me/blog/wp-content/uploads/2020/01/image-1024x454.png\" width=\"1024\"/><figcaption>A TypeScript function that should return a number</figcaption></figure><p>In our function we expect to receive 3 arguments when <code>calculator</code> executes. However, if we receive the wrong number of arguments (too few or too many) TypeScript will give us a nice error:</p><figure><img alt=\"image-4\" height=\"138\" loading=\"lazy\" src=\"https://jonathansexton.me/blog/wp-content/uploads/2020/01/image-4.png\" width=\"681\"/><figcaption>The error we get when calling a function with the incorrect amount/type of arguments</figcaption></figure><p>Likewise, if we receive the wrong type of data when executing this function TypeScript will generate an error and the function will not run.</p><p><code>calculator('12', '11', 'add) ; </code>\u274c</p><p>Now you may be saying to yourself <em>'So what? That's all well and good but it doesn't seem like that's a huge deal.' </em>But imagine that your application is dozens and dozens of files with many layers of abstractions.</p><p>A great example of this would be an Angular application with services, data models, multilevel components, and all the dependencies that go along with that. It becomes increasingly difficult to pinpoint where an error is coming from when your application gets to be large.</p><h2 id=\"that-s-all\">That's All</h2><p>Hopefully you can see the benefits of TypeScript now. There are plenty more than those I have outlined here and I encourage you to read the documentation if you want to find more.</p><p>You can find this article and others like it on my <a href=\"https://jonathansexton.me/blog\">blog</a>. I'd love for you to stop by!</p><p>While you\u2019re there why not sign up for my <strong>Newsletter</strong> \u00a0\u2013 \u00a0you can do that at the top right of the main blog page. I promise I\u2019ll never spam your inbox and your information will not be shared with anyone/site. I like to occasionally send out interesting resources I find, articles about web development, and a list of my newest posts.</p><p>If you haven\u2019t yet, you can also connect with me on social media! All of my links are also at the top right of that page as well. I love connecting with others and meeting new people so don\u2019t afraid to say hi. ?</p><p>Have an awesome day, friend, and happy coding!</p>\n</section>\n<hr/>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nTypeScript is one of the current hot topics in web development, and for good reasons.It allows us to type cast when declaring variables which means we explicitly set the type of data we expect back. Then it throws errors if the returned data is not the type we expected to get back, or if a function call has too few or too many arguments. And that's just a sampling of everything it offers.If you'd like an overview of the data types you will find it helpful to read my previous article. Reading that article isn't required but it will give you a great understanding of the data types and syntax for TypeScript.Before we start, it's important to note that TypeScript can be used in conjunction with a framework/library but it can also be used independent of a framework/library. TypeScript is the default in Angular projects and I have an article in the works about getting started with it.Also, this article assumes you have a basic understanding of JavaScript programming.So, now we're ready to get started with TypeScript and start making use of its awesome features.Let's dig in!Installing TypeScriptThere are two main ways to install TypeScript. \u00a0The first is through Visual Studio (not to be confused with Visual Studio Code) which is an IDE. \u00a0The 2015, 2017, and I believe 2019 versions come with TypeScript installed already.This is not the route I'll be covering today since I mainly use Visual Studio Code for all of my needs.The second way, and the way we'll focus on, is through NPM (Node Package Manager).If you don't already have NPM and/or Node installed (you get NPM when you install Node), now is a great time to do so as it's a requirement for the next steps (and by association a requirement to use TypeScript).The Node download page - it's a good idea to use the LTS version as it's the most stableOnce you have Node and NPM installed, open your terminal in VS Code and run the following command:npm install -g typescriptOnce it's finished installing, you'll see that 1 package has been added. You'll also see a message stating the version of TypeScript that was installed.This is everything you need to start compiling TypeScript to JavaScript.Now you're ready to start writing TypeScript!Starting A TypeScript ProjectLet's create a TypeScript project so we can take advantage of all those great features that come along with using it.In your editor of choice (I'm using VS Code) let's create an HTML file to be the visual side of our code. \u00a0Here's what my basic HTML file looks like:Basic HTML boilerplate with some placeholder textHonestly, we're just using this HTML so we can have something to look at on the page. What we're really concerned with is using the console.You'll notice I have app.js linked in the head of our index.html file.You're probably saying to yourself I thought this was an article about TypeScript?Well hold your horses, it is. I just want to highlight some of the differences between JavaScript and TypeScript (You'll learn where this file comes from down below).Below you'll see a simple variable declaration and a console log statement:A simple variable declaration and console log statementAs a side note, if you want to disable some ES-Lint rules you can place the rules at the top in comments like I've done above. \u00a0Or if you want to completely disable ES-Lint for that file only you can place /* eslint-disable */ at the top of the file.And here is the browser console:Our userName variable inside FireFoxLet's pretend that I'm building an application and for the userName I expect to always get a string back. \u00a0Along the way, I may make a mistake or my data may get mutated from another source.Now, userName is a number :(Now userName is a number!And here is the browser console showing the changes to userName that we likely didn't want to happen if this were a production application:The FireFox console showing the results of the variable mutationWhat if the returned userName was then passed into another function or used as a piece of a larger data puzzle?It would not only be a mess to figure out where the mutation occurred (especially if we had a larger application), but also would create an untold number of bugs in our code.Now, let's try that same experiment in TypeScript. \u00a0To do that, we'll need to create a new file with the .ts extension to denote a TypeScript file.I'll name mine app.ts to stay consistent with naming conventions and put the same code from our JavaScript file into our new TypeScript file.The same code from our JavaScript copied over into the TypeScript fileYou'll notice that I'm using type casting when declaring my variable now, and I'm explicitly telling TypeScript that this variable should point to a string value only.You'll also notice that I have an error line under userName when I'm reassigning its value.Compiling TypeScript With the CLITo see what this looks like in our console we have to compile it to JavaScript. We do that by running tsc app.ts in our VS Code console (you can also run the same command in any terminal as long as you're in the correct directory).When we run this command it will compile our TypeScript into JavaScript. It'll also generate another file with the same name, only with a .js extension.This is where that app.js file came from that I mentioned earlier in the article.To compile multiple files at once, just provide those names in your command, one after the other: tsc app.ts header.component.tsIt's also possible to compile multiple TypeScript files into a single JavaScript file by adding the --out flag:tsc *.ts --out index.jsThere\u2019s also a watch command which will recompile all of the TypeScript automatically anytime a change is detected. This keeps you from having to run the same command over and over:tsc *.ts\u200a--out app.js\u200a--watchHere's the output from that tsc app.ts command above:The error in my consoleThis error tells us that there's a problem with the reassignment of userName. Because we explicitly set our variable to be a string (even if I hadn't set the variable to a string the error would still occur because TypeScript infers data types) we cannot reassign it to a number.This is a great feature because it forces us to be explicit with our variable declarations and saves us from making mistakes that could prove annoying and time consuming. If you expect a particular type of data you should get that data, otherwise you should get an error.Using Explicitly Declarative Arrays and ObjectsLet's say I'm building a project and instead of manually setting the navigation links, I want to store that info in an array of objects.I'll expect a specific format for the information that's stored so it's consistent across all of the links.Here's how I can set a \"complex\" array in TypeScript:An array with a specific formatOn the left side we declare the name of the variable navLinks, followed by a colon. At the curly braces is where we start declaring the format of the information we expect in this array.We're telling TypeScript that we expect this array to contain an object or objects with these property names and types. We expect a name which is a string, a link which is a string, and an alt which is also a string.As with other data types, if we deviate from the format we established for this variable, we run into errors.Here we tried to add a new entry that was blank and we got the following error:Type '{}' is missing the following properties from type '{ name: string; link: string; alt: string; }' : name, link, alt ts(2739)We get similar errors if we try to add another entry with the wrong type of information:{ name: 'Jonathan', link: 15, alt: false } \u00a0\u274c{ name: ['Jon','Marley'], link: `https://link123.net`, alt: null } \u00a0\u274cthis.navLinks[0].img = '../../assets/img' \u274cthis.navLinks[0].name = 'Barnaby'\u2714\ufe0fYou get the idea though. Once we establish the format, TypeScript will hold us to that format and inform us if/when we deviate from it with an error.Also, here's a few ways to define an array:const arr1: Array<any> = ['Dave', 35, true]; // will allow us to have any number of elements with any typeconst people: [string,string,string] = ['John', 'Sammy', 'Stephanie']; // will throw an error if more than 3 strings or any non string elements appear in the arrayconst people: Array<string> = ['Jimmy', 'Theresa', 'Stanley']; //will allow us to have any number of only string elements in our arrayObjects work much the same way as arrays do in TypeScript. They can be explicitly defined with set types or you can let TypeScript do all the inferring. Here's a basic example of an object:const person: {name:string, address: string, age: number} = {name: 'Willy', address: '123 Sunshine Ln', age: 35}Again, on the left side we're declaring person as the variable name with the first set of curly braces defining the format we want our data to be in.It is important to note that in objects, the order we define our properties in does not have to match the order of the format:The properties do not have to match the order in which they were definedFunctions, Parameters & ArgumentsSome of the greatest benefits you'll see in TypeScript come when using functions.Have you ever built a function to do a specific task only to find out it's not working as you intended?While using TypeScript it won't be because you didn't get/send the correct type of data or use the correct number of parameters/arguments.Here's a great example:A TypeScript function that should return a numberIn our function we expect to receive 3 arguments when calculator executes. However, if we receive the wrong number of arguments (too few or too many) TypeScript will give us a nice error:The error we get when calling a function with the incorrect amount/type of argumentsLikewise, if we receive the wrong type of data when executing this function TypeScript will generate an error and the function will not run.calculator('12', '11', 'add) ; \u274cNow you may be saying to yourself 'So what? That's all well and good but it doesn't seem like that's a huge deal.' But imagine that your application is dozens and dozens of files with many layers of abstractions.A great example of this would be an Angular application with services, data models, multilevel components, and all the dependencies that go along with that. It becomes increasingly difficult to pinpoint where an error is coming from when your application gets to be large.That's AllHopefully you can see the benefits of TypeScript now. There are plenty more than those I have outlined here and I encourage you to read the documentation if you want to find more.You can find this article and others like it on my blog. I'd love for you to stop by!While you\u2019re there why not sign up for my Newsletter \u00a0\u2013 \u00a0you can do that at the top right of the main blog page. I promise I\u2019ll never spam your inbox and your information will not be shared with anyone/site. I like to occasionally send out interesting resources I find, articles about web development, and a list of my newest posts.If you haven\u2019t yet, you can also connect with me on social media! All of my links are also at the top right of that page as well. I love connecting with others and meeting new people so don\u2019t afraid to say hi. ?Have an awesome day, friend, and happy coding!\n\n                        \n                    \n                    \n                        \n                        \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 11924, "excerpt": "TypeScript is one of the current hot topics in web development, and for good\nreasons.\n\nIt allows us to type cast when declaring variables which means we explicitly set\nthe type of data we expect back. Then it throws errors if the returned data is\nnot the type we expected to get back, or if a function call has too few or too\nmany arguments. And that's just a sampling of everything it offers.\n\nIf you'd like an overview of the data types you will find it helpful to read my \nprevious article\n[https:", "siteName": "freeCodeCamp.org", "publishedTime": "2020-01-13T08:00:00.000Z", "id": "07d7ff41c560d597a7922302ebc7fcbbe6200485", "url": "https://www.freecodecamp.org/news/how-to-install-and-begin-using-typescript/", "domain": "freecodecamp.org", "date": "2023-12-27T18:07:30.134519", "resultUri": "http://localhost:3000/result/07d7ff41c560d597a7922302ebc7fcbbe6200485", "query": {"url": ["https://www.freecodecamp.org/news/how-to-install-and-begin-using-typescript/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "How to Install and Start Using TypeScript", "description": "TypeScript is one of the current hot topics in web development, and for good reasons. It allows us to type cast when declaring variables which means we explicitly set the type of data we expect back. Then it throws errors if the returned data is not the type we expected", "url": "https://www.freecodecamp.org/news/how-to-install-and-begin-using-typescript/", "image": "https://www.freecodecamp.org/news/content/images/2020/01/florian-klauer-mk7D-4UCfmg-unsplash-4.jpg", "image:width": "2000", "image:height": "2933"}, "twitter": {"card": "summary_large_image", "title": "How to Install and Start Using TypeScript", "description": "TypeScript is one of the current hot topics in web development, and for good reasons. It allows us to type cast when declaring variables which means we explicitly set the type of data we expect back. Then it throws errors if the returned data is not the type we expected", "url": "https://www.freecodecamp.org/news/how-to-install-and-begin-using-typescript/", "image": "https://www.freecodecamp.org/news/content/images/2020/01/florian-klauer-mk7D-4UCfmg-unsplash-4.jpg", "label1": "Written by", "data1": "Jonathan Sexton", "label2": "Filed under", "data2": "Typescript, JavaScript, Learning To Code, Coding, Programming", "site": "@freecodecamp", "creator": "@jj_goose"}}}