{"title": "Up & Going with Nuxt.js, Bulma and  Sass", "byline": "Eduardo Vedes", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>Up &amp; Going with Nuxt.js, Bulma and  Sass</h1>\n<section>\n<section data-test-label=\"post-content\">\n<p><strong>TL;DR: Overcome Nuxt.js, Bulma and Sass shenanigans with this quick article to help you start developing your next App in less than 10 minutes.</strong></p><p>Hi everyone \u2764\ufe0f! Few days ago I found myself struggling a bit to put <strong>Nuxt.js</strong>, <strong>Bulma</strong> and <strong>Sass</strong> to work correctly and the info I found on google didn't help too much. </p><p>Most of the configurations I found were not working, because they were outdated or didn't explain quite well how to do it. So I deep dived a little bit on this subject and decided to write an article to help you do the same in less than 10 minutes.</p><p>Let's have some fun and get our hands dirty while grokking a few concepts needed to do this.</p><h2 id=\"1-scaffolding-nuxt-js\">1. Scaffolding Nuxt.js</h2><p>Nowadays, to get started quickly with Nuxt.js we use a scaffolding tool called <strong><a href=\"https://github.com/nuxt/create-nuxt-app\">create-nuxt-app</a></strong>. Please make sure you have <strong><a href=\"https://www.npmjs.com/package/npx\">npx</a></strong> installed on your machine.</p><p>Let's open a terminal and do: <code>npx create-nuxt-app nuxt-bulma-sass</code>, where <code>nuxt-bulma-sass</code> is the name of the project we're scaffolding for the purpose of this article.</p><p><strong>create-nuxt-app</strong> will ask you some questions before creating the scaffold. For the purpose of this article I've chosen the following setup:</p><figure><img alt=\"bulma2\" height=\"192\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2019/06/bulma2.png\" width=\"800\"/><figcaption>create-nuxt-app init questions</figcaption></figure><p>So, the next step will be to change directory into our project folder:</p><p><code>cd nuxt-bulma-sass</code></p><p>and launch the project with: <code>yarn run dev</code>. (you can also use npm if you like it)</p><p>At this point we have our project running:</p><figure><img alt=\"bulma3\" height=\"359\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2019/06/bulma3.png\" width=\"762\"/></figure><p>And if we open our browser on localhost:3000 we'll be getting this screen:</p><figure><img alt=\"Screen-Shot-2019-06-14-at-09.29.05\" height=\"1063\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2019/06/Screen-Shot-2019-06-14-at-09.29.05.png\" width=\"1471\"/><figcaption>localhost:3000 pages/index.vue</figcaption></figure><p>So at this point we have the pages/index.vue on the screen, which is the first page to be rendered in your project by default.</p><p>Let's replace the content of this file by the following one:</p><figure><img alt=\"carbon1\" height=\"444\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2019/06/carbon1.png\" width=\"956\"/></figure><p>If we inspect our page in the browser we see we got <strong>bulma</strong> installed because section is formatted according to it.</p><figure><img alt=\"Screen-Shot-2019-06-14-at-09.45.03\" height=\"1063\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2019/06/Screen-Shot-2019-06-14-at-09.45.03.png\" width=\"1471\"/></figure><p>Easy peasy lemon squeezy.</p><p>Let's add a class and choose some colors:</p><figure><img alt=\"carbon-2\" height=\"852\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2019/06/carbon-2.png\" width=\"878\"/></figure><figure><img alt=\"Screen-Shot-2019-06-14-at-09.47.55\" height=\"1063\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2019/06/Screen-Shot-2019-06-14-at-09.47.55.png\" width=\"1471\"/></figure><p>What if we want to nest .<em>hello-nuxt</em> inside .<em>edo-theme</em>? We're going to need SASS to be able to do it.</p><h2 id=\"2-adding-sass\">2. Adding Sass</h2><p>So, to add Sass to our project we'll need to stop our running app (Ctrl+c) and do the following:</p><p><code>yarn add node-sass sass-loader --dev</code></p><p>These are the two packages needed as dev-dependencies to be able to have Sass in our boilerplate.</p><p>Note that we're adding it as a dev dependency because we only need it while developing and at build time. After that <strong>Sass</strong> is transformed into <strong>CSS</strong> and we don't need it anymore.</p><p>Let's sneak peek my package.json for you to check it:</p><figure><img alt=\"Screen-Shot-2019-06-14-at-09.57.38\" height=\"1530\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2019/06/Screen-Shot-2019-06-14-at-09.57.38.png\" width=\"1832\"/><figcaption>package.json with sass added to the project</figcaption></figure><p>Okay everyone \u2764\ufe0f, at this point we're able to nest the classes we wanted to.</p><p>Let's run our boilerplate again: <code>yarn run dev</code> and do the tweaks needed ?</p><figure><img alt=\"carbon--1-\" height=\"852\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2019/06/carbon--1-.png\" width=\"878\"/></figure><figure><img alt=\"Screen-Shot-2019-06-14-at-10.05.23\" height=\"1063\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2019/06/Screen-Shot-2019-06-14-at-10.05.23.png\" width=\"1471\"/></figure><p>Noice! We already did a lot today! Go grab a coffee \u2615, I'll wait for you here ?</p><p>Okay, let's abstract things a bit and create this file <em>~/assets/scss/main.scss</em> and put there some classes and variables:</p><figure><img alt=\"carbon-1\" height=\"648\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2019/06/carbon-1.png\" width=\"596\"/><figcaption>new ~/assets/scss/main.scss</figcaption></figure><figure><img alt=\"carbon--1--1\" height=\"648\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2019/06/carbon--1--1.png\" width=\"878\"/></figure><p>Nice! It's working!</p><p>Now we have two problems: </p><ol><li>We need to import main.scss into each one of our pages/components, which is not nice. We want to import it only once and have it available in all our &lt;style&gt; \"bags\"</li><li>We can't use bulma sass variables (try to change the <strong>background-color</strong> from the .edo-theme class from <strong>$edo</strong> to <strong>$primary</strong>. We want to have bulma sass variables in order to override them and create new themes from there.</li></ol><p>So... what if we want to use <a href=\"https://bulma.io/documentation/overview/colors/\">bulma sass variables</a>? </p><figure><img alt=\"Screen-Shot-2019-06-14-at-10.13.31\" height=\"1530\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2019/06/Screen-Shot-2019-06-14-at-10.13.31.png\" width=\"1832\"/><figcaption>bulma sass variables (colors doc)</figcaption></figure><h2 id=\"3-here-comes-the-hard-part-which-took-me-some-time-to-understand-\">3. Here comes the hard part which took me some time to understand.</h2><p>Bulma is being imported in the create-nuxt-app scaffold. When you do <code>yarn run dev</code> there's this hidden .<strong>nuxt</strong> folder into your <strong>nuxt-bulma-sass</strong> folder.</p><p>If you take a look at App.js there:</p><figure><img alt=\"nuxt2\" height=\"676\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2019/06/nuxt2.png\" width=\"879\"/></figure><p>You'll see that bulma is being imported from the node-modules when you launch dev environment.</p><figure><img alt=\"nuxt-bulma\" height=\"1416\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2019/06/nuxt-bulma.png\" width=\"1718\"/><figcaption>.nuxt/App.js</figcaption></figure><p>So, importing bulma while launching nuxt.js scaffold is not okay if we want to override bulma sass variables.</p><p>Don't despair, you don't have to throw your project away. Show must go on ?</p><h2 id=\"4-using-bulma-the-right-way\">4. Using Bulma the right way ?</h2><p>How do we get bulma into our boilerplate the way we need? </p><p>Let's start by commenting out @nuxtjs/bulma from the <strong>nuxt.config.js</strong> modules section (keep it on the package.json because what it does there is install bulma, it would be the same, AFAIK, as doing <code>yarn add bulma</code>).</p><p>Stop your running environment and do <code>yarn run dev</code> again.</p><p>If you take a look into <em>./nuxt/App</em> you'll see that it's not importing bulma anymore.</p><p>So now what we have to do is to go to our main.scss file and import it in the last line of the file.</p><figure><img alt=\"carbon--4-\" height=\"784\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2019/06/carbon--4-.png\" width=\"846\"/></figure><p><em>I've also imported bulma/sass/utilities/_all.sass </em>for us to have the sass variables with the colors there.</p><figure><img alt=\"Screen-Shot-2019-06-14-at-11.12.24\" height=\"255\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2019/06/Screen-Shot-2019-06-14-at-11.12.24.png\" width=\"364\"/><figcaption>/bulma/sass/utilities folder</figcaption></figure><p>Of course later you can improve it by only importing exactly what you need. But that's another story for another article ?</p><p>Well well, check your browser and see it working.</p><figure><img alt=\"Screen-Shot-2019-06-14-at-11.19.16\" height=\"1063\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2019/06/Screen-Shot-2019-06-14-at-11.19.16.png\" width=\"1471\"/></figure><h2 id=\"5-yeah-it-s-working-baby-\">5. Yeah! It's working baby!</h2><p><strong>Now the last problem!</strong> We don't want to import it into our &lt;style&gt; scaffold each time we want to use it. We want it to be available as a global anywhere in the boilerplate.</p><p>The solution for this is to import a package called <strong><a href=\"https://www.npmjs.com/package/@nuxtjs/style-resources\">@nuxtjs/style-resources</a>.</strong> </p><p>This package allows you to share variables, mixins, function across all files. No more imports needed on your &lt;style&gt; tag of each component or page.</p><p>Just stop \u00a0your dev environment and do:</p><p><code>yarn add @nuxjs/style-resources</code> \u00a0Note: don't try to install it as a dev-dependency because it won't work correctly.</p><p>Also, open your nuxt.config.js file and add '@nuxtjs/style-resources' to your modules key/value.</p><p>You also need to add <em>styleResources. </em>Check how mine is after that ?</p><figure><img alt=\"carbon--5-\" height=\"648\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2019/06/carbon--5-.png\" width=\"768\"/></figure><p>Do <code>yarn run dev</code> again and... no errors... but...</p><p><strong>CSS classes not being imported anymore.</strong></p><h2 id=\"6-last-tweak\">6. Last tweak</h2><p><strong>What's happening here? </strong></p><p>So, from the point you import and use <em>@nuxt/style-resources</em> you can't import actual styles from the main.scss anymore just because they won't exist in the actual build.</p><p>So, to solve this problem:</p><p>Stop your running the boilerplate again and open your nuxt.config.js:</p><p>Add the main.scss path to the global css array, like this:</p><figure><img alt=\"carbon--6-\" height=\"682\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2019/06/carbon--6-.png\" width=\"768\"/></figure><p>This way we make sure that global css styles are also imported into the scope of our templates.</p><p>From this point on of course you can establish an architectural pattern for your css files, create independent variable, functions and mixins files and compose stuff with some extra @imports.</p><p>In the styleResources object you have the option to include more files as you need them in your boilerplate.</p><p>Again, that's beyond the scope of this article which was to show you how to unblock from this tiny complexities that nuxt and its ecosystems introduce in our App's flow.</p><h2 id=\"hope-you-have-enjoyed-it-\">Hope you have enjoyed it! \u2764\ufe0f</h2><h2 id=\"be-strong-and-code-on\">Be Strong and Code On ?</h2><h2 id=\"7-last-but-not-least\">7. Last but not least</h2><p>You can clone my repo and play around with it.</p><p>Thank you very much <a href=\"https://twitter.com/ruiposse\">@ruiposse</a> for reviewing this article and for mentoring me into the vue ecosystem. \u2764\ufe0f</p><h2 id=\"8-bibliography\">8. Bibliography</h2><p>02. <a href=\"https://github.com/nuxt-community/style-resources-module\">Nuxt Style Resources</a></p><p>04. Some hours around google getting frustrated and seeing people also frustrated with this ?</p><hr/><p>Hey! I'm Edo, a frontend engineer dedicated to the JavaScript stack. Nowadays I work mostly with React, Vue and all the ecosystem around. </p><p>If you liked this article you can read more <a href=\"https://www.freecodecamp.org/news/author/evedes/\">here</a>.</p>\n</section>\n<hr/>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nTL;DR: Overcome Nuxt.js, Bulma and Sass shenanigans with this quick article to help you start developing your next App in less than 10 minutes.Hi everyone \u2764\ufe0f! Few days ago I found myself struggling a bit to put Nuxt.js, Bulma and Sass to work correctly and the info I found on google didn't help too much. Most of the configurations I found were not working, because they were outdated or didn't explain quite well how to do it. So I deep dived a little bit on this subject and decided to write an article to help you do the same in less than 10 minutes.Let's have some fun and get our hands dirty while grokking a few concepts needed to do this.1. Scaffolding Nuxt.jsNowadays, to get started quickly with Nuxt.js we use a scaffolding tool called create-nuxt-app. Please make sure you have npx installed on your machine.Let's open a terminal and do: npx create-nuxt-app nuxt-bulma-sass, where nuxt-bulma-sass is the name of the project we're scaffolding for the purpose of this article.create-nuxt-app will ask you some questions before creating the scaffold. For the purpose of this article I've chosen the following setup:create-nuxt-app init questionsSo, the next step will be to change directory into our project folder:cd nuxt-bulma-sassand launch the project with: yarn run dev. (you can also use npm if you like it)At this point we have our project running:And if we open our browser on localhost:3000 we'll be getting this screen:localhost:3000 pages/index.vueSo at this point we have the pages/index.vue on the screen, which is the first page to be rendered in your project by default.Let's replace the content of this file by the following one:If we inspect our page in the browser we see we got bulma installed because section is formatted according to it.Easy peasy lemon squeezy.Let's add a class and choose some colors:What if we want to nest .hello-nuxt inside .edo-theme? We're going to need SASS to be able to do it.2. Adding SassSo, to add Sass to our project we'll need to stop our running app (Ctrl+c) and do the following:yarn add node-sass sass-loader --devThese are the two packages needed as dev-dependencies to be able to have Sass in our boilerplate.Note that we're adding it as a dev dependency because we only need it while developing and at build time. After that Sass is transformed into CSS and we don't need it anymore.Let's sneak peek my package.json for you to check it:package.json with sass added to the projectOkay everyone \u2764\ufe0f, at this point we're able to nest the classes we wanted to.Let's run our boilerplate again: yarn run dev and do the tweaks needed ?Noice! We already did a lot today! Go grab a coffee \u2615, I'll wait for you here ?Okay, let's abstract things a bit and create this file ~/assets/scss/main.scss and put there some classes and variables:new ~/assets/scss/main.scssNice! It's working!Now we have two problems: We need to import main.scss into each one of our pages/components, which is not nice. We want to import it only once and have it available in all our <style> \"bags\"We can't use bulma sass variables (try to change the background-color from the .edo-theme class from $edo to $primary. We want to have bulma sass variables in order to override them and create new themes from there.So... what if we want to use bulma sass variables? bulma sass variables (colors doc)3. Here comes the hard part which took me some time to understand.Bulma is being imported in the create-nuxt-app scaffold. When you do yarn run dev there's this hidden .nuxt folder into your nuxt-bulma-sass folder.If you take a look at App.js there:You'll see that bulma is being imported from the node-modules when you launch dev environment..nuxt/App.jsSo, importing bulma while launching nuxt.js scaffold is not okay if we want to override bulma sass variables.Don't despair, you don't have to throw your project away. Show must go on ?4. Using Bulma the right way ?How do we get bulma into our boilerplate the way we need? Let's start by commenting out @nuxtjs/bulma from the nuxt.config.js modules section (keep it on the package.json because what it does there is install bulma, it would be the same, AFAIK, as doing yarn add bulma).Stop your running environment and do yarn run dev again.If you take a look into ./nuxt/App you'll see that it's not importing bulma anymore.So now what we have to do is to go to our main.scss file and import it in the last line of the file.I've also imported bulma/sass/utilities/_all.sass for us to have the sass variables with the colors there./bulma/sass/utilities folderOf course later you can improve it by only importing exactly what you need. But that's another story for another article ?Well well, check your browser and see it working.5. Yeah! It's working baby!Now the last problem! We don't want to import it into our <style> scaffold each time we want to use it. We want it to be available as a global anywhere in the boilerplate.The solution for this is to import a package called @nuxtjs/style-resources. This package allows you to share variables, mixins, function across all files. No more imports needed on your <style> tag of each component or page.Just stop \u00a0your dev environment and do:yarn add @nuxjs/style-resources \u00a0Note: don't try to install it as a dev-dependency because it won't work correctly.Also, open your nuxt.config.js file and add '@nuxtjs/style-resources' to your modules key/value.You also need to add styleResources. Check how mine is after that ?Do yarn run dev again and... no errors... but...CSS classes not being imported anymore.FML ??\u200d?\u2620\ufe0f6. Last tweakWhat's happening here? So, from the point you import and use @nuxt/style-resources you can't import actual styles from the main.scss anymore just because they won't exist in the actual build.So, to solve this problem:Stop your running the boilerplate again and open your nuxt.config.js:Add the main.scss path to the global css array, like this:This way we make sure that global css styles are also imported into the scope of our templates.From this point on of course you can establish an architectural pattern for your css files, create independent variable, functions and mixins files and compose stuff with some extra @imports.In the styleResources object you have the option to include more files as you need them in your boilerplate.Again, that's beyond the scope of this article which was to show you how to unblock from this tiny complexities that nuxt and its ecosystems introduce in our App's flow.Hope you have enjoyed it! \u2764\ufe0fBe Strong and Code On ?7. Last but not leastYou can clone my repo and play around with it.https://github.com/evedes/nuxt-bulma-sassThank you very much @ruiposse for reviewing this article and for mentoring me into the vue ecosystem. \u2764\ufe0f8. Bibliography01. Nuxtjs.org02. Nuxt Style Resources03. Bulma.io04. Some hours around google getting frustrated and seeing people also frustrated with this ?Hey! I'm Edo, a frontend engineer dedicated to the JavaScript stack. Nowadays I work mostly with React, Vue and all the ecosystem around. If you liked this article you can read more here.\n\n                        \n                    \n                    \n                        \n                        \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 7766, "excerpt": "TL;DR: Overcome Nuxt.js, Bulma and Sass shenanigans with this quick article to\nhelp you start developing your next App in less than 10 minutes.\n\nHi everyone \u2764\ufe0f! Few days ago I found myself struggling a bit to put Nuxt.js, \nBulma and Sass to work correctly and the info I found on google didn't help too\nmuch. \n\nMost of the configurations I found were not working, because they were outdated\nor didn't explain quite well how to do it. So I deep dived a little bit on this\nsubject and decided to write", "siteName": "freeCodeCamp.org", "publishedTime": "2019-06-15T11:09:27.000Z", "id": "177d4771faf8bfaa3cdcb106b4ebcfbf36a2901d", "url": "https://www.freecodecamp.org/news/up-goind-with-nuxt-js-bulma-and-sass/", "domain": "freecodecamp.org", "date": "2023-12-27T18:09:09.067322", "resultUri": "http://localhost:3000/result/177d4771faf8bfaa3cdcb106b4ebcfbf36a2901d", "query": {"url": ["https://www.freecodecamp.org/news/up-goind-with-nuxt-js-bulma-and-sass/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "Up & Going with Nuxt.js, Bulma and  Sass", "description": "TL;DR: Overcome Nuxt.js, Bulma and Sass shenanigans with this quick article to help you start developing your next App in less than 10 minutes. Hi everyone \u2764\ufe0f! Few days ago I found myself struggling a bit to put Nuxt.js,  Bulma and Sass to work correctly and the info I", "url": "https://www.freecodecamp.org/news/up-goind-with-nuxt-js-bulma-and-sass/", "image": "https://cdn-media-2.freecodecamp.org/w1280/5f9ca202740569d1a4ca51f3.jpg", "image:width": "1280", "image:height": "853"}, "twitter": {"card": "summary_large_image", "title": "Up & Going with Nuxt.js, Bulma and  Sass", "description": "TL;DR: Overcome Nuxt.js, Bulma and Sass shenanigans with this quick article to help you start developing your next App in less than 10 minutes. Hi everyone \u2764\ufe0f! Few days ago I found myself struggling a bit to put Nuxt.js,  Bulma and Sass to work correctly and the info I", "url": "https://www.freecodecamp.org/news/up-goind-with-nuxt-js-bulma-and-sass/", "image": "https://cdn-media-2.freecodecamp.org/w1280/5f9ca202740569d1a4ca51f3.jpg", "label1": "Written by", "data1": "Eduardo Vedes", "label2": "Filed under", "data2": "Vue, Programming, freeCodeCamp, Bulma, Sass, JavaScript, 100daysofcode, Nuxtjs", "site": "@freecodecamp", "creator": "@eduardovedes"}}}