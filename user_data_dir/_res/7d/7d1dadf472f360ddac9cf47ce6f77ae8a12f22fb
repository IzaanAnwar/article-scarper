{"title": "JavaScript\u2019s arrow functions explained by going down a slide", "byline": "freeCodeCamp.org", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>JavaScript\u2019s arrow functions explained by going down a slide</h1>\n<section>\n<section data-test-label=\"post-content\">\n<p>by Kevin Kononenko</p><h4 id=\"if-you-have-ever-gone-down-a-water-slide-then-you-can-understand-arrow-functions-\">If you have ever gone down a water slide, then you can understand arrow functions.</h4><p>If you have been using JavaScript for a few years, you are probably familiar with this syntax:</p><pre><code>function addTen(num){  return num + 10;});</code></pre><pre><code>console.log(addTen(2));//12</code></pre><p>This function syntax was popular in ES5, or ECMAScript 5.</p><p>There is one major advantage to this syntax: It includes the word function, so it is obvious that you are writing a function!</p><p>A function clearly takes in anywhere from 0 to many arguments and runs a specific set of statements every time that it is called.</p><p>But then the world of JavaScript took a leap forward with ES6 in 2015.</p><p>Now, the same function as above would be written like this:</p><pre><code>let addTen = (num) =&gt; num + 10;</code></pre><pre><code>console.log(addTen(2));//12</code></pre><p>Now, there is no <em>function</em> keyword, and no return statement! Functions in ES6 are much more terse, or concise.</p><p>So, since those obvious clues have been removed, you might be having a little bit of a hard time with understanding the different parts of arrow functions.</p><p>Fortunately, as you will soon see with a few animations, arrow functions are pretty easy to understand once you learn to visualize the arrow \u201c=&gt;\u201d in a new way.</p><p>So here is how arrow functions are just like a water slide. In order to fully understand this tutorial, it might help to know about <a href=\"https://blog.codeanalogies.com/2018/02/20/javascript-map-method-explained-by-going-on-a-hike/\" rel=\"noopener\">map functions</a> and <a href=\"https://blog.codeanalogies.com/2017/11/22/how-javascript-variable-scoping-is-just-like-multiple-levels-of-government/\" rel=\"noopener\">scoping</a>.</p><h3 id=\"arrow-functions-visualized\">Arrow Functions Visualized</h3><p>Let\u2019s explore the addTen function a little more deeply.</p><pre><code>let addTen = (num) =&gt; num + 10;</code></pre><pre><code>console.log(addTen(2));//12</code></pre><p>This function will transform one parameter and output that parameter with 10 added.</p><p>The transformation happens with that subtle \u201c=&gt;\u201d arrow.</p><p>I like to transform that arrow into a tube slide in my mind to show what is actually happening. Here is what I mean:</p><figure><img alt=\"Ps5SxrF558e8ywvcBoSFDzNQUKwussni3Ci-\" height=\"411\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/Ps5SxrF558e8ywvcBoSFDzNQUKwussni3Ci-\" width=\"730\"/></figure><p>The equals sign is like the tube slide and the arrow is like the landing pad.</p><p>Arrow functions follow this pattern:</p><p>(parameters) =&gt; {statements}</p><p>So let\u2019s add those to the diagram with our addTen function example.</p><figure><img alt=\"fXH4R-oTUpaYcc8kWG3nhLRuBmL5LlirC1o-\" height=\"411\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/fXH4R-oTUpaYcc8kWG3nhLRuBmL5LlirC1o-\" width=\"730\"/></figure><p>The last thing we need to show is how the parameter, which is 10 in this case, goes down the slide and becomes available in the statements of the function. Here\u2019s what that looks like.</p><figure><img alt=\"eS7jMV7kl-h6mChbh1VVJ9Rq5HbDk6ArTM6R\" height=\"400\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/eS7jMV7kl-h6mChbh1VVJ9Rq5HbDk6ArTM6R\" width=\"600\"/></figure><p>That\u2019s all it is! Pretty straightforward.</p><p>Now, let\u2019s look at an example where there are two different parameters. Here is our new function:</p><pre><code>let multiply = (num1, num2) =&gt; {return num1 * num2};</code></pre><pre><code>console.log(multiply(2, 10));//20</code></pre><p>In this case we are just multiplying the two parameters together. Both will go down the slide together. Like this:</p><figure><img alt=\"dsHfwfhAlIBdb3jU7erDG0lSf-6dvWv6DAxr\" height=\"411\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/dsHfwfhAlIBdb3jU7erDG0lSf-6dvWv6DAxr\" width=\"730\"/></figure><p>There\u2019s one more example you should know about- combining the map() method with arrow functions.</p><p>The map() method will send every element in an array into the arrow function, in order.</p><p>Let\u2019s go through an example: imagine that you have an array of numbers, and you want to get the square root of each one.</p><p>Here\u2019s the code.</p><pre><code>let nums = [1, 4, 9];</code></pre><pre><code>let squares = nums.map((num) =&gt; {  return Math.sqrt(num);});</code></pre><pre><code>console.log (squares)// [1, 2, 3]</code></pre><p>You need to know a little about the map method to understand this one. But, you will probably notice the terse syntax yet again \u2014 the map() method is much shorter than writing a for() loop.</p><p>Here\u2019s what is happening in this code:</p><figure><img alt=\"NiM1EAFP57EsIPOVr-Q5bQUD7AgCkHgK7b5B\" height=\"400\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/NiM1EAFP57EsIPOVr-Q5bQUD7AgCkHgK7b5B\" width=\"600\"/></figure><ol><li>There are three elements in the <em>nums</em> array, so the <em>num</em> parameter goes down the slide 3 times.</li><li>The Math.sqrt() method takes the square root of the number each time.</li><li>The result is stored in the <em>squares</em> array each time.</li></ol><h3 id=\"the-difference-between-arrow-functions-and-traditional-functions\">The Difference Between Arrow Functions And Traditional Functions</h3><p>You might be wondering\u2026 is this simply a difference in syntax?</p><p>Actually, there is one important way that the traditional ES5 functions and ES6 functions work differently.</p><p>The big change is that arrow functions do not have their own scope. Therefore, if you try to use the <em>this</em> keyword, you will be surprised when it does not refer to the scope of the arrow function.</p><p>To go back to our slide analogy, this means that <em>this</em> is the same at the top and bottom of the slide. If we were using ES5 functions, then <em>this</em> would be different at the top and bottom of the slide.</p><p>To quickly recognize this in code, just look for the <em>function</em> keyword. If you see it, that means that a new scope is being created. If not, assume that you are using the scope of the enclosing function.</p><h3 id=\"enjoy-this-visual-tutorial\">Enjoy this Visual Tutorial?</h3><p>If you enjoyed this tutorial, give it a \u201cclap\u201d! Or, if you would like to read more visual tutorials about HTML, CSS and JavaScript, check out the <a href=\"http://codeanalogies.com/\" rel=\"noopener\">main CodeAnalogies site</a> for 50+ tutorials.</p>\n</section>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nby Kevin KononenkoIf you have ever gone down a water slide, then you can understand arrow functions.If you have been using JavaScript for a few years, you are probably familiar with this syntax:function addTen(num){  return num + 10;});console.log(addTen(2));//12This function syntax was popular in ES5, or ECMAScript 5.There is one major advantage to this syntax: It includes the word function, so it is obvious that you are writing a function!A function clearly takes in anywhere from 0 to many arguments and runs a specific set of statements every time that it is called.But then the world of JavaScript took a leap forward with ES6 in 2015.Now, the same function as above would be written like this:let addTen = (num) => num + 10;console.log(addTen(2));//12Now, there is no function keyword, and no return statement! Functions in ES6 are much more terse, or concise.So, since those obvious clues have been removed, you might be having a little bit of a hard time with understanding the different parts of arrow functions.Fortunately, as you will soon see with a few animations, arrow functions are pretty easy to understand once you learn to visualize the arrow \u201c=>\u201d in a new way.So here is how arrow functions are just like a water slide. In order to fully understand this tutorial, it might help to know about map functions and scoping.Arrow Functions VisualizedLet\u2019s explore the addTen function a little more deeply.let addTen = (num) => num + 10;console.log(addTen(2));//12This function will transform one parameter and output that parameter with 10 added.The transformation happens with that subtle \u201c=>\u201d arrow.I like to transform that arrow into a tube slide in my mind to show what is actually happening. Here is what I mean:The equals sign is like the tube slide and the arrow is like the landing pad.Arrow functions follow this pattern:(parameters) => {statements}So let\u2019s add those to the diagram with our addTen function example.The last thing we need to show is how the parameter, which is 10 in this case, goes down the slide and becomes available in the statements of the function. Here\u2019s what that looks like.That\u2019s all it is! Pretty straightforward.Now, let\u2019s look at an example where there are two different parameters. Here is our new function:let multiply = (num1, num2) => {return num1 * num2};console.log(multiply(2, 10));//20In this case we are just multiplying the two parameters together. Both will go down the slide together. Like this:There\u2019s one more example you should know about- combining the map() method with arrow functions.The map() method will send every element in an array into the arrow function, in order.Let\u2019s go through an example: imagine that you have an array of numbers, and you want to get the square root of each one.Here\u2019s the code.let nums = [1, 4, 9];let squares = nums.map((num) => {  return Math.sqrt(num);});console.log (squares)// [1, 2, 3]You need to know a little about the map method to understand this one. But, you will probably notice the terse syntax yet again \u2014 the map() method is much shorter than writing a for() loop.Here\u2019s what is happening in this code:There are three elements in the nums array, so the num parameter goes down the slide 3 times.The Math.sqrt() method takes the square root of the number each time.The result is stored in the squares array each time.The Difference Between Arrow Functions And Traditional FunctionsYou might be wondering\u2026 is this simply a difference in syntax?Actually, there is one important way that the traditional ES5 functions and ES6 functions work differently.The big change is that arrow functions do not have their own scope. Therefore, if you try to use the this keyword, you will be surprised when it does not refer to the scope of the arrow function.To go back to our slide analogy, this means that this is the same at the top and bottom of the slide. If we were using ES5 functions, then this would be different at the top and bottom of the slide.To quickly recognize this in code, just look for the function keyword. If you see it, that means that a new scope is being created. If not, assume that you are using the scope of the enclosing function.Enjoy this Visual Tutorial?If you enjoyed this tutorial, give it a \u201cclap\u201d! Or, if you would like to read more visual tutorials about HTML, CSS and JavaScript, check out the main CodeAnalogies site for 50+ tutorials.\n\n                        \n                    \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 4998, "excerpt": "by Kevin Kononenko\n\nJavaScript\u2019s arrow functions explained by going down a slide\nIf you have ever gone down a water slide, then you can understand arrow\nfunctions.\nIf you have been using JavaScript for a few years, you are probably familiar\nwith this syntax:\n\nfunction addTen(num){  return num + 10;});\n\nconsole.log(addTen(2));//12\n\nThis function syntax was popular in ES5, or ECMAScript 5.\n\nThere is one major advantage to this syntax: It includes the word function, so\nit is obvious that you are wr", "siteName": "freeCodeCamp.org", "publishedTime": "2019-04-24T22:23:35.000Z", "id": "7d1dadf472f360ddac9cf47ce6f77ae8a12f22fb", "url": "https://www.freecodecamp.org/news/javascripts-arrow-functions-explained-by-going-down-a-slide-2eb8ee3c45e/", "domain": "freecodecamp.org", "date": "2023-12-27T18:11:22.729362", "resultUri": "http://localhost:3000/result/7d1dadf472f360ddac9cf47ce6f77ae8a12f22fb", "query": {"url": ["https://www.freecodecamp.org/news/javascripts-arrow-functions-explained-by-going-down-a-slide-2eb8ee3c45e/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "JavaScript\u2019s arrow functions explained by going down a slide", "description": "by Kevin Kononenko JavaScript\u2019s arrow functions explained by going down a slide If you have ever gone down a water slide, then you can understand arrow functions. If you have been using JavaScript for a few years, you are probably familiar with this syntax: function addTen(num){  return num +", "url": "https://www.freecodecamp.org/news/javascripts-arrow-functions-explained-by-going-down-a-slide-2eb8ee3c45e/", "image": "https://cdn-media-1.freecodecamp.org/images/1*HVh2O4VIKLxLoPH9CjZztA.jpeg", "image:width": "800", "image:height": "599"}, "twitter": {"card": "summary_large_image", "title": "JavaScript\u2019s arrow functions explained by going down a slide", "description": "by Kevin Kononenko JavaScript\u2019s arrow functions explained by going down a slide If you have ever gone down a water slide, then you can understand arrow functions. If you have been using JavaScript for a few years, you are probably familiar with this syntax: function addTen(num){  return num +", "url": "https://www.freecodecamp.org/news/javascripts-arrow-functions-explained-by-going-down-a-slide-2eb8ee3c45e/", "image": "https://cdn-media-1.freecodecamp.org/images/1*HVh2O4VIKLxLoPH9CjZztA.jpeg", "label1": "Written by", "data1": "freeCodeCamp.org", "label2": "Filed under", "data2": "JavaScript, Web Development, Coding, Tech, Programming", "site": "@freecodecamp"}}}