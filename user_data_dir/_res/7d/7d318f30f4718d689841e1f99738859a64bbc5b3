{"title": "How to set up the debugger for Chrome extension in Visual Studio Code", "byline": "freeCodeCamp.org", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>How to set up the debugger for Chrome extension in Visual Studio Code</h1>\n<section>\n<section data-test-label=\"post-content\">\n<p>by Victor A. Requena</p><p>Debugging your web applications with Visual Studio Code makes you more efficient. It helps you save a lot of time and keeps your code cleaner. This is because you don\u2019t have to write a bunch of <code>console.log</code>s and you can go through your code execution line by line. But if you\u2019re here, you probably know the benefits of debugging web applications. So let\u2019s begin\u2026</p><h3 id=\"getting-set-up\">Getting set up</h3><p>The first thing you need to do is install the <a href=\"https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome\" rel=\"noopener\">Debugger for Chrome extension</a>. After you\u2019ve installed it, you\u2019re almost ready to go. The next thing you need to do is create a launch file for the Visual Studio Code Debugger. This file contains the debugger\u2019s different configurations for your project.</p><p>You can create the launch file by going to the debug section in the Activity Bar and clicking the gear icon.</p><p>A list of options will prompt you to select the \u201cChrome\u201d one.</p><figure><img alt=\"gV9J3xLjSklXcHaK4QdXWXzkkf1t84eh5OFO\" height=\"472\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/gV9J3xLjSklXcHaK4QdXWXzkkf1t84eh5OFO\" width=\"711\"/><figcaption>Like this.</figcaption></figure><p>After you\u2019ve done this, you\u2019re going to have a <code>.vscode</code> directory with a <code>launch.json</code> file.</p><h3 id=\"configurations\">Configurations</h3><p>There are two kinds of Chrome debugging configurations: <code>launch</code> and <code>attach</code>. You can set this in the <code>request</code> option inside every configuration object.</p><h4 id=\"launch\">Launch</h4><p>The launch configuration <em>launches</em> a Chrome instance running a specified file or URL. If you specify a URL, you have to set <code>webRoot</code> to the directory that files are served from. This can be either an absolute path or a path using the <code>${workspaceFolder}</code> resolver. This is the folder opened in your Visual Studio Code workspace.</p><p><em>Note: Be careful while setting <code>webRoot</code>, this is used to resolve URLs to a file on your computer.</em></p><p>You can see an example of two <code>launch</code> configurations: One launching against a local server and the other launching against a local file.</p><p>If you have a Chrome instance running, the one launched by the debugger will use a temporary session. This means that you won\u2019t have your extensions or opened tabs. If you want to launch a Chrome instance with your user and extensions, you have to close every running instance first.</p><p><em>Note: When you stop the debugger, this will close the Chrome window.</em></p><h4 id=\"attach\">Attach</h4><p>I personally prefer using this one\u2026 This configuration attaches the debugger to a running instance of Chrome. But in order for this option to work, you need to launch Chrome with remote debugging enabled. Launching a Chrome instance with remote debugging varies depending on your OS.</p><h4 id=\"windows\">Windows</h4><p>There are two ways to launch Chrome with remote debugging in Windows. The simplest one is to right-click on the Google Chrome shortcut. Select the properties option and append the following command in the <em>target</em> field.</p><pre><code>--remote-debugging-port=9222</code></pre><p><em>Note: This will launch Chrome with remote debugging enabled every time you click on the shortcut.</em></p><p>The other way is to open the command prompt and execute this command replacing the <code>&lt;chrome_pa</code>th&gt; with the actual location of your Chrome installation.</p><pre><code>&lt;chrome_path&gt;\\chrome.exe --remote-debugging-port=9222</code></pre><h4 id=\"macos\">macOS</h4><p>Open the terminal and execute the following command:</p><pre><code>/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome --remote-debugging-port=9222</code></pre><h4 id=\"linux\">Linux</h4><p>Launch your terminal and run this command:</p><pre><code>google-chrome --remote-debugging-port=9222</code></pre><p>What this does \u2014 no matter what OS \u2014 is open Chrome with a flag, in this case: <code>--remote-debugging-port</code>, and sets it to <code>9222</code>. You can read more about this <a href=\"https://www.chromium.org/developers/how-tos/run-chromium-with-flags\" rel=\"noopener\">here</a>.</p><p><em>Note: If you have other Chrome instances running with no remote debugging, make sure to close them before launching a new one.</em></p><p>Here\u2019s a sample <code>attach</code> configuration.</p><p><em>Note: If you do not set the <code>\"url\"</code> option, a list will be prompted with your open tabs.</em></p><p>This extension have a lot of very useful options that you can use to adapt the configurations to your project. You can read the documentation of some of them <a href=\"https://github.com/Microsoft/vscode-chrome-debug#other-optional-launch-config-fields\" rel=\"noopener\">here</a>.</p><h4 id=\"summary\">Summary</h4><p>Congratulations! You\u2019ve learned how to install and set up the debugger for Chrome in Visual Studio Code. You also learned how to launch Google Chrome with remote debugging enabled. Now it\u2019s time for you to explore and expand your new knowledge\u2026 I highly recommend you to take a look at the extension\u2019s <a href=\"https://github.com/Microsoft/vscode-chrome-debug\" rel=\"noopener\">repository</a>.</p><p>I hope you enjoyed this post. You can find me on Twitter <a href=\"https://twitter.com/_svictoreq\" rel=\"noopener\">@_svictoreq</a>. ?</p>\n</section>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nby Victor A. RequenaDebugging your web applications with Visual Studio Code makes you more efficient. It helps you save a lot of time and keeps your code cleaner. This is because you don\u2019t have to write a bunch of console.logs and you can go through your code execution line by line. But if you\u2019re here, you probably know the benefits of debugging web applications. So let\u2019s begin\u2026Getting set upThe first thing you need to do is install the Debugger for Chrome extension. After you\u2019ve installed it, you\u2019re almost ready to go. The next thing you need to do is create a launch file for the Visual Studio Code Debugger. This file contains the debugger\u2019s different configurations for your project.You can create the launch file by going to the debug section in the Activity Bar and clicking the gear icon.A list of options will prompt you to select the \u201cChrome\u201d one.Like this.After you\u2019ve done this, you\u2019re going to have a .vscode directory with a launch.json file.ConfigurationsThere are two kinds of Chrome debugging configurations: launch and attach. You can set this in the request option inside every configuration object.LaunchThe launch configuration launches a Chrome instance running a specified file or URL. If you specify a URL, you have to set webRoot to the directory that files are served from. This can be either an absolute path or a path using the ${workspaceFolder} resolver. This is the folder opened in your Visual Studio Code workspace.Note: Be careful while setting webRoot, this is used to resolve URLs to a file on your computer.You can see an example of two launch configurations: One launching against a local server and the other launching against a local file.If you have a Chrome instance running, the one launched by the debugger will use a temporary session. This means that you won\u2019t have your extensions or opened tabs. If you want to launch a Chrome instance with your user and extensions, you have to close every running instance first.Note: When you stop the debugger, this will close the Chrome window.AttachI personally prefer using this one\u2026 This configuration attaches the debugger to a running instance of Chrome. But in order for this option to work, you need to launch Chrome with remote debugging enabled. Launching a Chrome instance with remote debugging varies depending on your OS.WindowsThere are two ways to launch Chrome with remote debugging in Windows. The simplest one is to right-click on the Google Chrome shortcut. Select the properties option and append the following command in the target field.--remote-debugging-port=9222Note: This will launch Chrome with remote debugging enabled every time you click on the shortcut.The other way is to open the command prompt and execute this command replacing the <chrome_path> with the actual location of your Chrome installation.<chrome_path>\\chrome.exe --remote-debugging-port=9222macOSOpen the terminal and execute the following command:/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome --remote-debugging-port=9222LinuxLaunch your terminal and run this command:google-chrome --remote-debugging-port=9222What this does \u2014 no matter what OS \u2014 is open Chrome with a flag, in this case: --remote-debugging-port, and sets it to 9222. You can read more about this here.Note: If you have other Chrome instances running with no remote debugging, make sure to close them before launching a new one.Here\u2019s a sample attach configuration.Note: If you do not set the \"url\" option, a list will be prompted with your open tabs.This extension have a lot of very useful options that you can use to adapt the configurations to your project. You can read the documentation of some of them here.SummaryCongratulations! You\u2019ve learned how to install and set up the debugger for Chrome in Visual Studio Code. You also learned how to launch Google Chrome with remote debugging enabled. Now it\u2019s time for you to explore and expand your new knowledge\u2026 I highly recommend you to take a look at the extension\u2019s repository.I hope you enjoyed this post. You can find me on Twitter @_svictoreq. ?\n\n                        \n                    \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 4693, "excerpt": "by Victor A. Requena\n\nDebugging your web applications with Visual Studio Code makes you more\nefficient. It helps you save a lot of time and keeps your code cleaner. This is\nbecause you don\u2019t have to write a bunch of console.logs and you can go through\nyour code execution line by line. But if you\u2019re here, you probably know the\nbenefits of debugging web applications. So let\u2019s begin\u2026\n\nGetting set up\nThe first thing you need to do is install the Debugger for Chrome extension\n[https://marketplace.vis", "siteName": "freeCodeCamp.org", "publishedTime": "2019-04-30T21:38:53.000Z", "id": "7d318f30f4718d689841e1f99738859a64bbc5b3", "url": "https://www.freecodecamp.org/news/how-to-set-up-the-debugger-for-chrome-extension-in-visual-studio-code-c0b3e5937c01/", "domain": "freecodecamp.org", "date": "2023-12-27T18:10:58.057606", "resultUri": "http://localhost:3000/result/7d318f30f4718d689841e1f99738859a64bbc5b3", "query": {"url": ["https://www.freecodecamp.org/news/how-to-set-up-the-debugger-for-chrome-extension-in-visual-studio-code-c0b3e5937c01/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "How to set up the debugger for Chrome extension in Visual Studio Code", "description": "by Victor A. Requena Debugging your web applications with Visual Studio Code makes you more efficient. It helps you save a lot of time and keeps your code cleaner. This is because you don\u2019t have to write a bunch of console.logs and you can go through your code execution line", "url": "https://www.freecodecamp.org/news/how-to-set-up-the-debugger-for-chrome-extension-in-visual-studio-code-c0b3e5937c01/", "image": "https://cdn-media-1.freecodecamp.org/images/1*XuUPNSTBAcqzuKXOABL-_w.png", "image:width": "800", "image:height": "450"}, "twitter": {"card": "summary_large_image", "title": "How to set up the debugger for Chrome extension in Visual Studio Code", "description": "by Victor A. Requena Debugging your web applications with Visual Studio Code makes you more efficient. It helps you save a lot of time and keeps your code cleaner. This is because you don\u2019t have to write a bunch of console.logs and you can go through your code execution line", "url": "https://www.freecodecamp.org/news/how-to-set-up-the-debugger-for-chrome-extension-in-visual-studio-code-c0b3e5937c01/", "image": "https://cdn-media-1.freecodecamp.org/images/1*XuUPNSTBAcqzuKXOABL-_w.png", "label1": "Written by", "data1": "freeCodeCamp.org", "label2": "Filed under", "data2": "JavaScript, Debugging, Tech, Technology, Programming", "site": "@freecodecamp"}}}