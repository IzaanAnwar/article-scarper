{"title": "JavaScript Closure Tutorial \u2013 How Closures and Lexical Scope Work in JS", "byline": "Dave Gray", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>JavaScript Closure Tutorial \u2013 How Closures and Lexical Scope Work in JS</h1>\n<section>\n<section data-test-label=\"post-content\">\n<p>In JavaScript, people often confuse closures with lexical scope.</p><p>Lexical scope is an important part of closures, but it is not a closure by itself.</p><p>Closures are an advanced concept that is also a frequent topic of technical interviews.</p><p>You should have a foundational understanding of functions before attempting to understand closures.</p><p>After reading this article, I hope I will have helped you learn the following:</p><ul><li>The difference between lexical scope and closures.</li><li>Why closures require lexical scope.</li><li>How to give an example of a closure during the interview process.</li></ul><p>Lexical scope describes how nested (also known as \"child\") functions have access to variables defined in parent scopes.</p><pre tabindex=\"0\"><code>const myFunction = () =&gt; {\n     let myValue = 2;\n     console.log(myValue);\n\n     const childFunction = () =&gt; {\n          console.log(myValue += 1);\n     }\n\n     childFunction();\n}\n\nmyFunction();</code></pre><p>In this example, <code>childFunction</code> has access to the variable <code>myValue</code> which is defined in the parent scope of <code>myFunction</code>. </p><p>The lexical scope of <code>childFunction</code> allows access to the parent scope.</p><h2 id=\"what-is-a-closure-in-javascript\">What is a Closure in JavaScript?</h2><p><a href=\"https://www.w3schools.com/js/js_function_closures.asp\">w3Schools.com</a> offers a great definition of what a closure is:</p><blockquote>A closure is a function having access to the parent scope, even after the parent function has closed.</blockquote><p>Let's note the first part of the sentence before the comma:</p><blockquote>...a function having access to the parent scope</blockquote><p>That's describing lexical scope!</p><p>But we need the second part of the definition to give an example of a closure...</p><blockquote>...even after the parent function has closed.</blockquote><p>Let's look at an example of a closure:</p><pre tabindex=\"0\"><code>const myFunction = () =&gt; {\n     let myValue = 2;\n     console.log(myValue);\n\n     const childFunction = () =&gt; {\n          console.log(myValue += 1);\n     }\n\n     return childFunction;\n}\n\nconst result = myFunction();\nconsole.log(result);\nresult();\nresult();\nresult();</code></pre><p>Copy the example code above and try it out.</p><p><em>Let's break down what is happening...</em></p><p>In this revision, <code>myFunction</code> returns <code>childFunction</code> instead of calling it.</p><p>Therefore, when <code>result</code> is set equal to <code>myFunction()</code>, the console statement inside <code>myFunction</code> is logged, but not the statement inside <code>childFunction</code>. </p><p><code>childFunction</code> is not called into action. </p><p>Instead, it is returned and held in <code>result</code>.</p><p>In addition, we need to realize that <code>myFunction</code> has closed after it was called.</p><p>The line with <code>console.log(result)</code> should show in the console that <code>result</code> now holds the anonymous function value that was <code>childFunction</code>.</p><p>Now, when we call <code>result()</code>, we are calling the anonymous function that was assigned to <code>childFunction</code>.</p><p>As a child of <code>myFunction</code>, this anonymous function has access to the <code>myValue</code> variable inside <code>myFunction</code> <em>even after it has closed!</em></p><p>The closure we created now allows us to continue to increase the value of the <code>myValue</code> variable every time we call <code>result()</code>.</p><h2 id=\"take-your-time-with-closures\">Take Your Time with Closures</h2><p>Closures are considered to be an advanced concept for good reason.</p><p>Even with a step-by-step breakdown of what a closure is, this concept can take time to understand.</p><p>Don't rush your understanding and don't be hard on yourself if it doesn't make sense at first.</p><p>When you fully understand closure, you may feel like <a href=\"https://www.google.com/search?q=neo+sees+the+matrix&amp;source=lnms&amp;tbm=isch&amp;sa=X&amp;ved=2ahUKEwiG1MaN1rPxAhUNCM0KHQJWCtAQ_AUoAXoECAEQAw&amp;biw=1762&amp;bih=886\">Neo when he sees the Matrix</a>. You'll see new code possibilities and realize they were there all along!</p><p>I'll leave you with a tutorial on closures from <a href=\"https://www.youtube.com/davegrayteachescode\">my YouTube channel</a>. I dive a little deeper and provide a few more examples of closures to build on the discussion in this article.</p><figure data-test-label=\"fitted\">\n\n</figure>\n</section>\n<hr/>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nIn JavaScript, people often confuse closures with lexical scope.Lexical scope is an important part of closures, but it is not a closure by itself.Closures are an advanced concept that is also a frequent topic of technical interviews.You should have a foundational understanding of functions before attempting to understand closures.After reading this article, I hope I will have helped you learn the following:The difference between lexical scope and closures.Why closures require lexical scope.How to give an example of a closure during the interview process.Lexical scope describes how nested (also known as \"child\") functions have access to variables defined in parent scopes.const myFunction = () => {\n     let myValue = 2;\n     console.log(myValue);\n\n     const childFunction = () => {\n          console.log(myValue += 1);\n     }\n\n     childFunction();\n}\n\nmyFunction();In this example, childFunction has access to the variable myValue which is defined in the parent scope of myFunction. The lexical scope of childFunction allows access to the parent scope.What is a Closure in JavaScript?w3Schools.com offers a great definition of what a closure is:A closure is a function having access to the parent scope, even after the parent function has closed.Let's note the first part of the sentence before the comma:...a function having access to the parent scopeThat's describing lexical scope!But we need the second part of the definition to give an example of a closure......even after the parent function has closed.Let's look at an example of a closure:const myFunction = () => {\n     let myValue = 2;\n     console.log(myValue);\n\n     const childFunction = () => {\n          console.log(myValue += 1);\n     }\n\n     return childFunction;\n}\n\nconst result = myFunction();\nconsole.log(result);\nresult();\nresult();\nresult();Copy the example code above and try it out.Let's break down what is happening...In this revision, myFunction returns childFunction instead of calling it.Therefore, when result is set equal to myFunction(), the console statement inside myFunction is logged, but not the statement inside childFunction. childFunction is not called into action. Instead, it is returned and held in result.In addition, we need to realize that myFunction has closed after it was called.The line with console.log(result) should show in the console that result now holds the anonymous function value that was childFunction.Now, when we call result(), we are calling the anonymous function that was assigned to childFunction.As a child of myFunction, this anonymous function has access to the myValue variable inside myFunction even after it has closed!The closure we created now allows us to continue to increase the value of the myValue variable every time we call result().Take Your Time with ClosuresClosures are considered to be an advanced concept for good reason.Even with a step-by-step breakdown of what a closure is, this concept can take time to understand.Don't rush your understanding and don't be hard on yourself if it doesn't make sense at first.When you fully understand closure, you may feel like Neo when he sees the Matrix. You'll see new code possibilities and realize they were there all along!I'll leave you with a tutorial on closures from my YouTube channel. I dive a little deeper and provide a few more examples of closures to build on the discussion in this article.\n        \n          \n            \n          \n        \n      \n\n                        \n                    \n                    \n                        \n                        \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 4139, "excerpt": "In JavaScript, people often confuse closures with lexical scope.\n\nLexical scope is an important part of closures, but it is not a closure by\nitself.\n\nClosures are an advanced concept that is also a frequent topic of technical\ninterviews.\n\nYou should have a foundational understanding of functions before attempting to\nunderstand closures.\n\nAfter reading this article, I hope I will have helped you learn the following:\n\n * The difference between lexical scope and closures.\n * Why closures require le", "siteName": "freeCodeCamp.org", "publishedTime": "2021-06-28T18:45:21.000Z", "id": "63e7fc79903e605e3efc6ed8976a74f56fc241d1", "url": "https://www.freecodecamp.org/news/javascript-closure-lexical-scope/", "domain": "freecodecamp.org", "date": "2023-12-27T18:05:59.777026", "resultUri": "http://localhost:3000/result/63e7fc79903e605e3efc6ed8976a74f56fc241d1", "query": {"url": ["https://www.freecodecamp.org/news/javascript-closure-lexical-scope/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "JavaScript Closure Tutorial \u2013 How Closures and Lexical Scope Work in JS", "description": "In JavaScript, people often confuse closures with lexical scope. Lexical scope is an important part of closures, but it is not a closure by itself. Closures are an advanced concept that is also a frequent topic of technical interviews. You should have a foundational understanding of functions before attempting to", "url": "https://www.freecodecamp.org/news/javascript-closure-lexical-scope/", "image": "https://www.freecodecamp.org/news/content/images/2021/06/tim-evans-Uf-c4u1usFQ-unsplash.jpg", "image:width": "2000", "image:height": "1333"}, "twitter": {"card": "summary_large_image", "title": "JavaScript Closure Tutorial \u2013 How Closures and Lexical Scope Work in JS", "description": "In JavaScript, people often confuse closures with lexical scope. Lexical scope is an important part of closures, but it is not a closure by itself. Closures are an advanced concept that is also a frequent topic of technical interviews. You should have a foundational understanding of functions before attempting to", "url": "https://www.freecodecamp.org/news/javascript-closure-lexical-scope/", "image": "https://www.freecodecamp.org/news/content/images/2021/06/tim-evans-Uf-c4u1usFQ-unsplash.jpg", "label1": "Written by", "data1": "Dave Gray", "label2": "Filed under", "data2": "JavaScript, Web Development, Programming, Closure, Lexical scoping, Software Development, Coding", "site": "@freecodecamp", "creator": "@yesdavidgray"}}}