{"title": "Everything you need to know about Insertion Sort algorithm", "byline": "Sanjula Madurapperuma", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>Everything you need to know about Insertion Sort algorithm</h1>\n<section>\n<section data-test-label=\"post-content\">\n<h3 id=\"introduction\"><strong>Introduction</strong></h3><p>Hi! I am <a href=\"https://www.linkedin.com/in/sanjula-madurapperuma/\">Sanjula</a>, and in this guide I hope to teach you a little bit about the Insertion Sort algorithm including:</p><ul><li>What is Insertion sort?</li><li>Why is insertion sort important?</li><li>Performance of Insertion Sort</li><li>How does Insertion sort work?</li><li>Java Implementation of Insertion sort</li></ul><p>Let\u2019s get started!</p><h3 id=\"what-is-insertion-sort\"><strong>What is Insertion sort?</strong></h3><p>It is a simple sorting algorithm that sorts an array one item at a time.</p><h3 id=\"why-is-insertion-sort-important\"><strong>Why is insertion sort important?</strong></h3><p>Insertion sort has several advantages including:</p><ul><li>The pure simplicity of the algorithm.</li><li>The relative order of items with equal keys does not change.</li><li>The ability to sort a list as it is being received.</li><li>Efficient for small data sets, especially in practice than other quadratic algorithms\u200a\u2014\u200ai.e. O(n\u00b2).</li><li>It only requires a constant amount of additional memory space\u200a\u2014\u200aO(1).</li></ul><h3 id=\"performance-of-insertion-sort\"><strong>Performance of Insertion Sort</strong></h3><ul><li>Worst-case performance of insertion sort is O(n\u00b2) comparisons and swaps.</li><li>Best-case performance is O(n) comparisons and O(1) swaps.</li><li>Average-case performance is O(n\u00b2) comparisons and swaps.</li></ul><h3 id=\"how-does-insertion-sort-work\"><strong>How does Insertion sort work?</strong></h3><p>In each iteration, insertion sort compares the current element with the next element and determines whether the current element is greater than the one it was compared to.</p><p>If this is <em>true</em>, then it leaves the element in its place and moves on to the next element. If it is <em>false</em>, then it finds its correct position in the sorted array and moves it to that position by shifting all the elements which are larger in the sorted array to one position ahead.</p><h3 id=\"java-implementation-of-insertion-sort\"><strong>Java Implementation of Insertion sort</strong></h3><p>P.S.\u200a\u2014\u200aTry to implement it on your own first!</p><!--kg-card-begin: html--><div id=\"gist96381289\" itemprop=\"text\" translate=\"no\">\n<table data-hpc=\"\" data-paste-markdown-skip=\"\" data-tab-size=\"8\" data-tagsearch-lang=\"Java\" data-tagsearch-path=\"InsertionSort.java\">\n<tbody><tr>\n<td data-line-number=\"1\" id=\"file-insertionsort-java-L1\"></td>\n<td id=\"file-insertionsort-java-LC1\"><span>package</span> <span>com</span>.<span>sanjula</span>.<span>java</span>.<span>algorithms</span>.<span>InsertionSort</span>;</td>\n</tr>\n<tr>\n<td data-line-number=\"2\" id=\"file-insertionsort-java-L2\"></td>\n<td id=\"file-insertionsort-java-LC2\">\n</td>\n</tr>\n<tr>\n<td data-line-number=\"3\" id=\"file-insertionsort-java-L3\"></td>\n<td id=\"file-insertionsort-java-LC3\"><span>public</span> <span>class</span> <span>InsertionSort</span> {</td>\n</tr>\n<tr>\n<td data-line-number=\"4\" id=\"file-insertionsort-java-L4\"></td>\n<td id=\"file-insertionsort-java-LC4\"> <span>/**</span></td>\n</tr>\n<tr>\n<td data-line-number=\"5\" id=\"file-insertionsort-java-L5\"></td>\n<td id=\"file-insertionsort-java-LC5\"><span>     * Sort method using insertion sort</span></td>\n</tr>\n<tr>\n<td data-line-number=\"6\" id=\"file-insertionsort-java-L6\"></td>\n<td id=\"file-insertionsort-java-LC6\"><span>     * @param arr - Integer array passed in </span></td>\n</tr>\n<tr>\n<td data-line-number=\"7\" id=\"file-insertionsort-java-L7\"></td>\n<td id=\"file-insertionsort-java-LC7\"><span>     *            to be sorted</span></td>\n</tr>\n<tr>\n<td data-line-number=\"8\" id=\"file-insertionsort-java-L8\"></td>\n<td id=\"file-insertionsort-java-LC8\"><span>     **/</span></td>\n</tr>\n<tr>\n<td data-line-number=\"9\" id=\"file-insertionsort-java-L9\"></td>\n<td id=\"file-insertionsort-java-LC9\"> <span>public</span> <span>void</span> <span>sort</span>(<span>int</span> <span>arr</span>[]){</td>\n</tr>\n<tr>\n<td data-line-number=\"10\" id=\"file-insertionsort-java-L10\"></td>\n<td id=\"file-insertionsort-java-LC10\"> <span>// Store the length of the array</span></td>\n</tr>\n<tr>\n<td data-line-number=\"11\" id=\"file-insertionsort-java-L11\"></td>\n<td id=\"file-insertionsort-java-LC11\"> <span>int</span> <span>n</span> = <span>arr</span>.<span>length</span>;</td>\n</tr>\n<tr>\n<td data-line-number=\"12\" id=\"file-insertionsort-java-L12\"></td>\n<td id=\"file-insertionsort-java-LC12\"> <span>// For loop to iterate through each</span></td>\n</tr>\n<tr>\n<td data-line-number=\"13\" id=\"file-insertionsort-java-L13\"></td>\n<td id=\"file-insertionsort-java-LC13\"> <span>for</span> (<span>int</span> <span>i</span> = <span>0</span>; <span>i</span> &lt; <span>n</span>; <span>i</span>++){</td>\n</tr>\n<tr>\n<td data-line-number=\"14\" id=\"file-insertionsort-java-L14\"></td>\n<td id=\"file-insertionsort-java-LC14\"> <span>// Storing current element to check correct position</span></td>\n</tr>\n<tr>\n<td data-line-number=\"15\" id=\"file-insertionsort-java-L15\"></td>\n<td id=\"file-insertionsort-java-LC15\"> <span>int</span> <span>key</span> = <span>arr</span>[<span>i</span>];</td>\n</tr>\n<tr>\n<td data-line-number=\"16\" id=\"file-insertionsort-java-L16\"></td>\n<td id=\"file-insertionsort-java-LC16\"> <span>int</span> <span>j</span> = <span>i</span> - <span>1</span>;</td>\n</tr>\n<tr>\n<td data-line-number=\"17\" id=\"file-insertionsort-java-L17\"></td>\n<td id=\"file-insertionsort-java-LC17\">\n</td>\n</tr>\n<tr>\n<td data-line-number=\"18\" id=\"file-insertionsort-java-L18\"></td>\n<td id=\"file-insertionsort-java-LC18\"> <span>// Move element to correct position if </span></td>\n</tr>\n<tr>\n<td data-line-number=\"19\" id=\"file-insertionsort-java-L19\"></td>\n<td id=\"file-insertionsort-java-LC19\"> <span>// condition is true</span></td>\n</tr>\n<tr>\n<td data-line-number=\"20\" id=\"file-insertionsort-java-L20\"></td>\n<td id=\"file-insertionsort-java-LC20\"> <span>while</span>(<span>j</span> &gt;= <span>0</span> &amp;&amp; <span>arr</span>[<span>j</span>] &gt; <span>key</span>){</td>\n</tr>\n<tr>\n<td data-line-number=\"21\" id=\"file-insertionsort-java-L21\"></td>\n<td id=\"file-insertionsort-java-LC21\"> <span>arr</span>[<span>j</span> + <span>1</span>] = <span>arr</span>[<span>j</span>];</td>\n</tr>\n<tr>\n<td data-line-number=\"22\" id=\"file-insertionsort-java-L22\"></td>\n<td id=\"file-insertionsort-java-LC22\"> <span>j</span> = <span>j</span> - <span>1</span>;</td>\n</tr>\n<tr>\n<td data-line-number=\"23\" id=\"file-insertionsort-java-L23\"></td>\n<td id=\"file-insertionsort-java-LC23\">            }</td>\n</tr>\n<tr>\n<td data-line-number=\"24\" id=\"file-insertionsort-java-L24\"></td>\n<td id=\"file-insertionsort-java-LC24\"> <span>arr</span>[<span>j</span> + <span>1</span>] = <span>key</span>;</td>\n</tr>\n<tr>\n<td data-line-number=\"25\" id=\"file-insertionsort-java-L25\"></td>\n<td id=\"file-insertionsort-java-LC25\">        }</td>\n</tr>\n<tr>\n<td data-line-number=\"26\" id=\"file-insertionsort-java-L26\"></td>\n<td id=\"file-insertionsort-java-LC26\">    }</td>\n</tr>\n<tr>\n<td data-line-number=\"27\" id=\"file-insertionsort-java-L27\"></td>\n<td id=\"file-insertionsort-java-LC27\">\n</td>\n</tr>\n<tr>\n<td data-line-number=\"28\" id=\"file-insertionsort-java-L28\"></td>\n<td id=\"file-insertionsort-java-LC28\"> <span>/**</span></td>\n</tr>\n<tr>\n<td data-line-number=\"29\" id=\"file-insertionsort-java-L29\"></td>\n<td id=\"file-insertionsort-java-LC29\"><span>     * Print the array supplied</span></td>\n</tr>\n<tr>\n<td data-line-number=\"30\" id=\"file-insertionsort-java-L30\"></td>\n<td id=\"file-insertionsort-java-LC30\"><span>     * @param arr - Array passed</span></td>\n</tr>\n<tr>\n<td data-line-number=\"31\" id=\"file-insertionsort-java-L31\"></td>\n<td id=\"file-insertionsort-java-LC31\"><span>     * @param msg - Message to be printed</span></td>\n</tr>\n<tr>\n<td data-line-number=\"32\" id=\"file-insertionsort-java-L32\"></td>\n<td id=\"file-insertionsort-java-LC32\"><span>     **/</span></td>\n</tr>\n<tr>\n<td data-line-number=\"33\" id=\"file-insertionsort-java-L33\"></td>\n<td id=\"file-insertionsort-java-LC33\"> <span>public</span> <span>static</span> <span>void</span> <span>printArray</span>(<span>int</span> <span>arr</span>[], <span>String</span> <span>msg</span>) {</td>\n</tr>\n<tr>\n<td data-line-number=\"34\" id=\"file-insertionsort-java-L34\"></td>\n<td id=\"file-insertionsort-java-LC34\"> <span>int</span> <span>length</span> = <span>arr</span>.<span>length</span>;</td>\n</tr>\n<tr>\n<td data-line-number=\"35\" id=\"file-insertionsort-java-L35\"></td>\n<td id=\"file-insertionsort-java-LC35\"> <span>System</span>.<span>out</span>.<span>println</span>(<span>msg</span>);</td>\n</tr>\n<tr>\n<td data-line-number=\"36\" id=\"file-insertionsort-java-L36\"></td>\n<td id=\"file-insertionsort-java-LC36\"> <span>for</span> (<span>int</span> <span>i</span> = <span>0</span>; <span>i</span> &lt; <span>length</span>; <span>i</span>++) {</td>\n</tr>\n<tr>\n<td data-line-number=\"37\" id=\"file-insertionsort-java-L37\"></td>\n<td id=\"file-insertionsort-java-LC37\"> <span>System</span>.<span>out</span>.<span>print</span>(<span>arr</span>[<span>i</span>] + <span>\" \"</span>);</td>\n</tr>\n<tr>\n<td data-line-number=\"38\" id=\"file-insertionsort-java-L38\"></td>\n<td id=\"file-insertionsort-java-LC38\">        }</td>\n</tr>\n<tr>\n<td data-line-number=\"39\" id=\"file-insertionsort-java-L39\"></td>\n<td id=\"file-insertionsort-java-LC39\"> <span>System</span>.<span>out</span>.<span>println</span>();</td>\n</tr>\n<tr>\n<td data-line-number=\"40\" id=\"file-insertionsort-java-L40\"></td>\n<td id=\"file-insertionsort-java-LC40\">    }</td>\n</tr>\n<tr>\n<td data-line-number=\"41\" id=\"file-insertionsort-java-L41\"></td>\n<td id=\"file-insertionsort-java-LC41\">\n</td>\n</tr>\n<tr>\n<td data-line-number=\"42\" id=\"file-insertionsort-java-L42\"></td>\n<td id=\"file-insertionsort-java-LC42\"> <span>public</span> <span>static</span> <span>void</span> <span>main</span>(<span>String</span>[] <span>args</span>) {</td>\n</tr>\n<tr>\n<td data-line-number=\"43\" id=\"file-insertionsort-java-L43\"></td>\n<td id=\"file-insertionsort-java-LC43\"> <span>// Initialize and declare the array arr</span></td>\n</tr>\n<tr>\n<td data-line-number=\"44\" id=\"file-insertionsort-java-L44\"></td>\n<td id=\"file-insertionsort-java-LC44\"> <span>int</span> <span>arr</span>[] = {<span>25</span>, <span>12</span>, <span>3</span>, <span>1</span>, <span>9</span>, <span>15</span>};</td>\n</tr>\n<tr>\n<td data-line-number=\"45\" id=\"file-insertionsort-java-L45\"></td>\n<td id=\"file-insertionsort-java-LC45\"> <span>// Create new instance of class InsertionSort</span></td>\n</tr>\n<tr>\n<td data-line-number=\"46\" id=\"file-insertionsort-java-L46\"></td>\n<td id=\"file-insertionsort-java-LC46\"> <span>InsertionSort</span> <span>insertionSort</span> = <span>new</span> <span>InsertionSort</span>();</td>\n</tr>\n<tr>\n<td data-line-number=\"47\" id=\"file-insertionsort-java-L47\"></td>\n<td id=\"file-insertionsort-java-LC47\">\n</td>\n</tr>\n<tr>\n<td data-line-number=\"48\" id=\"file-insertionsort-java-L48\"></td>\n<td id=\"file-insertionsort-java-LC48\"> <span>printArray</span>(<span>arr</span>, <span>\"Array before insertion sort\"</span>);</td>\n</tr>\n<tr>\n<td data-line-number=\"49\" id=\"file-insertionsort-java-L49\"></td>\n<td id=\"file-insertionsort-java-LC49\"> <span>// Invoke the sort method, passing in the array arr</span></td>\n</tr>\n<tr>\n<td data-line-number=\"50\" id=\"file-insertionsort-java-L50\"></td>\n<td id=\"file-insertionsort-java-LC50\"> <span>insertionSort</span>.<span>sort</span>(<span>arr</span>);</td>\n</tr>\n<tr>\n<td data-line-number=\"51\" id=\"file-insertionsort-java-L51\"></td>\n<td id=\"file-insertionsort-java-LC51\"> <span>// Print the sorted array</span></td>\n</tr>\n<tr>\n<td data-line-number=\"52\" id=\"file-insertionsort-java-L52\"></td>\n<td id=\"file-insertionsort-java-LC52\"> <span>printArray</span>(<span>arr</span>, <span>\"Array after insertion sort\"</span>);</td>\n</tr>\n<tr>\n<td data-line-number=\"53\" id=\"file-insertionsort-java-L53\"></td>\n<td id=\"file-insertionsort-java-LC53\">    }</td>\n</tr>\n<tr>\n<td data-line-number=\"54\" id=\"file-insertionsort-java-L54\"></td>\n<td id=\"file-insertionsort-java-LC54\">}</td>\n</tr>\n</tbody></table>\n</div>\n<!--kg-card-end: html--><hr/><p><strong>Congratulations!!!</strong> You have now absorbed the basic but essential knowledge about how Insertion Sort works.</p><p>For reference or reporting issues regarding the code above, use the following public GitHub Gist <a href=\"https://gist.github.com/sanjulamadurapperuma/25677635f216b9fa858d8051140e47f2\">link</a>.</p><hr/><p>Hope this was helpful. Thanks for reading! :)</p>\n</section>\n<hr/>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nIntroductionHi! I am Sanjula, and in this guide I hope to teach you a little bit about the Insertion Sort algorithm including:What is Insertion sort?Why is insertion sort important?Performance of Insertion SortHow does Insertion sort work?Java Implementation of Insertion sortLet\u2019s get started!What is Insertion sort?It is a simple sorting algorithm that sorts an array one item at a time.Why is insertion sort important?Insertion sort has several advantages including:The pure simplicity of the algorithm.The relative order of items with equal keys does not change.The ability to sort a list as it is being received.Efficient for small data sets, especially in practice than other quadratic algorithms\u200a\u2014\u200ai.e. O(n\u00b2).It only requires a constant amount of additional memory space\u200a\u2014\u200aO(1).Performance of Insertion SortWorst-case performance of insertion sort is O(n\u00b2) comparisons and swaps.Best-case performance is O(n) comparisons and O(1) swaps.Average-case performance is O(n\u00b2) comparisons and swaps.How does Insertion sort work?In each iteration, insertion sort compares the current element with the next element and determines whether the current element is greater than the one it was compared to.If this is true, then it leaves the element in its place and moves on to the next element. If it is false, then it finds its correct position in the sorted array and moves it to that position by shifting all the elements which are larger in the sorted array to one position ahead.Java Implementation of Insertion sortP.S.\u200a\u2014\u200aTry to implement it on your own first!\n\n  \n\n\n  \n        \n          \n          package com.sanjula.java.algorithms.InsertionSort;\n        \n        \n          \n          \n\n        \n        \n          \n          public class InsertionSort {\n        \n        \n          \n              /**\n        \n        \n          \n               * Sort method using insertion sort\n        \n        \n          \n               * @param arr - Integer array passed in \n        \n        \n          \n               *            to be sorted\n        \n        \n          \n               **/\n        \n        \n          \n              public void sort(int arr[]){\n        \n        \n          \n                  // Store the length of the array\n        \n        \n          \n                  int n = arr.length;\n        \n        \n          \n                  // For loop to iterate through each\n        \n        \n          \n                  for (int i = 0; i < n; i++){\n        \n        \n          \n                      // Storing current element to check correct position\n        \n        \n          \n                      int key = arr[i];\n        \n        \n          \n                      int j = i - 1;\n        \n        \n          \n          \n\n        \n        \n          \n                      // Move element to correct position if \n        \n        \n          \n                      // condition is true\n        \n        \n          \n                      while(j >= 0 && arr[j] > key){\n        \n        \n          \n                          arr[j + 1] = arr[j];\n        \n        \n          \n                          j = j - 1;\n        \n        \n          \n                      }\n        \n        \n          \n                      arr[j + 1] = key;\n        \n        \n          \n                  }\n        \n        \n          \n              }\n        \n        \n          \n          \n\n        \n        \n          \n              /**\n        \n        \n          \n               * Print the array supplied\n        \n        \n          \n               * @param arr - Array passed\n        \n        \n          \n               * @param msg - Message to be printed\n        \n        \n          \n               **/\n        \n        \n          \n              public static void printArray(int arr[], String msg) {\n        \n        \n          \n                  int length = arr.length;\n        \n        \n          \n                  System.out.println(msg);\n        \n        \n          \n                  for (int i = 0; i < length; i++) {\n        \n        \n          \n                      System.out.print(arr[i] + \" \");\n        \n        \n          \n                  }\n        \n        \n          \n                  System.out.println();\n        \n        \n          \n              }\n        \n        \n          \n          \n\n        \n        \n          \n              public static void main(String[] args) {\n        \n        \n          \n                  // Initialize and declare the array arr\n        \n        \n          \n                  int arr[] = {25, 12, 3, 1, 9, 15};\n        \n        \n          \n                  // Create new instance of class InsertionSort\n        \n        \n          \n                  InsertionSort insertionSort = new InsertionSort();\n        \n        \n          \n          \n\n        \n        \n          \n                  printArray(arr, \"Array before insertion sort\");\n        \n        \n          \n                  // Invoke the sort method, passing in the array arr\n        \n        \n          \n                  insertionSort.sort(arr);\n        \n        \n          \n                  // Print the sorted array\n        \n        \n          \n                  printArray(arr, \"Array after insertion sort\");\n        \n        \n          \n              }\n        \n        \n          \n          }\n        \n  \n\nCongratulations!!! You have now absorbed the basic but essential knowledge about how Insertion Sort works.For reference or reporting issues regarding the code above, use the following public GitHub Gist link.Hope this was helpful. Thanks for reading! :)\n\n                        \n                    \n                    \n                        \n                        \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 6279, "excerpt": "Introduction\nHi! I am Sanjula [https://www.linkedin.com/in/sanjula-madurapperuma/], and in\nthis guide I hope to teach you a little bit about the Insertion Sort algorithm\nincluding:\n\n * What is Insertion sort?\n * Why is insertion sort important?\n * Performance of Insertion Sort\n * How does Insertion sort work?\n * Java Implementation of Insertion sort\n\nLet\u2019s get started!\n\nWhat is Insertion sort?\nIt is a simple sorting algorithm that sorts an array one item at a time.\n\nWhy is insertion sort importa", "siteName": "freeCodeCamp.org", "publishedTime": "2019-07-07T13:32:38.000Z", "id": "93fb3a566cdd4095c2bff0f82461a67750dca9ee", "url": "https://www.freecodecamp.org/news/everything-you-need-to-know-about-insertion-sort-algorithm/", "domain": "freecodecamp.org", "date": "2023-12-27T18:09:01.986915", "resultUri": "http://localhost:3000/result/93fb3a566cdd4095c2bff0f82461a67750dca9ee", "query": {"url": ["https://www.freecodecamp.org/news/everything-you-need-to-know-about-insertion-sort-algorithm/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "Everything you need to know about Insertion Sort algorithm", "description": "Introduction Hi! I am Sanjula [https://www.linkedin.com/in/sanjula-madurapperuma/], and in this guide I hope to teach you a little bit about the Insertion Sort algorithm including:  * What is Insertion sort?  * Why is insertion sort important?  * Performance of Insertion Sort  * How does Insertion sort work?", "url": "https://www.freecodecamp.org/news/everything-you-need-to-know-about-insertion-sort-algorithm/", "image": "https://www.freecodecamp.org/news/content/images/2019/06/image-44-1.png", "image:width": "800", "image:height": "525"}, "twitter": {"card": "summary_large_image", "title": "Everything you need to know about Insertion Sort algorithm", "description": "Introduction Hi! I am Sanjula [https://www.linkedin.com/in/sanjula-madurapperuma/], and in this guide I hope to teach you a little bit about the Insertion Sort algorithm including:  * What is Insertion sort?  * Why is insertion sort important?  * Performance of Insertion Sort  * How does Insertion sort work?", "url": "https://www.freecodecamp.org/news/everything-you-need-to-know-about-insertion-sort-algorithm/", "image": "https://www.freecodecamp.org/news/content/images/2019/06/image-44-1.png", "label1": "Written by", "data1": "Sanjula Madurapperuma", "label2": "Filed under", "data2": "Algorithms, Programming, Coding, Creative Coding, Technology, Java, Backend Development", "site": "@freecodecamp", "creator": "@s_arachchige"}}}