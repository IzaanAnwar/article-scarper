{"title": "4 reasons your z-index isn\u2019t working (and how to fix it)", "byline": "Jessica Chan", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>4 reasons your z-index isn\u2019t working (and how to fix it)</h1>\n<section>\n<section data-test-label=\"post-content\">\n<p>Z-index is a CSS property that allows you to position elements in layers on top of one another. It\u2019s super useful, and honestly a very important tool to know how to use in CSS.</p><p>Unfortunately, z-index is one of those properties that doesn\u2019t always behave in an intuitive way. It seems simple at first- a higher z-index number means the element will be on top of elements with lower z-index numbers. But there are some additional rules that make things more complicated. And you can\u2019t always fix things by setting the z-index to 999999! ?</p><p>This article will explain in detail four of the most common reasons that z-index isn\u2019t working for you, and exactly how you can fix it.</p><p>We\u2019ll be going through some actual code examples and problem-solving them. After reading this article, you\u2019ll be able to understand and avoid those common z-index pitfalls!</p><figure data-test-label=\"fitted\">\n\n</figure><p>Let\u2019s check out the first reason:</p><h3 id=\"1-elements-in-the-same-stacking-context-will-display-in-order-of-appearance-with-latter-elements-on-top-of-former-elements-\">1. Elements in the same stacking context will display in order of appearance, with latter elements on top of former elements.</h3><p>In our first example, we have a relatively simple layout that includes 3 main elements:</p><ul><li>An image of a cat</li><li>A white block with text</li><li>Another image of the same cat</li></ul><p>Here\u2019s the HTML markup for that:</p><pre tabindex=\"0\"><code>&lt;div class=\"cat-top\"&gt;&lt;/div&gt; \n\n&lt;div class=\"content__block\"&gt; Meow meow meow... &lt;/div&gt; \n\n&lt;div class=\"cat-bottom\"&gt;&lt;/div&gt;</code></pre><p>In this layout, we ideally want the white block of text to be on top of both cats.</p><p>To try to achieve this, we\u2019ve added some negative margins to the CSS for both cat images, so that they overlap the white block a bit:</p><pre tabindex=\"0\"><code>.cat-top { \n   margin-bottom: -110px; \n} \n\n.cat-bottom { \n   float: right; \n   margin-top: -120px; \n}</code></pre><p>However, it looks like this:</p><!--kg-card-begin: html--><!--kg-card-end: html--><p>The first cat is indeed positioned underneath the white content block, just like we want. But the second cat image is positioned on top of the block!</p><p>Why is this happening?</p><p>The reason for this behavior is due to the <strong>natural stacking order</strong> on the webpage. These guidelines basically determine which elements will be on top and which will be on the bottom.</p><p>Even if elements don\u2019t have their z-index set, there is a rhyme and reason to which ones will be on top.</p><p>In our case, none of the elements have a z-index value. So their stacking order is determined by their order of appearance. According to this rule, elements that come later in the markup will be on top of elements that come before them.</p><p>(You can read more of the stacking order guidelines at Mozilla Developer Network <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context\" rel=\"noopener\">here</a>.)</p><p>In our example with the cats and the white block, they are obeying this rule. That\u2019s why the first cat is underneath the white block element, and the white block is underneath the second cat.</p><p>Ok, stacking order is all well and good, but how do we fix the CSS so the second cat is underneath the white block?</p><p>Let\u2019s look at the second reason:</p><h3 id=\"2-the-element-doesn-t-have-its-position-set\">2. The element doesn\u2019t have its position set</h3><p>One of the other guidelines that determine stacking order is if an element has its position set or not.</p><p>To set position for an element, add the CSS <code>position</code> property to anything other than <code>static</code>, like <code>relative</code> or <code>absolute</code>. (You can read more about it in <a href=\"https://coder-coder.com/css-position-layout/\" rel=\"noopener\">this article</a> that I wrote.)</p><p>According to this rule, positioned elements will display on top of unpositioned elements.</p><p>So setting the white block to be <code>position: relative</code>, and leaving the two cat elements unpositioned will put the white block on the top of the cats in the stacking order.</p><p>This is how it will look- you can also play around with the Codepen above.</p><figure><img alt=\"NlDhNhhBXrXmR35aZCt4XCGbfBCt4bRPLHzK\" height=\"561\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/NlDhNhhBXrXmR35aZCt4XCGbfBCt4bRPLHzK\" width=\"600\"/></figure><p>Now, the next thing we want to do is rotate the bottom cat upside down, using the <code>transform</code> property. That way, both cats will be underneath the white block, with only their heads sticking out.</p><p>But doing so can cause more <code>z-index</code>-related confusion. We'll address the problem and the solution in the next part.</p><h3 id=\"3-setting-some-css-properties-like-opacity-or-transform-will-put-the-element-in-a-new-stacking-context-\">3. Setting some CSS properties like opacity or transform will put the element in a new stacking context.</h3><p>As we just mentioned, we want to turn the bottom cat upside down. To accomplish this, we\u2019ll add <code>transform: rotate(180deg)</code>.</p><pre tabindex=\"0\"><code>.cat-bottom { \n   float: right; \n   margin-top: -120px; \n   transform: rotate(180deg); \n}</code></pre><p>But this causes the bottom cat to be displayed on top of the white block again!</p><figure><img alt=\"GTJjexmzYUkJa37hDuIUALqGngUjSl0wxFcE\" height=\"558\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/GTJjexmzYUkJa37hDuIUALqGngUjSl0wxFcE\" width=\"600\"/></figure><p><em>What the heck is going on here??</em></p><p>You may not run into this issue often, but another aspect of stacking order is that some CSS properties like <code>transform</code> or <code>opacity</code> will put the element into its own, new <a href=\"https://www.w3.org/TR/css-color-3/#transparency\" rel=\"noopener\">stacking context</a>.</p><p>What this means is that adding the <code>transform</code> to the <code>.cat-bottom</code> element makes it behave as if it had a <code>z-index</code> of 0. Even though it doesn't have its <code>position</code> or <code>z-index</code> set at all! (W3.org has some informative but <a href=\"https://www.w3.org/TR/css-color-3/#transparency\" rel=\"noopener\">rather dense documentation</a> on how this works with the <code>opacity</code> property)</p><p>Remember, we never added a <code>z-index</code> value to the white block, only <code>position: relative</code>. This was enough to position the white block on top of the unpositioned cats.</p><p>But since the <code>.bottom-cat</code> element is acting as though it is relatively positioned with <code>z-index: 0</code>, transforming it has positioned it on top of the white block.</p><p>The solution to this is to set <code>position: relative</code> and explicitly set <code>z-index</code> on at least the white block. You could go one step further and set <code>position: relative</code> and a lower <code>z-index</code> on the cat elements, just to be extra safe.</p><pre tabindex=\"0\"><code>.content__block { \n   position: relative; \n   z-index: 2; \n} \n\n.cat-top, .cat-bottom { \n   position: relative; z-index: 1; \n}</code></pre><p>In my opinion, doing this will solve most, if not all of the more basic z-index issues.</p><p>Now, let\u2019s move on to our last reason that your <code>z-index</code> isn't working. This one is a bit more complex, because it involves parent and child elements.</p><h3 id=\"4-the-element-is-in-a-lower-stacking-context-due-to-its-parent-s-z-index-level\">4. The element is in a lower stacking context due to its parent\u2019s z-index level</h3><p>Let\u2019s check out our code example for this:</p><!--kg-card-begin: html--><!--kg-card-end: html--><p>Here\u2019s what we have: a simple webpage with regular content, and a pink side tab that says \u201cSend Feedback\u201d that is positioned on top of the content.</p><p>Then, when you click on the photo of the cat, a modal window with a transparent gray background overlay opens up.</p><p>However, even when the modal window is open, the side tab is still on top of the gray overlay. We want the overlay to be displayed over everything, including the side tab.</p><p>Let\u2019s take a look at the CSS for the elements in question:</p><pre tabindex=\"0\"><code>.content { \n   position: relative; \n   z-index: 1; \n} \n\n.modal { \n   position: fixed; \n   z-index: 100; \n} \n\n.side-tab { \n   position: fixed; \n   z-index: 5; \n}</code></pre><p>All the elements have their position set, and the side tab has a <code>z-index</code> of 5, which positions it on top of the content element, which is at <code>z-index: 1</code>.</p><p>Then, the modal has <code>z-index: 100</code> which <em>should</em> put it on top of the side tab at <code>z-index: 5</code>. But instead, the modal overlay is underneath the side tab.</p><p>Why is this happening?</p><p>Previously, we addressed some factors that go into the stacking context, such as if the element has its position set, as well as its order in the markup.</p><p><strong>But yet another aspect of stacking context is that a child element is limited to the stacking context of its parent.</strong></p><p>Let\u2019s take a closer look at the three elements in question.</p><p>Here\u2019s the markup we have:</p><pre tabindex=\"0\"><code>&lt;section class=\"content\"&gt;            \n    &lt;div class=\"modal\"&gt;&lt;/div&gt;\n&lt;/section&gt;\n\n&lt;div class=\"side-tab\"&gt;&lt;/div&gt;</code></pre><p>Looking at the markup, we can see that the content and side tab elements are siblings. That is, they exist at the same level in the markup (this is different from z-index level). And the modal is a child element of the content element.</p><p>Because the modal is inside the content element, its <code>z-index</code> of 100 only has an effect inside its parent, the content element. For example, if there were other child elements that were siblings to the modal, their <code>z-index</code> values would put them on top of or underneath each other.</p><p>But the <code>z-index</code> value of those child elements doesn't mean anything outside the parent, because the parent content element has its <code>z-index</code> set to 1.</p><p>So its children, including the modal, can\u2019t break out of that <code>z-index</code> level.</p><p>(You can remember it with this slightly depressing metaphor: a child can be limited by its parents, and can\u2019t break free of them.)</p><p>There are a couple of solutions to this problem:</p><h3 id=\"solution-move-the-modal-outside-of-the-content-parent-and-into-the-main-stacking-context-of-the-page-\">Solution: Move the modal outside of the content parent, and into the main stacking context of the page.</h3><p>The corrected markup would then look like this:</p><pre tabindex=\"0\"><code>&lt;section class=\"content\"&gt;&lt;/section&gt;\n\n&lt;div class=\"modal\"&gt;&lt;/div&gt;\n\n&lt;div class=\"side-tab\"&gt;&lt;/div&gt;</code></pre><p>Now, the modal element is a sibling element to the two others. This puts all three elements in the same stacking context as them, so each of their z-index levels will now affect one another.</p><p>In this new stacking context, the elements will display in the following order, from top to bottom:</p><ul><li>modal (<code>z-index: 100</code>)</li><li>side tab (<code>z-index: 5</code>)</li><li>content (<code>z-index: 1</code>)</li></ul><h3 id=\"alternative-solution-remove-positioning-from-the-content-so-it-won-t-limit-the-modal-s-z-index-\">Alternative Solution: Remove positioning from the content, so it won\u2019t limit the modal\u2019s z-index.</h3><p>If you don\u2019t want to or can\u2019t change the markup, you can fix this problem by removing the <code>position</code> setting from the content element:</p><pre tabindex=\"0\"><code>.content { \n   // No position set \n} \n\n.modal { \n   position: absolute; \n   z-index: 100; \n} \n\n.side-tab { \n   position: absolute; \n   z-index: 5; \n}</code></pre><p>Since the content element is now unpositioned, it will no longer limit the modal\u2019s <code>z-index</code> value. So the open modal will be positioned on top of the side tab element, due to its higher <code>z-index</code> of 100.</p><p>While this does work, I personally would go for the first solution.</p><p>Because if for some reason in the future you have to position the content element, it will again limit the modal\u2019s order in the stacking context.</p><h3 id=\"in-summary\">In Summary<br/></h3><p>I hope that you\u2019ve found this tutorial helpful! To sum up, most issues with z-index can be solved by following these two guidelines:</p><ol><li>Check that the elements have their position set and z-index numbers in the correct order.</li><li>Make sure that you don\u2019t have parent elements limiting the <code>z-index</code> level of their children.</li></ol><h4 id=\"want-more\">Want more?</h4><p>I'm creating a course in responsive design! <a href=\"https://coder-coder.com/responsive-design-beginners/\">Sign up here</a> to get emailed when it's published.</p><p>I write web development tutorials on my blog c<a href=\"https://coder-coder.com/\" rel=\"noopener\">oder-coder.com</a>, post mini-tips on <a href=\"https://www.instagram.com/thecodercoder/\" rel=\"noopener\">Instagram</a> and coding tutorials on <a href=\"https://www.youtube.com/c/codercodertv\">YouTube</a>.</p>\n</section>\n<hr/>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nZ-index is a CSS property that allows you to position elements in layers on top of one another. It\u2019s super useful, and honestly a very important tool to know how to use in CSS.Unfortunately, z-index is one of those properties that doesn\u2019t always behave in an intuitive way. It seems simple at first- a higher z-index number means the element will be on top of elements with lower z-index numbers. But there are some additional rules that make things more complicated. And you can\u2019t always fix things by setting the z-index to 999999! ?This article will explain in detail four of the most common reasons that z-index isn\u2019t working for you, and exactly how you can fix it.We\u2019ll be going through some actual code examples and problem-solving them. After reading this article, you\u2019ll be able to understand and avoid those common z-index pitfalls!\n        \n          \n            \n          \n        \n      Let\u2019s check out the first reason:1. Elements in the same stacking context will display in order of appearance, with latter elements on top of former elements.In our first example, we have a relatively simple layout that includes 3 main elements:An image of a catA white block with textAnother image of the same catHere\u2019s the HTML markup for that:<div class=\"cat-top\"></div> \n\n<div class=\"content__block\"> Meow meow meow... </div> \n\n<div class=\"cat-bottom\"></div>In this layout, we ideally want the white block of text to be on top of both cats.To try to achieve this, we\u2019ve added some negative margins to the CSS for both cat images, so that they overlap the white block a bit:.cat-top { \n   margin-bottom: -110px; \n} \n\n.cat-bottom { \n   float: right; \n   margin-top: -120px; \n}However, it looks like this:The first cat is indeed positioned underneath the white content block, just like we want. But the second cat image is positioned on top of the block!Why is this happening?The reason for this behavior is due to the natural stacking order on the webpage. These guidelines basically determine which elements will be on top and which will be on the bottom.Even if elements don\u2019t have their z-index set, there is a rhyme and reason to which ones will be on top.In our case, none of the elements have a z-index value. So their stacking order is determined by their order of appearance. According to this rule, elements that come later in the markup will be on top of elements that come before them.(You can read more of the stacking order guidelines at Mozilla Developer Network here.)In our example with the cats and the white block, they are obeying this rule. That\u2019s why the first cat is underneath the white block element, and the white block is underneath the second cat.Ok, stacking order is all well and good, but how do we fix the CSS so the second cat is underneath the white block?Let\u2019s look at the second reason:2. The element doesn\u2019t have its position setOne of the other guidelines that determine stacking order is if an element has its position set or not.To set position for an element, add the CSS position property to anything other than static, like relative or absolute. (You can read more about it in this article that I wrote.)According to this rule, positioned elements will display on top of unpositioned elements.So setting the white block to be position: relative, and leaving the two cat elements unpositioned will put the white block on the top of the cats in the stacking order.This is how it will look- you can also play around with the Codepen above.Woohoo!Now, the next thing we want to do is rotate the bottom cat upside down, using the transform property. That way, both cats will be underneath the white block, with only their heads sticking out.But doing so can cause more z-index-related confusion. We'll address the problem and the solution in the next part.3. Setting some CSS properties like opacity or transform will put the element in a new stacking context.As we just mentioned, we want to turn the bottom cat upside down. To accomplish this, we\u2019ll add transform: rotate(180deg)..cat-bottom { \n   float: right; \n   margin-top: -120px; \n   transform: rotate(180deg); \n}But this causes the bottom cat to be displayed on top of the white block again!What the heck is going on here??You may not run into this issue often, but another aspect of stacking order is that some CSS properties like transform or opacity will put the element into its own, new stacking context.What this means is that adding the transform to the .cat-bottom element makes it behave as if it had a z-index of 0. Even though it doesn't have its position or z-index set at all! (W3.org has some informative but rather dense documentation on how this works with the opacity property)Remember, we never added a z-index value to the white block, only position: relative. This was enough to position the white block on top of the unpositioned cats.But since the .bottom-cat element is acting as though it is relatively positioned with z-index: 0, transforming it has positioned it on top of the white block.The solution to this is to set position: relative and explicitly set z-index on at least the white block. You could go one step further and set position: relative and a lower z-index on the cat elements, just to be extra safe..content__block { \n   position: relative; \n   z-index: 2; \n} \n\n.cat-top, .cat-bottom { \n   position: relative; z-index: 1; \n}In my opinion, doing this will solve most, if not all of the more basic z-index issues.Now, let\u2019s move on to our last reason that your z-index isn't working. This one is a bit more complex, because it involves parent and child elements.4. The element is in a lower stacking context due to its parent\u2019s z-index levelLet\u2019s check out our code example for this:Here\u2019s what we have: a simple webpage with regular content, and a pink side tab that says \u201cSend Feedback\u201d that is positioned on top of the content.Then, when you click on the photo of the cat, a modal window with a transparent gray background overlay opens up.However, even when the modal window is open, the side tab is still on top of the gray overlay. We want the overlay to be displayed over everything, including the side tab.Let\u2019s take a look at the CSS for the elements in question:.content { \n   position: relative; \n   z-index: 1; \n} \n\n.modal { \n   position: fixed; \n   z-index: 100; \n} \n\n.side-tab { \n   position: fixed; \n   z-index: 5; \n}All the elements have their position set, and the side tab has a z-index of 5, which positions it on top of the content element, which is at z-index: 1.Then, the modal has z-index: 100 which should put it on top of the side tab at z-index: 5. But instead, the modal overlay is underneath the side tab.Why is this happening?Previously, we addressed some factors that go into the stacking context, such as if the element has its position set, as well as its order in the markup.But yet another aspect of stacking context is that a child element is limited to the stacking context of its parent.Let\u2019s take a closer look at the three elements in question.Here\u2019s the markup we have:<section class=\"content\">            \n    <div class=\"modal\"></div>\n</section>\n\n<div class=\"side-tab\"></div>Looking at the markup, we can see that the content and side tab elements are siblings. That is, they exist at the same level in the markup (this is different from z-index level). And the modal is a child element of the content element.Because the modal is inside the content element, its z-index of 100 only has an effect inside its parent, the content element. For example, if there were other child elements that were siblings to the modal, their z-index values would put them on top of or underneath each other.But the z-index value of those child elements doesn't mean anything outside the parent, because the parent content element has its z-index set to 1.So its children, including the modal, can\u2019t break out of that z-index level.(You can remember it with this slightly depressing metaphor: a child can be limited by its parents, and can\u2019t break free of them.)There are a couple of solutions to this problem:Solution: Move the modal outside of the content parent, and into the main stacking context of the page.The corrected markup would then look like this:<section class=\"content\"></section>\n\n<div class=\"modal\"></div>\n\n<div class=\"side-tab\"></div>Now, the modal element is a sibling element to the two others. This puts all three elements in the same stacking context as them, so each of their z-index levels will now affect one another.In this new stacking context, the elements will display in the following order, from top to bottom:modal (z-index: 100)side tab (z-index: 5)content (z-index: 1)Alternative Solution: Remove positioning from the content, so it won\u2019t limit the modal\u2019s z-index.If you don\u2019t want to or can\u2019t change the markup, you can fix this problem by removing the position setting from the content element:.content { \n   // No position set \n} \n\n.modal { \n   position: absolute; \n   z-index: 100; \n} \n\n.side-tab { \n   position: absolute; \n   z-index: 5; \n}Since the content element is now unpositioned, it will no longer limit the modal\u2019s z-index value. So the open modal will be positioned on top of the side tab element, due to its higher z-index of 100.While this does work, I personally would go for the first solution.Because if for some reason in the future you have to position the content element, it will again limit the modal\u2019s order in the stacking context.In SummaryI hope that you\u2019ve found this tutorial helpful! To sum up, most issues with z-index can be solved by following these two guidelines:Check that the elements have their position set and z-index numbers in the correct order.Make sure that you don\u2019t have parent elements limiting the z-index level of their children.Want more?I'm creating a course in responsive design! Sign up here to get emailed when it's published.I write web development tutorials on my blog coder-coder.com, post mini-tips on Instagram and coding tutorials on YouTube.\n\n                        \n                    \n                    \n                        \n                        \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 10689, "excerpt": "Z-index is a CSS property that allows you to position elements in layers on top\nof one another. It\u2019s super useful, and honestly a very important tool to know\nhow to use in CSS.\n\nUnfortunately, z-index is one of those properties that doesn\u2019t always behave in\nan intuitive way. It seems simple at first- a higher z-index number means the\nelement will be on top of elements with lower z-index numbers. But there are\nsome additional rules that make things more complicated. And you can\u2019t always\nfix thing", "siteName": "freeCodeCamp.org", "publishedTime": "2019-04-25T16:38:07.000Z", "id": "bcff267d8956b8305e3904e0841624157f6c54a7", "url": "https://www.freecodecamp.org/news/4-reasons-your-z-index-isnt-working-and-how-to-fix-it-coder-coder-6bc05f103e6c/", "domain": "freecodecamp.org", "date": "2023-12-27T18:11:18.341902", "resultUri": "http://localhost:3000/result/bcff267d8956b8305e3904e0841624157f6c54a7", "query": {"url": ["https://www.freecodecamp.org/news/4-reasons-your-z-index-isnt-working-and-how-to-fix-it-coder-coder-6bc05f103e6c/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "4 reasons your z-index isn\u2019t working (and how to fix it)", "description": "Z-index is a CSS property that allows you to position elements in layers on top of one another. It\u2019s super useful, and honestly a very important tool to know how to use in CSS. Unfortunately, z-index is one of those properties that doesn\u2019t always behave in an intuitive way. It", "url": "https://www.freecodecamp.org/news/4-reasons-your-z-index-isnt-working-and-how-to-fix-it-coder-coder-6bc05f103e6c/", "image": "https://cdn-media-1.freecodecamp.org/images/1*Nm4AWKx-ezJBFLGShJCVAw.jpeg", "image:width": "800", "image:height": "420"}, "twitter": {"card": "summary_large_image", "title": "4 reasons your z-index isn\u2019t working (and how to fix it)", "description": "Z-index is a CSS property that allows you to position elements in layers on top of one another. It\u2019s super useful, and honestly a very important tool to know how to use in CSS. Unfortunately, z-index is one of those properties that doesn\u2019t always behave in an intuitive way. It", "url": "https://www.freecodecamp.org/news/4-reasons-your-z-index-isnt-working-and-how-to-fix-it-coder-coder-6bc05f103e6c/", "image": "https://cdn-media-1.freecodecamp.org/images/1*Nm4AWKx-ezJBFLGShJCVAw.jpeg", "label1": "Written by", "data1": "Jessica Chan", "label2": "Filed under", "data2": "CSS, Web Development, Coding, Programming, Tech", "site": "@freecodecamp", "creator": "@thecodercoder"}}}