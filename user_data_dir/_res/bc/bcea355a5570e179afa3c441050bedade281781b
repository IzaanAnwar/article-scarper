{"title": "How to Create a Music Bot Using Discord.js", "byline": "Gabriel Tanner", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>How to Create a Music Bot Using Discord.js</h1>\n<section>\n<section data-test-label=\"post-content\">\n<p>The discord API provides you with an easy tool to create and use your own bots and tools. </p><p>Today we are going to take a look at how we can create a basic music bot and add it to our server. The bot will be able to play, skip, and stop the music and will also support queuing functionality.</p><h2 id=\"prerequisites\">Prerequisites</h2><p>Before we get started creating the bot make sure that you have installed all the needed tools.</p><ul><li><a href=\"https://nodejs.org/en/\" rel=\"nofollow\">Node</a></li><li><a href=\"https://www.npmjs.com/\" rel=\"nofollow\">NPM</a></li><li><a href=\"https://www.ffmpeg.org/\" rel=\"nofollow\">FFMPEG</a></li></ul><p>After the installation, we can continue by setting up our discord bot.</p><h2 id=\"setting-up-a-discord-bot\">Setting up a discord bot</h2><p>First, we need to create a new application on the discord development portal.</p><p>We can do so by visiting the <a href=\"https://discordapp.com/developers/applications/\">portal </a>and clicking on new application.</p><figure><img alt=\"Creating a new application\" height=\"400\" loading=\"lazy\" src=\"https://cms.gabrieltanner.org/content/images/2019/09/Creating-application.PNG\" width=\"600\"/><figcaption>Creating a new application</figcaption></figure><p>After that, we need to give our application a name and click the create button.</p><figure><img alt=\"Creating a discord bot\" height=\"400\" loading=\"lazy\" src=\"https://cms.gabrieltanner.org/content/images/2019/09/create-bot.png\" width=\"600\"/><figcaption>Creating a discord bot</figcaption></figure><p>After that, we need to select the bot tab and click on add bot.</p><figure><img alt=\"Discord bot information page\" height=\"400\" loading=\"lazy\" src=\"https://cms.gabrieltanner.org/content/images/2019/09/bot-info.png\" width=\"600\"/><figcaption>Discord bot information page</figcaption></figure><p>Now our bot is created and we can continue with inviting it to our server.</p><h3 id=\"adding-the-bot-to-your-server\">Adding the bot to your server</h3><p>After creating our bot we can invite it using the OAuth2 URL Generator.</p><p>For that, we need to navigate to the OAuth2 page and select bot in the scope tap.</p><figure><img alt=\"OAuth2 tab\" height=\"400\" loading=\"lazy\" src=\"https://cms.gabrieltanner.org/content/images/2019/09/o-auth.png\" width=\"600\"/><figcaption>OAuth2 tab</figcaption></figure><p>After that, we need to select the needed permissions to play music and read messages.</p><figure><img alt=\"Giving the discord bot the needed permissions\" height=\"400\" loading=\"lazy\" src=\"https://cms.gabrieltanner.org/content/images/2019/09/giving-permissions.png\" width=\"600\"/><figcaption>Giving the discord bot the needed permissions</figcaption></figure><p>Then we can copy our generated URL and paste it into our browser.</p><figure><img alt=\"Discord bot invite link\" height=\"400\" loading=\"lazy\" src=\"https://cms.gabrieltanner.org/content/images/2019/09/bot-invite-link.png\" width=\"600\"/><figcaption>Discord bot invite link</figcaption></figure><p>After pasting it, we add it to our server by selecting the server and clicking the authorize button.</p><figure><img alt=\"Invite the bot to the server\" height=\"400\" loading=\"lazy\" src=\"https://cms.gabrieltanner.org/content/images/2019/09/adding-bot-to-server.png\" width=\"600\"/><figcaption>Invite the bot to the server</figcaption></figure><h3 id=\"creating-our-project\">Creating our project</h3><p>Now we can start creating our project using our terminal.</p><p>First, we create a directory and move into it. We can do so by using these two commands.</p><pre tabindex=\"0\"><code>mkdir musicbot &amp;&amp; cd musicbot</code></pre><p>After that, we can create our project modules using the npm init command. After entering the command you will be asked some questions just answer them and continue.</p><p>Then we just need to create the two files we will work in.</p><pre tabindex=\"0\"><code>touch index.js &amp;&amp; touch config.json</code></pre><p>Now we just need to open our project in our text editor. I personally use VS Code and can open it with the following command.</p><pre tabindex=\"0\"><code>code .</code></pre><h3 id=\"discord-js-basics\">Discord js basics</h3><p>Now we just need to install some dependencies before we can get started.</p><pre tabindex=\"0\"><code>npm install discord.js ffmpeg fluent-ffmpeg @discordjs/opus ytdl-core --save</code></pre><p>After the installation finished we can continue with writing our config.json file. Here we save the token of our bot and the prefix he should listen for.</p><pre tabindex=\"0\"><code>{\n\"prefix\": \"!\",\n\"token\": \"your-token\"\n}</code></pre><p>To get your token you need to visit the discord developer portal again and copy it from the bot section.</p><figure><img alt=\"Copy token\" height=\"400\" loading=\"lazy\" src=\"https://cms.gabrieltanner.org/content/images/2019/09/Get-token.PNG\" width=\"600\"/><figcaption>Copy token</figcaption></figure><p>That are the only things we need to do in our config.json file. So let\u2019s start writing our javascript code.</p><p>First, we need to import all our dependencies.</p><pre tabindex=\"0\"><code>const Discord = require('discord.js');\nconst {\n\tprefix,\n\ttoken,\n} = require('./config.json');\nconst ytdl = require('ytdl-core');</code></pre><p>After that, we can create our client and login using our token.</p><pre tabindex=\"0\"><code>const client = new Discord.Client();\nclient.login(token);</code></pre><p>Now let\u2019s add some basic listeners that console.log when they get executed.</p><pre tabindex=\"0\"><code>client.once('ready', () =&gt; {\n console.log('Ready!');\n});\nclient.once('reconnecting', () =&gt; {\n console.log('Reconnecting!');\n});\nclient.once('disconnect', () =&gt; {\n console.log('Disconnect!');\n});</code></pre><p>After that, we can start our bot using the node command and he should be online on discord and print \u201cReady!\u201d in the console.</p><pre tabindex=\"0\"><code>node index.js</code></pre><h3 id=\"reading-messages\">Reading messages</h3><p>Now that our bot is on our server and able to go online, we can start reading chat messages and responding to them.</p><p>To read messages we only need to write one simple function.</p><pre tabindex=\"0\"><code>client.on('message', async message =&gt; {\n  \n}</code></pre><p>Here we create a listener for the message event and get the message and save it into a message object if it is triggered.</p><p>Now we need to check if the message is from our own bot and ignore it if it is.</p><pre tabindex=\"0\"><code>if (message.author.bot) return;</code></pre><p>In this line, we check if the author of the message is our bot and return if it is.</p><p>After that, we check if the message starts with the prefix we defined earlier and return if it doesn\u2019t.</p><pre tabindex=\"0\"><code>if (!message.content.startsWith(prefix)) return;</code></pre><p>After that, we can check which command we need to execute. We can do so using some simple if statements.</p><pre tabindex=\"0\"><code>const serverQueue = queue.get(message.guild.id);\n\nif (message.content.startsWith(`${prefix}play`)) {\n    execute(message, serverQueue);\n    return;\n} else if (message.content.startsWith(`${prefix}skip`)) {\n    skip(message, serverQueue);\n    return;\n} else if (message.content.startsWith(`${prefix}stop`)) {\n    stop(message, serverQueue);\n    return;\n} else {\n    message.channel.send(\"You need to enter a valid command!\");\n}</code></pre><p>In this code block, we check which command to execute and call the command. If the input command isn\u2019t valid we write an error message into the chat using the <em><em><em><em>send()</em></em></em></em> function.</p><p>Now that we know which command we need to execute we can start implementing these commands.</p><h3 id=\"adding-songs\">Adding songs</h3><p>Let's start by adding the play command. For that, we need a song and a guild (A guild represent an isolated collection of users and channels and is often referred to as a server). We also need the ytdl library we installed earlier.</p><p>First, we need to create a map with the name of the queue where we save all the songs we type in the chat.</p><pre tabindex=\"0\"><code>const queue = new Map();</code></pre><p>After that, we create an async function called execute and check if the user is in a voice chat and if the bot has the right permission. If not we write an error message and return.</p><pre tabindex=\"0\"><code>async function execute(message, serverQueue) {\n  const args = message.content.split(\" \");\n\n  const voiceChannel = message.member.voice.channel;\n  if (!voiceChannel)\n    return message.channel.send(\n      \"You need to be in a voice channel to play music!\"\n    );\n  const permissions = voiceChannel.permissionsFor(message.client.user);\n  if (!permissions.has(\"CONNECT\") || !permissions.has(\"SPEAK\")) {\n    return message.channel.send(\n      \"I need the permissions to join and speak in your voice channel!\"\n    );\n  }\n}</code></pre><p>Now we can continue with getting the song info and saving it into a song object. For that, we use our ytdl library which gets the song information from the youtube link.</p><pre tabindex=\"0\"><code>const songInfo = await ytdl.getInfo(args[1]);\nconst song = {\n title: songInfo.title,\n url: songInfo.video_url,\n};</code></pre><p>This will get the information of the song using the <em><em><em><em>ytdl </em></em></em></em>library we installed earlier. Then we save the information we need into a song object.</p><p>After saving the song info we just need to create a contract we can add to our queue. To do so we first need to check if our serverQueue is already defined which means that music is already playing. If so we just need to add the song to our existing serverQueue and send a success message. If not we need to create it and try to join the voice channel and start playing music.</p><pre tabindex=\"0\"><code>if (!serverQueue) {\n\n}else {\n serverQueue.songs.push(song);\n console.log(serverQueue.songs);\n return message.channel.send(`${song.title} has been added to the queue!`);\n}</code></pre><p>Here we check if the <em><em><em><em>serverQueue </em></em></em></em>is empty and add the song to it if it\u2019s not. Now we just need to create our contract if the <em><em><em><em>serverQueue </em></em></em></em>is null.</p><pre tabindex=\"0\"><code>// Creating the contract for our queue\nconst queueContruct = {\n textChannel: message.channel,\n voiceChannel: voiceChannel,\n connection: null,\n songs: [],\n volume: 5,\n playing: true,\n};\n// Setting the queue using our contract\nqueue.set(message.guild.id, queueContruct);\n// Pushing the song to our songs array\nqueueContruct.songs.push(song);\n\ntry {\n // Here we try to join the voicechat and save our connection into our object.\n var connection = await voiceChannel.join();\n queueContruct.connection = connection;\n // Calling the play function to start a song\n play(message.guild, queueContruct.songs[0]);\n} catch (err) {\n // Printing the error message if the bot fails to join the voicechat\n console.log(err);\n queue.delete(message.guild.id);\n return message.channel.send(err);\n}</code></pre><p>In this code block, we create a contract and add our song to the songs array. After that, we try to join the voice chat of the user and call our <em><em><em><em>play()</em></em></em></em> function we will implement after that.</p><h3 id=\"playing-songs\">Playing songs</h3><p>Now that we can add our songs to our queue and create a contract if there isn\u2019t one yet we can start implementing our play functionality.</p><p>First, we will create a function called play which takes two parameters (the guild and the song we want to play) and checks if the song is empty. If so we will just leave the voice channel and delete the queue.</p><pre tabindex=\"0\"><code>function play(guild, song) {\n  const serverQueue = queue.get(guild.id);\n  if (!song) {\n    serverQueue.voiceChannel.leave();\n    queue.delete(guild.id);\n    return;\n  }\n}</code></pre><p>After that, we will start playing our song using the play() function of the connection and passing the URL of our song.</p><pre tabindex=\"0\"><code>const dispatcher = serverQueue.connection\n    .play(ytdl(song.url))\n    .on(\"finish\", () =&gt; {\n        serverQueue.songs.shift();\n        play(guild, serverQueue.songs[0]);\n    })\n    .on(\"error\", error =&gt; console.error(error));\ndispatcher.setVolumeLogarithmic(serverQueue.volume / 5);\nserverQueue.textChannel.send(`Start playing: **${song.title}**`);</code></pre><p>Here we create a stream and pass it the URL of our song. We also add two listeners that handle the end and error event.</p><p><strong><strong><strong><strong>Note:</strong></strong></strong></strong> This is a recursive function which means that it calls itself over and over again. We use recursion so it plays the next song when the song is finished.</p><p>Now we are ready to play a song by just typing !play URL in the chat.</p><h3 id=\"skipping-songs\">Skipping songs</h3><p>Now we can start implementing the skipping functionality. For that, we just need to end the dispatcher we created in our <em><em><em><em>play()</em></em></em></em> function so it starts the next song.</p><pre tabindex=\"0\"><code>function skip(message, serverQueue) {\n  if (!message.member.voice.channel)\n    return message.channel.send(\n      \"You have to be in a voice channel to stop the music!\"\n    );\n  if (!serverQueue)\n    return message.channel.send(\"There is no song that I could skip!\");\n  serverQueue.connection.dispatcher.end();\n}\n</code></pre><p>Here we check if the user that typed the command is in a voice channel and if there is a song to skip.</p><h3 id=\"stoping-songs\">Stoping songs</h3><p>The <em><em><em><em>stop()</em></em></em></em> function is almost the same as the <em><em><em><em>skip()</em></em></em></em> except that we clear the songs array which will make our bot delete the queue and leave the voice chat.</p><pre tabindex=\"0\"><code>function stop(message, serverQueue) {\n  if (!message.member.voice.channel)\n    return message.channel.send(\n      \"You have to be in a voice channel to stop the music!\"\n    );\n  serverQueue.songs = [];\n  serverQueue.connection.dispatcher.end();\n}</code></pre><h3 id=\"complete-source-code-for-the-index-js-\">Complete source code for the index.js:</h3><p>Here you can get the complete source code for our music bot:</p><pre tabindex=\"0\"><code>const Discord = require(\"discord.js\");\nconst { prefix, token } = require(\"./config.json\");\nconst ytdl = require(\"ytdl-core\");\n\nconst client = new Discord.Client();\n\nconst queue = new Map();\n\nclient.once(\"ready\", () =&gt; {\n  console.log(\"Ready!\");\n});\n\nclient.once(\"reconnecting\", () =&gt; {\n  console.log(\"Reconnecting!\");\n});\n\nclient.once(\"disconnect\", () =&gt; {\n  console.log(\"Disconnect!\");\n});\n\nclient.on(\"message\", async message =&gt; {\n  if (message.author.bot) return;\n  if (!message.content.startsWith(prefix)) return;\n\n  const serverQueue = queue.get(message.guild.id);\n\n  if (message.content.startsWith(`${prefix}play`)) {\n    execute(message, serverQueue);\n    return;\n  } else if (message.content.startsWith(`${prefix}skip`)) {\n    skip(message, serverQueue);\n    return;\n  } else if (message.content.startsWith(`${prefix}stop`)) {\n    stop(message, serverQueue);\n    return;\n  } else {\n    message.channel.send(\"You need to enter a valid command!\");\n  }\n});\n\nasync function execute(message, serverQueue) {\n  const args = message.content.split(\" \");\n\n  const voiceChannel = message.member.voice.channel;\n  if (!voiceChannel)\n    return message.channel.send(\n      \"You need to be in a voice channel to play music!\"\n    );\n  const permissions = voiceChannel.permissionsFor(message.client.user);\n  if (!permissions.has(\"CONNECT\") || !permissions.has(\"SPEAK\")) {\n    return message.channel.send(\n      \"I need the permissions to join and speak in your voice channel!\"\n    );\n  }\n\n  const songInfo = await ytdl.getInfo(args[1]);\n  const song = {\n    title: songInfo.title,\n    url: songInfo.video_url\n  };\n\n  if (!serverQueue) {\n    const queueContruct = {\n      textChannel: message.channel,\n      voiceChannel: voiceChannel,\n      connection: null,\n      songs: [],\n      volume: 5,\n      playing: true\n    };\n\n    queue.set(message.guild.id, queueContruct);\n\n    queueContruct.songs.push(song);\n\n    try {\n      var connection = await voiceChannel.join();\n      queueContruct.connection = connection;\n      play(message.guild, queueContruct.songs[0]);\n    } catch (err) {\n      console.log(err);\n      queue.delete(message.guild.id);\n      return message.channel.send(err);\n    }\n  } else {\n    serverQueue.songs.push(song);\n    return message.channel.send(`${song.title} has been added to the queue!`);\n  }\n}\n\nfunction skip(message, serverQueue) {\n  if (!message.member.voice.channel)\n    return message.channel.send(\n      \"You have to be in a voice channel to stop the music!\"\n    );\n  if (!serverQueue)\n    return message.channel.send(\"There is no song that I could skip!\");\n  serverQueue.connection.dispatcher.end();\n}\n\nfunction stop(message, serverQueue) {\n  if (!message.member.voice.channel)\n    return message.channel.send(\n      \"You have to be in a voice channel to stop the music!\"\n    );\n  serverQueue.songs = [];\n  serverQueue.connection.dispatcher.end();\n}\n\nfunction play(guild, song) {\n  const serverQueue = queue.get(guild.id);\n  if (!song) {\n    serverQueue.voiceChannel.leave();\n    queue.delete(guild.id);\n    return;\n  }\n\n  const dispatcher = serverQueue.connection\n    .play(ytdl(song.url))\n    .on(\"finish\", () =&gt; {\n      serverQueue.songs.shift();\n      play(guild, serverQueue.songs[0]);\n    })\n    .on(\"error\", error =&gt; console.error(error));\n  dispatcher.setVolumeLogarithmic(serverQueue.volume / 5);\n  serverQueue.textChannel.send(`Start playing: **${song.title}**`);\n}\n\nclient.login(token);\n</code></pre><h2 id=\"conclusion\">Conclusion</h2><p>You made it all the way until the end! Hope that this article helped you understand the Discord API and how you can use it to create a simple bot. If you want to see an example of a more advanced discord bot you can visit my <a href=\"https://github.com/TannerGabriel/discord-bot\">Github repository</a>.</p><p>If you have found this useful, please consider recommending and sharing it with other fellow developers.</p><p>If you have any questions or feedback, let me know in the comments down below.</p>\n</section>\n<hr/>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nThe discord API provides you with an easy tool to create and use your own bots and tools. Today we are going to take a look at how we can create a basic music bot and add it to our server. The bot will be able to play, skip, and stop the music and will also support queuing functionality.PrerequisitesBefore we get started creating the bot make sure that you have installed all the needed tools.NodeNPMFFMPEGAfter the installation, we can continue by setting up our discord bot.Setting up a discord botFirst, we need to create a new application on the discord development portal.We can do so by visiting the portal and clicking on new application.Creating a new applicationAfter that, we need to give our application a name and click the create button.Creating a discord botAfter that, we need to select the bot tab and click on add bot.Discord bot information pageNow our bot is created and we can continue with inviting it to our server.Adding the bot to your serverAfter creating our bot we can invite it using the OAuth2 URL Generator.For that, we need to navigate to the OAuth2 page and select bot in the scope tap.OAuth2 tabAfter that, we need to select the needed permissions to play music and read messages.Giving the discord bot the needed permissionsThen we can copy our generated URL and paste it into our browser.Discord bot invite linkAfter pasting it, we add it to our server by selecting the server and clicking the authorize button.Invite the bot to the serverCreating our projectNow we can start creating our project using our terminal.First, we create a directory and move into it. We can do so by using these two commands.mkdir musicbot && cd musicbotAfter that, we can create our project modules using the npm init command. After entering the command you will be asked some questions just answer them and continue.Then we just need to create the two files we will work in.touch index.js && touch config.jsonNow we just need to open our project in our text editor. I personally use VS Code and can open it with the following command.code .Discord js basicsNow we just need to install some dependencies before we can get started.npm install discord.js ffmpeg fluent-ffmpeg @discordjs/opus ytdl-core --saveAfter the installation finished we can continue with writing our config.json file. Here we save the token of our bot and the prefix he should listen for.{\n\"prefix\": \"!\",\n\"token\": \"your-token\"\n}To get your token you need to visit the discord developer portal again and copy it from the bot section.Copy tokenThat are the only things we need to do in our config.json file. So let\u2019s start writing our javascript code.First, we need to import all our dependencies.const Discord = require('discord.js');\nconst {\n\tprefix,\n\ttoken,\n} = require('./config.json');\nconst ytdl = require('ytdl-core');After that, we can create our client and login using our token.const client = new Discord.Client();\nclient.login(token);Now let\u2019s add some basic listeners that console.log when they get executed.client.once('ready', () => {\n console.log('Ready!');\n});\nclient.once('reconnecting', () => {\n console.log('Reconnecting!');\n});\nclient.once('disconnect', () => {\n console.log('Disconnect!');\n});After that, we can start our bot using the node command and he should be online on discord and print \u201cReady!\u201d in the console.node index.jsReading messagesNow that our bot is on our server and able to go online, we can start reading chat messages and responding to them.To read messages we only need to write one simple function.client.on('message', async message => {\n  \n}Here we create a listener for the message event and get the message and save it into a message object if it is triggered.Now we need to check if the message is from our own bot and ignore it if it is.if (message.author.bot) return;In this line, we check if the author of the message is our bot and return if it is.After that, we check if the message starts with the prefix we defined earlier and return if it doesn\u2019t.if (!message.content.startsWith(prefix)) return;After that, we can check which command we need to execute. We can do so using some simple if statements.const serverQueue = queue.get(message.guild.id);\n\nif (message.content.startsWith(`${prefix}play`)) {\n    execute(message, serverQueue);\n    return;\n} else if (message.content.startsWith(`${prefix}skip`)) {\n    skip(message, serverQueue);\n    return;\n} else if (message.content.startsWith(`${prefix}stop`)) {\n    stop(message, serverQueue);\n    return;\n} else {\n    message.channel.send(\"You need to enter a valid command!\");\n}In this code block, we check which command to execute and call the command. If the input command isn\u2019t valid we write an error message into the chat using the send() function.Now that we know which command we need to execute we can start implementing these commands.Adding songsLet's start by adding the play command. For that, we need a song and a guild (A guild represent an isolated collection of users and channels and is often referred to as a server). We also need the ytdl library we installed earlier.First, we need to create a map with the name of the queue where we save all the songs we type in the chat.const queue = new Map();After that, we create an async function called execute and check if the user is in a voice chat and if the bot has the right permission. If not we write an error message and return.async function execute(message, serverQueue) {\n  const args = message.content.split(\" \");\n\n  const voiceChannel = message.member.voice.channel;\n  if (!voiceChannel)\n    return message.channel.send(\n      \"You need to be in a voice channel to play music!\"\n    );\n  const permissions = voiceChannel.permissionsFor(message.client.user);\n  if (!permissions.has(\"CONNECT\") || !permissions.has(\"SPEAK\")) {\n    return message.channel.send(\n      \"I need the permissions to join and speak in your voice channel!\"\n    );\n  }\n}Now we can continue with getting the song info and saving it into a song object. For that, we use our ytdl library which gets the song information from the youtube link.const songInfo = await ytdl.getInfo(args[1]);\nconst song = {\n title: songInfo.title,\n url: songInfo.video_url,\n};This will get the information of the song using the ytdl library we installed earlier. Then we save the information we need into a song object.After saving the song info we just need to create a contract we can add to our queue. To do so we first need to check if our serverQueue is already defined which means that music is already playing. If so we just need to add the song to our existing serverQueue and send a success message. If not we need to create it and try to join the voice channel and start playing music.if (!serverQueue) {\n\n}else {\n serverQueue.songs.push(song);\n console.log(serverQueue.songs);\n return message.channel.send(`${song.title} has been added to the queue!`);\n}Here we check if the serverQueue is empty and add the song to it if it\u2019s not. Now we just need to create our contract if the serverQueue is null.// Creating the contract for our queue\nconst queueContruct = {\n textChannel: message.channel,\n voiceChannel: voiceChannel,\n connection: null,\n songs: [],\n volume: 5,\n playing: true,\n};\n// Setting the queue using our contract\nqueue.set(message.guild.id, queueContruct);\n// Pushing the song to our songs array\nqueueContruct.songs.push(song);\n\ntry {\n // Here we try to join the voicechat and save our connection into our object.\n var connection = await voiceChannel.join();\n queueContruct.connection = connection;\n // Calling the play function to start a song\n play(message.guild, queueContruct.songs[0]);\n} catch (err) {\n // Printing the error message if the bot fails to join the voicechat\n console.log(err);\n queue.delete(message.guild.id);\n return message.channel.send(err);\n}In this code block, we create a contract and add our song to the songs array. After that, we try to join the voice chat of the user and call our play() function we will implement after that.Playing songsNow that we can add our songs to our queue and create a contract if there isn\u2019t one yet we can start implementing our play functionality.First, we will create a function called play which takes two parameters (the guild and the song we want to play) and checks if the song is empty. If so we will just leave the voice channel and delete the queue.function play(guild, song) {\n  const serverQueue = queue.get(guild.id);\n  if (!song) {\n    serverQueue.voiceChannel.leave();\n    queue.delete(guild.id);\n    return;\n  }\n}After that, we will start playing our song using the play() function of the connection and passing the URL of our song.const dispatcher = serverQueue.connection\n    .play(ytdl(song.url))\n    .on(\"finish\", () => {\n        serverQueue.songs.shift();\n        play(guild, serverQueue.songs[0]);\n    })\n    .on(\"error\", error => console.error(error));\ndispatcher.setVolumeLogarithmic(serverQueue.volume / 5);\nserverQueue.textChannel.send(`Start playing: **${song.title}**`);Here we create a stream and pass it the URL of our song. We also add two listeners that handle the end and error event.Note: This is a recursive function which means that it calls itself over and over again. We use recursion so it plays the next song when the song is finished.Now we are ready to play a song by just typing !play URL in the chat.Skipping songsNow we can start implementing the skipping functionality. For that, we just need to end the dispatcher we created in our play() function so it starts the next song.function skip(message, serverQueue) {\n  if (!message.member.voice.channel)\n    return message.channel.send(\n      \"You have to be in a voice channel to stop the music!\"\n    );\n  if (!serverQueue)\n    return message.channel.send(\"There is no song that I could skip!\");\n  serverQueue.connection.dispatcher.end();\n}\nHere we check if the user that typed the command is in a voice channel and if there is a song to skip.Stoping songsThe stop() function is almost the same as the skip() except that we clear the songs array which will make our bot delete the queue and leave the voice chat.function stop(message, serverQueue) {\n  if (!message.member.voice.channel)\n    return message.channel.send(\n      \"You have to be in a voice channel to stop the music!\"\n    );\n  serverQueue.songs = [];\n  serverQueue.connection.dispatcher.end();\n}Complete source code for the index.js:Here you can get the complete source code for our music bot:const Discord = require(\"discord.js\");\nconst { prefix, token } = require(\"./config.json\");\nconst ytdl = require(\"ytdl-core\");\n\nconst client = new Discord.Client();\n\nconst queue = new Map();\n\nclient.once(\"ready\", () => {\n  console.log(\"Ready!\");\n});\n\nclient.once(\"reconnecting\", () => {\n  console.log(\"Reconnecting!\");\n});\n\nclient.once(\"disconnect\", () => {\n  console.log(\"Disconnect!\");\n});\n\nclient.on(\"message\", async message => {\n  if (message.author.bot) return;\n  if (!message.content.startsWith(prefix)) return;\n\n  const serverQueue = queue.get(message.guild.id);\n\n  if (message.content.startsWith(`${prefix}play`)) {\n    execute(message, serverQueue);\n    return;\n  } else if (message.content.startsWith(`${prefix}skip`)) {\n    skip(message, serverQueue);\n    return;\n  } else if (message.content.startsWith(`${prefix}stop`)) {\n    stop(message, serverQueue);\n    return;\n  } else {\n    message.channel.send(\"You need to enter a valid command!\");\n  }\n});\n\nasync function execute(message, serverQueue) {\n  const args = message.content.split(\" \");\n\n  const voiceChannel = message.member.voice.channel;\n  if (!voiceChannel)\n    return message.channel.send(\n      \"You need to be in a voice channel to play music!\"\n    );\n  const permissions = voiceChannel.permissionsFor(message.client.user);\n  if (!permissions.has(\"CONNECT\") || !permissions.has(\"SPEAK\")) {\n    return message.channel.send(\n      \"I need the permissions to join and speak in your voice channel!\"\n    );\n  }\n\n  const songInfo = await ytdl.getInfo(args[1]);\n  const song = {\n    title: songInfo.title,\n    url: songInfo.video_url\n  };\n\n  if (!serverQueue) {\n    const queueContruct = {\n      textChannel: message.channel,\n      voiceChannel: voiceChannel,\n      connection: null,\n      songs: [],\n      volume: 5,\n      playing: true\n    };\n\n    queue.set(message.guild.id, queueContruct);\n\n    queueContruct.songs.push(song);\n\n    try {\n      var connection = await voiceChannel.join();\n      queueContruct.connection = connection;\n      play(message.guild, queueContruct.songs[0]);\n    } catch (err) {\n      console.log(err);\n      queue.delete(message.guild.id);\n      return message.channel.send(err);\n    }\n  } else {\n    serverQueue.songs.push(song);\n    return message.channel.send(`${song.title} has been added to the queue!`);\n  }\n}\n\nfunction skip(message, serverQueue) {\n  if (!message.member.voice.channel)\n    return message.channel.send(\n      \"You have to be in a voice channel to stop the music!\"\n    );\n  if (!serverQueue)\n    return message.channel.send(\"There is no song that I could skip!\");\n  serverQueue.connection.dispatcher.end();\n}\n\nfunction stop(message, serverQueue) {\n  if (!message.member.voice.channel)\n    return message.channel.send(\n      \"You have to be in a voice channel to stop the music!\"\n    );\n  serverQueue.songs = [];\n  serverQueue.connection.dispatcher.end();\n}\n\nfunction play(guild, song) {\n  const serverQueue = queue.get(guild.id);\n  if (!song) {\n    serverQueue.voiceChannel.leave();\n    queue.delete(guild.id);\n    return;\n  }\n\n  const dispatcher = serverQueue.connection\n    .play(ytdl(song.url))\n    .on(\"finish\", () => {\n      serverQueue.songs.shift();\n      play(guild, serverQueue.songs[0]);\n    })\n    .on(\"error\", error => console.error(error));\n  dispatcher.setVolumeLogarithmic(serverQueue.volume / 5);\n  serverQueue.textChannel.send(`Start playing: **${song.title}**`);\n}\n\nclient.login(token);\nConclusionYou made it all the way until the end! Hope that this article helped you understand the Discord API and how you can use it to create a simple bot. If you want to see an example of a more advanced discord bot you can visit my Github repository.If you have found this useful, please consider recommending and sharing it with other fellow developers.If you have any questions or feedback, let me know in the comments down below.\n\n                        \n                    \n                    \n                        \n                        \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 14982, "excerpt": "The discord API provides you with an easy tool to create and use your own bots\nand tools. \n\nToday we are going to take a look at how we can create a basic music bot and add\nit to our server. The bot will be able to play, skip, and stop the music and\nwill also support queuing functionality.\n\nPrerequisites\nBefore we get started creating the bot make sure that you have installed all the\nneeded tools.\n\n * Node [https://nodejs.org/en/]\n * NPM [https://www.npmjs.com/]\n * FFMPEG [https://www.ffmpeg.org", "siteName": "freeCodeCamp.org", "publishedTime": "2019-04-22T15:51:07.000Z", "id": "bcea355a5570e179afa3c441050bedade281781b", "url": "https://www.freecodecamp.org/news/how-to-create-a-music-bot-using-discord-js-4436f5f3f0f8/", "domain": "freecodecamp.org", "date": "2023-12-27T18:12:00.098171", "resultUri": "http://localhost:3000/result/bcea355a5570e179afa3c441050bedade281781b", "query": {"url": ["https://www.freecodecamp.org/news/how-to-create-a-music-bot-using-discord-js-4436f5f3f0f8/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "How to Create a Music Bot Using Discord.js", "description": "The discord API provides you with an easy tool to create and use your own bots and tools.  Today we are going to take a look at how we can create a basic music bot and add it to our server. The bot will be able to play, skip,", "url": "https://www.freecodecamp.org/news/how-to-create-a-music-bot-using-discord-js-4436f5f3f0f8/", "image": "https://cdn-media-1.freecodecamp.org/images/0*rFQhPUqebJY9N4Ue", "image:width": "800", "image:height": "533"}, "twitter": {"card": "summary_large_image", "title": "How to Create a Music Bot Using Discord.js", "description": "The discord API provides you with an easy tool to create and use your own bots and tools.  Today we are going to take a look at how we can create a basic music bot and add it to our server. The bot will be able to play, skip,", "url": "https://www.freecodecamp.org/news/how-to-create-a-music-bot-using-discord-js-4436f5f3f0f8/", "image": "https://cdn-media-1.freecodecamp.org/images/0*rFQhPUqebJY9N4Ue", "label1": "Written by", "data1": "Gabriel Tanner", "label2": "Filed under", "data2": "JavaScript, Programming, Web Development, Technology, Bots", "site": "@freecodecamp", "creator": "@GabrielTanner14"}}}