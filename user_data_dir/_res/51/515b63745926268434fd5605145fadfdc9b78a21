{"title": "Async and Await in JavaScript Explained by Making Pizza", "byline": "Dave Gray", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>Async and Await in JavaScript Explained by Making Pizza</h1>\n<section>\n<section data-test-label=\"post-content\">\n<p>Async and await might sound complicated...but they're as easy as pizza pie once you dive in.</p>\n<p>We all use async and await in our daily routines.</p>\n<h2 id=\"whatisanasynctask\">What is an async task?</h2>\n<p>An async task lets you complete other tasks while the async task is still working towards completion.</p>\n<!--kg-card-end: markdown--><!--kg-card-begin: markdown--><h3 id=\"herearesomedaytodayasynctaskexamples\">Here are some day-to-day async task examples</h3>\n<!--kg-card-end: markdown--><!--kg-card-begin: markdown--><h4 id=\"example1\">Example 1:</h4>\n<p>You order food at a drive-thru which starts your food request (an async task).</p>\n<p>You pull forward in the drive-thru line (the next task), while your food is prepared.</p>\n<p>You did not have to wait for your food to be ready before you could pull forward.</p>\n<p>You are awaiting your food and your request is fulfilled at the pick-up window.</p>\n<h4 id=\"example2\">Example 2:</h4>\n<p>You mop the floor in your kitchen.</p>\n<p>While you wait for your kitchen floor to dry, you vacuum the carpet in your bedroom.</p>\n<p>The original task was to clean your kitchen floor, and the task is complete when the floor is dry.</p>\n<p>Standing around waiting for the floor to dry is not too productive, so you vacuumed the bedroom floor while the kitchen floor dried.</p>\n<p><em>This is how Javascript handles async functions, too.</em></p>\n<!--kg-card-end: markdown--><!--kg-card-begin: markdown--><h3 id=\"exampleofasyncawaitbakeafrozenpizza\">Example of Async/Await \u2013 Bake a Frozen Pizza</h3>\n<!--kg-card-end: markdown--><!--kg-card-begin: markdown--><p>You decide to bake a pizza in your oven, and your first step is to preheat the oven.</p>\n<p>So you set the desired temperature and begin to preheat the oven.</p>\n<p>While the oven is preheating, you get the frozen pizza out of the freezer, open the box, and put it on a pizza pan.</p>\n<p>You've got time left!</p>\n<p>Maybe grab a beverage and watch some television while you wait for the oven to beep when it is ready.</p>\n<p>Below is some code to simulate this example:</p>\n<pre tabindex=\"0\"><code>// This async function simulates the oven response\nconst ovenReady = async () =&gt; {\n  return new Promise(resolve =&gt; setTimeout(() =&gt; {\n    resolve('Beep! Oven preheated!')\n  }, 3000));\n}\n\n// Define preheatOven async function\nconst preheatOven = async () =&gt; {\n  console.log('Preheating oven.');\n  const response = await ovenReady();\n  console.log(response);\n}\n\n// Define the other functions\nconst getFrozenPizza = () =&gt; console.log('Getting pizza.');\nconst openFrozenPizza = () =&gt; console.log('Opening pizza.');\nconst getPizzaPan = () =&gt; console.log('Getting pan.');\nconst placeFrozenPizzaOnPan = () =&gt; console.log('Putting pizza on pan.');\nconst grabABeverage = () =&gt; console.log('Grabbing a beverage.');\nconst watchTV = () =&gt; console.log('Watching television.');\n\n// Now call the functions\npreheatOven();\ngetFrozenPizza();\nopenFrozenPizza();\ngetPizzaPan();\nplaceFrozenPizzaOnPan();\ngrabABeverage();\nwatchTV();\n\n// Output sequence in console:\nPreheating oven.\nGetting pizza.\nOpening pizza.\nGetting pan.\nPutting pizza on pan.\nGrabbing a beverage.\nWatching television.\nBeep! Oven preheated!</code></pre>\n<!--kg-card-end: markdown--><!--kg-card-begin: markdown--><p>The process above is exactly what async and await is all about.</p>\n<!--kg-card-end: markdown--><!--kg-card-begin: markdown--><p>While we <code>await</code> for the asynchronous <code>preheatOven</code> function to complete, we can perform synchronous tasks like <code>getFrozenPizza</code>, <code>openFrozenPizza</code>, <code>getPizzaPan</code>, <code>placeFrozenPizzaOnPan</code>, <code>grabABeverage</code> and even <code>watchTV</code>.</p>\n<!--kg-card-end: markdown--><!--kg-card-begin: markdown--><h3 id=\"weperformasynchronoustaskslikethisallthetime\">We perform asynchronous tasks like this all the time</h3>\n<!--kg-card-end: markdown--><!--kg-card-begin: markdown--><p>And that's how <code>async</code> Javascript works, too.</p>\n<p>Notice that when we <code>await</code>a response from an <code>async</code> function, it needs to be called within another <code>async</code> function. That's what we see above when <code>ovenReady</code> is called inside of <code>preheatOven</code>.</p>\n<!--kg-card-end: markdown--><!--kg-card-begin: markdown--><h3 id=\"twokeypointstoremember\">Two key points to remember:</h3>\n<!--kg-card-end: markdown--><!--kg-card-begin: markdown--><ol>\n<li>Javascript will NOT wait for an <code>async</code> function like <code>preheatOven</code> to complete before it moves on to the tasks that follow like <code>getFrozenPizza</code> and <code>openFrozenPizza</code>.</li>\n<li>Javascript will <code>await</code> for an <code>async</code> function like <code>ovenReady</code> to complete and return data before moving on to the next task inside a parent async function. We see this when the <code>console.log(response)</code> statement does not execute until <code>ovenReady</code> has returned a response.</li>\n</ol>\n<!--kg-card-end: markdown--><!--kg-card-begin: markdown--><h2 id=\"ifthepizzaexampledoesntcutit\">If the pizza example doesn't cut it...</h2>\n<!--kg-card-end: markdown--><!--kg-card-begin: markdown--><p>I know everyday examples help some of us, but others may just prefer real code.</p>\n<p>Therefore, I'm going to provide a less abstract async and await JavaScript example below that requests data with the Fetch API:</p>\n<!--kg-card-end: markdown--><h2 id=\"code-example-of-async-await-in-javascript\">Code Example of Async/Await in JavaScript</h2><!--kg-card-begin: markdown--><pre tabindex=\"0\"><code>const getTheData = async () =&gt; {\n    try {\n    const response = await fetch('https://jsonplaceholder.typicode.com/users');\n    if (!response.ok) throw Error();\n    const data = await response.json();\n    // do something with this data... save to db, update the DOM, etc.\n    console.log(data);\n    console.log('You will see this last.')\n    } catch (err) {\n        console.error(err);\n    }\n} \n\ngetTheData();\nconsole.log('You will see this first.');\n</code></pre>\n<!--kg-card-end: markdown--><!--kg-card-begin: markdown--><h2 id=\"conclusion\">Conclusion</h2>\n<!--kg-card-end: markdown--><!--kg-card-begin: markdown--><p>I hope I have helped you understand async and await in JavaScript.</p>\n<p>I know it can take a while to fully grasp.</p>\n<p>Start preheating your oven for the pizza you're craving and look at some more async and await examples while you wait for the beep!</p>\n<p>I'll leave you with a tutorial from my Youtube channel. The video gives a deeper explanation and more code examples including a discussion of callbacks, promises, thenables and the Fetch API along with async &amp; await:</p>\n<!--kg-card-end: markdown--><figure data-test-label=\"fitted\">\n\n</figure>\n</section>\n<hr/>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nAsync and await might sound complicated...but they're as easy as pizza pie once you dive in.\nWe all use async and await in our daily routines.\nWhat is an async task?\nAn async task lets you complete other tasks while the async task is still working towards completion.\nHere are some day-to-day async task examples\nExample 1:\nYou order food at a drive-thru which starts your food request (an async task).\nYou pull forward in the drive-thru line (the next task), while your food is prepared.\nYou did not have to wait for your food to be ready before you could pull forward.\nYou are awaiting your food and your request is fulfilled at the pick-up window.\nExample 2:\nYou mop the floor in your kitchen.\nWhile you wait for your kitchen floor to dry, you vacuum the carpet in your bedroom.\nThe original task was to clean your kitchen floor, and the task is complete when the floor is dry.\nStanding around waiting for the floor to dry is not too productive, so you vacuumed the bedroom floor while the kitchen floor dried.\nThis is how Javascript handles async functions, too.\nExample of Async/Await \u2013 Bake a Frozen Pizza\nYou decide to bake a pizza in your oven, and your first step is to preheat the oven.\nSo you set the desired temperature and begin to preheat the oven.\nWhile the oven is preheating, you get the frozen pizza out of the freezer, open the box, and put it on a pizza pan.\nYou've got time left!\nMaybe grab a beverage and watch some television while you wait for the oven to beep when it is ready.\nBelow is some code to simulate this example:\n// This async function simulates the oven response\nconst ovenReady = async () => {\n  return new Promise(resolve => setTimeout(() => {\n    resolve('Beep! Oven preheated!')\n  }, 3000));\n}\n\n// Define preheatOven async function\nconst preheatOven = async () => {\n  console.log('Preheating oven.');\n  const response = await ovenReady();\n  console.log(response);\n}\n\n// Define the other functions\nconst getFrozenPizza = () => console.log('Getting pizza.');\nconst openFrozenPizza = () => console.log('Opening pizza.');\nconst getPizzaPan = () => console.log('Getting pan.');\nconst placeFrozenPizzaOnPan = () => console.log('Putting pizza on pan.');\nconst grabABeverage = () => console.log('Grabbing a beverage.');\nconst watchTV = () => console.log('Watching television.');\n\n// Now call the functions\npreheatOven();\ngetFrozenPizza();\nopenFrozenPizza();\ngetPizzaPan();\nplaceFrozenPizzaOnPan();\ngrabABeverage();\nwatchTV();\n\n// Output sequence in console:\nPreheating oven.\nGetting pizza.\nOpening pizza.\nGetting pan.\nPutting pizza on pan.\nGrabbing a beverage.\nWatching television.\nBeep! Oven preheated!\nThe process above is exactly what async and await is all about.\nWhile we await for the asynchronous preheatOven function to complete, we can perform synchronous tasks like getFrozenPizza, openFrozenPizza, getPizzaPan, placeFrozenPizzaOnPan, grabABeverage and even watchTV.\nWe perform asynchronous tasks like this all the time\nAnd that's how async Javascript works, too.\nNotice that when we awaita response from an async function, it needs to be called within another async function. That's what we see above when ovenReady is called inside of preheatOven.\nTwo key points to remember:\n\nJavascript will NOT wait for an async function like preheatOven to complete before it moves on to the tasks that follow like getFrozenPizza and openFrozenPizza.\nJavascript will await for an async function like ovenReady to complete and return data before moving on to the next task inside a parent async function. We see this when the console.log(response) statement does not execute until ovenReady has returned a response.\n\nIf the pizza example doesn't cut it...\nI know everyday examples help some of us, but others may just prefer real code.\nTherefore, I'm going to provide a less abstract async and await JavaScript example below that requests data with the Fetch API:\nCode Example of Async/Await in JavaScriptconst getTheData = async () => {\n    try {\n    const response = await fetch('https://jsonplaceholder.typicode.com/users');\n    if (!response.ok) throw Error();\n    const data = await response.json();\n    // do something with this data... save to db, update the DOM, etc.\n    console.log(data);\n    console.log('You will see this last.')\n    } catch (err) {\n        console.error(err);\n    }\n} \n\ngetTheData();\nconsole.log('You will see this first.');\n\nConclusion\nI hope I have helped you understand async and await in JavaScript.\nI know it can take a while to fully grasp.\nStart preheating your oven for the pizza you're craving and look at some more async and await examples while you wait for the beep!\nI'll leave you with a tutorial from my Youtube channel. The video gives a deeper explanation and more code examples including a discussion of callbacks, promises, thenables and the Fetch API along with async & await:\n\n        \n          \n            \n          \n        \n      \n\n                        \n                    \n                    \n                        \n                        \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 5604, "excerpt": "Async and await might sound complicated...but they're as easy as pizza pie once\nyou dive in.\n\nWe all use async and await in our daily routines.\n\nWhat is an async task?\nAn async task lets you complete other tasks while the async task is still\nworking towards completion.\n\nHere are some day-to-day async task examples\nExample 1:\nYou order food at a drive-thru which starts your food request (an async task).\n\nYou pull forward in the drive-thru line (the next task), while your food is\nprepared.\n\nYou di", "siteName": "freeCodeCamp.org", "publishedTime": "2021-08-30T20:20:59.000Z", "id": "515b63745926268434fd5605145fadfdc9b78a21", "url": "https://www.freecodecamp.org/news/async-await-javascript-tutorial-explained-by-making-pizza/", "domain": "freecodecamp.org", "date": "2023-12-27T18:05:52.073354", "resultUri": "http://localhost:3000/result/515b63745926268434fd5605145fadfdc9b78a21", "query": {"url": ["https://www.freecodecamp.org/news/async-await-javascript-tutorial-explained-by-making-pizza/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "Async and Await in JavaScript Explained by Making Pizza", "description": "Async and await might sound complicated...but they're as easy as pizza pie once you dive in. We all use async and await in our daily routines. What is an async task? An async task lets you complete other tasks while the async task is still working towards completion. Here are", "url": "https://www.freecodecamp.org/news/async-await-javascript-tutorial-explained-by-making-pizza/", "image": "https://www.freecodecamp.org/news/content/images/2021/08/carissa-gan-_0JpjeqtSyg-unsplash.jpg", "image:width": "2000", "image:height": "1334"}, "twitter": {"card": "summary_large_image", "title": "Async and Await in JavaScript Explained by Making Pizza", "description": "Async and await might sound complicated...but they're as easy as pizza pie once you dive in. We all use async and await in our daily routines. What is an async task? An async task lets you complete other tasks while the async task is still working towards completion. Here are", "url": "https://www.freecodecamp.org/news/async-await-javascript-tutorial-explained-by-making-pizza/", "image": "https://www.freecodecamp.org/news/content/images/2021/08/carissa-gan-_0JpjeqtSyg-unsplash.jpg", "label1": "Written by", "data1": "Dave Gray", "label2": "Filed under", "data2": "JavaScript, Asyncawait, Asynchronous, Programming, Web Development, Software Development, Coding", "site": "@freecodecamp", "creator": "@yesdavidgray"}}}