{"title": "A Beginner\u2019s Guide to Git\u200a\u2014\u200aHow to Start and Create your First Repository", "byline": "Ga\u00ebl Thomas", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>A Beginner\u2019s Guide to Git\u200a\u2014\u200aHow to Start and Create your First Repository</h1>\n<section>\n<section data-test-label=\"post-content\">\n<h4 id=\"if-you-are-a-developer-and-you-want-to-get-started-with-git-and-github-then-this-article-is-made-for-you-\">If you are a developer and you want to get started with Git and GitHub, then this article is made for you.</h4><p>After a short introduction on what is Git and how to use it, you will be able to create and work on a GitHub project.</p><h4 id=\"what-is-git\">What is Git?</h4><p><a href=\"https://git-scm.com/\" rel=\"noopener\">Git</a> is a free and open source software created by <a href=\"https://en.wikipedia.org/wiki/Linus_Torvalds\" rel=\"noopener\">Linus Torvalds</a> in 2005. This tool is a version control system that was initially developed to work with several developers on the Linux kernel.</p><p>Many control systems exist, like CVS, SVN, Mercurial and others, but today Git is the standard software for version control.</p><h4 id=\"version-control-right\">Version control, right?</h4><p>If you are new in the development world, these words will not tell you anything. However, don\u2019t worry after this short paragraph, you will exactly know what a \u201c<em>Version Control System (VCS)</em>\u201d is.</p><p>Version control is a management system that takes into consideration modifications you\u2019ve made on a file or a set of files (<em>example:</em> a code project). With this system, developers can collaborate and work together on the same project.</p><p>A branch system is carried by version control and allow developers to work individually on a task (<em>example: </em>One branch, one task or one branch, one developer) before to combine all changes made by the collaborators into the main branch.</p><p>All changes made by developers are traced and saved in a history. It can be beneficial to track modifications made by every collaborator.</p><figure><img alt=\"YB4J4fBv4xEjfjrWvizRE7EjMHkyMqelVXJ7\" height=\"449\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/YB4J4fBv4xEjfjrWvizRE7EjMHkyMqelVXJ7\" width=\"800\"/><figcaption>Version Control System (VCS) change history \u2014 Copyright to <a href=\"https://www.toolsqa.com/git/version-control-system/\" rel=\"noopener\" target=\"_blank\" title=\"\">ToolsQA</a> post</figcaption></figure><h4 id=\"where-to-find-git-repositories\">Where to find Git repositories</h4><p>If you want to start using Git, you need to know where to host your repositories. There are many hosting platforms where you can put your code free of charge. Some options aren\u2019t free, but mostly you don\u2019t need them except in specific cases.</p><p>Here the three most popular Git hosting services:</p><ul><li><a href=\"https://github.com/\" rel=\"noopener\"><strong>GitHub</strong></a><strong>: </strong>Owned recently by Microsoft \u2014 Launched in 2008 (31 million users in October 2018).</li><li><a href=\"https://about.gitlab.com/\" rel=\"noopener\"><strong>GitLab</strong></a><strong>: </strong>Owned by GitLab Inc. \u2014 Launched in 2011.</li><li><a href=\"https://bitbucket.org/product/\" rel=\"noopener\"><strong>BitBucket</strong></a><strong>: </strong>Owned by Atlassian \u2014 Launched in June 2008.</li></ul><blockquote>Note: Hosting platforms are available in two ways, on the cloud (hosted online) or self-installed on your server (private hosting).</blockquote><h4 id=\"why-use-git-as-a-developer\">Why use Git as a developer</h4><p>This tool is inescapable for worldwide developers. Here is a list of advantages of this tool:</p><ul><li>No more copies, when you finish your work on a significant update for your application or a bug fix, you just need to \u201c<em>push</em>\u201d your project online to save it.</li><li>Delete and break your code; you just need to type a command to come back to the previous version and continue your work.</li><li>Work with your friends without sending an e-mail with the compressed project each time the code changes.</li><li>You can afford to forget what you did. A simple command is necessary to check your changes since the last time you saved your work.</li></ul><p>I just told you the main advantages if you don\u2019t use Git at the moment. Believe me; this tool can become paramount. As an example, you can configure services to work with Git and automatically deploy and test your code.</p><h3 id=\"now-let-s-practice-with-git-and-github\">Now, let\u2019s practice with Git and GitHub</h3><p>Now that you know what Git and Github are, it\u2019s time to practice with concrete exercises.</p><p>After these exercises, you will be able to create and manage your projects via GitHub with all the basic features of Git.</p><blockquote>Note: I chose GitHub as our hosting service for Git because it\u2019s the most used in the world. Don\u2019t be afraid; the procedure is quite the same on other services.</blockquote><blockquote><strong>Please remember this article take into consideration you know at all the basics SHELL commands. If not, some parts of this article will be confusing.</strong></blockquote><h4 id=\"-1-step-time-to-start-\">#1 step \u2014 Time to start!</h4><p>Looking forward to getting started? Let\u2019s do it!</p><p>This first exercise is not very complicated; it\u2019s divided into two steps. The Git installation and GitHub account creation.</p><p><strong>a. GitHub account creation</strong></p><p>To create your account, you need to connect on <a href=\"https://github.com/\" rel=\"noopener\">the main GitHub page</a> and to fill in the registration form.</p><figure><img alt=\"9D4-dwak0kefb74cMYnfNrPmWkf9vGhDB1T0\" height=\"419\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/9D4-dwak0kefb74cMYnfNrPmWkf9vGhDB1T0\" width=\"800\"/><figcaption>GitHub main page with registration form</figcaption></figure><p>Nothing more! You are officially a new member of GitHub!</p><p><strong>b. Git installation</strong></p><p>Now you need to install Git tools on your computer. There are different Git software, but it\u2019s better to install the basic one to start. We will use the command line to communicate with GitHub.</p><p>Once you are more comfortable with the command line, you can download Git software with a user interface.</p><ul><li><em>For Ubuntu:</em></li></ul><p>First, update your packages:</p><pre><code>$ sudo apt update</code></pre><p>Next, install Git with apt-get:</p><pre><code>$ sudo apt-get install git</code></pre><p>Finally, verify that Git is installed correctly:</p><pre><code>$ git --version</code></pre><ul><li><em>For MacOSX:</em></li></ul><p>First, download the latest <a href=\"https://sourceforge.net/projects/git-osx-installer/files/\" rel=\"noopener\">Git for Mac installer</a>.</p><p>Next, follow instructions on your screen.</p><p>Finally, open a terminal and verify that Git is installed correctly:</p><pre><code>$ git --version</code></pre><ul><li><em>For Windows:</em></li></ul><p>First, download the latest <a href=\"https://gitforwindows.org/\" rel=\"noopener\">Git for Windows installer</a>.</p><p>Next, follow instructions on your screen (you can leave the default options).</p><p>Finally, open a terminal (example: powershell or git bash) and verify that Git is installed correctly:</p><pre><code>$ git --version</code></pre><ul><li><em>For all users:</em></li></ul><p>One last step is needed to complete the installation correctly! You need to run in your terminal the following commands with your information to set a default username and email when you are going to save your work:</p><pre><code>$ git config --global user.name \"Ga\u00ebl Thomas\"\n$ git config --global user.email \"example@mail.com\"</code></pre><h4 id=\"-2-step-your-first-github-project-\">#2 step \u2014 Your first GitHub project!</h4><p>Now that you\u2019re ready, you can return to the main GitHub page and click on the \u201c<em>+</em>\u201d icon in the menu bar.</p><figure><img alt=\"W1EU4osppAAyktghCia7BSC4gPmjCqXXIKZF\" height=\"20\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/W1EU4osppAAyktghCia7BSC4gPmjCqXXIKZF\" width=\"800\"/><figcaption>GitHub menu bar with \u201c+\u201d icon</figcaption></figure><p>Once you click on this button, a new menu appears with a \u201c<em>New repository</em>\u201d entry. Click on it!</p><figure><img alt=\"MFs72raHwu-NB6M9e70hQ9Lx2qNLaVvYlw6V\" height=\"315\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/MFs72raHwu-NB6M9e70hQ9Lx2qNLaVvYlw6V\" width=\"461\"/><figcaption>Submenu with \u201cNew repository\u201d entry</figcaption></figure><p><a href=\"https://github.com/new\" rel=\"noopener\">The repository creation page</a> will appear. Choose a cool name for your first repository and put a small description before clicking on the \u201c<em>Create repository</em>\u201d button.</p><blockquote>Note: In the context of this article, please don\u2019t tick \u201cInitialize this repository with a README\u201d. We will create a \u201cREADME\u201d file later!</blockquote><figure><img alt=\"mxGU5eGEki7FsedthUt8Vyi3uqAhL02FbmXF\" height=\"553\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/mxGU5eGEki7FsedthUt8Vyi3uqAhL02FbmXF\" width=\"800\"/><figcaption>Repository creation menu</figcaption></figure><p>Well done! Your first GitHub repository is created. If you want to see all your repositories, you need to click on your profile picture in the menu bar then on \u201c<em>Your repositories</em>\u201d.</p><figure><img alt=\"q6w-ifrkLlL5MNVCY9a8qeWs5vadw7Zxa0Fd\" height=\"492\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/q6w-ifrkLlL5MNVCY9a8qeWs5vadw7Zxa0Fd\" width=\"281\"/><figcaption>Submenu with \u201cYour repositories\u201d entry</figcaption></figure><h4 id=\"-3-step-a-good-cover\">#3 step \u2014 A good cover</h4><p>It\u2019s time to make your first modification to your repository. What do you think about creating a cover for it, a kind of welcome text?</p><p><strong>a. A local version of your project</strong></p><p>Your first mission is to get a copy of the repository on your computer. To do that, you need to \u201c<em>clone</em>\u201d the repository. On the repository page, you need to get the \u201c<em>HTTPS</em>\u201d address.</p><figure><img alt=\"cxRrZUe-tW2Wkn0WUg-MsN1m1WesvGPlJT7V\" height=\"552\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/cxRrZUe-tW2Wkn0WUg-MsN1m1WesvGPlJT7V\" width=\"800\"/><figcaption>Repository page with \u201cHTTPS\u201d address</figcaption></figure><p>Once you had the address of the repositories, you need to use your terminal (through shell commands) to move in the place where you want to put the directory copy (for example you can move in your \u201c<em>Documents</em>\u201d folder). When you are ready, you can enter:</p><pre><code>$ git clone [HTTPS ADDRESS]</code></pre><p>This command will make a local copy of the repository hosted at the given address.</p><figure><img alt=\"bTrnxOfRwjx1JN55RmAdn4h0bs2B9WoMWa89\" height=\"76\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/bTrnxOfRwjx1JN55RmAdn4h0bs2B9WoMWa89\" width=\"790\"/><figcaption>Output message of \u201cgit clone\u201d command</figcaption></figure><p>Now, your repository is on your computer. You need to move in it with:</p><pre><code>$ cd [NAME OF REPOSITORY]</code></pre><blockquote>Note: When you clone, Git will create a repository on your computer. If you want, you can access your project with the computer user interface.</blockquote><p><strong>b. Repository edition</strong></p><p>Now you can create a file named \u201c<em>README.</em>md\u201d in your folder (through the terminal or user interface on your computer). I\u2019m not giving you any more details about this step, nothing in particular. Open your folder and add a file as if it were a standard folder.</p><p>If you want to do something cool, copy and paste this template in your \u201c<em>README.md</em>\u201d file. You can replace information between the hooks to personalize the output.</p><pre tabindex=\"0\"><code>### My first repository is awesome!\n\nI'm [PSEUDO/NAME] and here it's my first GitHub repository.\nIf you see this file on my project, it's because I'm learning Git.\n\nMy mood:\n\n&gt; [MOOD NAME]\n\nMy favorite color:\n\n&gt; [COLOR NAME]\n\nThank you so much for reading! \u263a</code></pre><p><strong>c. Let\u2019s share our work!</strong></p><p>Now that you have modified your project, you need to save it. This process is called committing.</p><p>To do this, get back to your terminal. If you have closed it, go back in your folder.</p><p>When you want to save your work, four steps are required. These steps are called: \u201c<em>status</em>\u201d, \u201c<em>add</em>\u201d, \u201c<em>commit</em>\u201d and \u201c<em>push</em>\u201d. I have prepared a standard procedure for you to perform each time you want to save your work.</p><blockquote>Note: All the following steps must be performed within your project.</blockquote><ul><li>\u201c<em>status</em>\u201d: The first thing you need to do once your work is to check the files you have modified. To do this, you can type the following command to make a list of changes appear:</li></ul><pre><code>$ git status</code></pre><figure><img alt=\"mS45A-0l4Zq3cFP762AVpCXoCP-xjm8842nr\" height=\"227\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/mS45A-0l4Zq3cFP762AVpCXoCP-xjm8842nr\" width=\"800\"/><figcaption>\u201cgit status\u201d output in our project</figcaption></figure><ul><li>\u201c<em>add</em>\u201d: With the help of the change list, you can add all files you want to upload with the following command:</li></ul><pre><code>$ git add [FILENAME] [FILENAME] [...]</code></pre><p>In our case, we are going to add \u201c<em>README.md</em>\u201d because we want to save this file.</p><pre><code>$ git add README.md</code></pre><blockquote>Note: If you type again \u201cgit status\u201d, the \u201cREADME.md\u201d will appear now in green. This means that we have added the file correctly.</blockquote><ul><li>\u201c<em>commit</em>\u201d: Now that we have added the files of our choice, we need to write a message to explain what we have done. This message may be useful later if we want to check the change history. Here is an example of what we can put in our case.</li></ul><pre><code>$ git commit -m \"Added README.md with good description in it.\"</code></pre><ul><li>\u201c<em>push</em>\u201d: You\u2019re there, you can now put your work online! If you type the following command, all your work will be put online and visible directly on the repository page.</li></ul><pre><code>$ git push origin master</code></pre><p>You did it! If you come back on your repository page on GitHub, you are going to your \u201c<em>README.md</em>\u201d file with a beautiful preview of it.</p><figure><img alt=\"7ORzDxuPUCooIQZsGVdKHmzCQYzh-ia0Go09\" height=\"386\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/7ORzDxuPUCooIQZsGVdKHmzCQYzh-ia0Go09\" width=\"800\"/><figcaption>Repository page with \u201cREADME.md\u201d file</figcaption></figure><h3 id=\"useful-commands-for-git\">Useful commands for Git</h3><p>You are still missing some essential commands as a beginner with Git. Here is a list that will be useful to you during your project.</p><ul><li>Display the history of commits (all modifications made on the project).</li></ul><pre><code>$ git log</code></pre><ul><li>Revert back all your changes since the last commit.</li></ul><pre><code>$ git checkout .</code></pre><ul><li>Revert all changes on a specific file since the last commit.</li></ul><pre><code>$ git checkout [FILENAME]</code></pre><ul><li>Display the last changes on a file since the last commit.</li></ul><pre><code>$ git diff [FILENAME]</code></pre><ul><li>Remove all unexpected files in your project (not committed).</li></ul><pre><code>$ git clean -dfx</code></pre><ul><li>Add all files and make a commit at the same time.</li></ul><pre><code>$ git commit -am [MESSAGE]</code></pre><h4 id=\"what-s-next\">What\u2019s next?</h4><p>In the next part of this beginner\u2019s guide, you will discover these three topics:</p><ul><li>What is a good commit message.</li><li>Why it's essential.</li><li>A checklist to write your commit messages.</li></ul><p>-&gt; <a href=\"https://herewecode.io/blog/a-beginners-guide-to-git-how-to-write-a-good-commit-message/\">A Beginner\u2019s Guide to Git \u2014 How to Write a Good Commit Message</a></p><h2 id=\"conclusion\">Conclusion</h2><p>I hope that you\u2019ve found this guide and examples on Git/GitHub helpful! If you have any questions or feedback, feel free to ask.</p><p>If you want more content like this, you can <a href=\"https://twitter.com/gaelgthomas/\">follow me on Twitter</a>, where I tweet about web development, self-improvement, and my journey as a full stack developer!</p><p>You can find other articles like this on my website: <a href=\"https://www.freecodecamp.org/news/a-beginners-guide-to-git-how-to-create-your-first-github-project-c3ff53f56861/herewecode.io\">herewecode.io</a>.</p>\n</section>\n<hr/>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nIf you are a developer and you want to get started with Git and GitHub, then this article is made for you.After a short introduction on what is Git and how to use it, you will be able to create and work on a GitHub project.What is Git?Git is a free and open source software created by Linus Torvalds in 2005. This tool is a version control system that was initially developed to work with several developers on the Linux kernel.Many control systems exist, like CVS, SVN, Mercurial and others, but today Git is the standard software for version control.Version control, right?If you are new in the development world, these words will not tell you anything. However, don\u2019t worry after this short paragraph, you will exactly know what a \u201cVersion Control System (VCS)\u201d is.Version control is a management system that takes into consideration modifications you\u2019ve made on a file or a set of files (example: a code project). With this system, developers can collaborate and work together on the same project.A branch system is carried by version control and allow developers to work individually on a task (example: One branch, one task or one branch, one developer) before to combine all changes made by the collaborators into the main branch.All changes made by developers are traced and saved in a history. It can be beneficial to track modifications made by every collaborator.Version Control System (VCS) change history \u2014 Copyright to ToolsQA postWhere to find Git repositoriesIf you want to start using Git, you need to know where to host your repositories. There are many hosting platforms where you can put your code free of charge. Some options aren\u2019t free, but mostly you don\u2019t need them except in specific cases.Here the three most popular Git hosting services:GitHub: Owned recently by Microsoft \u2014 Launched in 2008 (31 million users in October 2018).GitLab: Owned by GitLab Inc. \u2014 Launched in 2011.BitBucket: Owned by Atlassian \u2014 Launched in June 2008.Note: Hosting platforms are available in two ways, on the cloud (hosted online) or self-installed on your server (private hosting).Why use Git as a developerThis tool is inescapable for worldwide developers. Here is a list of advantages of this tool:No more copies, when you finish your work on a significant update for your application or a bug fix, you just need to \u201cpush\u201d your project online to save it.Delete and break your code; you just need to type a command to come back to the previous version and continue your work.Work with your friends without sending an e-mail with the compressed project each time the code changes.You can afford to forget what you did. A simple command is necessary to check your changes since the last time you saved your work.I just told you the main advantages if you don\u2019t use Git at the moment. Believe me; this tool can become paramount. As an example, you can configure services to work with Git and automatically deploy and test your code.Now, let\u2019s practice with Git and GitHubNow that you know what Git and Github are, it\u2019s time to practice with concrete exercises.After these exercises, you will be able to create and manage your projects via GitHub with all the basic features of Git.Note: I chose GitHub as our hosting service for Git because it\u2019s the most used in the world. Don\u2019t be afraid; the procedure is quite the same on other services.Please remember this article take into consideration you know at all the basics SHELL commands. If not, some parts of this article will be confusing.#1 step \u2014 Time to start!Looking forward to getting started? Let\u2019s do it!This first exercise is not very complicated; it\u2019s divided into two steps. The Git installation and GitHub account creation.a. GitHub account creationTo create your account, you need to connect on the main GitHub page and to fill in the registration form.GitHub main page with registration formNothing more! You are officially a new member of GitHub!b. Git installationNow you need to install Git tools on your computer. There are different Git software, but it\u2019s better to install the basic one to start. We will use the command line to communicate with GitHub.Once you are more comfortable with the command line, you can download Git software with a user interface.For Ubuntu:First, update your packages:$ sudo apt updateNext, install Git with apt-get:$ sudo apt-get install gitFinally, verify that Git is installed correctly:$ git --versionFor MacOSX:First, download the latest Git for Mac installer.Next, follow instructions on your screen.Finally, open a terminal and verify that Git is installed correctly:$ git --versionFor Windows:First, download the latest Git for Windows installer.Next, follow instructions on your screen (you can leave the default options).Finally, open a terminal (example: powershell or git bash) and verify that Git is installed correctly:$ git --versionFor all users:One last step is needed to complete the installation correctly! You need to run in your terminal the following commands with your information to set a default username and email when you are going to save your work:$ git config --global user.name \"Ga\u00ebl Thomas\"\n$ git config --global user.email \"example@mail.com\"#2 step \u2014 Your first GitHub project!Now that you\u2019re ready, you can return to the main GitHub page and click on the \u201c+\u201d icon in the menu bar.GitHub menu bar with \u201c+\u201d iconOnce you click on this button, a new menu appears with a \u201cNew repository\u201d entry. Click on it!Submenu with \u201cNew repository\u201d entryThe repository creation page will appear. Choose a cool name for your first repository and put a small description before clicking on the \u201cCreate repository\u201d button.Note: In the context of this article, please don\u2019t tick \u201cInitialize this repository with a README\u201d. We will create a \u201cREADME\u201d file later!Repository creation menuWell done! Your first GitHub repository is created. If you want to see all your repositories, you need to click on your profile picture in the menu bar then on \u201cYour repositories\u201d.Submenu with \u201cYour repositories\u201d entry#3 step \u2014 A good coverIt\u2019s time to make your first modification to your repository. What do you think about creating a cover for it, a kind of welcome text?a. A local version of your projectYour first mission is to get a copy of the repository on your computer. To do that, you need to \u201cclone\u201d the repository. On the repository page, you need to get the \u201cHTTPS\u201d address.Repository page with \u201cHTTPS\u201d addressOnce you had the address of the repositories, you need to use your terminal (through shell commands) to move in the place where you want to put the directory copy (for example you can move in your \u201cDocuments\u201d folder). When you are ready, you can enter:$ git clone [HTTPS ADDRESS]This command will make a local copy of the repository hosted at the given address.Output message of \u201cgit clone\u201d commandNow, your repository is on your computer. You need to move in it with:$ cd [NAME OF REPOSITORY]Note: When you clone, Git will create a repository on your computer. If you want, you can access your project with the computer user interface.b. Repository editionNow you can create a file named \u201cREADME.md\u201d in your folder (through the terminal or user interface on your computer). I\u2019m not giving you any more details about this step, nothing in particular. Open your folder and add a file as if it were a standard folder.If you want to do something cool, copy and paste this template in your \u201cREADME.md\u201d file. You can replace information between the hooks to personalize the output.### My first repository is awesome!\n\nI'm [PSEUDO/NAME] and here it's my first GitHub repository.\nIf you see this file on my project, it's because I'm learning Git.\n\nMy mood:\n\n> [MOOD NAME]\n\nMy favorite color:\n\n> [COLOR NAME]\n\nThank you so much for reading! \u263ac. Let\u2019s share our work!Now that you have modified your project, you need to save it. This process is called committing.To do this, get back to your terminal. If you have closed it, go back in your folder.When you want to save your work, four steps are required. These steps are called: \u201cstatus\u201d, \u201cadd\u201d, \u201ccommit\u201d and \u201cpush\u201d. I have prepared a standard procedure for you to perform each time you want to save your work.Note: All the following steps must be performed within your project.\u201cstatus\u201d: The first thing you need to do once your work is to check the files you have modified. To do this, you can type the following command to make a list of changes appear:$ git status\u201cgit status\u201d output in our project\u201cadd\u201d: With the help of the change list, you can add all files you want to upload with the following command:$ git add [FILENAME] [FILENAME] [...]In our case, we are going to add \u201cREADME.md\u201d because we want to save this file.$ git add README.mdNote: If you type again \u201cgit status\u201d, the \u201cREADME.md\u201d will appear now in green. This means that we have added the file correctly.\u201ccommit\u201d: Now that we have added the files of our choice, we need to write a message to explain what we have done. This message may be useful later if we want to check the change history. Here is an example of what we can put in our case.$ git commit -m \"Added README.md with good description in it.\"\u201cpush\u201d: You\u2019re there, you can now put your work online! If you type the following command, all your work will be put online and visible directly on the repository page.$ git push origin masterYou did it! If you come back on your repository page on GitHub, you are going to your \u201cREADME.md\u201d file with a beautiful preview of it.Repository page with \u201cREADME.md\u201d fileUseful commands for GitYou are still missing some essential commands as a beginner with Git. Here is a list that will be useful to you during your project.Display the history of commits (all modifications made on the project).$ git logRevert back all your changes since the last commit.$ git checkout .Revert all changes on a specific file since the last commit.$ git checkout [FILENAME]Display the last changes on a file since the last commit.$ git diff [FILENAME]Remove all unexpected files in your project (not committed).$ git clean -dfxAdd all files and make a commit at the same time.$ git commit -am [MESSAGE]What\u2019s next?In the next part of this beginner\u2019s guide, you will discover these three topics:What is a good commit message.Why it's essential.A checklist to write your commit messages.-> A Beginner\u2019s Guide to Git \u2014 How to Write a Good Commit MessageConclusionI hope that you\u2019ve found this guide and examples on Git/GitHub helpful! If you have any questions or feedback, feel free to ask.If you want more content like this, you can follow me on Twitter, where I tweet about web development, self-improvement, and my journey as a full stack developer!You can find other articles like this on my website: herewecode.io.\n\n                        \n                    \n                    \n                        \n                        \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 11423, "excerpt": "If you are a developer and you want to get started with Git and GitHub, then\nthis article is made for you.\nAfter a short introduction on what is Git and how to use it, you will be able to\ncreate and work on a GitHub project.\n\nWhat is Git?\nGit [https://git-scm.com/] is a free and open source software created by Linus\nTorvalds [https://en.wikipedia.org/wiki/Linus_Torvalds] in 2005. This tool is a\nversion control system that was initially developed to work with several\ndevelopers on the Linux kerne", "siteName": "freeCodeCamp.org", "publishedTime": "2019-05-16T16:54:03.000Z", "id": "51a0befd0b9ce1238b3315e4a30c54cb81aa331f", "url": "https://www.freecodecamp.org/news/a-beginners-guide-to-git-how-to-create-your-first-github-project-c3ff53f56861/", "domain": "freecodecamp.org", "date": "2023-12-27T18:09:42.821087", "resultUri": "http://localhost:3000/result/51a0befd0b9ce1238b3315e4a30c54cb81aa331f", "query": {"url": ["https://www.freecodecamp.org/news/a-beginners-guide-to-git-how-to-create-your-first-github-project-c3ff53f56861/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "A Beginner\u2019s Guide to Git\u200a\u2014\u200aHow to Start and Create your First Repository", "description": "If you are a developer and you want to get started with Git and GitHub, then this article is made for you. After a short introduction on what is Git and how to use it, you will be able to create and work on a GitHub project. What is Git?", "url": "https://www.freecodecamp.org/news/a-beginners-guide-to-git-how-to-create-your-first-github-project-c3ff53f56861/", "image": "https://www.freecodecamp.org/news/content/images/2020/03/how-to-start-and-create-your-first-repository.png", "image:width": "1680", "image:height": "945"}, "twitter": {"card": "summary_large_image", "title": "A Beginner\u2019s Guide to Git\u200a\u2014\u200aHow to Start and Create your First Repository", "description": "If you are a developer and you want to get started with Git and GitHub, then this article is made for you. After a short introduction on what is Git and how to use it, you will be able to create and work on a GitHub project. What is Git?", "url": "https://www.freecodecamp.org/news/a-beginners-guide-to-git-how-to-create-your-first-github-project-c3ff53f56861/", "image": "https://www.freecodecamp.org/news/content/images/2020/03/how-to-start-and-create-your-first-repository.png", "label1": "Written by", "data1": "Ga\u00ebl Thomas", "label2": "Filed under", "data2": "Git, Programming, Technology, Productivity, Software Development", "site": "@freecodecamp", "creator": "@gaelgthomas"}}}