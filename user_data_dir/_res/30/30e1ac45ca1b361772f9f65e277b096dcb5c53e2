{"title": "Programming Projects for New Developers \u2013 What to Build to Get Coding Experience", "byline": "Moshe Feuchtwanger", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>Programming Projects for New Developers \u2013 What to Build to Get Coding Experience</h1>\n<section>\n<section data-test-label=\"post-content\">\n<p>If you're a new developer, you're probably familiar with the \u201cExperience Paradox\u201d.</p><p>It describes the frustrating cycle many of us go through when we're trying to get our first developer jobs:</p><p>To get a job, you need \"work experience\". But to get \"work experience\", you need a job...!</p><figure><img alt=\"exp-job-1\" height=\"242\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2021/09/exp-job-1.png\" width=\"375\"/><figcaption>Job requires experience =&gt; requires job =&gt; requires experience</figcaption></figure><p>Now, of course there are reasons why companies prefer hiring more experienced developers. But it's also true that unexperienced candidates might be more motivated, might fit the company culture better, and so on. </p><p>In this article, I won't explore all the different ways that new developers can get around this paradox (increasing your online presence, talking at meetups, getting in touch with HR managers, and so on).</p><p>Instead, I\u2019m here to talk about what I believe is the main approach beginners should take to avoid the paradox altogether: getting real experience.</p><h2 id=\"how-to-get-development-experience-before-you-have-a-job\">How to Get Development Experience Before You Have a Job</h2><p>In order to get a real coding experience (not only coding \u2013 but we\u2019ll talk about that later) you should actively be, well, coding. Makes sense, right?</p><p>As a mentor, I've often been asked what the best project ideas are that developers should work on and create to practice and demonstrate their skills.</p><p>While it\u2019s not a direct answer, I will say that <strong>the project idea itself is not the most important thing</strong>.\u200c\u200c</p><p>\u200cThere are a lot of ideas for projects out there. Yes, some are better than others in terms of complexity, skill demonstration, and verity of technologies. My point is that you shouldn\u2019t necessarily go with the most eye-popping project. </p><p>Instead, I recommend creating a product that you or someone you know will actually use.</p><h3 id=\"why-is-it-important-to-build-a-product-you-would-use\">Why is it important to build a product you would use? </h3><p>One of the goals of creating a portfolio project is to demonstrate to companies that you can work on their product just like you did on your project.\u200c\u200c</p><p>I\u2019m not talking about the final product alone \u2013 but also the debates, the design decisions, and the choices you made. All this is what developers do on a daily basis and that's what companies will expect from you.</p><p>Every gap between your project and their product is an unknown variable, a risk they'll have to take when hiring you. Your goal is to show them that the risk is as small as possible.\u200c\u200c</p><p>Hypothetically, if your project would be exactly like their product, they would hire you on spot. \u200c\u200cThis is not the case, of course, but my point is that your project should demonstrate as many aspects of a real project as possible. Everything you show them you can do \u2013 each skill you confirm \u2013 decreases their risk in hiring you.</p><p>When I say \u201caspects\u201d of the project, I mean the system components, layers and skills every product requires.\u200c </p><p>If we\u2019re talking about a web-based product, these features can be technical such as frameworks and libraries for UI / server, authentication, communication, 3rd party integrations and so on. You can also showcase your engineering knowledge about topics such as architecture, system design, clean code, readable code, scalable solutions, and so on.\u200c\u200c</p><p>With this understanding, we can agree that it's better to build a bigger and more complex project than you might have originally thought.</p><p>There are some challenges that come with building big complex projects. This is actually the topic I want to talk about in this post.</p><h2 id=\"how-to-build-a-big-complex-project-successfully\">How to Build a Big, Complex Project \u2013 Successfully</h2><p>\u200cWhen you work on a project, your biggest enemy is not your technical knowledge level (you can improve it), your confidence (you can improve it), or lack of resources (there are a ton out there).\u200c\u200c </p><p>The biggest enemy is yourself or more precisely your <strong>motivation</strong>. Many times, developers, including myself, start a new project full of excitement but lose their motivation along the way and drop the project.</p><h3 id=\"why-does-motivation-fade\">Why does motivation fade?</h3><p>Let\u2019s take a step back and remember how motivation works. As proud owners of a <strong>reward system</strong>, we are \u201cprogrammed\u201d to keep doing things that help us accomplish goals by giving us good feelings (the \u201creward\u201d). </p><p>The stronger the \u201cconnection\u201d between the action and the reward, the greater the chance we will do it again. This is how our body and our mind \u201cdirect\u201d us to do the right things.\u200c\u200c</p><p>Just think of the things you do to get emotional rewards: producing funny videos to get likes on Ticktock, answering questions on StackOverflow to build up your reputation, or working hard to be able to fund the vacation you always dreamed of.</p><p>Our motivation is strongly affected by the reward system.</p><blockquote>Motivation is a function of the prize size and the time it takes to get it.</blockquote><p>But what if the prize is not immediate? What if the journey to the prize is long? The connection between the action and the prize gets weaker, and then so does the motivation.</p><h3 id=\"how-to-stay-motivated-when-working-on-a-project\">How to Stay Motivated when Working on a Project</h3><p>One solution is to enlarge the prize \u2013 but this is not always possible. Many times, the prize is given.\u200c\u200c Another solution is to \u201csplit\u201d the prize into smaller pieces so we can win things along the way.</p><blockquote>For example, $100K in a year = ~$274 a day.</blockquote><p>So in order to keep our motivation strong, we should set ourselves up to win, even small wins, more often. We should get the reward frequently to keep the motivation high, otherwise, it falls.</p><p>Do you know \u201cFlappy Bird\u201d? It's a game where you need to keep hitting \u201cspace\u201d (reward) to prevent the bird (motivation) from falling.</p><figure><img alt=\"1_5FZ_xaV3MxazakKr6dQWWA-2\" height=\"318\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2021/09/1_5FZ_xaV3MxazakKr6dQWWA-2.png\" width=\"235\"/><figcaption>Screenshot taken from <a href=\"https://www.freecodecamp.org/news/p/e7d96cd3-e869-406b-9957-e1dec350eacb/Screenshot%20taken%20from%20https://flappybird.io/\">https://flappybird.io/</a></figcaption></figure><p>Same goes with your project. When a project helps you achieve a goal (getting a job) or makes you feel a positive feeling such as proud\u200a (\u200ayou won the challenge), you get a reward. Or maybe you get satisfaction\u200a from helping people you care about, or you feel flattered\u200awhen\u200a someone mentions you on Twitter.</p><p>In all these cases, you are rewarded.\u200c\u200c But it\u2019s not enough to have the good feeling once in a while. In order to stay motivated, you should feel it frequently.</p><p>Now we can understand why the exact type of project doesn\u2019t matter so much. Because it doesn\u2019t necessarily reward you often.</p><p>Here are some examples of projects that can reward often:</p><ul><li>A product that's used by many users and gets good feedback. <strong>Reward</strong>: likes, number of downloads / visits, and so on.</li><li>A product for a good cause (like a nonprofit organization). <strong>Reward</strong>: Your happy face in the mirror every morning, doing something good.</li><li>A product that improves your life. <strong>Reward</strong>: Your quality of life is constantly improved.</li></ul><p>What, about a product that helps you get a job? It should give you good feeling, right?\u200c\u200c</p><p>Well, this is tricky. Do you remember the equation: \u201cMotivation is a function of the prize size and the time it takes to get it\u201d?\u200c\u200c The prize of being hired is of course very high, but the time? The time is unknown. So as the time passes \u201cThe connection between the action and the prize gets weaker, and so does the motivation\u201d\u200c\u200c.</p><p>While working on a project that receives good feedback makes you feel good frequently, a meaningless project that you make only for getting a job doesn\u2019t (unless you get hired, of course).</p><h3 id=\"how-to-build-a-project-that-you-actually-use\">How to Build a Project that You Actually Use</h3><p>Usually the first two types of projects \u2013 one with tons of users and one for a good cause \u2013 are harder to get as a beginner. It might take some time to get to a such point.\u200c\u200c </p><p>This leaves us with the 3rd type\u200a \u2014\u200a\u201cA product that improves your life\u201d. \u200c\u200cThe nice thing about this kind of project is that it usually starts as a simple improvement to your life only. Then along the way, you discover more features that you need and add them as you go. Using a good product you made rewards you of course so your motivation remains high.</p><p>As you add more and more features, the app becomes more complex. Now you can't just throw in components here and there. You have to make plans and decisions about structure, design, and architecture. You have to make decisions about which tools and libraries to adopt. </p><p>Every thought and every decision you make covers aspects from the \"aspects list\" I talked about above (that is, skills companies want to see that you have). If you do this right, it reduces the risk of companies when they hire you.</p><p>In fact, in my experience, a major part of the technical interview is the \"previous experience\" conversation. In this conversation, interviewers ask you about your previous experience, focusing on decisions you made, challenges you handled, and how thoroughly you know the product in technical terms. </p><p>The more you have to talk about in this section, the higher your chances of doing well and impressing the interviewer. </p><p>Ok, back to your big project. One day you start thinking \u201cThis app is great. If I get real value from using it, maybe others will, too\u201d. So you publish it. Now, people can find and use your app and who knows, maybe they'll even like it. </p><p>Some of them will like it so much that they leave good feedback publicly. There are HR managers in the crowd. They use your app, they read the feedback, and by chance, they need a new developer\u200a\u2014\u200aa happy coincidence!</p><p>\u200cSee what happened? You created this app to improve your life, and then:</p><ul><li>It\u2019s doing good for others \u2764\ufe0f and then</li><li>You get good feedback \ud83d\udc4f and then</li><li>You get an interview \ud83d\udcbb</li></ul><p>It\u2019s a win-win-win-win situation.</p><p>The nice thing about this idea that it helps you out even if it doesn't end up in a job offer. Maybe other people won't even use your app \u2013 but hey, it still improves your life and your coding skills, which brings you closer to a job. The extra benefits are just extras.</p><h3 id=\"what-s-the-risk-here\">What's the Risk Here?</h3><p>While you're reading this, at some point you might thinking \"why should I create a product for myself? Every product I need has been made. There is no way I can do it better\".</p><p>First of all, you are not a startup (yet). Nothing bad will happen if you will build a product that's already been built.</p><p>Second, you probably have some good ideas about how to improve the products you use. Maybe some features you'd like to see added, some that could be removed, and so on.</p><p>Here's an example: I've been using one of the shopping list apps. It's a great app, syncs the list between all the family devices, allows you to set categories, keeps history to re-add products more easily, and can be opened on phones and desktops. Very handy.</p><p>I really enjoyed using it, but along the way I felt that it wasn't perfect for me. Some features were missing, like there wasn't a way to upload a product photo. I also couldn't set an urgency level and I couldn't see who had added each product if it was a shared list. Also the history view showed products that were already added to the list, so it was confusing.</p><p>I'm pretty sure this sounds familiar for at least for one of the apps you're using. So take your ideas and try to run with them.</p><h2 id=\"conclusion\">Conclusion</h2><p>So what was the question? What type of projects you should make as a new developer?</p><p>Make a product that you or someone you know will actually enjoy using and find helpful.</p><p>How do I know this works? Well, this is exactly what I did to get my first job 10 years ago. It's also how some of my own successful projects started.</p><p>Oh, and about the shopping list app? Yeah, I made one of my own. It's a Progressive Web App, with all the features I mentioned and more. You are more than welcome to review it and my other open source projects on <a href=\"https://github.com/moshfeu/\">my Github</a>.</p><p>Thanks for reading! Good luck with your developer journey.</p>\n</section>\n<hr/>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nIf you're a new developer, you're probably familiar with the \u201cExperience Paradox\u201d.It describes the frustrating cycle many of us go through when we're trying to get our first developer jobs:To get a job, you need \"work experience\". But to get \"work experience\", you need a job...!Job requires experience => requires job => requires experienceNow, of course there are reasons why companies prefer hiring more experienced developers. But it's also true that unexperienced candidates might be more motivated, might fit the company culture better, and so on. In this article, I won't explore all the different ways that new developers can get around this paradox (increasing your online presence, talking at meetups, getting in touch with HR managers, and so on).Instead, I\u2019m here to talk about what I believe is the main approach beginners should take to avoid the paradox altogether: getting real experience.How to Get Development Experience Before You Have a JobIn order to get a real coding experience (not only coding \u2013 but we\u2019ll talk about that later) you should actively be, well, coding. Makes sense, right?As a mentor, I've often been asked what the best project ideas are that developers should work on and create to practice and demonstrate their skills.While it\u2019s not a direct answer, I will say that the project idea itself is not the most important thing.\u200c\u200c\u200cThere are a lot of ideas for projects out there. Yes, some are better than others in terms of complexity, skill demonstration, and verity of technologies. My point is that you shouldn\u2019t necessarily go with the most eye-popping project. Instead, I recommend creating a product that you or someone you know will actually use.Why is it important to build a product you would use? One of the goals of creating a portfolio project is to demonstrate to companies that you can work on their product just like you did on your project.\u200c\u200cI\u2019m not talking about the final product alone \u2013 but also the debates, the design decisions, and the choices you made. All this is what developers do on a daily basis and that's what companies will expect from you.Every gap between your project and their product is an unknown variable, a risk they'll have to take when hiring you. Your goal is to show them that the risk is as small as possible.\u200c\u200cHypothetically, if your project would be exactly like their product, they would hire you on spot. \u200c\u200cThis is not the case, of course, but my point is that your project should demonstrate as many aspects of a real project as possible. Everything you show them you can do \u2013 each skill you confirm \u2013 decreases their risk in hiring you.When I say \u201caspects\u201d of the project, I mean the system components, layers and skills every product requires.\u200c If we\u2019re talking about a web-based product, these features can be technical such as frameworks and libraries for UI / server, authentication, communication, 3rd party integrations and so on. You can also showcase your engineering knowledge about topics such as architecture, system design, clean code, readable code, scalable solutions, and so on.\u200c\u200cWith this understanding, we can agree that it's better to build a bigger and more complex project than you might have originally thought.There are some challenges that come with building big complex projects. This is actually the topic I want to talk about in this post.How to Build a Big, Complex Project \u2013 Successfully\u200cWhen you work on a project, your biggest enemy is not your technical knowledge level (you can improve it), your confidence (you can improve it), or lack of resources (there are a ton out there).\u200c\u200c The biggest enemy is yourself or more precisely your motivation. Many times, developers, including myself, start a new project full of excitement but lose their motivation along the way and drop the project.Why does motivation fade?Let\u2019s take a step back and remember how motivation works. As proud owners of a reward system, we are \u201cprogrammed\u201d to keep doing things that help us accomplish goals by giving us good feelings (the \u201creward\u201d). The stronger the \u201cconnection\u201d between the action and the reward, the greater the chance we will do it again. This is how our body and our mind \u201cdirect\u201d us to do the right things.\u200c\u200cJust think of the things you do to get emotional rewards: producing funny videos to get likes on Ticktock, answering questions on StackOverflow to build up your reputation, or working hard to be able to fund the vacation you always dreamed of.Our motivation is strongly affected by the reward system.Motivation is a function of the prize size and the time it takes to get it.But what if the prize is not immediate? What if the journey to the prize is long? The connection between the action and the prize gets weaker, and then so does the motivation.How to Stay Motivated when Working on a ProjectOne solution is to enlarge the prize \u2013 but this is not always possible. Many times, the prize is given.\u200c\u200c Another solution is to \u201csplit\u201d the prize into smaller pieces so we can win things along the way.For example, $100K in a year = ~$274 a day.So in order to keep our motivation strong, we should set ourselves up to win, even small wins, more often. We should get the reward frequently to keep the motivation high, otherwise, it falls.Do you know \u201cFlappy Bird\u201d? It's a game where you need to keep hitting \u201cspace\u201d (reward) to prevent the bird (motivation) from falling.Screenshot taken from https://flappybird.io/Same goes with your project. When a project helps you achieve a goal (getting a job) or makes you feel a positive feeling such as proud\u200a (\u200ayou won the challenge), you get a reward. Or maybe you get satisfaction\u200a from helping people you care about, or you feel flattered\u200awhen\u200a someone mentions you on Twitter.In all these cases, you are rewarded.\u200c\u200c But it\u2019s not enough to have the good feeling once in a while. In order to stay motivated, you should feel it frequently.Now we can understand why the exact type of project doesn\u2019t matter so much. Because it doesn\u2019t necessarily reward you often.Here are some examples of projects that can reward often:A product that's used by many users and gets good feedback. Reward: likes, number of downloads / visits, and so on.A product for a good cause (like a nonprofit organization). Reward: Your happy face in the mirror every morning, doing something good.A product that improves your life. Reward: Your quality of life is constantly improved.What, about a product that helps you get a job? It should give you good feeling, right?\u200c\u200cWell, this is tricky. Do you remember the equation: \u201cMotivation is a function of the prize size and the time it takes to get it\u201d?\u200c\u200c The prize of being hired is of course very high, but the time? The time is unknown. So as the time passes \u201cThe connection between the action and the prize gets weaker, and so does the motivation\u201d\u200c\u200c.While working on a project that receives good feedback makes you feel good frequently, a meaningless project that you make only for getting a job doesn\u2019t (unless you get hired, of course).How to Build a Project that You Actually UseUsually the first two types of projects \u2013 one with tons of users and one for a good cause \u2013 are harder to get as a beginner. It might take some time to get to a such point.\u200c\u200c This leaves us with the 3rd type\u200a \u2014\u200a\u201cA product that improves your life\u201d. \u200c\u200cThe nice thing about this kind of project is that it usually starts as a simple improvement to your life only. Then along the way, you discover more features that you need and add them as you go. Using a good product you made rewards you of course so your motivation remains high.As you add more and more features, the app becomes more complex. Now you can't just throw in components here and there. You have to make plans and decisions about structure, design, and architecture. You have to make decisions about which tools and libraries to adopt. Every thought and every decision you make covers aspects from the \"aspects list\" I talked about above (that is, skills companies want to see that you have). If you do this right, it reduces the risk of companies when they hire you.In fact, in my experience, a major part of the technical interview is the \"previous experience\" conversation. In this conversation, interviewers ask you about your previous experience, focusing on decisions you made, challenges you handled, and how thoroughly you know the product in technical terms. The more you have to talk about in this section, the higher your chances of doing well and impressing the interviewer. Ok, back to your big project. One day you start thinking \u201cThis app is great. If I get real value from using it, maybe others will, too\u201d. So you publish it. Now, people can find and use your app and who knows, maybe they'll even like it. Some of them will like it so much that they leave good feedback publicly. There are HR managers in the crowd. They use your app, they read the feedback, and by chance, they need a new developer\u200a\u2014\u200aa happy coincidence!\u200cSee what happened? You created this app to improve your life, and then:It\u2019s doing good for others \u2764\ufe0f and thenYou get good feedback \ud83d\udc4f and thenYou get an interview \ud83d\udcbbIt\u2019s a win-win-win-win situation.The nice thing about this idea that it helps you out even if it doesn't end up in a job offer. Maybe other people won't even use your app \u2013 but hey, it still improves your life and your coding skills, which brings you closer to a job. The extra benefits are just extras.What's the Risk Here?While you're reading this, at some point you might thinking \"why should I create a product for myself? Every product I need has been made. There is no way I can do it better\".First of all, you are not a startup (yet). Nothing bad will happen if you will build a product that's already been built.Second, you probably have some good ideas about how to improve the products you use. Maybe some features you'd like to see added, some that could be removed, and so on.Here's an example: I've been using one of the shopping list apps. It's a great app, syncs the list between all the family devices, allows you to set categories, keeps history to re-add products more easily, and can be opened on phones and desktops. Very handy.I really enjoyed using it, but along the way I felt that it wasn't perfect for me. Some features were missing, like there wasn't a way to upload a product photo. I also couldn't set an urgency level and I couldn't see who had added each product if it was a shared list. Also the history view showed products that were already added to the list, so it was confusing.I'm pretty sure this sounds familiar for at least for one of the apps you're using. So take your ideas and try to run with them.ConclusionSo what was the question? What type of projects you should make as a new developer?Make a product that you or someone you know will actually enjoy using and find helpful.How do I know this works? Well, this is exactly what I did to get my first job 10 years ago. It's also how some of my own successful projects started.Oh, and about the shopping list app? Yeah, I made one of my own. It's a Progressive Web App, with all the features I mentioned and more. You are more than welcome to review it and my other open source projects on my Github.Thanks for reading! Good luck with your developer journey.\n\n                        \n                    \n                    \n                        \n                        \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 11976, "excerpt": "If you're a new developer, you're probably familiar with the \u201cExperience\nParadox\u201d.\n\nIt describes the frustrating cycle many of us go through when we're trying to\nget our first developer jobs:\n\nTo get a job, you need \"work experience\". But to get \"work experience\", you need\na job...!\n\nJob requires experience => requires job => requires experienceNow, of course\nthere are reasons why companies prefer hiring more experienced developers. But\nit's also true that unexperienced candidates might be more", "siteName": "freeCodeCamp.org", "publishedTime": "2021-11-18T23:59:00.000Z", "id": "30e1ac45ca1b361772f9f65e277b096dcb5c53e2", "url": "https://www.freecodecamp.org/news/programming-projects-for-new-developers/", "domain": "freecodecamp.org", "date": "2023-12-27T18:05:43.183315", "resultUri": "http://localhost:3000/result/30e1ac45ca1b361772f9f65e277b096dcb5c53e2", "query": {"url": ["https://www.freecodecamp.org/news/programming-projects-for-new-developers/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "Programming Projects for New Developers \u2013 What to Build to Get Coding Experience", "description": "If you're a new developer, you're probably familiar with the \u201cExperience Paradox\u201d. It describes the frustrating cycle many of us go through when we're trying to get our first developer jobs: To get a job, you need \"work experience\". But to get \"work experience\", you need a job...! Job requires", "url": "https://www.freecodecamp.org/news/programming-projects-for-new-developers/", "image": "https://www.freecodecamp.org/news/content/images/2021/11/pexels-negative-space-92904.jpg", "image:width": "2000", "image:height": "1334"}, "twitter": {"card": "summary_large_image", "title": "Programming Projects for New Developers \u2013 What to Build to Get Coding Experience", "description": "If you're a new developer, you're probably familiar with the \u201cExperience Paradox\u201d. It describes the frustrating cycle many of us go through when we're trying to get our first developer jobs: To get a job, you need \"work experience\". But to get \"work experience\", you need a job...! Job requires", "url": "https://www.freecodecamp.org/news/programming-projects-for-new-developers/", "image": "https://www.freecodecamp.org/news/content/images/2021/11/pexels-negative-space-92904.jpg", "label1": "Written by", "data1": "Moshe Feuchtwanger", "label2": "Filed under", "data2": "Projects, Career Advice, Coding, Beginners Guide, Programming", "site": "@freecodecamp", "creator": "@moshfeu"}}}