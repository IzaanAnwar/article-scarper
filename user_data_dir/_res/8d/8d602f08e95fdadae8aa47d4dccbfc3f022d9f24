{"title": "How to easily implement QRCoder in ASP.NET Core using C#", "byline": "freeCodeCamp.org", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>How to easily implement QRCoder in ASP.NET Core using C#</h1>\n<section>\n<section data-test-label=\"post-content\">\n<p>by Yogi</p><p>QRCoder is a very popular QR Code implementation library written in C#. It is available in <a href=\"https://github.com/codebude/QRCoder\" rel=\"noopener\"><strong>GitHub</strong></a><strong>. </strong>Here I am going to implement the QRCoder library to generate QR Codes in my ASP.NET Core application. I will also be using C#.</p><p>I will implement QRCoder in 3 ways, which are:</p><p>1. Create QR Code Bitmap image for any text.</p><p>2. Create QR Code File (.qrr) for any text and then save these files in the application.</p><p>3. Read and display all the QR Code Files (.qrr).</p><p>Let\u2019s start with the Installation of QRCoder in <a href=\"https://www.yogihosting.com/category/aspnet-core/\" rel=\"noopener\"><strong>ASP.NET Core</strong></a> Framework.</p><p><a href=\"https://github.com/yogyogi/QRCoder-implemented-in-ASP.NET-Core\" rel=\"noopener\"><strong>You can download the full code from my GitHub Respositiory</strong></a><strong>.</strong></p><h3 id=\"installation\"><strong>Installation</strong></h3><p>Install QRCoder via NuGet Package Manager. If you want to use NuGet, just search for \u201cQRCoder\u201d or run the following command in the NuGet Package Manager console:</p><p><code>PM&gt; Install-Package QRCoder</code></p><p>The QRCoder will install in 1 minute and will be ready to use.</p><p>Now let us start with the implementation of QRCoder in the 3 ways mentioned above.</p><h3 id=\"create-qr-code-bitmap-image-for-any-text\"><strong>Create QR Code Bitmap image for any text</strong></h3><p>Create a new Controller called \u2018<code>QRCoderController</code>\u2019 inside the Controllers folder. The controller will be created and it will have just one Action Method called \u2018<code>Index</code>\u2019 in it:</p><pre><code>public IActionResult Index()\n{\n    return View();\n}</code></pre><p>Import the following namespaces in the controller:</p><pre><code>using System;\nusing System.Collections.Generic;\nusing System.Drawing;\nusing System.IO;\nusing Microsoft.AspNetCore.Mvc;\nusing QRCoder;</code></pre><p>Next, add the Index Action of type <code>[HttpPost]</code> to the controller:</p><pre><code>[HttpPost]\npublic IActionResult Index(string qrText)\n{\n    QRCodeGenerator qrGenerator = new QRCodeGenerator();\n    QRCodeData qrCodeData = qrGenerator.CreateQrCode(qrText,\n    QRCodeGenerator.ECCLevel.Q);\n    QRCode qrCode = new QRCode(qrCodeData);\n    Bitmap qrCodeImage = qrCode.GetGraphic(20);\n    return View(BitmapToBytes(qrCodeImage));\n}</code></pre><blockquote>This Index Action receives a string parameter called \u2018qrText\u2019. It contains the text that is provided by an Input control defined in the View. This text will be converted to QR Code Bitmap image. The following code lines do this work:</blockquote><pre><code>QRCodeGenerator qrGenerator = new QRCodeGenerator();\n\nQRCodeData qrCodeData = qrGenerator.CreateQrCode(qrText, QRCodeGenerator.ECCLevel.Q);\n\nQRCode qrCode = new QRCode(qrCodeData);\nBitmap qrCodeImage = qrCode.GetGraphic(20);</code></pre><p>The QRCode object (\u2018<code>qrCode</code>\u2019) defined calls a static function called \u2018<code>BitmapToBytes()</code>\u2019. The role of this function is to convert the Bitmap image to \u2018<code>Byte[]</code>\u2019.</p><p>Add this function to your controller:</p><pre><code>private static Byte[] BitmapToBytes(Bitmap img)\n{\n    using (MemoryStream stream = new MemoryStream())\n    {\n        img.Save(stream, System.Drawing.Imaging.ImageFormat.Png);\n        return stream.ToArray();\n    }\n}</code></pre><p>Finally create the Index View inside the \u2018<code>Views/QRCoder</code>\u2019 folder with the following code:</p><pre><code>@model Byte[]\n@{\n    Layout = null;\n}\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\n&lt;head&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width\" /&gt;\n  &lt;title&gt;Implementing QRCoder in ASP.NET Core - Create QR Code&lt;/title&gt;\n  &lt;style&gt;\n    body {\n      background: #111 no-repeat;\n      background-image: -webkit-gradient(radial, 50% 0, 150, 50% 0, 300, from(#444), to(#111));\n    }\n\n    h1,\n    h2,\n    h3 {\n      text-align: center;\n      color: #FFF;\n      margin: 5px 0;\n    }\n\n    h1 {\n      font-size: 30px;\n    }\n\n    h2 a {\n      font-size: 25px;\n      color: #0184e3;\n      text-decoration: none;\n    }\n\n    h3 {\n      font-size: 23px;\n      border-bottom: solid 3px #CCC;\n      padding-bottom: 10px;\n    }\n\n    h3 a {\n      color: #00e8ff;\n      text-decoration: none;\n    }\n\n    h3 a:hover,\n    h2 a:hover {\n      text-decoration: underline;\n    }\n\n    .container {\n      width: 800px;\n      margin: auto;\n      color: #FFF;\n      font-size: 25px;\n    }\n\n    .container #content {\n      border: dashed 2px #CCC;\n      padding: 10px;\n    }\n\n    #reset {\n      padding: 5px 10px;\n      background: #4CAF50;\n      border: none;\n      color: #FFF;\n      cursor: pointer;\n    }\n\n    #reset:hover {\n      color: #4CAF50;\n      background: #FFF;\n    }\n\n    #viewContent table {\n      width: 100%;\n    }\n\n    #viewContent table tr {\n      height: 80px;\n      background: darkcyan;\n    }\n\n    #viewContent table tr td {\n      width: 50%;\n      padding-left: 5px;\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;div class=\"container\"&gt;\n    &lt;div id=\"content\"&gt;\n      &lt;h1&gt;Implementing QRCoder in ASP.NET Core - Create QR Code&lt;/h1&gt;\n      &lt;h2&gt;\n        &lt;a href=\"http://www.yogihosting.com/category/aspnet-core/\"&gt;Read the tutorial on YogiHosting \u00bb &lt;/a&gt;\n        &lt;button id=\"reset\" onclick=\"location=''\"&gt;Reset \u00bb&lt;/button&gt;\n      &lt;/h2&gt;\n      &lt;div id=\"viewContent\"&gt;\n        @using (Html.BeginForm(null, null, FormMethod.Post)) {\n        &lt;table&gt;\n          &lt;tbody&gt;\n            &lt;tr&gt;\n              &lt;td&gt;\n                &lt;label&gt;Enter text for creating QR Code&lt;/label\n                &lt;/td&gt;\n                &lt;td&gt;\n                  &lt;input type=\"text\" name=\"qrText\" /&gt;\n                &lt;/td&gt;\n              &lt;/tr&gt;\n              &lt;tr&gt;\n                &lt;td colspan=\"2\"&gt;\n                  &lt;button&gt;Submit&lt;/button&gt;\n                &lt;/td&gt;\n              &lt;/tr&gt;\n            &lt;/tbody&gt;\n          &lt;/table&gt;\n        }\n      &lt;/div&gt;\n      \n      @{\n        if (Model != null)\n        {\n          &lt;h3&gt;QR Code Successfully Generated&lt;/h3&gt;\n          &lt;img src=\"@String.Format(\"data:image/png;base64,{0}\", Convert.ToBase64String(Model))\" /&gt;\n        }\n      }\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre><p>The Index View has an \u2018<code>input</code>\u2019 control. The user enters their text into this control to create the QR Code:</p><p><code>&lt;input type=\"text\" name=\"qrText\"</code> /&gt;</p><p>Once the QR Code is generated by the Index Action method, its \u2018<code>byte</code>\u2019 array is returned to the View as model and then the bitmap image is displayed by the below code:</p><pre><code>@{\n  if (Model != null)\n  {\n    &lt;h3&gt;QR Code Successfully Generated&lt;/h3&gt;\n    &lt;img src=\"@String.Format(\"data:image/png;base64,{0}\", Convert.ToBase64String(Model))\" /&gt;\n  }\n}</code></pre><h4 id=\"testing-the-code\"><strong>Testing the Code</strong></h4><p>Run your application and go to the URL \u2014 \u2018<code>http://localhost:50755/QRCoder</code>\u2019 to invoke the Index Action method.</p><p>In the text box, add your text and click the submit button to create the QR Code Bitmap image.</p><p>See this image which illustrates it working:</p><figure><img alt=\"RZJScQFTxL1upNaGcmdXmOWaJR3u10Zq1RjJ\" height=\"460\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/RZJScQFTxL1upNaGcmdXmOWaJR3u10Zq1RjJ\" width=\"600\"/><figcaption><strong>create QRCode Bitmap Image</strong></figcaption></figure><h3 id=\"create-qr-code-file-qrr-for-any-text-and-then-save-these-files-in-the-application\"><strong>Create QR Code File (.qrr) for any text and then save these files in the application</strong></h3><p>You can also generate QR Code files for a text and save it in your website. These files have .<em>qrr </em>extension.</p><p>To your controller add the following Action methods called \u2018<code>GenerateFile</code>\u2019:</p><pre><code>public IActionResult GenerateFile()\n{\n  return View();\n}\n\n[HttpPost]\npublic IActionResult GenerateFile(string qrText)\n{\n  QRCodeGenerator qrGenerator = new QRCodeGenerator();\n  QRCodeData qrCodeData = qrGenerator.CreateQrCode(qrText,   QRCodeGenerator.ECCLevel.Q);\n  \n  string fileGuid = Guid.NewGuid().ToString().Substring(0, 4);\n  \n  qrCodeData.SaveRawData(\"wwwroot/qrr/file-\" + fileGuid + \".qrr\", QRCodeData.Compression.Uncompressed);\n  \n  QRCodeData qrCodeData1 = new QRCodeData(\"wwwroot/qrr/file-\" + fileGuid + \".qrr\", QRCodeData.Compression.Uncompressed);\n  \n  QRCode qrCode = new QRCode(qrCodeData1);\n  Bitmap qrCodeImage = qrCode.GetGraphic(20);\n  return View(BitmapToBytes(qrCodeImage));\n}</code></pre><p>The <code>[HttpPost] </code>version of this action method generates the QR Code files inside the \u2018<code>wwwroot/qrr</code>\u2019 folder. The code that does this work is the following:</p><pre><code>QRCodeGenerator qrGenerator = new QRCodeGenerator();\n\nQRCodeData qrCodeData = qrGenerator.CreateQrCode(qrText, QRCodeGenerator.ECCLevel.Q);\n\nstring fileGuid = Guid.NewGuid().ToString().Substring(0, 4);\n\nqrCodeData.SaveRawData(\"wwwroot/qrr/file-\" + fileGuid + \".qrr\", QRCodeData.Compression.Uncompressed);</code></pre><p>Once the .qrr file is created then I am simply reading it for its saved location in the website. Then I am converting it to Bitmap type and finally sending the image\u2019s bytes to the view. The corresponding code is:</p><pre><code>QRCodeData qrCodeData1 = new QRCodeData(\"wwwroot/qrr/file-\" + fileGuid + \".qrr\", QRCodeData.Compression.Uncompressed);\n\nQRCode qrCode = new QRCode(qrCodeData1);\nBitmap qrCodeImage = qrCode.GetGraphic(20);\n\nreturn View(BitmapToBytes(qrCodeImage));</code></pre><p>Next, add the GenerateFile view inside the \u2018<code>Views/QRCoder</code>\u2019 folder and add the following code to it:</p><pre><code>@model Byte[]\n@{\n    Layout = null;\n}\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\n&lt;head&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width\" /&gt;\n  &lt;title&gt;Implementing QRCoder in ASP.NET Core - Create QR Code File&lt;/title&gt;\n  &lt;style&gt;\n    body {\n      background: #111 no-repeat;\n      background-image: -webkit-gradient(radial, 50% 0, 150, 50% 0, 300, from(#444), to(#111));\n    }\n\n    h1,\n    h2,\n    h3 {\n      text-align: center;\n      color: #FFF;\n      margin: 5px 0;\n    }\n\n    h1 {\n      font-size: 30px;\n    }\n\n    h2 a {\n      font-size: 25px;\n      color: #0184e3;\n      text-decoration: none;\n    }\n\n    h3 {\n      font-size: 23px;\n      border-bottom: solid 3px #CCC;\n      padding-bottom: 10px;\n    }\n\n    h3 a {\n      color: #00e8ff;\n      text-decoration: none;\n    }\n\n    h3 a:hover,\n    h2 a:hover {\n      text-decoration: underline;\n    }\n\n    .container {\n      width: 800px;\n      margin: auto;\n      color: #FFF;\n      font-size: 25px;\n    }\n\n    .container #content {\n      border: dashed 2px #CCC;\n      padding: 10px;\n    }\n\n    #reset {\n      padding: 5px 10px;\n      background: #4CAF50;\n      border: none;\n      color: #FFF;\n      cursor: pointer;\n    }\n\n    #reset:hover {\n      color: #4CAF50;\n      background: #FFF;\n    }\n\n    #viewContent table {\n      width: 100%;\n    }\n\n    #viewContent table tr {\n      height: 80px;\n      background: darkcyan;\n    }\n\n    #viewContent table tr td {\n      width: 50%;\n      padding-left: 5px;\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;div class=\"container\"&gt;\n    &lt;div id=\"content\"&gt;\n      &lt;h1&gt;Implementing QRCoder in ASP.NET Core - Create QR Code File&lt;/h1&gt;\n      &lt;h2&gt;\n        &lt;a href=\"http://www.yogihosting.com/category/aspnet-core/\"&gt;Read the tutorial on YogiHosting \u00bb &lt;/a&gt;\n        &lt;button id=\"reset\" onclick=\"location=''\"&gt;Reset \u00bb&lt;/button&gt;\n      &lt;/h2&gt;\n      &lt;div id=\"viewContent\"&gt;\n        @using (Html.BeginForm(null, null, FormMethod.Post)) {\n        &lt;table&gt;\n          &lt;tbody&gt;\n            &lt;tr&gt;\n              &lt;td&gt;\n                &lt;label&gt;Enter text for creating QR File&lt;/label&gt;\n              &lt;/td&gt;\n              &lt;td&gt;\n                &lt;input type=\"text\" name=\"qrText\" /&gt;\n              &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n              &lt;td colspan=\"2\"&gt;\n                &lt;button&gt;Submit&lt;/button&gt;\n              &lt;/td&gt;\n            &lt;/tr&gt;\n          &lt;/tbody&gt;\n        &lt;/table&gt;\n        }\n      &lt;/div&gt;\n      @{ if (Model != null) {\n      &lt;h3&gt;QR Code file Successfully Generated&lt;/h3&gt;\n      &lt;img src=\"@String.Format(\" data:image/png;base64,{0} \", Convert.ToBase64String(Model))\" /&gt; } }\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;</code></pre><p>The code of this View is exactly similar to the \u2018Index\u2019 View and works exactly like it.</p><p>The URL to invoke this View is \u2018<code>http://localhost:50755/QRCoder/GenerateFile</code>\u2019.</p><h3 id=\"read-and-display-all-the-qr-code-files-qrr-\"><strong>Read and display all the QR Code Files (.qrr)</strong></h3><p>You can also read all the .qrr files saved in the website. Go to your controller and add a new action called \u2018ViewFile\u2019:</p><pre><code>public IActionResult ViewFile()\n{\n  List&lt;KeyValuePair&lt;string, Byte[]&gt;&gt; fileData=new List&lt;KeyValuePair&lt;string, byte[]&gt;&gt;();\n  \n  KeyValuePair&lt;string, Byte[]&gt; data;\n  string[] files = Directory.GetFiles(\"wwwroot/qrr\");\n  foreach (string file in files)\n  {\n    QRCodeData qrCodeData = new QRCodeData(file, QRCodeData.Compression.Uncompressed);\n    \n    QRCode qrCode = new QRCode(qrCodeData);\n    Bitmap qrCodeImage = qrCode.GetGraphic(20);\n    \n    Byte[] byteData = BitmapToBytes(qrCodeImage);\n    data = new KeyValuePair&lt;string, Byte[]&gt;(Path.GetFileName(file), byteData);\n    fileData.Add(data);\n  }\n  return View(fileData);\n}</code></pre><p>In this action method, I read the filed located in the \u2018qrr\u2019 folder using the code:</p><pre><code>Directory.GetFiles(\"wwwroot/qrr\")</code></pre><p>Then I add each qrr file\u2019s bytes and name inside a <code>List&lt;KeyValuePair&lt;string, Byte[]&gt;&gt;</code> object.</p><p>This object is returned to the View at the end:</p><pre><code>return View(fileData);</code></pre><p>Finally create the \u2018<code>ViewFile</code>\u2019 View inside the \u2018<code>Views/QRCoder</code>\u2019 folder with the following code:</p><pre><code>@model List\n&lt;KeyValuePair&lt;string, Byte[]&gt;&gt;\n@{\n    Layout = null;\n}\n\n  &lt;!DOCTYPE html&gt;\n  &lt;html&gt;\n\n  &lt;head&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width\" /&gt;\n    &lt;title&gt;Implementing QRCoder in ASP.NET Core - View QR Code Files&lt;/title&gt;\n    &lt;style&gt;\n      body {\n        background: #111 no-repeat;\n        background-image: -webkit-gradient(radial, 50% 0, 150, 50% 0, 300, from(#444), to(#111));\n      }\n\n      h1,\n      h2,\n      h3 {\n        text-align: center;\n        color: #FFF;\n        margin: 5px 0;\n      }\n\n      h1 {\n        font-size: 30px;\n      }\n\n      h2 a {\n        font-size: 25px;\n        color: #0184e3;\n        text-decoration: none;\n      }\n\n      h3 {\n        font-size: 23px;\n        border-bottom: solid 3px #CCC;\n        padding-bottom: 10px;\n      }\n\n      h3 a {\n        color: #00e8ff;\n        text-decoration: none;\n      }\n\n      h3 a:hover,\n      h2 a:hover {\n        text-decoration: underline;\n      }\n\n      .container {\n        width: 800px;\n        margin: auto;\n        color: #FFF;\n        font-size: 25px;\n      }\n\n      .container #content {\n        border: dashed 2px #CCC;\n        padding: 10px;\n      }\n\n      #reset {\n        padding: 5px 10px;\n        background: #4CAF50;\n        border: none;\n        color: #FFF;\n        cursor: pointer;\n      }\n\n      #reset:hover {\n        color: #4CAF50;\n        background: #FFF;\n      }\n\n      #viewContent table {\n        width: 100%;\n      }\n\n      #viewContent table tr {\n        height: 80px;\n        background: darkcyan;\n      }\n\n      #viewContent table tr td {\n        width: 50%;\n        padding-left: 5px;\n      }\n\n      #viewContent table tr td img {\n        width: 150px;\n      }\n\n      #viewContent table tr td span {\n        display: block;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n\n  &lt;body&gt;\n    &lt;div class=\"container\"&gt;\n      &lt;div id=\"content\"&gt;\n        &lt;h1&gt;Implementing QRCoder in ASP.NET Core - View QR Code Files&lt;/h1&gt;\n        &lt;h2&gt;\n          &lt;a href=\"http://www.yogihosting.com/category/aspnet-core/\"&gt;Read the tutorial on YogiHosting \u00bb &lt;/a&gt;\n          &lt;button id=\"reset\" onclick=\"location=''\"&gt;Reset \u00bb&lt;/button&gt;\n        &lt;/h2&gt;\n        &lt;div id=\"viewContent\"&gt;\n          &lt;table&gt;\n            &lt;tbody&gt;\n              @foreach (KeyValuePair\n              &lt;string, Byte[]&gt; k in Model) {\n                &lt;tr&gt;\n                  &lt;td&gt;\n                    &lt;img src=\"@String.Format(\" data:image/png;base64,{0} \", Convert.ToBase64String(k.Value))\" /&gt;\n                    &lt;span&gt;@k.Key&lt;/span&gt;\n                  &lt;/td&gt;\n                &lt;/tr&gt;\n                }\n            &lt;/tbody&gt;\n          &lt;/table&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/body&gt;\n\n  &lt;/html&gt;</code></pre><p>This View displays all the qrr files as bitmap images inside a \u2018HTML\u2019 table. The below code creates the HTML table:</p><pre><code>&lt;table&gt;\n  &lt;tbody&gt;\n    @foreach (KeyValuePair&lt;string, Byte[]&gt; k in Model)\n    {\n      &lt;tr&gt;\n        &lt;td&gt;\n          &lt;img src=\"@String.Format(\"data:image/png;base64,{0}\", Convert.ToBase64String(k.Value))\" /&gt;\n         &lt;span&gt;@k.Key&lt;/span&gt;\n        &lt;/td&gt;\n      &lt;/tr&gt;\n    }\n  &lt;/tbody&gt;\n&lt;/table&gt;</code></pre><h4 id=\"testing-the-code-1\"><strong>Testing the Code</strong></h4><p>Run your application and go to the URL \u2014 \u2018<code>http://localhost:50755/QRCoder/ViewFile</code>\u2019 to invoke the ViewFile Action method. You will see all the .qrr files saved in your website.</p><p>See the below image which illustrates it working:</p><figure><img alt=\"S3jNmNaLIW0QuUy5qo9GV36lgPia8-qEgB2s\" height=\"530\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/S3jNmNaLIW0QuUy5qo9GV36lgPia8-qEgB2s\" width=\"800\"/><figcaption><strong>View all QRR files</strong></figcaption></figure><p><a href=\"https://github.com/yogyogi/QRCoder-implemented-in-ASP.NET-Core\" rel=\"noopener\"><strong>You can download the full code from my GitHub Respositiory</strong></a><strong>.</strong></p><h3 id=\"conclusion\"><strong>Conclusion</strong></h3><p>I hope you love this repository which will help you to use QRCoder in your ASP.NET Core Project. Make sure you like this repository to show your love to it.</p><p>If you need any help in ASP.NET Core then let me know in the below comments section.</p><figure><img alt=\"hHGcaGHoUc9cjgZiK5W7uBls4YgSY5wPewfR\" height=\"374\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/hHGcaGHoUc9cjgZiK5W7uBls4YgSY5wPewfR\" width=\"300\"/></figure><p><em>I publish 2 web development articles per week. Consider following me and get email notification whenever I publish a new tutorial on Medium. If this post was helpful, please click the clap button for a few times to show your support! It will bring a smile on my face and motivate me to write more for the readers like you.</em></p><p>I have also published another tutorial on freeCodeCamp, if you would like to see it too \u2014 <a href=\"https://medium.freecodecamp.org/how-to-create-a-login-feature-with-bootstrap-modal-and-jquery-ajax-53dc0d281609\" rel=\"noopener\">How to create a login feature with Bootstrap Modal and jQuery AJAX</a></p><p>Thanks and Happy Coding!</p>\n</section>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nby YogiQRCoder is a very popular QR Code implementation library written in C#. It is available in GitHub. Here I am going to implement the QRCoder library to generate QR Codes in my ASP.NET Core application. I will also be using C#.I will implement QRCoder in 3 ways, which are:1. Create QR Code Bitmap image for any text.2. Create QR Code File (.qrr) for any text and then save these files in the application.3. Read and display all the QR Code Files (.qrr).Let\u2019s start with the Installation of QRCoder in ASP.NET Core Framework.You can download the full code from my GitHub Respositiory.InstallationInstall QRCoder via NuGet Package Manager. If you want to use NuGet, just search for \u201cQRCoder\u201d or run the following command in the NuGet Package Manager console:PM> Install-Package QRCoderThe QRCoder will install in 1 minute and will be ready to use.Now let us start with the implementation of QRCoder in the 3 ways mentioned above.Create QR Code Bitmap image for any textCreate a new Controller called \u2018QRCoderController\u2019 inside the Controllers folder. The controller will be created and it will have just one Action Method called \u2018Index\u2019 in it:public IActionResult Index()\n{\n    return View();\n}Import the following namespaces in the controller:using System;\nusing System.Collections.Generic;\nusing System.Drawing;\nusing System.IO;\nusing Microsoft.AspNetCore.Mvc;\nusing QRCoder;Next, add the Index Action of type [HttpPost] to the controller:[HttpPost]\npublic IActionResult Index(string qrText)\n{\n    QRCodeGenerator qrGenerator = new QRCodeGenerator();\n    QRCodeData qrCodeData = qrGenerator.CreateQrCode(qrText,\n    QRCodeGenerator.ECCLevel.Q);\n    QRCode qrCode = new QRCode(qrCodeData);\n    Bitmap qrCodeImage = qrCode.GetGraphic(20);\n    return View(BitmapToBytes(qrCodeImage));\n}This Index Action receives a string parameter called \u2018qrText\u2019. It contains the text that is provided by an Input control defined in the View. This text will be converted to QR Code Bitmap image. The following code lines do this work:QRCodeGenerator qrGenerator = new QRCodeGenerator();\n\nQRCodeData qrCodeData = qrGenerator.CreateQrCode(qrText, QRCodeGenerator.ECCLevel.Q);\n\nQRCode qrCode = new QRCode(qrCodeData);\nBitmap qrCodeImage = qrCode.GetGraphic(20);The QRCode object (\u2018qrCode\u2019) defined calls a static function called \u2018BitmapToBytes()\u2019. The role of this function is to convert the Bitmap image to \u2018Byte[]\u2019.Add this function to your controller:private static Byte[] BitmapToBytes(Bitmap img)\n{\n    using (MemoryStream stream = new MemoryStream())\n    {\n        img.Save(stream, System.Drawing.Imaging.ImageFormat.Png);\n        return stream.ToArray();\n    }\n}Finally create the Index View inside the \u2018Views/QRCoder\u2019 folder with the following code:@model Byte[]\n@{\n    Layout = null;\n}\n\n<!DOCTYPE html>\n<html>\n\n<head>\n  <meta name=\"viewport\" content=\"width=device-width\" />\n  <title>Implementing QRCoder in ASP.NET Core - Create QR Code</title>\n  <style>\n    body {\n      background: #111 no-repeat;\n      background-image: -webkit-gradient(radial, 50% 0, 150, 50% 0, 300, from(#444), to(#111));\n    }\n\n    h1,\n    h2,\n    h3 {\n      text-align: center;\n      color: #FFF;\n      margin: 5px 0;\n    }\n\n    h1 {\n      font-size: 30px;\n    }\n\n    h2 a {\n      font-size: 25px;\n      color: #0184e3;\n      text-decoration: none;\n    }\n\n    h3 {\n      font-size: 23px;\n      border-bottom: solid 3px #CCC;\n      padding-bottom: 10px;\n    }\n\n    h3 a {\n      color: #00e8ff;\n      text-decoration: none;\n    }\n\n    h3 a:hover,\n    h2 a:hover {\n      text-decoration: underline;\n    }\n\n    .container {\n      width: 800px;\n      margin: auto;\n      color: #FFF;\n      font-size: 25px;\n    }\n\n    .container #content {\n      border: dashed 2px #CCC;\n      padding: 10px;\n    }\n\n    #reset {\n      padding: 5px 10px;\n      background: #4CAF50;\n      border: none;\n      color: #FFF;\n      cursor: pointer;\n    }\n\n    #reset:hover {\n      color: #4CAF50;\n      background: #FFF;\n    }\n\n    #viewContent table {\n      width: 100%;\n    }\n\n    #viewContent table tr {\n      height: 80px;\n      background: darkcyan;\n    }\n\n    #viewContent table tr td {\n      width: 50%;\n      padding-left: 5px;\n    }\n  </style>\n</head>\n\n<body>\n  <div class=\"container\">\n    <div id=\"content\">\n      <h1>Implementing QRCoder in ASP.NET Core - Create QR Code</h1>\n      <h2>\n        <a href=\"http://www.yogihosting.com/category/aspnet-core/\">Read the tutorial on YogiHosting \u00bb </a>\n        <button id=\"reset\" onclick=\"location=''\">Reset \u00bb</button>\n      </h2>\n      <div id=\"viewContent\">\n        @using (Html.BeginForm(null, null, FormMethod.Post)) {\n        <table>\n          <tbody>\n            <tr>\n              <td>\n                <label>Enter text for creating QR Code</label\n                </td>\n                <td>\n                  <input type=\"text\" name=\"qrText\" />\n                </td>\n              </tr>\n              <tr>\n                <td colspan=\"2\">\n                  <button>Submit</button>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        }\n      </div>\n      \n      @{\n        if (Model != null)\n        {\n          <h3>QR Code Successfully Generated</h3>\n          <img src=\"@String.Format(\"data:image/png;base64,{0}\", Convert.ToBase64String(Model))\" />\n        }\n      }\n    </div>\n  </div>\n</body>\n</html>The Index View has an \u2018input\u2019 control. The user enters their text into this control to create the QR Code:<input type=\"text\" name=\"qrText\" />Once the QR Code is generated by the Index Action method, its \u2018byte\u2019 array is returned to the View as model and then the bitmap image is displayed by the below code:@{\n  if (Model != null)\n  {\n    <h3>QR Code Successfully Generated</h3>\n    <img src=\"@String.Format(\"data:image/png;base64,{0}\", Convert.ToBase64String(Model))\" />\n  }\n}Testing the CodeRun your application and go to the URL \u2014 \u2018http://localhost:50755/QRCoder\u2019 to invoke the Index Action method.In the text box, add your text and click the submit button to create the QR Code Bitmap image.See this image which illustrates it working:create QRCode Bitmap ImageCreate QR Code File (.qrr) for any text and then save these files in the applicationYou can also generate QR Code files for a text and save it in your website. These files have .qrr extension.To your controller add the following Action methods called \u2018GenerateFile\u2019:public IActionResult GenerateFile()\n{\n  return View();\n}\n\n[HttpPost]\npublic IActionResult GenerateFile(string qrText)\n{\n  QRCodeGenerator qrGenerator = new QRCodeGenerator();\n  QRCodeData qrCodeData = qrGenerator.CreateQrCode(qrText,   QRCodeGenerator.ECCLevel.Q);\n  \n  string fileGuid = Guid.NewGuid().ToString().Substring(0, 4);\n  \n  qrCodeData.SaveRawData(\"wwwroot/qrr/file-\" + fileGuid + \".qrr\", QRCodeData.Compression.Uncompressed);\n  \n  QRCodeData qrCodeData1 = new QRCodeData(\"wwwroot/qrr/file-\" + fileGuid + \".qrr\", QRCodeData.Compression.Uncompressed);\n  \n  QRCode qrCode = new QRCode(qrCodeData1);\n  Bitmap qrCodeImage = qrCode.GetGraphic(20);\n  return View(BitmapToBytes(qrCodeImage));\n}The [HttpPost] version of this action method generates the QR Code files inside the \u2018wwwroot/qrr\u2019 folder. The code that does this work is the following:QRCodeGenerator qrGenerator = new QRCodeGenerator();\n\nQRCodeData qrCodeData = qrGenerator.CreateQrCode(qrText, QRCodeGenerator.ECCLevel.Q);\n\nstring fileGuid = Guid.NewGuid().ToString().Substring(0, 4);\n\nqrCodeData.SaveRawData(\"wwwroot/qrr/file-\" + fileGuid + \".qrr\", QRCodeData.Compression.Uncompressed);Once the .qrr file is created then I am simply reading it for its saved location in the website. Then I am converting it to Bitmap type and finally sending the image\u2019s bytes to the view. The corresponding code is:QRCodeData qrCodeData1 = new QRCodeData(\"wwwroot/qrr/file-\" + fileGuid + \".qrr\", QRCodeData.Compression.Uncompressed);\n\nQRCode qrCode = new QRCode(qrCodeData1);\nBitmap qrCodeImage = qrCode.GetGraphic(20);\n\nreturn View(BitmapToBytes(qrCodeImage));Next, add the GenerateFile view inside the \u2018Views/QRCoder\u2019 folder and add the following code to it:@model Byte[]\n@{\n    Layout = null;\n}\n\n<!DOCTYPE html>\n<html>\n\n<head>\n  <meta name=\"viewport\" content=\"width=device-width\" />\n  <title>Implementing QRCoder in ASP.NET Core - Create QR Code File</title>\n  <style>\n    body {\n      background: #111 no-repeat;\n      background-image: -webkit-gradient(radial, 50% 0, 150, 50% 0, 300, from(#444), to(#111));\n    }\n\n    h1,\n    h2,\n    h3 {\n      text-align: center;\n      color: #FFF;\n      margin: 5px 0;\n    }\n\n    h1 {\n      font-size: 30px;\n    }\n\n    h2 a {\n      font-size: 25px;\n      color: #0184e3;\n      text-decoration: none;\n    }\n\n    h3 {\n      font-size: 23px;\n      border-bottom: solid 3px #CCC;\n      padding-bottom: 10px;\n    }\n\n    h3 a {\n      color: #00e8ff;\n      text-decoration: none;\n    }\n\n    h3 a:hover,\n    h2 a:hover {\n      text-decoration: underline;\n    }\n\n    .container {\n      width: 800px;\n      margin: auto;\n      color: #FFF;\n      font-size: 25px;\n    }\n\n    .container #content {\n      border: dashed 2px #CCC;\n      padding: 10px;\n    }\n\n    #reset {\n      padding: 5px 10px;\n      background: #4CAF50;\n      border: none;\n      color: #FFF;\n      cursor: pointer;\n    }\n\n    #reset:hover {\n      color: #4CAF50;\n      background: #FFF;\n    }\n\n    #viewContent table {\n      width: 100%;\n    }\n\n    #viewContent table tr {\n      height: 80px;\n      background: darkcyan;\n    }\n\n    #viewContent table tr td {\n      width: 50%;\n      padding-left: 5px;\n    }\n  </style>\n</head>\n\n<body>\n  <div class=\"container\">\n    <div id=\"content\">\n      <h1>Implementing QRCoder in ASP.NET Core - Create QR Code File</h1>\n      <h2>\n        <a href=\"http://www.yogihosting.com/category/aspnet-core/\">Read the tutorial on YogiHosting \u00bb </a>\n        <button id=\"reset\" onclick=\"location=''\">Reset \u00bb</button>\n      </h2>\n      <div id=\"viewContent\">\n        @using (Html.BeginForm(null, null, FormMethod.Post)) {\n        <table>\n          <tbody>\n            <tr>\n              <td>\n                <label>Enter text for creating QR File</label>\n              </td>\n              <td>\n                <input type=\"text\" name=\"qrText\" />\n              </td>\n            </tr>\n            <tr>\n              <td colspan=\"2\">\n                <button>Submit</button>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n        }\n      </div>\n      @{ if (Model != null) {\n      <h3>QR Code file Successfully Generated</h3>\n      <img src=\"@String.Format(\" data:image/png;base64,{0} \", Convert.ToBase64String(Model))\" /> } }\n    </div>\n  </div>\n</body>\n\n</html>The code of this View is exactly similar to the \u2018Index\u2019 View and works exactly like it.The URL to invoke this View is \u2018http://localhost:50755/QRCoder/GenerateFile\u2019.Read and display all the QR Code Files (.qrr)You can also read all the .qrr files saved in the website. Go to your controller and add a new action called \u2018ViewFile\u2019:public IActionResult ViewFile()\n{\n  List<KeyValuePair<string, Byte[]>> fileData=new List<KeyValuePair<string, byte[]>>();\n  \n  KeyValuePair<string, Byte[]> data;\n  string[] files = Directory.GetFiles(\"wwwroot/qrr\");\n  foreach (string file in files)\n  {\n    QRCodeData qrCodeData = new QRCodeData(file, QRCodeData.Compression.Uncompressed);\n    \n    QRCode qrCode = new QRCode(qrCodeData);\n    Bitmap qrCodeImage = qrCode.GetGraphic(20);\n    \n    Byte[] byteData = BitmapToBytes(qrCodeImage);\n    data = new KeyValuePair<string, Byte[]>(Path.GetFileName(file), byteData);\n    fileData.Add(data);\n  }\n  return View(fileData);\n}In this action method, I read the filed located in the \u2018qrr\u2019 folder using the code:Directory.GetFiles(\"wwwroot/qrr\")Then I add each qrr file\u2019s bytes and name inside a List<KeyValuePair<string, Byte[]>> object.This object is returned to the View at the end:return View(fileData);Finally create the \u2018ViewFile\u2019 View inside the \u2018Views/QRCoder\u2019 folder with the following code:@model List\n<KeyValuePair<string, Byte[]>>\n@{\n    Layout = null;\n}\n\n  <!DOCTYPE html>\n  <html>\n\n  <head>\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Implementing QRCoder in ASP.NET Core - View QR Code Files</title>\n    <style>\n      body {\n        background: #111 no-repeat;\n        background-image: -webkit-gradient(radial, 50% 0, 150, 50% 0, 300, from(#444), to(#111));\n      }\n\n      h1,\n      h2,\n      h3 {\n        text-align: center;\n        color: #FFF;\n        margin: 5px 0;\n      }\n\n      h1 {\n        font-size: 30px;\n      }\n\n      h2 a {\n        font-size: 25px;\n        color: #0184e3;\n        text-decoration: none;\n      }\n\n      h3 {\n        font-size: 23px;\n        border-bottom: solid 3px #CCC;\n        padding-bottom: 10px;\n      }\n\n      h3 a {\n        color: #00e8ff;\n        text-decoration: none;\n      }\n\n      h3 a:hover,\n      h2 a:hover {\n        text-decoration: underline;\n      }\n\n      .container {\n        width: 800px;\n        margin: auto;\n        color: #FFF;\n        font-size: 25px;\n      }\n\n      .container #content {\n        border: dashed 2px #CCC;\n        padding: 10px;\n      }\n\n      #reset {\n        padding: 5px 10px;\n        background: #4CAF50;\n        border: none;\n        color: #FFF;\n        cursor: pointer;\n      }\n\n      #reset:hover {\n        color: #4CAF50;\n        background: #FFF;\n      }\n\n      #viewContent table {\n        width: 100%;\n      }\n\n      #viewContent table tr {\n        height: 80px;\n        background: darkcyan;\n      }\n\n      #viewContent table tr td {\n        width: 50%;\n        padding-left: 5px;\n      }\n\n      #viewContent table tr td img {\n        width: 150px;\n      }\n\n      #viewContent table tr td span {\n        display: block;\n      }\n    </style>\n  </head>\n\n  <body>\n    <div class=\"container\">\n      <div id=\"content\">\n        <h1>Implementing QRCoder in ASP.NET Core - View QR Code Files</h1>\n        <h2>\n          <a href=\"http://www.yogihosting.com/category/aspnet-core/\">Read the tutorial on YogiHosting \u00bb </a>\n          <button id=\"reset\" onclick=\"location=''\">Reset \u00bb</button>\n        </h2>\n        <div id=\"viewContent\">\n          <table>\n            <tbody>\n              @foreach (KeyValuePair\n              <string, Byte[]> k in Model) {\n                <tr>\n                  <td>\n                    <img src=\"@String.Format(\" data:image/png;base64,{0} \", Convert.ToBase64String(k.Value))\" />\n                    <span>@k.Key</span>\n                  </td>\n                </tr>\n                }\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  </body>\n\n  </html>This View displays all the qrr files as bitmap images inside a \u2018HTML\u2019 table. The below code creates the HTML table:<table>\n  <tbody>\n    @foreach (KeyValuePair<string, Byte[]> k in Model)\n    {\n      <tr>\n        <td>\n          <img src=\"@String.Format(\"data:image/png;base64,{0}\", Convert.ToBase64String(k.Value))\" />\n         <span>@k.Key</span>\n        </td>\n      </tr>\n    }\n  </tbody>\n</table>Testing the CodeRun your application and go to the URL \u2014 \u2018http://localhost:50755/QRCoder/ViewFile\u2019 to invoke the ViewFile Action method. You will see all the .qrr files saved in your website.See the below image which illustrates it working:View all QRR filesYou can download the full code from my GitHub Respositiory.ConclusionI hope you love this repository which will help you to use QRCoder in your ASP.NET Core Project. Make sure you like this repository to show your love to it.If you need any help in ASP.NET Core then let me know in the below comments section.I publish 2 web development articles per week. Consider following me and get email notification whenever I publish a new tutorial on Medium. If this post was helpful, please click the clap button for a few times to show your support! It will bring a smile on my face and motivate me to write more for the readers like you.I have also published another tutorial on freeCodeCamp, if you would like to see it too \u2014 How to create a login feature with Bootstrap Modal and jQuery AJAXThanks and Happy Coding!\n\n                        \n                    \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 16674, "excerpt": "by Yogi\n\nHow to easily implement QRCoder in ASP.NET Core using C#\nQRCoder ASP.NET Core ImplementationQRCoder is a very popular QR Code\nimplementation library written in C#. It is available in GitHub\n[https://github.com/codebude/QRCoder]. Here I am going to implement the QRCoder\nlibrary to generate QR Codes in my ASP.NET Core application. I will also be\nusing C#.\n\nI will implement QRCoder in 3 ways, which are:\n\n1. Create QR Code Bitmap image for any text.\n\n2. Create QR Code File (.qrr) for any te", "siteName": "freeCodeCamp.org", "publishedTime": "2019-05-23T15:58:13.000Z", "id": "8d602f08e95fdadae8aa47d4dccbfc3f022d9f24", "url": "https://www.freecodecamp.org/news/how-to-easily-implement-qrcoder-in-asp-net-core-using-c-10c4aa857e84/", "domain": "freecodecamp.org", "date": "2023-12-27T18:09:19.068156", "resultUri": "http://localhost:3000/result/8d602f08e95fdadae8aa47d4dccbfc3f022d9f24", "query": {"url": ["https://www.freecodecamp.org/news/how-to-easily-implement-qrcoder-in-asp-net-core-using-c-10c4aa857e84/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "How to easily implement QRCoder in ASP.NET Core using C#", "description": "by Yogi How to easily implement QRCoder in ASP.NET Core using C# QRCoder ASP.NET Core ImplementationQRCoder is a very popular QR Code implementation library written in C#. It is available in GitHub [https://github.com/codebude/QRCoder]. Here I am going to implement the QRCoder library to generate QR Codes in my ASP.NET Core", "url": "https://www.freecodecamp.org/news/how-to-easily-implement-qrcoder-in-asp-net-core-using-c-10c4aa857e84/", "image": "https://cdn-media-1.freecodecamp.org/images/1*qL5RAfsdeIw875myQ3f9Ag.png", "image:width": "650", "image:height": "412"}, "twitter": {"card": "summary_large_image", "title": "How to easily implement QRCoder in ASP.NET Core using C#", "description": "by Yogi How to easily implement QRCoder in ASP.NET Core using C# QRCoder ASP.NET Core ImplementationQRCoder is a very popular QR Code implementation library written in C#. It is available in GitHub [https://github.com/codebude/QRCoder]. Here I am going to implement the QRCoder library to generate QR Codes in my ASP.NET Core", "url": "https://www.freecodecamp.org/news/how-to-easily-implement-qrcoder-in-asp-net-core-using-c-10c4aa857e84/", "image": "https://cdn-media-1.freecodecamp.org/images/1*qL5RAfsdeIw875myQ3f9Ag.png", "label1": "Written by", "data1": "freeCodeCamp.org", "label2": "Filed under", "data2": "Aspnetcore, Csharp, Web Development, Programming, Tech", "site": "@freecodecamp"}}}