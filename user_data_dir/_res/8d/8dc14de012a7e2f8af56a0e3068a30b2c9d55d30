{"title": "How to Get Unstuck When You Hit a Programming Wall", "byline": "Amy Haddad", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>How to Get Unstuck When You Hit a Programming Wall</h1>\n<section>\n<section data-test-label=\"post-content\">\n<p>Getting stuck is part of being a programmer, no matter the level. The so-called \u201ceasy\u201d problem is actually pretty hard. You\u2019re not exactly sure how to move forward. What you thought would work doesn\u2019t.</p><p>The other part of being a programmer is getting yourself unstuck. </p><p>I\u2019ve been getting stuck a lot recently, so finding ways to get <em>unstuck</em> has been ever-present on my mind. Here are a few tactics I\u2019ve been using. Maybe they can help you, too.</p><h2 id=\"make-the-problem-concrete\">Make the problem concrete </h2><p>Create a diagram, make a quick sketch, or use actual objects to give yourself a visual. It\u2019ll make the problem a lot easier to think about.</p><p>One problem I faced asked me to find the absolute difference between the sums of a square matrix\u2019s diagonals. That\u2019s a mouthful and a lot to keep in my head. So I drew it out: I created a square matrix of numbers and circled the diagonals. \u00a0</p><figure><img alt=\"2020-01-15-12.58.06\" height=\"1500\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2020/01/2020-01-15-12.58.06.jpeg\" width=\"2000\"/></figure><p>A simple sketch literally made the steps jump out at me: sum one diagonal (which is 15), then the other (which is 17), and then find the absolute difference between them (which is 2).</p><p>This approach applies to other problems, too. When I was learning about for loops, I iterated through a pile of almonds. When I\u2019m working on a recursive problem, I\u2019ll make a diagram to see what\u2019s happening on the call stack until I hit my base case. </p><p>The commonality is this: make the abstract concrete.</p><h2 id=\"write-out-exactly-what-you-re-trying-to-do\">Write out exactly what you\u2019re trying to do</h2><p>Write down the specific step you\u2019re working on when you feel the all-too-familiar \u201cspinning your wheels\u201d cycle come upon you. \u00a0</p><p>The five or ten seconds it takes to jot down a few words on a piece of paper will help you solidify your thought process and redirect your attention.</p><p>Here are some examples:</p><ul><li>Store the course names as keys in the object</li><li>Pass the argument to the callback function</li><li>Reset the \u201cmaxValue\u201d variable to 0</li></ul><p>Resetting the \u201cmaxValue\u201d variable, for example, didn\u2019t solve the problem. But it was an important step in the process. Writing this short phrase got me back on track: it was a reminder of what I\u2019d set out to do. It also ensured I was focused on one thing, not many.</p><p>So the next time you find yourself trying the same approach over and over again and getting the same result, stop yourself and ask: \u201cWhat exactly am I trying to do here?\u201d </p><p>Then, write\u2014yes, write\u2014your answer down on a piece of paper.</p><p>It\u2019s not enough to think of your response. If I casually \u201cthink\u201d to myself, I\u2019ll rush the process and not much (if anything) is gained. I\u2019ve got to write it down. </p><h2 id=\"simplify-your-given-input\">Simplify your given input</h2><p>It\u2019s far less intimidating to work with a few things than many. That's why it's helpful to simplify your given input.</p><p>One problem gave me a list of three dictionaries. It was <em>only </em>three dictionaries, but that was still two too many. </p><!--kg-card-begin: markdown--><pre><code>names = [\n    {'first':'John', 'last':'Smith', 'email':'johns@example.com'},\n    {'first':'Mary', 'last':'McDonald', 'email':'marym@example.com'},\n    {'first':'Sam', 'last':'Davey', 'email':'samd@example.com'}\n]\n</code></pre>\n<!--kg-card-end: markdown--><p>My job was to sort each dictionary by last name, then by first name (ie, Davey, Sam: samd@example.com).<strong> </strong>However,<strong> </strong>the problem was easier to think about when I made the list of three dictionaries a list of one. \u00a0</p><!--kg-card-begin: markdown--><pre><code>name = [\n    {'first':'John', 'last':'Smith', 'email':'johns@example.com'}\n]\n</code></pre>\n<!--kg-card-end: markdown--><p>I solved the problem using a single dictionary. Then, I applied the same logic to the larger problem at hand. </p><p>When you simplify your given input, you make the problem much more manageable.</p><h2 id=\"solve-a-smaller-problem\">Solve a smaller problem</h2><p>Spot patterns more easily and understand what you're <em>really</em> asked to do when you solve a smaller version of the problem.</p><p>Here\u2019s an example problem from Reuven Lerner\u2019s book, <em>Python Workout</em>:</p><p>\u201cUse a list comprehension to reverse the word order of lines in a text file. That is, if the first line is abc def and the second line is ghi jkl, then you should return the list ['def abc', 'jkl ghi'].\u201d</p><p>When solving a smaller version of a problem, I find it helpful to remove layers of complexity and use my ideal data structure. In this example, that meant ignoring the text file and list comprehension (layers of complexity) and using a list (my ideal data structure).</p><p>Then I solved the problem. I opened up my editor and typed out my ideal data structure.</p><!--kg-card-begin: markdown--><pre><code>letters = ['abc def', 'ghi jkl']\n</code></pre>\n<!--kg-card-end: markdown--><p>I reversed the order and got the expected result using a for loop.</p><!--kg-card-begin: markdown--><pre><code>reversed_letters = []\nfor letter in letters:\n   letter_list = letter.split(\" \")\n   letter_list.reverse()\n   reversed_letters.append(\" \".join(letter_list))\n</code></pre>\n<!--kg-card-end: markdown--><p>Once I got that working, I added the layers of complexity back in one at a time until I solved the problem as the problem statement asked.</p><p>Solving a smaller version of the problem helps get you to the heart of what you need to do. It's also another way to make the complex simple.</p><h2 id=\"take-a-break\">Take a break </h2><p>Your brain doesn\u2019t stop thinking just because your fingers stop typing. </p><p>Has an idea ever \u201cpopped\u201d into your head while you were doing something other than programming? Have you ever returned to a problem after a workout and the solution is staring you in the face? It\u2019s happened to me.</p><p>It\u2019s no coincidence that you arrived at your idea or solution when you were doing something else\u2014when you weren\u2019t deliberately working. \u201cEpiphanies may seem to come out of nowhere,\u201d explains <a href=\"https://www.scientificamerican.com/article/mental-downtime/\">Scientific American</a>, \u201cbut they are often the product of unconscious mental activity during downtime.\u201d </p><p>If you feel like you\u2019re running up against a brick wall, you very well could be. It may be best to take a break. Give your mind some time to digest what you\u2019re working on and return to the problem renewed.</p><h2 id=\"pair-with-another-programmer\">Pair with another programmer</h2><p>Working with someone else can be a great way to generate ideas and see a problem from another perspective. But I highly recommend you do everything in your power to get yourself unstuck first.</p><p>There will always be roadblocks. Learning how to troubleshoot your own problems is a critical skill to learn. It\u2019s easy to say \u201cI don\u2019t get it. Let me ask this senior engineer.\u201d Then, have the senior engineer solve the problem for you. It\u2019s harder to figure it out yourself, but you need to at least try.</p><p>If you\u2019ve sincerely put your best foot forward, then reach out to a programmer with a specific question. This shows respect for the other programmer\u2019s time and it\u2019ll make your pairing session more effective. </p><p>Then, ask for a hint\u2014don\u2019t have the programmer solve the problem for you. You\u2019ll undoubtedly encounter a similar situation down the road, so use the pairing session as a learning opportunity. It\u2019ll help you in the long run.</p><h2 id=\"wrapping-up\">Wrapping up</h2><p>Getting stuck is frustrating, to be sure. You may try just one of the above tactics and have a \u201clight bulb\u201d moment, or you may need to try a combination and find yourself simply inching along during the process. </p><p>But there are two things I\u2019ve learned from embracing the struggle: I\u2019m learning a lot and the breakthrough is coming. Keep at it.</p><p><em><em>I write about learning to program, and the best ways to go about it</em> (</em><a href=\"https://amymhaddad.com/\" rel=\"noopener nofollow\">amymhaddad.com</a>).</p>\n</section>\n<hr/>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nGetting stuck is part of being a programmer, no matter the level. The so-called \u201ceasy\u201d problem is actually pretty hard. You\u2019re not exactly sure how to move forward. What you thought would work doesn\u2019t.The other part of being a programmer is getting yourself unstuck. I\u2019ve been getting stuck a lot recently, so finding ways to get unstuck has been ever-present on my mind. Here are a few tactics I\u2019ve been using. Maybe they can help you, too.Make the problem concrete Create a diagram, make a quick sketch, or use actual objects to give yourself a visual. It\u2019ll make the problem a lot easier to think about.One problem I faced asked me to find the absolute difference between the sums of a square matrix\u2019s diagonals. That\u2019s a mouthful and a lot to keep in my head. So I drew it out: I created a square matrix of numbers and circled the diagonals. \u00a0A simple sketch literally made the steps jump out at me: sum one diagonal (which is 15), then the other (which is 17), and then find the absolute difference between them (which is 2).This approach applies to other problems, too. When I was learning about for loops, I iterated through a pile of almonds. When I\u2019m working on a recursive problem, I\u2019ll make a diagram to see what\u2019s happening on the call stack until I hit my base case. The commonality is this: make the abstract concrete.Write out exactly what you\u2019re trying to doWrite down the specific step you\u2019re working on when you feel the all-too-familiar \u201cspinning your wheels\u201d cycle come upon you. \u00a0The five or ten seconds it takes to jot down a few words on a piece of paper will help you solidify your thought process and redirect your attention.Here are some examples:Store the course names as keys in the objectPass the argument to the callback functionReset the \u201cmaxValue\u201d variable to 0Resetting the \u201cmaxValue\u201d variable, for example, didn\u2019t solve the problem. But it was an important step in the process. Writing this short phrase got me back on track: it was a reminder of what I\u2019d set out to do. It also ensured I was focused on one thing, not many.So the next time you find yourself trying the same approach over and over again and getting the same result, stop yourself and ask: \u201cWhat exactly am I trying to do here?\u201d Then, write\u2014yes, write\u2014your answer down on a piece of paper.It\u2019s not enough to think of your response. If I casually \u201cthink\u201d to myself, I\u2019ll rush the process and not much (if anything) is gained. I\u2019ve got to write it down. Simplify your given inputIt\u2019s far less intimidating to work with a few things than many. That's why it's helpful to simplify your given input.One problem gave me a list of three dictionaries. It was only three dictionaries, but that was still two too many. names = [\n    {'first':'John', 'last':'Smith', 'email':'johns@example.com'},\n    {'first':'Mary', 'last':'McDonald', 'email':'marym@example.com'},\n    {'first':'Sam', 'last':'Davey', 'email':'samd@example.com'}\n]\n\nMy job was to sort each dictionary by last name, then by first name (ie, Davey, Sam: samd@example.com). However, the problem was easier to think about when I made the list of three dictionaries a list of one. \u00a0name = [\n    {'first':'John', 'last':'Smith', 'email':'johns@example.com'}\n]\n\nI solved the problem using a single dictionary. Then, I applied the same logic to the larger problem at hand. When you simplify your given input, you make the problem much more manageable.Solve a smaller problemSpot patterns more easily and understand what you're really asked to do when you solve a smaller version of the problem.Here\u2019s an example problem from Reuven Lerner\u2019s book, Python Workout:\u201cUse a list comprehension to reverse the word order of lines in a text file. That is, if the first line is abc def and the second line is ghi jkl, then you should return the list ['def abc', 'jkl ghi'].\u201dWhen solving a smaller version of a problem, I find it helpful to remove layers of complexity and use my ideal data structure. In this example, that meant ignoring the text file and list comprehension (layers of complexity) and using a list (my ideal data structure).Then I solved the problem. I opened up my editor and typed out my ideal data structure.letters = ['abc def', 'ghi jkl']\n\nI reversed the order and got the expected result using a for loop.reversed_letters = []\nfor letter in letters:\n   letter_list = letter.split(\" \")\n   letter_list.reverse()\n   reversed_letters.append(\" \".join(letter_list))\n\nOnce I got that working, I added the layers of complexity back in one at a time until I solved the problem as the problem statement asked.Solving a smaller version of the problem helps get you to the heart of what you need to do. It's also another way to make the complex simple.Take a break Your brain doesn\u2019t stop thinking just because your fingers stop typing. Has an idea ever \u201cpopped\u201d into your head while you were doing something other than programming? Have you ever returned to a problem after a workout and the solution is staring you in the face? It\u2019s happened to me.It\u2019s no coincidence that you arrived at your idea or solution when you were doing something else\u2014when you weren\u2019t deliberately working. \u201cEpiphanies may seem to come out of nowhere,\u201d explains Scientific American, \u201cbut they are often the product of unconscious mental activity during downtime.\u201d If you feel like you\u2019re running up against a brick wall, you very well could be. It may be best to take a break. Give your mind some time to digest what you\u2019re working on and return to the problem renewed.Pair with another programmerWorking with someone else can be a great way to generate ideas and see a problem from another perspective. But I highly recommend you do everything in your power to get yourself unstuck first.There will always be roadblocks. Learning how to troubleshoot your own problems is a critical skill to learn. It\u2019s easy to say \u201cI don\u2019t get it. Let me ask this senior engineer.\u201d Then, have the senior engineer solve the problem for you. It\u2019s harder to figure it out yourself, but you need to at least try.If you\u2019ve sincerely put your best foot forward, then reach out to a programmer with a specific question. This shows respect for the other programmer\u2019s time and it\u2019ll make your pairing session more effective. Then, ask for a hint\u2014don\u2019t have the programmer solve the problem for you. You\u2019ll undoubtedly encounter a similar situation down the road, so use the pairing session as a learning opportunity. It\u2019ll help you in the long run.Wrapping upGetting stuck is frustrating, to be sure. You may try just one of the above tactics and have a \u201clight bulb\u201d moment, or you may need to try a combination and find yourself simply inching along during the process. But there are two things I\u2019ve learned from embracing the struggle: I\u2019m learning a lot and the breakthrough is coming. Keep at it.I write about learning to program, and the best ways to go about it (amymhaddad.com).\n\n                        \n                    \n                    \n                        \n                        \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 7578, "excerpt": "Getting stuck is part of being a programmer, no matter the level. The so-called\n\u201ceasy\u201d problem is actually pretty hard. You\u2019re not exactly sure how to move\nforward. What you thought would work doesn\u2019t.\n\nThe other part of being a programmer is getting yourself unstuck. \n\nI\u2019ve been getting stuck a lot recently, so finding ways to get unstuck has been\never-present on my mind. Here are a few tactics I\u2019ve been using. Maybe they can\nhelp you, too.\n\nMake the problem concrete \nCreate a diagram, make a q", "siteName": "freeCodeCamp.org", "publishedTime": "2020-01-14T15:00:00.000Z", "id": "8dc14de012a7e2f8af56a0e3068a30b2c9d55d30", "url": "https://www.freecodecamp.org/news/how-to-get-unstuck/", "domain": "freecodecamp.org", "date": "2023-12-27T18:07:26.941477", "resultUri": "http://localhost:3000/result/8dc14de012a7e2f8af56a0e3068a30b2c9d55d30", "query": {"url": ["https://www.freecodecamp.org/news/how-to-get-unstuck/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "How to Get Unstuck When You Hit a Programming Wall", "description": "Getting stuck is part of being a programmer, no matter the level. The so-called \u201ceasy\u201d problem is actually pretty hard. You\u2019re not exactly sure how to move forward. What you thought would work doesn\u2019t. The other part of being a programmer is getting yourself unstuck.  I\u2019ve been getting stuck", "url": "https://www.freecodecamp.org/news/how-to-get-unstuck/", "image": "https://www.freecodecamp.org/news/content/images/2020/01/get_unstuck-1.jpg", "image:width": "2000", "image:height": "1500"}, "twitter": {"card": "summary_large_image", "title": "How to Get Unstuck When You Hit a Programming Wall", "description": "Getting stuck is part of being a programmer, no matter the level. The so-called \u201ceasy\u201d problem is actually pretty hard. You\u2019re not exactly sure how to move forward. What you thought would work doesn\u2019t. The other part of being a programmer is getting yourself unstuck.  I\u2019ve been getting stuck", "url": "https://www.freecodecamp.org/news/how-to-get-unstuck/", "image": "https://www.freecodecamp.org/news/content/images/2020/01/get_unstuck-1.jpg", "label1": "Written by", "data1": "Amy Haddad", "label2": "Filed under", "data2": "Problem Solving, Productivity, Programming", "site": "@freecodecamp", "creator": "@amymhaddad"}}}