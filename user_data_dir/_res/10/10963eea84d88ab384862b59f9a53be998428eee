{"title": "What I Learned from Reading \"The Pragmatic Programmer\"", "byline": "Pramono Winata", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>What I Learned from Reading \"The Pragmatic Programmer\"</h1>\n<section>\n<section data-test-label=\"post-content\">\n<p><em>In short: old but gold.</em></p><p>Published in 1999, The Pragmatic Programmer is a book about how to become a Pragmatic Programmer. Which really means a \u2018Good Programmer\u2019. </p><p>Yes, it was published about 20 years ago. But this book still provides many insights that are very relevant to programmers or software engineers, as some people might call them these days.</p><p>You might have heard about this book before and questioned what actually it's actually about. Well, today I will share with you some of the interesting things I learned while reading the book.</p><h2 id=\"there-is-more-to-being-a-programmer-than-technical-skills\">There is more to being a programmer than technical skills</h2><figure><img alt=\"image-190\" height=\"1333\" loading=\"lazy\" sizes=\"(min-width: 720px) 720px\" src=\"https://www.freecodecamp.org/news/content/images/2021/04/image-190.png\" srcset=\"https://www.freecodecamp.org/news/content/images/size/w600/2021/04/image-190.png 600w, https://www.freecodecamp.org/news/content/images/size/w1000/2021/04/image-190.png 1000w, https://www.freecodecamp.org/news/content/images/size/w1600/2021/04/image-190.png 1600w, https://www.freecodecamp.org/news/content/images/2021/04/image-190.png 2000w\" width=\"2000\"/><figcaption>Photo by <a href=\"https://unsplash.com/@alexkixa?utm_source=ghost&amp;utm_medium=referral&amp;utm_campaign=api-credit\">Alexandre Debi\u00e8ve</a> / <a href=\"https://unsplash.com/?utm_source=ghost&amp;utm_medium=referral&amp;utm_campaign=api-credit\">Unsplash</a></figcaption></figure><p>When reading the book's title, you might expect it to give out a lot of technical lessons. But in fact it does not. What makes this book still relevant 20 years later is that it teaches us that being a programmer is not all about technical strength. And we often overlook this fact.</p><p>The book teaches us that there is more to programming than technical abilities.</p><h2 id=\"the-cat-ate-my-source-code\">The cat ate my source code</h2><figure><img alt=\"image-191\" height=\"1331\" loading=\"lazy\" sizes=\"(min-width: 720px) 720px\" src=\"https://www.freecodecamp.org/news/content/images/2021/04/image-191.png\" srcset=\"https://www.freecodecamp.org/news/content/images/size/w600/2021/04/image-191.png 600w, https://www.freecodecamp.org/news/content/images/size/w1000/2021/04/image-191.png 1000w, https://www.freecodecamp.org/news/content/images/size/w1600/2021/04/image-191.png 1600w, https://www.freecodecamp.org/news/content/images/2021/04/image-191.png 2000w\" width=\"2000\"/><figcaption>Photo by <a href=\"https://unsplash.com/@chen93?utm_source=ghost&amp;utm_medium=referral&amp;utm_campaign=api-credit\">Chen Zhao</a> / <a href=\"https://unsplash.com/?utm_source=ghost&amp;utm_medium=referral&amp;utm_campaign=api-credit\">Unsplash</a></figcaption></figure><p>This is the first chapter in the book and is a very interesting concept.</p><p>Remember that one day when we didn\u2019t finish our homework and we said that the dog ate it? (Actually I don\u2019t remember it, because I always finish my homework ?)</p><p>What that - and this chapter - teaches us is actually responsibility. When you have responsibility for something, you should be prepared to be held accountable for it. </p><p>If you make mistakes and cannot fulfill those responsibilities, you have to make up for it and find a solution. Don\u2019t make up excuses and play the finger pointing game. You can\u2019t just go into work and tell everybody that <strong>a cat just ate your source code</strong>.</p><p><strong>Provide options, don\u2019t make lame excuses.</strong></p><h2 id=\"it-s-all-about-a-broken-window\">It\u2019s all about a broken window</h2><figure><img alt=\"image-192\" height=\"1333\" loading=\"lazy\" sizes=\"(min-width: 720px) 720px\" src=\"https://www.freecodecamp.org/news/content/images/2021/04/image-192.png\" srcset=\"https://www.freecodecamp.org/news/content/images/size/w600/2021/04/image-192.png 600w, https://www.freecodecamp.org/news/content/images/size/w1000/2021/04/image-192.png 1000w, https://www.freecodecamp.org/news/content/images/size/w1600/2021/04/image-192.png 1600w, https://www.freecodecamp.org/news/content/images/2021/04/image-192.png 2000w\" width=\"2000\"/><figcaption>Photo by <a href=\"https://unsplash.com/@pawel_czerwinski?utm_source=ghost&amp;utm_medium=referral&amp;utm_campaign=api-credit\">Pawe\u0142 Czerwi\u0144ski</a> / <a href=\"https://unsplash.com/?utm_source=ghost&amp;utm_medium=referral&amp;utm_campaign=api-credit\">Unsplash</a></figcaption></figure><p>In the book, there is a story about an urban area that became very messy and run-down, all because of one broken window.</p><p>This is much like our code: when we see some dirty code (which we can see like it's a broken window), we might start to think that it\u2019s okay to let the code be dirty. That it\u2019s okay to just go back later, which most of the time we never do. </p><p>Try not to leave \u201cbroken windows\u201d unrepaired. When you find that kind of code, fix it up as soon as possible. When you continue to think that no one has the time to fix that broken code, you might as well go and buy yourself a dumpster just to keep your code.</p><p>What this chapter discusses is actually simple: it\u2019s about <strong>initiative and taking care of your stuff</strong>.</p><h2 id=\"take-the-initiative-be-the-catalyst\">Take the initiative, be the catalyst</h2><figure><img alt=\"image-193\" height=\"1334\" loading=\"lazy\" sizes=\"(min-width: 720px) 720px\" src=\"https://www.freecodecamp.org/news/content/images/2021/04/image-193.png\" srcset=\"https://www.freecodecamp.org/news/content/images/size/w600/2021/04/image-193.png 600w, https://www.freecodecamp.org/news/content/images/size/w1000/2021/04/image-193.png 1000w, https://www.freecodecamp.org/news/content/images/size/w1600/2021/04/image-193.png 1600w, https://www.freecodecamp.org/news/content/images/2021/04/image-193.png 2000w\" width=\"2000\"/><figcaption>Photo by <a href=\"https://unsplash.com/@bradencollum?utm_source=ghost&amp;utm_medium=referral&amp;utm_campaign=api-credit\">Braden Collum</a> / <a href=\"https://unsplash.com/?utm_source=ghost&amp;utm_medium=referral&amp;utm_campaign=api-credit\">Unsplash</a></figcaption></figure><p>There also might be times when you know that either something is all good or something needs to actually get done. It comes to your mind and you just think to yourself that it\u2019s the right thing to do. </p><p>If you just keep thinking, nothing will happen. Or if you just ask for it to be on the project timeline, you might be met with huge feature development requests and technical debt. So it ends up in another year in discussion.</p><p>It\u2019s time to step up your game. Work out what you can, don\u2019t overdo it, but also make it <strong>reasonable</strong>. Once you got your complete idea, show it to people. They might think that \u201cYeah, it might be better if we had that.\u201d </p><p>Show them a glimpse of the future and people will rally around you. <strong>Be a catalyst for change</strong>.</p><h2 id=\"more-so-this-book-also-teaches-us-about-basic-fundamentals-that-we-often-forget-as-programmers-\">More so, this book also teaches us about basic fundamentals that we often forget as programmers.</h2><p>Sometimes, the more we delve deeper and deeper into our work, the more often we forgot about the basic things that we learned a long time ago. </p><p>Busy chasing features and new tech improvements, we often forget that there are actually a lot more things that we need to pay attention to beforehand before going deeper.</p><h3 id=\"clean-code\">Clean code</h3><figure><img alt=\"image-194\" height=\"1250\" loading=\"lazy\" sizes=\"(min-width: 720px) 720px\" src=\"https://www.freecodecamp.org/news/content/images/2021/04/image-194.png\" srcset=\"https://www.freecodecamp.org/news/content/images/size/w600/2021/04/image-194.png 600w, https://www.freecodecamp.org/news/content/images/size/w1000/2021/04/image-194.png 1000w, https://www.freecodecamp.org/news/content/images/size/w1600/2021/04/image-194.png 1600w, https://www.freecodecamp.org/news/content/images/2021/04/image-194.png 2000w\" width=\"2000\"/><figcaption>Photo by <a href=\"https://unsplash.com/@4themorningshoot?utm_source=ghost&amp;utm_medium=referral&amp;utm_campaign=api-credit\">Oliver Hale</a> / <a href=\"https://unsplash.com/?utm_source=ghost&amp;utm_medium=referral&amp;utm_campaign=api-credit\">Unsplash</a></figcaption></figure><p>One of the most basic principles we often forget about is clean code. As features are piling up more and more, the codebase become fatter and technical debt rises. </p><p>But we must always remember to keep our code consistent and clean every time we write it. </p><p>One of the things that is mentioned in the book is the DRY principle (Don\u2019t Repeat Yourself). It is related to code reusability. Duplication is evil and that's the truth. Duplicate code will make maintaining your code very hard, and it can cause confusion when you need to change a feature or fix a bug.</p><p>Remember that time when you needed to fix some of your code? And you realized that there was code that was very similar to the bit you just changed? So then you gotta change that part too, and another too, and then maybe this bit too\u2026you get the picture.</p><h3 id=\"find-the-correct-tools\">Find the correct tools</h3><figure><img alt=\"image-195\" height=\"1125\" loading=\"lazy\" sizes=\"(min-width: 720px) 720px\" src=\"https://www.freecodecamp.org/news/content/images/2021/04/image-195.png\" srcset=\"https://www.freecodecamp.org/news/content/images/size/w600/2021/04/image-195.png 600w, https://www.freecodecamp.org/news/content/images/size/w1000/2021/04/image-195.png 1000w, https://www.freecodecamp.org/news/content/images/size/w1600/2021/04/image-195.png 1600w, https://www.freecodecamp.org/news/content/images/2021/04/image-195.png 2000w\" width=\"2000\"/><figcaption>Photo by <a href=\"https://unsplash.com/@carlevarino?utm_source=ghost&amp;utm_medium=referral&amp;utm_campaign=api-credit\">Cesar Carlevarino Aragon</a> / <a href=\"https://unsplash.com/?utm_source=ghost&amp;utm_medium=referral&amp;utm_campaign=api-credit\">Unsplash</a></figcaption></figure><p>Like a woodcutter, finding the correct and proper tools is very important. Before a woodcutter starts cutting trees. they have to decide - do they need a chainsaw? Or is an axe good enough? Or maybe there is a brand new lightsaber they can use. But using kitchen knife might take some time to cut down a tree.</p><p>It's similar for programmers: this book teaches us that it\u2019s very important for us to find the proper tools before we start working (like a good code editor). We shouldn't jump right to coding. </p><p>For example, it\u2019s actually possible to code using Windows notepad and compile it using the console. But is it the right tool for you? Try to find the best editor that you are most comfortable using. Learning and mastering it and it will increase your productivity by several times.</p><p>There are several editors mentioned in the book, such as Emacs or Vim. But nowadays you can find more modern code editors such as Visual Studio Code. Find one that suites you. It's like your taste in coffee \u2013 some people prefer lattes and others prefer cappuccinos.</p><h3 id=\"don-t-program-by-coincidence\">Don\u2019t program by coincidence</h3><p>This is one very important point noted in the book. In all of our programming journeys, there have likely been times when we were just coding blindly and unexpectedly\u2026 and somehow it just worked.</p><p>You probably weren't sure what you were actually doing, so you kept adding more and more code and it still worked. That is, until one day when there was an issue and you tried to remove some chunk of code and it completely broke everything. And you were not sure which piece caused it.</p><p>Relying on unknowns is very dangerous. When you are not sure what the code is supposed to do, try to simplify it and make sure that the code is reliable in its own right, not just reliable by chance.</p><p>Rely only on things you are sure of. Don\u2019t program by coincidence.</p><h3 id=\"unit-test\">Unit test</h3><p>Testing is a hot topic these days. And yes, it was also an important topic 20 years ago (and it will always be).</p><p>But sometimes people forget about unit tests these days. They might have just finished their code and they assumed everything was okay...until the code ended up broken in production because of edge cases.</p><p>In order to maintain stability and refactor safely, we always need to keep our code protected by writing unit tests. And it\u2019s never enough if your tests only cover the happy path. Perform ruthless testing on your code, and remember that your code is not finished until you've covered every available test. </p><p>Unit testing will help you be confident that your piece of code is truly done.</p><h3 id=\"taking-ownership\">Taking ownership</h3><p>There's one last thing I want to talk about. As we know, programmers like to leave \u2018legacies\u2019 behind, in the form of code. And yes, most of the time it\u2019s bad.</p><p>Being a programmer, we ought to take pride in our own work. We should be proud of the responsibility we've been given and the piece of code we have been working on. </p><p>When we are finally able to take pride in our code and own it, we will be able to leave a good legacy behind. And people will see our code as a signature. When they see our code, they'll know that it will be solid and well-written, by a professional.</p><h2 id=\"finishing-up\">Finishing up</h2><p>There are even more topics covered in this book that I haven\u2019t discussed here, such as Requirements and Teamwork. If you are interested in exploring these topics, you should try to find and read the book!</p><p>Just a note, however: as much as I liked the book, some stuff just didn't seem relate-able, looking at how old the book is (20 years old). It talks about old languages such as Prolog, and speaks about OOP like it\u2019s a really new concept - so these oddities just don't seem right. </p><p>But it can\u2019t be blamed since it's already a couple decades old.</p><p>Aside from that most of the stuff covered in the book is still quite relevant to the current age of Programming, like those topics I covered above.</p><p>If I was trying to sum everything up in this book, I'd say it basically covers <strong>everything I have ever read on the Web about becoming a better engineer</strong>.</p><p>Thanks for reading my article about The Pragmatic Programmer! Hopefully it has given you some insight into your journey as a Programmer or Software Engineer. And grab yourself a copy of the book if you are interested in learning more.</p><p><em>P.S. I wrote this article on my own, without any means of advertising or marketing from a third party. The cover photo was taken from<a href=\"https://www.amazon.com/Pragmatic-Programmer-Journey-Mastery-Anniversary/dp/B07TSG6FGJ\" rel=\"noopener\"> amazon's site</a>.</em></p>\n</section>\n<hr/>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nIn short: old but gold.Published in 1999, The Pragmatic Programmer is a book about how to become a Pragmatic Programmer. Which really means a \u2018Good Programmer\u2019. Yes, it was published about 20 years ago. But this book still provides many insights that are very relevant to programmers or software engineers, as some people might call them these days.You might have heard about this book before and questioned what actually it's actually about. Well, today I will share with you some of the interesting things I learned while reading the book.There is more to being a programmer than technical skillsPhoto by Alexandre Debi\u00e8ve / UnsplashWhen reading the book's title, you might expect it to give out a lot of technical lessons. But in fact it does not. What makes this book still relevant 20 years later is that it teaches us that being a programmer is not all about technical strength. And we often overlook this fact.The book teaches us that there is more to programming than technical abilities.The cat ate my source codePhoto by Chen Zhao / UnsplashThis is the first chapter in the book and is a very interesting concept.Remember that one day when we didn\u2019t finish our homework and we said that the dog ate it? (Actually I don\u2019t remember it, because I always finish my homework ?)What that - and this chapter - teaches us is actually responsibility. When you have responsibility for something, you should be prepared to be held accountable for it. If you make mistakes and cannot fulfill those responsibilities, you have to make up for it and find a solution. Don\u2019t make up excuses and play the finger pointing game. You can\u2019t just go into work and tell everybody that a cat just ate your source code.Provide options, don\u2019t make lame excuses.It\u2019s all about a broken windowPhoto by Pawe\u0142 Czerwi\u0144ski / UnsplashIn the book, there is a story about an urban area that became very messy and run-down, all because of one broken window.This is much like our code: when we see some dirty code (which we can see like it's a broken window), we might start to think that it\u2019s okay to let the code be dirty. That it\u2019s okay to just go back later, which most of the time we never do. Try not to leave \u201cbroken windows\u201d unrepaired. When you find that kind of code, fix it up as soon as possible. When you continue to think that no one has the time to fix that broken code, you might as well go and buy yourself a dumpster just to keep your code.What this chapter discusses is actually simple: it\u2019s about initiative and taking care of your stuff.Take the initiative, be the catalystPhoto by Braden Collum / UnsplashThere also might be times when you know that either something is all good or something needs to actually get done. It comes to your mind and you just think to yourself that it\u2019s the right thing to do. If you just keep thinking, nothing will happen. Or if you just ask for it to be on the project timeline, you might be met with huge feature development requests and technical debt. So it ends up in another year in discussion.It\u2019s time to step up your game. Work out what you can, don\u2019t overdo it, but also make it reasonable. Once you got your complete idea, show it to people. They might think that \u201cYeah, it might be better if we had that.\u201d Show them a glimpse of the future and people will rally around you. Be a catalyst for change.More so, this book also teaches us about basic fundamentals that we often forget as programmers.Sometimes, the more we delve deeper and deeper into our work, the more often we forgot about the basic things that we learned a long time ago. Busy chasing features and new tech improvements, we often forget that there are actually a lot more things that we need to pay attention to beforehand before going deeper.Clean codePhoto by Oliver Hale / UnsplashOne of the most basic principles we often forget about is clean code. As features are piling up more and more, the codebase become fatter and technical debt rises. But we must always remember to keep our code consistent and clean every time we write it. One of the things that is mentioned in the book is the DRY principle (Don\u2019t Repeat Yourself). It is related to code reusability. Duplication is evil and that's the truth. Duplicate code will make maintaining your code very hard, and it can cause confusion when you need to change a feature or fix a bug.Remember that time when you needed to fix some of your code? And you realized that there was code that was very similar to the bit you just changed? So then you gotta change that part too, and another too, and then maybe this bit too\u2026you get the picture.Find the correct toolsPhoto by Cesar Carlevarino Aragon / UnsplashLike a woodcutter, finding the correct and proper tools is very important. Before a woodcutter starts cutting trees. they have to decide - do they need a chainsaw? Or is an axe good enough? Or maybe there is a brand new lightsaber they can use. But using kitchen knife might take some time to cut down a tree.It's similar for programmers: this book teaches us that it\u2019s very important for us to find the proper tools before we start working (like a good code editor). We shouldn't jump right to coding. For example, it\u2019s actually possible to code using Windows notepad and compile it using the console. But is it the right tool for you? Try to find the best editor that you are most comfortable using. Learning and mastering it and it will increase your productivity by several times.There are several editors mentioned in the book, such as Emacs or Vim. But nowadays you can find more modern code editors such as Visual Studio Code. Find one that suites you. It's like your taste in coffee \u2013 some people prefer lattes and others prefer cappuccinos.Don\u2019t program by coincidenceThis is one very important point noted in the book. In all of our programming journeys, there have likely been times when we were just coding blindly and unexpectedly\u2026 and somehow it just worked.You probably weren't sure what you were actually doing, so you kept adding more and more code and it still worked. That is, until one day when there was an issue and you tried to remove some chunk of code and it completely broke everything. And you were not sure which piece caused it.Relying on unknowns is very dangerous. When you are not sure what the code is supposed to do, try to simplify it and make sure that the code is reliable in its own right, not just reliable by chance.Rely only on things you are sure of. Don\u2019t program by coincidence.Unit testTesting is a hot topic these days. And yes, it was also an important topic 20 years ago (and it will always be).But sometimes people forget about unit tests these days. They might have just finished their code and they assumed everything was okay...until the code ended up broken in production because of edge cases.In order to maintain stability and refactor safely, we always need to keep our code protected by writing unit tests. And it\u2019s never enough if your tests only cover the happy path. Perform ruthless testing on your code, and remember that your code is not finished until you've covered every available test. Unit testing will help you be confident that your piece of code is truly done.Taking ownershipThere's one last thing I want to talk about. As we know, programmers like to leave \u2018legacies\u2019 behind, in the form of code. And yes, most of the time it\u2019s bad.Being a programmer, we ought to take pride in our own work. We should be proud of the responsibility we've been given and the piece of code we have been working on. When we are finally able to take pride in our code and own it, we will be able to leave a good legacy behind. And people will see our code as a signature. When they see our code, they'll know that it will be solid and well-written, by a professional.Finishing upThere are even more topics covered in this book that I haven\u2019t discussed here, such as Requirements and Teamwork. If you are interested in exploring these topics, you should try to find and read the book!Just a note, however: as much as I liked the book, some stuff just didn't seem relate-able, looking at how old the book is (20 years old). It talks about old languages such as Prolog, and speaks about OOP like it\u2019s a really new concept - so these oddities just don't seem right. But it can\u2019t be blamed since it's already a couple decades old.Aside from that most of the stuff covered in the book is still quite relevant to the current age of Programming, like those topics I covered above.If I was trying to sum everything up in this book, I'd say it basically covers everything I have ever read on the Web about becoming a better engineer.Thanks for reading my article about The Pragmatic Programmer! Hopefully it has given you some insight into your journey as a Programmer or Software Engineer. And grab yourself a copy of the book if you are interested in learning more.P.S. I wrote this article on my own, without any means of advertising or marketing from a third party. The cover photo was taken from amazon's site.\n\n                        \n                    \n                    \n                        \n                        \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 9710, "excerpt": "In short: old but gold.\n\nPublished in 1999, The Pragmatic Programmer is a book about how to become a\nPragmatic Programmer. Which really means a \u2018Good Programmer\u2019. \n\nYes, it was published about 20 years ago. But this book still provides many\ninsights that are very relevant to programmers or software engineers, as some\npeople might call them these days.\n\nYou might have heard about this book before and questioned what actually it's\nactually about. Well, today I will share with you some of the inter", "siteName": "freeCodeCamp.org", "publishedTime": "2020-01-22T16:28:10.000Z", "id": "10963eea84d88ab384862b59f9a53be998428eee", "url": "https://www.freecodecamp.org/news/thought-on-the-pragmatic-programmer/", "domain": "freecodecamp.org", "date": "2023-12-27T18:07:09.803811", "resultUri": "http://localhost:3000/result/10963eea84d88ab384862b59f9a53be998428eee", "query": {"url": ["https://www.freecodecamp.org/news/thought-on-the-pragmatic-programmer/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "What I Learned from Reading \"The Pragmatic Programmer\"", "description": "In short: old but gold. Published in 1999, The Pragmatic Programmer is a book about how to become a Pragmatic Programmer. Which really means a \u2018Good Programmer\u2019.  Yes, it was published about 20 years ago. But this book still provides many insights that are very relevant to programmers or", "url": "https://www.freecodecamp.org/news/thought-on-the-pragmatic-programmer/", "image": "https://www.freecodecamp.org/news/content/images/2020/01/51nz9ROuoHL-1.jpg", "image:width": "381", "image:height": "499"}, "twitter": {"card": "summary_large_image", "title": "What I Learned from Reading \"The Pragmatic Programmer\"", "description": "In short: old but gold. Published in 1999, The Pragmatic Programmer is a book about how to become a Pragmatic Programmer. Which really means a \u2018Good Programmer\u2019.  Yes, it was published about 20 years ago. But this book still provides many insights that are very relevant to programmers or", "url": "https://www.freecodecamp.org/news/thought-on-the-pragmatic-programmer/", "image": "https://www.freecodecamp.org/news/content/images/2020/01/51nz9ROuoHL-1.jpg", "label1": "Written by", "data1": "Pramono Winata", "label2": "Filed under", "data2": "Programming, Books, Technology, Software Engineering, Quality Software", "site": "@freecodecamp", "creator": "@PramonoWinata"}}}