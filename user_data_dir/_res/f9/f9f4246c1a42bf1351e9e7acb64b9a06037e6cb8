{"title": "Git for Absolute Beginners", "byline": "freeCodeCamp.org", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>Git for Absolute Beginners</h1>\n<section>\n<section data-test-label=\"post-content\">\n<p>by Shahzan</p><p>If you\u2019re new to the programming world, then learning Git should be something on top of your priority list.</p><p>Git is one such tool which you will encounter on a day-to-day basis as part of your job.</p><h4 id=\"what-you-can-expect-in-this-post\">What you can expect in this post</h4><p>In this post, I\u2019ll provide an overview of Git and how to get started with it.</p><ul><li>What is Git?</li><li>Terminologies associated with Git</li><li>Interacting with Git using the command line</li></ul><p>I promise to explain the topics in the most simplified way I can.</p><h4 id=\"so-let-s-begin-by-understanding-what-is-git\">So let\u2019s begin by understanding, what is Git?</h4><p>Git is a Version Control System.</p><h4 id=\"now-what-the-heck-is-a-version-control-system-vcs-\">Now, what the heck is a Version Control System (VCS)?</h4><p>A VCS monitors and keeps track of all the changes done to the files that are being monitored by it.</p><p>It also allows multiple developers to share and work collaboratively on the same set of files, without conflicting with each other\u2019s work.</p><p>It not only keeps track of what files were changed, but it also keeps tracks of</p><ul><li>What changes were done?</li><li>Who did these changes?</li><li>When these changes were done.</li></ul><p>For you to share and work collaboratively with other developers, you require access to a Git-based hosted service.</p><p>Some of the popular Git hosted service providers are:</p><ul><li><a href=\"https://github.com/\" rel=\"noopener\">GitHub</a></li><li><a href=\"https://bitbucket.org/\" rel=\"noopener\">Bitbucket</a></li><li><a href=\"https://visualstudio.microsoft.com/team-services/\" rel=\"noopener\">Microsoft Visual Studio Team Services</a></li></ul><p>All of them offer a similar sort of functionality.</p><h4 id=\"what-is-a-repository-in-git\">What is a Repository in Git?</h4><p>A <strong><em>repository </em></strong>is a folder whose contents are tracked by Git. It is also known as a <strong><em>repo</em></strong>, in simple terms.</p><p>A repo may have multiple files and sub folders present within it. Usually, the files that are present within the repository contain source code.</p><p>Within each repo, there is a <strong><em>.git folder</em></strong>. This folder contains all the files and folders required by Git to keep track of all the changes done to the files within this repo.</p><p>If we delete this .git folder, Git will not identify this folder as a repo nor track its contents.</p><p>The repo present on the local computer is referred to as a <strong><em>local repository</em></strong>, and the repository located on a hosted Git platform is referred to as a <strong><em>remote repository</em></strong>.</p><h4 id=\"download-and-install-git\">Download and Install Git</h4><p>Downloading and Installing Git is a fairly straightforward process.</p><p>You can <a href=\"https://git-scm.com/downloads\" rel=\"noopener\">download Git from here</a>.</p><p>Once Git has been downloaded, <a href=\"https://git-scm.com/book/en/v2/Getting-Started-Installing-Git\" rel=\"noopener\">you can refer to this guide on how to have it installed</a>.</p><h4 id=\"initializing-a-git-repository\">Initializing a Git Repository</h4><p>Before we go ahead and start tracking our files using Git, we need to initialize Git for the folder which we want Git to monitor.</p><p>In simple terms, Git converts a folder into a repository so that its contents can be tracked by it.</p><p>In order to initialize a folder into a Git repository:</p><p>On a Windows-based system, we need to <strong><em>right-click on the folder</em></strong> (we would like to be tracked by Git), and then click on <strong><em>\u201cGit Bash Here\u201d.</em></strong> This opens up a command prompt like a window, which allows us to interact with Git using the Git commands.</p><blockquote><strong>Note:</strong> Whenever we would like to interact with Git, we will be interacting using Git commands through this Git Bash window. Also note, the Git commands do not differ for Windows and Unix based systems.</blockquote><p>Within the Git Bash window, we need to type the command:</p><pre tabindex=\"0\"><code>git init</code></pre><p>This command initializes the folder. Basically, it converts this folder into a Git repository.</p><p>As part of this initialization process, it also creates a .git folder (which is a hidden folder) within this repository. This contains all the files required by Git to track all the changes done to this repository.</p><p>But this is just a normal folder like other folders we have on the system. In Git terminology, we still refer to this as a repository or a local repository, to be more precise.</p><p>On a Unix-based system, we just navigate to the directory (which you would like to be tracked by Git), and run the <strong>git init</strong> command, that\u2019s it. This converts this directory into a Git repository.</p><h4 id=\"repository-status\">Repository Status</h4><p>At any point in time if we want to see what is being tracked by Git within a repository, we can do that by typing the command below:</p><pre tabindex=\"0\"><code>git status</code></pre><p>We will be looking at this command in more detail at some point later in the post.</p><p>For now just remember, if we want to see what is being tracked within a repository by Git, we can do that using that command.</p><h4 id=\"tracking-a-repository\">Tracking a Repository</h4><p>Even though we have initialized the folder as a Git repository, its contents won\u2019t get tracked automatically. We need to instruct Git to monitor its contents.</p><p>In order to do that, we make use of the <strong>git add</strong> command. The syntax for this command is as shown below:</p><pre tabindex=\"0\"><code>git add file [file] [file..]</code></pre><blockquote>Note: Anything enclosed within the square brackets <em>[]</em> is optional. This applies to all the Git commands listed within this post.</blockquote><p>We can either specify a single file or multiple files to be tracked by Git.</p><p>If we want Git to monitor specific files present with the repository, we can do so by specifying the individual filename of each file we would like to track.</p><p>In case we want to track files belonging to a specific file type, we can do that by specifying its file extension, as shown below. This tracks all the files ending with the .txt extension.</p><pre tabindex=\"0\"><code>$ git add *.txt</code></pre><p>If we want Git to track all the files present with the respository, the syntax is as shown below.</p><pre tabindex=\"0\"><code>$ git add .</code></pre><p>Let\u2019s say we have the following files present within our repository:</p><figure><img alt=\"Z2s9Bni4O-19bASIGpay70eaDx-yNWHRK9Mi\" height=\"400\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/Z2s9Bni4O-19bASIGpay70eaDx-yNWHRK9Mi\" width=\"600\"/></figure><p>As you can see even the .git folder has been created as part of the initialization process. Originally this folder was hidden \u2014 I had to change the folder properties to make it visible (just to show it to you all).</p><p>This is how a .git folder looks, immediately after the git init command is executed.</p><figure><img alt=\"kKznhad2RUFHV62YbjoWh6c-zvzIGoliSykk\" height=\"156\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/kKznhad2RUFHV62YbjoWh6c-zvzIGoliSykk\" width=\"791\"/></figure><p>This is how the contents of the .git folder look after a few transactions have been done to the repository.</p><figure><img alt=\"UGbIpgCGjcID7R2xJNP4d8hdjx8f5ibGnlj3\" height=\"400\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/UGbIpgCGjcID7R2xJNP4d8hdjx8f5ibGnlj3\" width=\"600\"/></figure><p>To check what all files are currently being tracked by Git, we can make use of the git status command:</p><pre tabindex=\"0\"><code>$ git status\nOn branch master\n\nNo commits yet\n\nUntracked files:\n (use \u201cgit add &lt;file&gt;\u2026\u201d to include in what will be committed)\n \nHelloWorld.html\n Notes.txt\n README.md\n \nnothing added to commit but untracked files present (use \u201cgit add\u201d to track)</code></pre><p>Looking at the output of the <strong>git status</strong> command, it indicates that none of the files are currently being tracked by Git.</p><p>Let\u2019s go ahead and add these files so that they get tracked by Git.</p><p>The command for adding these files is as shown below:</p><pre tabindex=\"0\"><code>$ git add HelloWorld.html Notes.txt</code></pre><p>Now, let\u2019s execute the git status command and check its output.</p><pre tabindex=\"0\"><code>$ git status\nOn branch master\n\nNo commits yet\n\nChanges to be committed:\n (use \u201cgit rm \u2014 cached &lt;file&gt;\u2026\u201d to unstage)\n \nnew file: HelloWorld.html\n new file: Notes.txt\n \nUntracked files:\n (use \u201cgit add &lt;file&gt;\u2026\u201d to include in what will be committed)\n \nREADME.md</code></pre><p>As we can see, we have the <code>HelloWorld.txt</code> and the <code>Notes.txt</code> files present within the staging area that are waiting to be committed.</p><p>The <code>README.md</code> file isn\u2019t being tracked at all, as we didn\u2019t include this file within the git add command which we executed earlier.</p><p>When we executed the git add command, Git staged all the files which were specified as part of the input to this command.</p><p>Until we commit these files, Git won\u2019t start tracking these files.</p><h4 id=\"committing-staged-files\">Committing Staged Files</h4><p>Let\u2019s commit these staged files by typing the command shown below.</p><pre tabindex=\"0\"><code>$ git commit -m \u2018Initial Commit\u2019</code></pre><p>git commit is the command which is used to commit any staged files, -m is used to specify the comments for this commit operation.</p><p>If we would like to view all the commit operations that have been performed, we can do it by typing the git log command, as shown below.</p><pre tabindex=\"0\"><code>$ git log\n\ncommit 8525b32ffcb92c731f5d04de7fe285a2d0ebe901 (HEAD -&gt; master)\n\nAuthor: shahzan &lt;sxxxxxxn@gmail.com&gt;\n\nDate: Sun Apr 28 01:12:20 2019 +0100\n\nInitial Commit</code></pre><p>Whenever any change is done to a file which is being tracked by Git, we need to re-stage those files and re-commit them again. Until those files are not re-staged and re-committed, they will be tracked by Git.</p><p>I have done some minor changes to the Notes.txt file, let\u2019s see what Git has got to say about these changes by executing the git status command.</p><pre tabindex=\"0\"><code>$ git status\n\nOn branch master\n\nChanges not staged for commit:\n\n(use \u201cgit add &lt;file&gt;\u2026\u201d to update what will be committed)\n\n(use \u201cgit checkout \u2014 &lt;file&gt;\u2026\u201d to discard changes in working directory)\n\nmodified: Notes.txt\n\nUntracked files:\n\n(use \u201cgit add &lt;file&gt;\u2026\u201d to include in what will be committed)\n\nREADME.md\n\nno changes added to commit (use \u201cgit add\u201d and/or \u201cgit commit -a\u201d)</code></pre><p>Looking at the above output block, it is clear that the file <code>Notes.txt</code> has been modified and the changes are not staged for commit.</p><p>We make use of the same git add command to re-stage the file.</p><pre tabindex=\"0\"><code>$ git add Notes.txt\n\nShahzan@BlackBox MINGW64 /d/Medium Post Pics/Git/Source Code (master)\n\n$ git status\n\nOn branch master\n\nChanges to be committed:\n\n(use \u201cgit reset HEAD &lt;file&gt;\u2026\u201d to unstage)\n\nmodified: Notes.txt\n\nUntracked files:\n\n(use \u201cgit add &lt;file&gt;\u2026\u201d to include in what will be committed)\n\nREADME.md</code></pre><p>As you can notice from the above output block, the file has been staged and is waiting to be committed.</p><p>Again, we make use of the same git commit command to re-commit the staged file.</p><pre tabindex=\"0\"><code>$ git commit -m \u2018Notes.txt file updated\u2019\n\n[master 184fcad] Notes.txt file updated\n\n1 file changed, 3 insertions(+), 1 deletion(-)</code></pre><p>Let\u2019s execute the git log command and see if the commit has been successful.</p><pre tabindex=\"0\"><code>$ git log\n\ncommit 184fcad4185296103cd9dba0da83520399a11383 (HEAD -&gt; master)\n\nAuthor: shahzans &lt;shuaib.shahzan@gmail.com&gt;\n\nDate: Sun Apr 28 01:15:38 2019 +0100\n\nNotes.txt file updated\n\ncommit 8525b32ffcb92c731f5d04de7fe285a2d0ebe901\n\nAuthor: shahzans &lt;shuaib.shahzan@gmail.com&gt;\n\nDate: Sun Apr 28 01:12:20 2019 +0100\n\nInitial Commit</code></pre><p>As you may notice in the above output block, both the commit operations are being displayed.</p><h4 id=\"ignoring-files\">Ignoring Files</h4><p>Within the repository, there may be files that hold sensitive data or log data, which we don\u2019t want to be tracked by Git under any circumstances.</p><p>.gitignore is the file within which we can specify all the files we don\u2019t want Git to keep track of.</p><pre tabindex=\"0\"><code>$ touch .gitignore</code></pre><p>The syntax to create this file is as shown above.</p><p>Let\u2019s say that I do not want Git to track any file ending with the .md extension.</p><p>Before adding *.md to the .gitignore file, have a look at the output of the git status command as shown in the output block below.</p><pre tabindex=\"0\"><code>$ git status\n\nOn branch master\n\nUntracked files:\n\n(use \u201cgit add &lt;file&gt;\u2026\u201d to include in what will be committed)\n\n.gitignore\n\nREADME.md\n\nnothing added to commit but untracked files present (use \u201cgit add\u201d to track)</code></pre><p>As you may notice, we have <code>.gitignore</code> and <code>README.md</code> being shown as untracked files.</p><p>After adding *.md to the .gitignore file, the git status is as shown in the output block below.</p><p>As you may notice, we now just have .gitignore being shown as an untracked file.</p><pre tabindex=\"0\"><code>$ git status\n\nOn branch master\n\nUntracked files:\n\n(use \u201cgit add &lt;file&gt;\u2026\u201d to include in what will be committed)\n\n.gitignore\n\nnothing added to commit but untracked files present (use \u201cgit add\u201d to track)</code></pre><p>You can either specify an individual filename or a wildcard entry within the .gitignore file.</p><h4 id=\"the-wrap-up\"><strong>The Wrap-Up</strong></h4><p>Git is a very powerful tool and there is a lot more you could do with it, such as branching, merging, pull and push request and much more.</p><p>Just in case you\u2019re interested in learning more about Git, <a href=\"http://bit.ly/git-complete\" rel=\"noopener\">here is a course that I would recommend you to enroll</a> (affiliate link).</p><h3 id=\"before-you-say-goodbye-\">Before you say goodbye\u2026</h3><p>Let\u2019s keep in touch, <a href=\"https://forms.gle/3U1uBNEC4mDkSpMJ7\" rel=\"noopener\">click here to enter your email address</a> (Use this link if the above widget doesn\u2019t show up on your screen).</p><p>Thank you so much for taking your precious time to read this post.</p>\n</section>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nby ShahzanIf you\u2019re new to the programming world, then learning Git should be something on top of your priority list.Git is one such tool which you will encounter on a day-to-day basis as part of your job.What you can expect in this postIn this post, I\u2019ll provide an overview of Git and how to get started with it.What is Git?Terminologies associated with GitInteracting with Git using the command lineI promise to explain the topics in the most simplified way I can.So let\u2019s begin by understanding, what is Git?Git is a Version Control System.Now, what the heck is a Version Control System (VCS)?A VCS monitors and keeps track of all the changes done to the files that are being monitored by it.It also allows multiple developers to share and work collaboratively on the same set of files, without conflicting with each other\u2019s work.It not only keeps track of what files were changed, but it also keeps tracks ofWhat changes were done?Who did these changes?When these changes were done.For you to share and work collaboratively with other developers, you require access to a Git-based hosted service.Some of the popular Git hosted service providers are:GitHubBitbucketMicrosoft Visual Studio Team ServicesAll of them offer a similar sort of functionality.What is a Repository in Git?A repository is a folder whose contents are tracked by Git. It is also known as a repo, in simple terms.A repo may have multiple files and sub folders present within it. Usually, the files that are present within the repository contain source code.Within each repo, there is a .git folder. This folder contains all the files and folders required by Git to keep track of all the changes done to the files within this repo.If we delete this .git folder, Git will not identify this folder as a repo nor track its contents.The repo present on the local computer is referred to as a local repository, and the repository located on a hosted Git platform is referred to as a remote repository.Download and Install GitDownloading and Installing Git is a fairly straightforward process.You can download Git from here.Once Git has been downloaded, you can refer to this guide on how to have it installed.Initializing a Git RepositoryBefore we go ahead and start tracking our files using Git, we need to initialize Git for the folder which we want Git to monitor.In simple terms, Git converts a folder into a repository so that its contents can be tracked by it.In order to initialize a folder into a Git repository:On a Windows-based system, we need to right-click on the folder (we would like to be tracked by Git), and then click on \u201cGit Bash Here\u201d. This opens up a command prompt like a window, which allows us to interact with Git using the Git commands.Note: Whenever we would like to interact with Git, we will be interacting using Git commands through this Git Bash window. Also note, the Git commands do not differ for Windows and Unix based systems.Within the Git Bash window, we need to type the command:git initThis command initializes the folder. Basically, it converts this folder into a Git repository.As part of this initialization process, it also creates a .git folder (which is a hidden folder) within this repository. This contains all the files required by Git to track all the changes done to this repository.But this is just a normal folder like other folders we have on the system. In Git terminology, we still refer to this as a repository or a local repository, to be more precise.On a Unix-based system, we just navigate to the directory (which you would like to be tracked by Git), and run the git init command, that\u2019s it. This converts this directory into a Git repository.Repository StatusAt any point in time if we want to see what is being tracked by Git within a repository, we can do that by typing the command below:git statusWe will be looking at this command in more detail at some point later in the post.For now just remember, if we want to see what is being tracked within a repository by Git, we can do that using that command.Tracking a RepositoryEven though we have initialized the folder as a Git repository, its contents won\u2019t get tracked automatically. We need to instruct Git to monitor its contents.In order to do that, we make use of the git add command. The syntax for this command is as shown below:git add file [file] [file..]Note: Anything enclosed within the square brackets [] is optional. This applies to all the Git commands listed within this post.We can either specify a single file or multiple files to be tracked by Git.If we want Git to monitor specific files present with the repository, we can do so by specifying the individual filename of each file we would like to track.In case we want to track files belonging to a specific file type, we can do that by specifying its file extension, as shown below. This tracks all the files ending with the .txt extension.$ git add *.txtIf we want Git to track all the files present with the respository, the syntax is as shown below.$ git add .Let\u2019s say we have the following files present within our repository:As you can see even the .git folder has been created as part of the initialization process. Originally this folder was hidden \u2014 I had to change the folder properties to make it visible (just to show it to you all).This is how a .git folder looks, immediately after the git init command is executed.This is how the contents of the .git folder look after a few transactions have been done to the repository.To check what all files are currently being tracked by Git, we can make use of the git status command:$ git status\nOn branch master\n\nNo commits yet\n\nUntracked files:\n (use \u201cgit add <file>\u2026\u201d to include in what will be committed)\n \nHelloWorld.html\n Notes.txt\n README.md\n \nnothing added to commit but untracked files present (use \u201cgit add\u201d to track)Looking at the output of the git status command, it indicates that none of the files are currently being tracked by Git.Let\u2019s go ahead and add these files so that they get tracked by Git.The command for adding these files is as shown below:$ git add HelloWorld.html Notes.txtNow, let\u2019s execute the git status command and check its output.$ git status\nOn branch master\n\nNo commits yet\n\nChanges to be committed:\n (use \u201cgit rm \u2014 cached <file>\u2026\u201d to unstage)\n \nnew file: HelloWorld.html\n new file: Notes.txt\n \nUntracked files:\n (use \u201cgit add <file>\u2026\u201d to include in what will be committed)\n \nREADME.mdAs we can see, we have the HelloWorld.txt and the Notes.txt files present within the staging area that are waiting to be committed.The README.md file isn\u2019t being tracked at all, as we didn\u2019t include this file within the git add command which we executed earlier.When we executed the git add command, Git staged all the files which were specified as part of the input to this command.Until we commit these files, Git won\u2019t start tracking these files.Committing Staged FilesLet\u2019s commit these staged files by typing the command shown below.$ git commit -m \u2018Initial Commit\u2019git commit is the command which is used to commit any staged files, -m is used to specify the comments for this commit operation.If we would like to view all the commit operations that have been performed, we can do it by typing the git log command, as shown below.$ git log\n\ncommit 8525b32ffcb92c731f5d04de7fe285a2d0ebe901 (HEAD -> master)\n\nAuthor: shahzan <sxxxxxxn@gmail.com>\n\nDate: Sun Apr 28 01:12:20 2019 +0100\n\nInitial CommitWhenever any change is done to a file which is being tracked by Git, we need to re-stage those files and re-commit them again. Until those files are not re-staged and re-committed, they will be tracked by Git.I have done some minor changes to the Notes.txt file, let\u2019s see what Git has got to say about these changes by executing the git status command.$ git status\n\nOn branch master\n\nChanges not staged for commit:\n\n(use \u201cgit add <file>\u2026\u201d to update what will be committed)\n\n(use \u201cgit checkout \u2014 <file>\u2026\u201d to discard changes in working directory)\n\nmodified: Notes.txt\n\nUntracked files:\n\n(use \u201cgit add <file>\u2026\u201d to include in what will be committed)\n\nREADME.md\n\nno changes added to commit (use \u201cgit add\u201d and/or \u201cgit commit -a\u201d)Looking at the above output block, it is clear that the file Notes.txt has been modified and the changes are not staged for commit.We make use of the same git add command to re-stage the file.$ git add Notes.txt\n\nShahzan@BlackBox MINGW64 /d/Medium Post Pics/Git/Source Code (master)\n\n$ git status\n\nOn branch master\n\nChanges to be committed:\n\n(use \u201cgit reset HEAD <file>\u2026\u201d to unstage)\n\nmodified: Notes.txt\n\nUntracked files:\n\n(use \u201cgit add <file>\u2026\u201d to include in what will be committed)\n\nREADME.mdAs you can notice from the above output block, the file has been staged and is waiting to be committed.Again, we make use of the same git commit command to re-commit the staged file.$ git commit -m \u2018Notes.txt file updated\u2019\n\n[master 184fcad] Notes.txt file updated\n\n1 file changed, 3 insertions(+), 1 deletion(-)Let\u2019s execute the git log command and see if the commit has been successful.$ git log\n\ncommit 184fcad4185296103cd9dba0da83520399a11383 (HEAD -> master)\n\nAuthor: shahzans <shuaib.shahzan@gmail.com>\n\nDate: Sun Apr 28 01:15:38 2019 +0100\n\nNotes.txt file updated\n\ncommit 8525b32ffcb92c731f5d04de7fe285a2d0ebe901\n\nAuthor: shahzans <shuaib.shahzan@gmail.com>\n\nDate: Sun Apr 28 01:12:20 2019 +0100\n\nInitial CommitAs you may notice in the above output block, both the commit operations are being displayed.Ignoring FilesWithin the repository, there may be files that hold sensitive data or log data, which we don\u2019t want to be tracked by Git under any circumstances..gitignore is the file within which we can specify all the files we don\u2019t want Git to keep track of.$ touch .gitignoreThe syntax to create this file is as shown above.Let\u2019s say that I do not want Git to track any file ending with the .md extension.Before adding *.md to the .gitignore file, have a look at the output of the git status command as shown in the output block below.$ git status\n\nOn branch master\n\nUntracked files:\n\n(use \u201cgit add <file>\u2026\u201d to include in what will be committed)\n\n.gitignore\n\nREADME.md\n\nnothing added to commit but untracked files present (use \u201cgit add\u201d to track)As you may notice, we have .gitignore and README.md being shown as untracked files.After adding *.md to the .gitignore file, the git status is as shown in the output block below.As you may notice, we now just have .gitignore being shown as an untracked file.$ git status\n\nOn branch master\n\nUntracked files:\n\n(use \u201cgit add <file>\u2026\u201d to include in what will be committed)\n\n.gitignore\n\nnothing added to commit but untracked files present (use \u201cgit add\u201d to track)You can either specify an individual filename or a wildcard entry within the .gitignore file.The Wrap-UpGit is a very powerful tool and there is a lot more you could do with it, such as branching, merging, pull and push request and much more.Just in case you\u2019re interested in learning more about Git, here is a course that I would recommend you to enroll (affiliate link).Before you say goodbye\u2026Let\u2019s keep in touch, click here to enter your email address (Use this link if the above widget doesn\u2019t show up on your screen).Thank you so much for taking your precious time to read this post.\n\n                        \n                    \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 11877, "excerpt": "by Shahzan\n\nGit for Absolute Beginners\nIf you\u2019re new to the programming world, then learning Git should be something on\ntop of your priority list.\n\nGit is one such tool which you will encounter on a day-to-day basis as part of\nyour job.\n\nWhat you can expect in this post\nIn this post, I\u2019ll provide an overview of Git and how to get started with it.\n\n * What is Git?\n * Terminologies associated with Git\n * Interacting with Git using the command line\n\nI promise to explain the topics in the most simpl", "siteName": "freeCodeCamp.org", "publishedTime": "2019-05-06T17:04:28.000Z", "id": "f9f4246c1a42bf1351e9e7acb64b9a06037e6cb8", "url": "https://www.freecodecamp.org/news/an-introduction-to-git-for-absolute-beginners-86fa1d32ff71/", "domain": "freecodecamp.org", "date": "2023-12-27T18:10:34.938968", "resultUri": "http://localhost:3000/result/f9f4246c1a42bf1351e9e7acb64b9a06037e6cb8", "query": {"url": ["https://www.freecodecamp.org/news/an-introduction-to-git-for-absolute-beginners-86fa1d32ff71/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "Git for Absolute Beginners", "description": "by Shahzan Git for Absolute Beginners If you\u2019re new to the programming world, then learning Git should be something on top of your priority list. Git is one such tool which you will encounter on a day-to-day basis as part of your job. What you can expect in this post", "url": "https://www.freecodecamp.org/news/an-introduction-to-git-for-absolute-beginners-86fa1d32ff71/", "image": "https://cdn-media-1.freecodecamp.org/images/1*TnsFDs-DEye722CrQXjv8w.png", "image:width": "800", "image:height": "481"}, "twitter": {"card": "summary_large_image", "title": "Git for Absolute Beginners", "description": "by Shahzan Git for Absolute Beginners If you\u2019re new to the programming world, then learning Git should be something on top of your priority list. Git is one such tool which you will encounter on a day-to-day basis as part of your job. What you can expect in this post", "url": "https://www.freecodecamp.org/news/an-introduction-to-git-for-absolute-beginners-86fa1d32ff71/", "image": "https://cdn-media-1.freecodecamp.org/images/1*TnsFDs-DEye722CrQXjv8w.png", "label1": "Written by", "data1": "freeCodeCamp.org", "label2": "Filed under", "data2": "Git, Programming, Web Development, Version Control, Tech", "site": "@freecodecamp"}}}