{"title": "Functional and flexible shell scripting tricks", "byline": "freeCodeCamp.org", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>Functional and flexible shell scripting tricks</h1>\n<section>\n<section data-test-label=\"post-content\">\n<p>by BinHong Lee</p><h3 id=\"shell-scripts-vs-python-or-perl\">Shell scripts vs python or Perl</h3><p>It's 2020 now, who writes shell scripts anymore? Am I right? Well, apparently I do. \u00af\\_(\u30c4)_/\u00af</p><p>There are some good arguments for that <a href=\"https://stackoverflow.com/questions/796319/strengths-of-shell-scripting-compared-to-python#796343\" rel=\"noopener\">here</a> and <a href=\"https://www.linuxquestions.org/questions/linux-newbie-8/what-is-the-difference-between-perl-and-shell-scripting-4175486499/\" rel=\"noopener\">here</a> which mainly revolve around 2 things:</p><ol><li>Shell exists in all Unix systems and makes use of system default features.</li><li>Shell is an \u201cinteractive command function\u201d designed to get user inputs during the process of running them.</li></ol><p>Also, <a href=\"https://stackoverflow.com/questions/5725296/difference-between-sh-and-bash\" rel=\"noopener\">here</a>\u2019s an additional relevant reading about the differences between <code>sh</code> and <code>bash</code>.</p><h3 id=\"arguments\">Arguments</h3><p>In some occasions, you will need to pass an argument (or expect one) into the script like how you might pass a param into a function. In that case, you will use something like <code>$1</code> for the first argument, <code>$2</code> for the second. Here's an example of how it would look like:</p><p>In script <code>run_this.sh</code>:</p><pre><code>echo \"The input message was $1.\"</code></pre><p>Running the command:</p><pre><code>./run_this.sh userInputThe input message was userInput.</code></pre><p><em>Note: The params are separated by spaces so if you want to input a string as a param that contains a space, it might need to be something like <code>./run_this.sh \"user input\"</code> just so <code>\"user input\"</code> would be counted as <code>$1</code> entirely.</em></p><p>In the occasion where you are not sure how long the user input might be and you want to capture it all, you would use <code>$@</code> instead. In the following example, I took in the entire string and print it out word by word after breaking them into a string array according to the spaces in between.</p><p>In script <code>run_this.sh</code>:</p><pre><code>userInputs=($@)for i in \"${userInputs[@]}\";; do  echo \"$i\"done</code></pre><p>Running the command:</p><pre><code>./run_this.sh who knows how long this can gowhoknowshowlongthiscango</code></pre><h3 id=\"functions\">Functions</h3><p>If you have done any sort of programming, you should be familiar with the concept of <em>functions</em>. It's basically a set of commands / operations that you will be repeating over and over again. Instead of repeating it multiple times in your code, you can put them into a function. Then just call the function which effectively reduces the lines of code that need to be written.</p><p><em>Side note: If you don\u2019t know already, LOC is a horrible metric for any sort of measurement in terms of programming. Don\u2019t take this from me, take this from <a href=\"https://www.goodreads.com/quotes/536587-measuring-programming-progress-by-lines-of-code-is-like-measuring\" rel=\"noopener\">Bill Gates</a>:</em></p><blockquote>\u201cMeasuring programming progress by lines of code is like measuring aircraft building progress by weight.\u201d</blockquote><p>Here\u2019s how a normal function looks like:</p><pre><code># Declaring the functiondoSomething() {</code></pre><pre><code>}</code></pre><pre><code># Calling the functiondoSomething</code></pre><p>Pretty straightforward and easy to understand. Now, here are a few differences between functions in shell scripts and a normal programming language.</p><h3 id=\"parameters\">Parameters</h3><p>If you were to pass a parameter / use a parameter into a function in Java, you have to declare them in the function declaration. They look something like this.</p><pre><code>public static void main(String[] args) {    doSomething(\"random String\");}</code></pre><pre><code>private static void doSomething (String words) {    System.out.println(words);}</code></pre><p>In the shell, however, they do not require a declaration of types or names at all. Each of them is like a separate script that lives in the script itself. If you were to use a param, just pass it in and call it like how you would do it if you were taking in input for this script at the top level. Something like this:</p><pre><code>doSomething() {    echo $1}</code></pre><pre><code>doSomething \"random String\"</code></pre><ol><li>Similar to above, if you want to take in everything, you will use <code>$@</code> instead of <code>$1</code> since <code>$1</code> would only use the first input (and <code>$2</code> for the second etc.).</li><li>Functions need to be declared ahead of where they are being called. (Usually beginning of the file before any main operations.)</li></ol><h3 id=\"return\">Return</h3><p>Let\u2019s say we create a script like below named <code>run_this.sh</code>:</p><pre><code>doSomething() {    echo \"magic\"    return 0}</code></pre><pre><code>output=`doSomething`echo $output</code></pre><p>Now let\u2019s run it and see what is being assigned to the <code>output</code> variable.</p><pre><code>$ ./run_this.shmagic</code></pre><p>Note that instead of <code>0</code>, it shows <code>magic</code> instead. This is because when you do <code>output=`doSomething`</code>, it assigns the output message to <code>output</code> instead of the return value since the output message is how you communicate almost anything in the shell script.</p><p>So when does it make sense to use the <code>return</code> call? When you are using it as part of an if statement. Something like this:</p><p>In script <code>run_this.sh</code>:</p><pre><code>doSomething() {    echo \"magic\"    return 0}</code></pre><pre><code>if doSomething; then    echo \"Its true!\"fi</code></pre><p>Running the command:</p><pre><code>./run_this.shIts true!</code></pre><p>In this case, <code>return 0</code> means <code>true</code> while <code>return 1</code> meant <code>false</code> in a traditional <code>boolean</code> sense.</p><h3 id=\"multi-line-echo\">Multi-line echo</h3><p>There are times when you need to print a multi-line message. There are a few ways to go around this. The easiest way is to use <code>echo</code> multiple times like this:</p><pre><code>echo \"line1\"echo \"line2\"echo \"line3\"</code></pre><p>It works but probably not the most elegant way to get around this. Instead, you can use <code>cat &lt;&amp;l</code>t; EOF instead. Something like this:</p><pre><code>cat &lt;&lt; EOFline1line2line3EOF</code></pre><p>Note that there should not be anything (including spaces or tabs) before <code>EOF</code>. If you want to do it in an <code>if</code>statement, it should look something like this.</p><pre><code>if [ \"a\" == \"a\" ]; then  cat &lt;&lt; EOFline1line2line3EOFfi</code></pre><p>Realize that even the messages themselves are aligned to the left. This is because if you leave them tabbed, the output message shown in the command line will also be tabbed. Also, if <code>EOF</code> is tabbed, the shell will complain about it and usually ends the script there.</p><h3 id=\"flags-options\">Flags / Options</h3><p>You\u2019ve probably seen some of the scripts or commands that comes with an ability to add flags (and sometimes arguments for the specific flag). Something like <code>git commit -a -m \"Some commit message\"</code>.</p><p>Here\u2019s a quick example of how it looks like (I\u2019ve tried to be as comprehensive as possible with the example.)</p><p>In script <code>run_this.sh</code>:</p><pre><code>while getopts ac: opt; do    case $opt in        a)            echo \"\\\"a\\\" was executed.\"            ;;        c)            echo \"\\\"c\\\" was executed with parameter \\\"$OPTARG\\\".\"            ;;        \\?)            echo \"Invalid option: -$opt\"            exit 1            ;;        :)            echo \"option -$opt requires an argument.\"            exit 1            ;;    esacdone</code></pre><p>Running the command:</p><pre><code>./run_this.sh</code></pre><pre><code>./run_this.sh -a\"a\" was executed.</code></pre><pre><code>./run_this.sh -coption -c requires an argument.</code></pre><pre><code>./run_this.sh -c abcd\"c\" was executed with parameter \"abcd\".</code></pre><pre><code>./run_this.sh -a -c abc\"a\" was executed.\"c\" was executed with parameter \"abc\".</code></pre><pre><code>./run_this.sh -xInvalid option: -x</code></pre><p>In the above example, the differences between option <code>-a</code> and <code>-c</code> is that in the <code>getopts</code> line, <code>c</code> has a colon (<code>:</code>) following it after therefore telling the program to expect a parameter for the option. Another thing to keep in mind is that the options need to be declared in an alphabetical way. If you declare something like <code>acb</code>, the <code>b</code>declaration would be ignored, and using the <code>-b</code> flag would lead to the error message instead of the <code>b</code> case in the switch condition.</p><p>Thanks for reading!</p><h3 id=\"about-me\">About me</h3><p>I currently work at Facebook as a Software Engineer. I spend some of my free time experimenting and building new things with technologies I find fun and interesting. Follow my exploration journey <a href=\"https://binhong.me/blog\" rel=\"noopener\">here</a> or on <a href=\"https://github.com/binhonglee\" rel=\"noopener\">GitHub</a>.</p><h3 id=\"references\">References</h3><ul><li><a href=\"http://wiki.bash-hackers.org/howto/getopts_tutorial\" rel=\"noopener\">Small getopts tutorial</a></li><li><a href=\"https://stackoverflow.com/questions/10969953/how-to-output-a-multiline-string-in-bash#10970616\" rel=\"noopener\">How to output a multiline string in Bash</a></li></ul>\n</section>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nby BinHong LeeShell scripts vs python or PerlIt's 2020 now, who writes shell scripts anymore? Am I right? Well, apparently I do. \u00af\\_(\u30c4)_/\u00afThere are some good arguments for that here and here which mainly revolve around 2 things:Shell exists in all Unix systems and makes use of system default features.Shell is an \u201cinteractive command function\u201d designed to get user inputs during the process of running them.Also, here\u2019s an additional relevant reading about the differences between sh and bash.ArgumentsIn some occasions, you will need to pass an argument (or expect one) into the script like how you might pass a param into a function. In that case, you will use something like $1 for the first argument, $2 for the second. Here's an example of how it would look like:In script run_this.sh:echo \"The input message was $1.\"Running the command:./run_this.sh userInputThe input message was userInput.Note: The params are separated by spaces so if you want to input a string as a param that contains a space, it might need to be something like ./run_this.sh \"user input\" just so \"user input\" would be counted as $1 entirely.In the occasion where you are not sure how long the user input might be and you want to capture it all, you would use $@ instead. In the following example, I took in the entire string and print it out word by word after breaking them into a string array according to the spaces in between.In script run_this.sh:userInputs=($@)for i in \"${userInputs[@]}\";; do  echo \"$i\"doneRunning the command:./run_this.sh who knows how long this can gowhoknowshowlongthiscangoFunctionsIf you have done any sort of programming, you should be familiar with the concept of functions. It's basically a set of commands / operations that you will be repeating over and over again. Instead of repeating it multiple times in your code, you can put them into a function. Then just call the function which effectively reduces the lines of code that need to be written.Side note: If you don\u2019t know already, LOC is a horrible metric for any sort of measurement in terms of programming. Don\u2019t take this from me, take this from Bill Gates:\u201cMeasuring programming progress by lines of code is like measuring aircraft building progress by weight.\u201dHere\u2019s how a normal function looks like:# Declaring the functiondoSomething() {}# Calling the functiondoSomethingPretty straightforward and easy to understand. Now, here are a few differences between functions in shell scripts and a normal programming language.ParametersIf you were to pass a parameter / use a parameter into a function in Java, you have to declare them in the function declaration. They look something like this.public static void main(String[] args) {    doSomething(\"random String\");}private static void doSomething (String words) {    System.out.println(words);}In the shell, however, they do not require a declaration of types or names at all. Each of them is like a separate script that lives in the script itself. If you were to use a param, just pass it in and call it like how you would do it if you were taking in input for this script at the top level. Something like this:doSomething() {    echo $1}doSomething \"random String\"Similar to above, if you want to take in everything, you will use $@ instead of $1 since $1 would only use the first input (and $2 for the second etc.).Functions need to be declared ahead of where they are being called. (Usually beginning of the file before any main operations.)ReturnLet\u2019s say we create a script like below named run_this.sh:doSomething() {    echo \"magic\"    return 0}output=`doSomething`echo $outputNow let\u2019s run it and see what is being assigned to the output variable.$ ./run_this.shmagicNote that instead of 0, it shows magic instead. This is because when you do output=`doSomething`, it assigns the output message to output instead of the return value since the output message is how you communicate almost anything in the shell script.So when does it make sense to use the return call? When you are using it as part of an if statement. Something like this:In script run_this.sh:doSomething() {    echo \"magic\"    return 0}if doSomething; then    echo \"Its true!\"fiRunning the command:./run_this.shIts true!In this case, return 0 means true while return 1 meant false in a traditional boolean sense.Multi-line echoThere are times when you need to print a multi-line message. There are a few ways to go around this. The easiest way is to use echo multiple times like this:echo \"line1\"echo \"line2\"echo \"line3\"It works but probably not the most elegant way to get around this. Instead, you can use cat <&lt; EOF instead. Something like this:cat << EOFline1line2line3EOFNote that there should not be anything (including spaces or tabs) before EOF. If you want to do it in an ifstatement, it should look something like this.if [ \"a\" == \"a\" ]; then  cat << EOFline1line2line3EOFfiRealize that even the messages themselves are aligned to the left. This is because if you leave them tabbed, the output message shown in the command line will also be tabbed. Also, if EOF is tabbed, the shell will complain about it and usually ends the script there.Flags / OptionsYou\u2019ve probably seen some of the scripts or commands that comes with an ability to add flags (and sometimes arguments for the specific flag). Something like git commit -a -m \"Some commit message\".Here\u2019s a quick example of how it looks like (I\u2019ve tried to be as comprehensive as possible with the example.)In script run_this.sh:while getopts ac: opt; do    case $opt in        a)            echo \"\\\"a\\\" was executed.\"            ;;        c)            echo \"\\\"c\\\" was executed with parameter \\\"$OPTARG\\\".\"            ;;        \\?)            echo \"Invalid option: -$opt\"            exit 1            ;;        :)            echo \"option -$opt requires an argument.\"            exit 1            ;;    esacdoneRunning the command:./run_this.sh./run_this.sh -a\"a\" was executed../run_this.sh -coption -c requires an argument../run_this.sh -c abcd\"c\" was executed with parameter \"abcd\"../run_this.sh -a -c abc\"a\" was executed.\"c\" was executed with parameter \"abc\"../run_this.sh -xInvalid option: -xIn the above example, the differences between option -a and -c is that in the getopts line, c has a colon (:) following it after therefore telling the program to expect a parameter for the option. Another thing to keep in mind is that the options need to be declared in an alphabetical way. If you declare something like acb, the bdeclaration would be ignored, and using the -b flag would lead to the error message instead of the b case in the switch condition.Thanks for reading!About meI currently work at Facebook as a Software Engineer. I spend some of my free time experimenting and building new things with technologies I find fun and interesting. Follow my exploration journey here or on GitHub.ReferencesSmall getopts tutorialHow to output a multiline string in Bash\n\n                        \n                    \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 7555, "excerpt": "by BinHong Lee\n\nShell scripts vs python or Perl\nIt's 2020 now, who writes shell scripts anymore? Am I right? Well, apparently I\ndo. \u00af\\_(\u30c4)_/\u00af\n\nThere are some good arguments for that here\n[https://stackoverflow.com/questions/796319/strengths-of-shell-scripting-compared-to-python#796343] \nand here\n[https://www.linuxquestions.org/questions/linux-newbie-8/what-is-the-difference-between-perl-and-shell-scripting-4175486499/] \nwhich mainly revolve around 2 things:\n\n 1. Shell exists in all Unix systems", "siteName": "freeCodeCamp.org", "publishedTime": "2019-05-07T16:15:12.000Z", "id": "c6691232c90d8c12f6d8e98c4cb441aeea86fc44", "url": "https://www.freecodecamp.org/news/functional-and-flexible-shell-scripting-tricks-a2d693be2dd4/", "domain": "freecodecamp.org", "date": "2023-12-27T18:10:28.834222", "resultUri": "http://localhost:3000/result/c6691232c90d8c12f6d8e98c4cb441aeea86fc44", "query": {"url": ["https://www.freecodecamp.org/news/functional-and-flexible-shell-scripting-tricks-a2d693be2dd4/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "Functional and flexible shell scripting tricks", "description": "by BinHong Lee Shell scripts vs python or Perl It's 2020 now, who writes shell scripts anymore? Am I right? Well, apparently I do. \u00af\\_(\u30c4)_/\u00af There are some good arguments for that here [https://stackoverflow.com/questions/796319/strengths-of-shell-scripting-compared-to-python#796343]  and here [https://www.linuxquestions.org/questions/linux-newbie-8/what-is-the-difference-between-perl-and-shell-scripting-4175486499/]  which mainly revolve around 2 things:  1. Shell exists in", "url": "https://www.freecodecamp.org/news/functional-and-flexible-shell-scripting-tricks-a2d693be2dd4/", "image": "https://cdn-media-1.freecodecamp.org/images/0*ZB2nVJjipU4repVb", "image:width": "800", "image:height": "600"}, "twitter": {"card": "summary_large_image", "title": "Functional and flexible shell scripting tricks", "description": "by BinHong Lee Shell scripts vs python or Perl It's 2020 now, who writes shell scripts anymore? Am I right? Well, apparently I do. \u00af\\_(\u30c4)_/\u00af There are some good arguments for that here [https://stackoverflow.com/questions/796319/strengths-of-shell-scripting-compared-to-python#796343]  and here [https://www.linuxquestions.org/questions/linux-newbie-8/what-is-the-difference-between-perl-and-shell-scripting-4175486499/]  which mainly revolve around 2 things:  1. Shell exists in", "url": "https://www.freecodecamp.org/news/functional-and-flexible-shell-scripting-tricks-a2d693be2dd4/", "image": "https://cdn-media-1.freecodecamp.org/images/0*ZB2nVJjipU4repVb", "label1": "Written by", "data1": "freeCodeCamp.org", "label2": "Filed under", "data2": "Programming, Scripting, Automation, Shell Script, Tech", "site": "@freecodecamp"}}}