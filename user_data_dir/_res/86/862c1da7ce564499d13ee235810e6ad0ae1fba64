{"title": "Skeleton Loader Example \u2013 How to Build a Skeleton Screen with CSS for Better UX", "byline": "Israel Mitolu", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>Skeleton Loader Example \u2013 How to Build a Skeleton Screen with CSS for Better UX</h1>\n<section>\n<section data-test-label=\"post-content\">\n<p>Content loaders, skeleton screens, ghost elements, and content placeholders. These are the names given to the effect we'll be exploring today.</p>\n<p>Many companies, such as Linkedin, Facebook, Youtube and Slack, use this effect in their apps and websites, as you may have noticed.</p>\n<p>As much as we developers want our websites to load as quickly as possible, there are times when a lot of data needs to be rendered on the page, so Skeleton screens are a great option.</p>\n<p>In this article, we'll cover:</p>\n<ul>\n<li><a href=\"#whatisaskeletonscreen\">What Skeleton Screens are</a></li>\n<li><a href=\"#differenttypesofskeletonscreens\">Different types of Skeleton screens</a></li>\n<li><a href=\"#whyuseskeletonscreens\">Why use Skeleton Screens</a></li>\n<li><a href=\"#whentousethem\">When to use them</a></li>\n<li><a href=\"#thingstokeepinmind\">Things to keep in mind</a></li>\n<li><a href=\"#buildingadailydevskeletonloadingui\">Building A Daily Dev Skeleton Loading UI</a>\n<ul>\n<li><a href=\"#step1setuptheproject\">Set up the project</a></li>\n<li><a href=\"#step2designtheskeletonelements\">Design the Skeleton elements</a></li>\n<li><a href=\"#step3clonethecardtemplate\">Clone the card template</a></li>\n<li><a href=\"#step4createjsonfile\">Create JSON file</a></li>\n<li><a href=\"#step5populatehtmlelementswithappropriatecontent\">Populate HTML elements</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"prerequisites\">Prerequisites</h2>\n<p>This article assumes that you have:</p>\n<ul>\n<li>Knowledge of HTML and CSS (SASS)</li>\n<li>Knowledge of JavaScript (ES6)</li>\n</ul>\n<p>We will use HTML and SASS for this project. If you would like to get started with SASS, check out this <a href=\"https://freecodecamp.org/news/beginners-guide-to-sass\">Beginner's Guide.</a></p>\n<h2 id=\"whatisaskeletonscreen\">What is a Skeleton Screen?</h2>\n<p>A skeleton screen is an animated placeholder that simulates the layout of a website while data is being loaded.</p>\n<p>They let the user know that some content is loading and, more importantly, provide an indication of what is loading, whether it's an image, text, card, and so on.</p>\n<p>This gives the user the impression that the website is faster because they already know what type of content is loading before it appears. This is referred to as <strong>perceived performance</strong>.</p>\n<p>Here are some examples of skeleton screens from Facebook and LinkedIn:</p>\n<!--kg-card-end: markdown--><figure><img alt=\"1-2\" height=\"335\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2022/04/1-2.png\" srcset=\"https://www.freecodecamp.org/news/content/images/size/w600/2022/04/1-2.png 600w, https://www.freecodecamp.org/news/content/images/2022/04/1-2.png 700w\" width=\"700\"/><figcaption>LinkedIn home feed loading state</figcaption></figure><figure><img alt=\"2-2\" height=\"864\" loading=\"lazy\" sizes=\"(min-width: 1200px) 1200px\" src=\"https://www.freecodecamp.org/news/content/images/2022/04/2-2.png\" srcset=\"https://www.freecodecamp.org/news/content/images/size/w600/2022/04/2-2.png 600w, https://www.freecodecamp.org/news/content/images/size/w1000/2022/04/2-2.png 1000w, https://www.freecodecamp.org/news/content/images/2022/04/2-2.png 1536w\" width=\"1536\"/><figcaption>Facebook home feed loading state</figcaption></figure><h2 id=\"different-types-of-skeleton-screens\">Different types of Skeleton Screens</h2><p>There are 2 main types of skeleton screens:</p><ul><li>Content Placeholders</li><li>Color Placeholders</li></ul><p>Content Placeholders are typically light grey boxes and circles that simulate the appearance of the page, as shown in the images above for Facebook and LinkedIn.</p><p>Color Placeholders are more difficult to create because they simulate not only the UI layout but also the dominant color. It is most commonly found on image-focused websites such as Pinterest and Unsplash.</p><figure><img alt=\"9\" height=\"612\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2022/04/9.gif\" width=\"1280\"/><figcaption>Color Placeholder example from Pinterest</figcaption></figure><!--kg-card-begin: markdown--><h2 id=\"whyuseskeletonscreens\">Why Use Skeleton Screens?</h2>\n<ul>\n<li>They appear to be faster and are more user friendly. Improved perceived performance provides both good UX and helps in increasing conversion rate.</li>\n<li>The issue with spinners/loaders is that we have no idea what is loading or how long it will take.</li>\n<li>The use of spinners/loaders creates a period of uncertainty for the user since the load time is unknown.</li>\n<li>Skeleton screens draw the user's attention to progress rather than waiting time.</li>\n<li>It creates an illusion of speed and short load time</li>\n</ul>\n<h2 id=\"whentousethem\">When to use them</h2>\n<ul>\n<li>Use to notify the user that something is loading when more than one element is loading at the same time.</li>\n<li>Use when loading data takes more than 3 seconds.</li>\n<li>Use on websites with a lot of traffic.</li>\n<li>Use for a background or long-running process.</li>\n</ul>\n<h2 id=\"thingstokeepinmind\">Things to keep in mind</h2>\n<p>While implementing skeleton screens, we should keep in mind the goal we are trying achieve with the website or app, and prioritize loading the content.</p>\n<p>Use of skeleton loading screens is no excuse to skip actual performance optimization, and if you can cache meaningful content and display that, that'll be good.</p>\n<h2 id=\"buildingadailydevskeletonloadingui\">Building A Daily Dev Skeleton Loading UI</h2>\n<p>In this section, we will dive into the implementation of the skeleton loading screen following a step-by-step process so it's easier to understand.</p>\n<p>We'll build one like daily.dev's feed section.</p>\n<h3 id=\"step1setuptheproject\">Step 1: Set up the project</h3>\n<p>First, to code along with me, clone or download the starter code for the layout <a href=\"https://github.com/israelmitolu/Skeleton-Loading-using-CSS/tree/master/starter\">here</a>. You can download the files by using <a href=\"https://minhaskamal.github.io/DownGit/#/home\">DownGit</a>.</p>\n<p>The code contains the card layout, so we will continue from here in the next steps.</p>\n<p>To begin, start the development server in the IDE and open up your browser.</p>\n<!--kg-card-end: markdown--><figure><img alt=\"screencapture-codepen-io-israelmitolu-full-wvpOaQd-2022-04-21-17_16_47\" height=\"864\" loading=\"lazy\" sizes=\"(min-width: 1200px) 1200px\" src=\"https://www.freecodecamp.org/news/content/images/2022/04/screencapture-codepen-io-israelmitolu-full-wvpOaQd-2022-04-21-17_16_47.png\" srcset=\"https://www.freecodecamp.org/news/content/images/size/w600/2022/04/screencapture-codepen-io-israelmitolu-full-wvpOaQd-2022-04-21-17_16_47.png 600w, https://www.freecodecamp.org/news/content/images/size/w1000/2022/04/screencapture-codepen-io-israelmitolu-full-wvpOaQd-2022-04-21-17_16_47.png 1000w, https://www.freecodecamp.org/news/content/images/2022/04/screencapture-codepen-io-israelmitolu-full-wvpOaQd-2022-04-21-17_16_47.png 1600w\" width=\"1600\"/><figcaption>Starter Card Layout</figcaption></figure><!--kg-card-begin: markdown--><h3 id=\"step2designtheskeletonelements\">Step 2: Design the Skeleton elements</h3>\n<p>There are 5 elements that we want to build for the skeleton loading: the logo image, title, details, cover image and footer section.</p>\n<!--kg-card-end: markdown--><figure><img alt=\"4-3\" height=\"720\" loading=\"lazy\" sizes=\"(min-width: 720px) 720px\" src=\"https://www.freecodecamp.org/news/content/images/2022/04/4-3.png\" srcset=\"https://www.freecodecamp.org/news/content/images/size/w600/2022/04/4-3.png 600w, https://www.freecodecamp.org/news/content/images/2022/04/4-3.png 960w\" width=\"960\"/><figcaption>Daily Dev's Skeleton Elements</figcaption></figure><!--kg-card-begin: markdown--><p>Now, we will add <code>skeleton</code> classes to the locations of the above elements.</p>\n<p>For the logo,</p>\n<pre tabindex=\"0\"><code>&lt;img class=\"card__header header__img skeleton\" /&gt;\n</code></pre>\n<p>For the title, there will be 2 divs to represent the two lines that we have in the picture above.</p>\n<pre tabindex=\"0\"><code>&lt;div class=\"skeleton skeleton-text\"&gt;&lt;/div&gt;\n&lt;div class=\"skeleton skeleton-text\"&gt;&lt;/div&gt;\n</code></pre>\n<p>For the details, add the following code inside the div of class <code>body__text</code>:</p>\n<pre tabindex=\"0\"><code>&lt;div class=\"skeleton skeleton-text skeleton-text__body\"&gt;&lt;/div&gt;\n</code></pre>\n<p>Inside the <code>body__img</code> div, add the following code:</p>\n<pre tabindex=\"0\"><code>&lt;img class=\"skeleton\" alt=\"\" id=\"cover-img\" /&gt;\n</code></pre>\n<p>For the footer, add this code:</p>\n<pre tabindex=\"0\"><code>&lt;div class=\"skeleton skeleton-text skeleton-footer\"&gt;&lt;/div&gt;\n</code></pre>\n<p>Now, the complete HTML code for the card:</p>\n<pre tabindex=\"0\"><code>&lt;a class=\"card\" id=\"card-link\" target=\"_blank\"&gt;\n  &lt;div class=\"card__header\"&gt;\n    &lt;div&gt;\n      &lt;img class=\"card__header header__img skeleton\" id=\"logo-img\" alt=\"\" /&gt;\n    &lt;/div&gt;\n    &lt;h3 class=\"card__header header__title\" id=\"card-title\"&gt;\n      &lt;div class=\"skeleton skeleton-text\"&gt;&lt;/div&gt;\n      &lt;div class=\"skeleton skeleton-text\"&gt;&lt;/div&gt;\n    &lt;/h3&gt;\n  &lt;/div&gt;\n\n  &lt;div class=\"card__body\"&gt;\n    &lt;div class=\"card__body body__text\" id=\"card-details\"&gt;\n      &lt;div class=\"skeleton skeleton-text skeleton-text__body\"&gt;&lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"card__body body__img\"&gt;\n      &lt;img class=\"skeleton\" alt=\"\" id=\"cover-img\" /&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n\n  &lt;div class=\"card__footer\" id=\"card-footer\"&gt;\n    &lt;div class=\"skeleton skeleton-text skeleton-footer\"&gt;&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/a&gt;\n</code></pre>\n<p>Now, let's add some styling to make the skeleton components:</p>\n<pre tabindex=\"0\"><code>.skeleton {\n  animation: skeleton-loading 1s linear infinite alternate;\n}\n\n@keyframes skeleton-loading {\n  0% {\n    background-color: hsl(200, 20%, 80%);\n  }\n  100% {\n    background-color: hsl(200, 20%, 95%);\n  }\n}\n\n.skeleton-text {\n  width: 100%;\n  height: 0.7rem;\n  margin-bottom: 0.5rem;\n  border-radius: 0.25rem;\n}\n\n.skeleton-text__body {\n  width: 75%;\n}\n\n.skeleton-footer {\n  width: 30%;\n}\n</code></pre>\n<p>This is the resulting layout:</p>\n<!--kg-card-end: markdown--><figure><img alt=\"5\" height=\"608\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2022/04/5.gif\" width=\"1344\"/><figcaption>Card component loading</figcaption></figure><!--kg-card-begin: markdown--><h3 id=\"step3clonethecardtemplate\">Step 3: Clone the card template</h3>\n<p>Insert a <code>template</code> tag between the <code>container</code> and the <code>card</code> element in the <code>index.html</code> file.</p>\n<p>In the image above there's a <code>template</code> tag that I commented out, and yes, its a <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template\">valid HTML element</a> ;). It is used to declare fragments of HTML that can be cloned and inserted in the document by script.</p>\n<pre tabindex=\"0\"><code>&lt;template id=\"card-template\"&gt;\n</code></pre>\n<p>As a result, make sure to add the closing tag <code>&lt;/template&gt;</code> after the closing tag of the <code>card</code> div.</p>\n<p>Now let's look at the JavasScript code that we'll use to clone the card template.</p>\n<p>Create a <code>script</code> tag just before the end of the <code>body</code> tag, and add the following code:</p>\n<pre tabindex=\"0\"><code>const container = document.querySelector(\".container\");\nconst cardTemplate = document.getElementById(\"card-template\");\nfor (let i = 0; i &lt; 10; i++) {\n  container.append(cardTemplate.content.cloneNode(true));\n}\n</code></pre>\n<p>The code above grabs the page container and the card template, and then creates 9 clones/copies of the card (making 10 in total). Then it appends/inserts the cards into the container.</p>\n<!--kg-card-end: markdown--><figure><img alt=\"6\" height=\"608\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2022/04/6.gif\" width=\"1344\"/><figcaption>Cloned card skeleton UI</figcaption></figure><!--kg-card-begin: markdown--><h3 id=\"step4createjsonfile\">Step 4: Create JSON file</h3>\n<p>We need some data before we can add content to the page. Normally, you would need to get data with an external website, but we'll be using one that I've set up specifically for this project.</p>\n<p>To begin, create a file called <code>data.json</code> in the project folder.</p>\n<p>Add the following code to the JSON file.</p>\n<pre tabindex=\"0\"><code>[\n  {\n    \"id\": 1,\n    \"logoImage\": \"https://res.cloudinary.com/daily-now/image/upload/t_logo,f_auto/v1/logos/4a287b2e7cb5499bae863f8e7137cdb4\",\n    \"title\": \"Writing Cleaner CSS Using BEM \",\n    \"details\": \"Mar 12, 2022 \u00b7 4m read time\",\n    \"coverImage\": \"https://res.cloudinary.com/daily-now/image/upload/f_auto,q_auto/v1/posts/dd19e7a56475f39ab1c38167c02c7b58\",\n    \"link\": \"https://israelmitolu.hashnode.dev/writing-cleaner-css-using-bem-methodology\"\n  },\n  {\n    \"id\": 2,\n    \"logoImage\": \"https://daily-now-res.cloudinary.com/image/upload/t_logo,f_auto/v1628412854/logos/freecodecamp\",\n    \"title\": \"The Beginner's Guide to Sass\",\n    \"details\": \"Apr 05, 2022 \u00b7 8m read time\",\n    \"coverImage\": \"https://res.cloudinary.com/daily-now/image/upload/f_auto,q_auto/v1/posts/bec6719be210973098293a32dc732d1e\",\n    \"link\": \"https://www.freecodecamp.org/news/the-beginners-guide-to-sass/\"\n  },\n  {\n    \"id\": 3,\n    \"logoImage\": \"https://res.cloudinary.com/daily-now/image/upload/t_logo,f_auto/v1/logos/devto\",\n    \"title\": \"I made Squid Game with Javascript\",\n    \"details\": \"Oct 25, 2021 \u00b7 3m read time\",\n    \"coverImage\": \"https://res.cloudinary.com/daily-now/image/upload/f_auto,q_auto/v1/posts/1f947033365381cbe322ddf294ad7169\",\n    \"link\": \"https://dev.to/0shuvo0/i-made-squid-game-with-javascript-10j9\"\n  },\n  {\n    \"id\": 4,\n    \"logoImage\": \"https://res.cloudinary.com/daily-now/image/upload/t_logo,f_auto/v1/logos/4a287b2e7cb5499bae863f8e7137cdb4\",\n    \"title\": \"Using Custom Cursors with Javascript for a Better User Experience\",\n    \"details\": \"Feb 12, 2022 \u00b7 9m read time\",\n    \"coverImage\": \"https://res.cloudinary.com/daily-now/image/upload/f_auto,q_auto/v1/posts/3d056b99c95b37cd35ae5cfc6a8b38be\",\n    \"link\": \"https://israelmitolu.hashnode.dev/using-custom-cursors-with-javascript-for-a-better-user-experience\"\n  },\n  {\n    \"id\": 5,\n    \"logoImage\": \"https://daily-now-res.cloudinary.com/image/upload/t_logo,f_auto/v1628412854/logos/freecodecamp\",\n    \"title\": \"React Best Practices - Tips for Writing Better React Code in 2022\",\n    \"details\": \"Feb 03, 2022 \u00b7 31m read time\",\n    \"coverImage\": \"https://res.cloudinary.com/daily-now/image/upload/f_auto,q_auto/v1/posts/5a629fff5583f9ab5f0931d14736b299\",\n    \"link\": \"https://www.freecodecamp.org/news/best-practices-for-react/\"\n  },\n  {\n    \"id\": 6,\n    \"logoImage\": \"https://res.cloudinary.com/daily-now/image/upload/t_logo,f_auto/v1/logos/tnw\",\n    \"title\": \"You suck at Googling: 5 tips to improve your search skills\",\n    \"details\": \"Mar 31, 2022 \u00b7 4m read time\",\n    \"coverImage\": \"https://res.cloudinary.com/daily-now/image/upload/f_auto,q_auto/v1/posts/e318150ae67c2083ff3585a96f366f7b\",\n    \"link\": \"https://thenextweb.com/news/5-tips-to-improve-your-google-search-skills\"\n  },\n  {\n    \"id\": 7,\n    \"logoImage\": \"https://res.cloudinary.com/daily-now/image/upload/t_logo,f_auto/v1/logos/logrocket\",\n    \"title\": \"A better way of solving prop drilling in React apps\",\n    \"details\": \"Jan 14, 2022 \u00b7 13m read time\",\n    \"coverImage\": \"https://res.cloudinary.com/daily-now/image/upload/f_auto,q_auto/v1/posts/6fe4c4060bca638b419d8b2c63d8eaf7\",\n    \"link\": \"https://blog.logrocket.com/solving-prop-drilling-react-apps/\"\n  },\n  {\n    \"id\": 8,\n    \"logoImage\": \"https://res.cloudinary.com/daily-now/image/upload/t_logo,f_auto/v1/logos/dz\",\n    \"title\": \"Golang and Event-Driven Architecture\",\n    \"details\": \"Apr 18, 2022 \u00b7 6m read time\",\n    \"coverImage\": \"https://res.cloudinary.com/daily-now/image/upload/f_auto,q_auto/v1/posts/d06eddd82c62288df6e2600bcda61579\",\n    \"link\": \"https://dzone.com/articles/golang-and-event-driven-architecture\"\n  },\n  {\n    \"id\": 9,\n    \"logoImage\": \"https://res.cloudinary.com/daily-now/image/upload/t_logo,f_auto/v1/logos/4a287b2e7cb5499bae863f8e7137cdb4\",\n    \"title\": \"Introduction to Git In 16 Minutes\",\n    \"details\": \"Mar 18, 2021 \u00b7 8m read time\",\n    \"coverImage\": \"https://res.cloudinary.com/daily-now/image/upload/f_auto,q_auto/v1/posts/3c02111a8f242f607551500432e17a78\",\n    \"link\": \"https://vickyikechukwu.hashnode.dev/introduction-to-git-in-16-minutes\"\n  },\n  {\n    \"id\": 10,\n    \"logoImage\": \"https://res.cloudinary.com/daily-now/image/upload/t_logo,f_auto/v1/logos/4a287b2e7cb5499bae863f8e7137cdb4\",\n    \"title\": \"How to Create a Sleek Preloader Animation Using GSAP Timeline\",\n    \"details\": \"Jan 25, 2022 \u00b7 7m read time\",\n    \"coverImage\": \"https://res.cloudinary.com/daily-now/image/upload/f_auto,q_auto/v1/posts/e238c35cb9d41dd9a5475602aef00119\",\n    \"link\": \"https://israelmitolu.hashnode.dev/how-to-create-a-sleek-preloader-animation-using-gsap-timeline\"\n  }\n]\n\n</code></pre>\n<p>To replicate Daily Dev's feed section, we have created some data that has an array of objects with properties such as id, logo image, title, details and cover image.</p>\n<h3 id=\"step5populatehtmlelementswithappropriatecontent\">Step 5: Populate HTML Elements with appropriate content</h3>\n<p>Add the following code to the script tag that houses your JavaScript:</p>\n<pre tabindex=\"0\"><code>fetch(\"data.json\")\n  .then((response) =&gt; response.json())\n  .then((posts) =&gt; {\n    container.innerHTML = \"\";\n    posts.forEach((post) =&gt; {\n      const div = cardTemplate.content.cloneNode(true);\n      div.getElementById(\"card-link\").href = post.link;\n      div.getElementById(\"logo-img\").src = post.logoImage;\n      div.getElementById(\"card-title\").textContent = post.title;\n      div.getElementById(\"card-details\").textContent = post.details;\n      div.getElementById(\"cover-img\").src = post.coverImage;\n      div.getElementById(\n        \"card-footer\"\n      ).innerHTML = ` &lt;ion-icon name=\"arrow-up\"&gt;&lt;/ion-icon&gt;\n          &lt;ion-icon name=\"chatbox-ellipses\"&gt;&lt;/ion-icon&gt;\n          &lt;ion-icon name=\"bookmark\"&gt;&lt;/ion-icon&gt;`;\n      container.append(div);\n    });\n  });\n</code></pre>\n<p>The code above is what we will use to add content to the cards once they are done loading.</p>\n<p>Now, let me explain the code bit by bit:</p>\n<pre tabindex=\"0\"><code>fetch(\"data.json\")\n  .then((response) =&gt; response.json())\n</code></pre>\n<p>Here, we have a basic fetch request, where we set the path to the resource. In this case, the <code>data.json</code> file. If it were an external API, you would use the endpoint URL as the argument:</p>\n<p>The <code>fetch()</code> method does not directly return the JSON response body but instead returns a promise that resolves with a Response object.</p>\n<p>To learn more, check out the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\">MDN docs</a>.</p>\n<pre tabindex=\"0\"><code>.then((posts) =&gt; {\n    container.innerHTML = \"\";\n    posts.forEach((post) =&gt; {\n      const div = cardTemplate.content.cloneNode(true);\n      div.getElementById(\"logo-img\").src = post.logoImage;\n      div.getElementById(\"card-title\").textContent = post.title;\n      div.getElementById(\"card-details\").textContent = post.details;\n      div.getElementById(\"cover-img\").src = post.coverImage;\n      div.getElementById(\n        \"card-footer\"\n      ).innerHTML = `&lt;ion-icon name=\"arrow-up\"&gt;&lt;/ion-icon&gt;\n          &lt;ion-icon name=\"chatbox-ellipses\"&gt;&lt;/ion-icon&gt;\n          &lt;ion-icon name=\"bookmark\"&gt;&lt;/ion-icon&gt;`;\n      container.append(div);\n    });\n  });\n\n</code></pre>\n<p>Here, we define what should happen after fetching the data.</p>\n<p>The code first clears the page, and then runs a <code>forEach()</code> method which extracts the properties from the JSON file, and then inputs it into the card elements (logo image, card title,...) using <code>.textContent</code> property.</p>\n<p>Finally, for the footer, we used <code>.innerHTML</code> to insert the icons as HTML content.</p>\n<p>If you added everything correctly, there shouldn't be any errors, and this is our fully functional skeleton loading UI.</p>\n<!--kg-card-end: markdown--><figure><img alt=\"7-1\" height=\"662\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2022/04/7-1.gif\" width=\"1296\"/><figcaption>Our finished Daily Dev skeleton UI</figcaption></figure><!--kg-card-begin: markdown--><p>Check out the <a href=\"https://daily-dev-ui.netlify.app/\">live demo</a> and the <a href=\"https://github.com/israelmitolu/Skeleton-Loading-using-CSS\">source code repository</a> on Github.</p>\n<!--kg-card-end: markdown--><!--kg-card-begin: markdown--><h3 id=\"networkthrottlinginchromedevtools\">Network Throttling in Chrome DevTools</h3>\n<p>It's important to note that we didn't set a timeout because this skeleton screen is dependent on the user's network speed.</p>\n<p>If you want to simulate it at different network speeds, go into the network tab in your browser Devtools.</p>\n<p>Here's how to do it in Chrome v100:</p>\n<!--kg-card-end: markdown--><figure><img alt=\"8\" height=\"756\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2022/04/8.gif\" width=\"1342\"/><figcaption>Throttle Network in Chrome DevTools</figcaption></figure><!--kg-card-begin: markdown--><ol>\n<li>Open DevTools (Ctrl+Shift+i).</li>\n<li>Navigate to the \"Network\" tab.</li>\n<li>Select the type of connection you want</li>\n<li>Reload the page to see assets downloading at the specified connection speed.</li>\n</ol>\n<p>If the default options don't suit you, you can create a custom Network Throttling Profile by selecting the option at the very top of the dropdown menu.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>You made it all the way to the end! You've learned about skeleton loading, and how it contributes to user experience by creating the illusion of speed when loading data, and you've implemented your own.</p>\n<p>I hope you found this tutorial useful and that it serves as a good starting point for creating various skeleton loading screens.</p>\n<p>If you found this article insightful, do share it with your friends and network. Also, feel free to connect with me on <a href=\"https://twitter.com/israelmitolu\">Twitter</a> and my <a href=\"https://israelmitolu.hashnode.dev/\">blog</a> where I share resources and articles to make you a better dev.</p>\n<p>Thanks for reading, and happy coding!</p>\n<p>Before you go, here are some skeleton loading packages for <a href=\"https://blog.openreplay.com/3-ways-to-implement-skeleton-components-in-react#heading-what-is-a-skeleton-component\">React</a>, <a href=\"https://openbase.com/categories/js/best-angular-loading-skeleton-libraries\">Angular</a> and <a href=\"https://openbase.com/categories/js/best-vue-loading-skeleton-libraries\">Vue</a>.</p>\n<!--kg-card-end: markdown-->\n</section>\n<hr/>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nContent loaders, skeleton screens, ghost elements, and content placeholders. These are the names given to the effect we'll be exploring today.\nMany companies, such as Linkedin, Facebook, Youtube and Slack, use this effect in their apps and websites, as you may have noticed.\nAs much as we developers want our websites to load as quickly as possible, there are times when a lot of data needs to be rendered on the page, so Skeleton screens are a great option.\nIn this article, we'll cover:\n\nWhat Skeleton Screens are\nDifferent types of Skeleton screens\nWhy use Skeleton Screens\nWhen to use them\nThings to keep in mind\nBuilding A Daily Dev Skeleton Loading UI\n\nSet up the project\nDesign the Skeleton elements\nClone the card template\nCreate JSON file\nPopulate HTML elements\n\n\n\nPrerequisites\nThis article assumes that you have:\n\nKnowledge of HTML and CSS (SASS)\nKnowledge of JavaScript (ES6)\n\nWe will use HTML and SASS for this project. If you would like to get started with SASS, check out this Beginner's Guide.\nWhat is a Skeleton Screen?\nA skeleton screen is an animated placeholder that simulates the layout of a website while data is being loaded.\nThey let the user know that some content is loading and, more importantly, provide an indication of what is loading, whether it's an image, text, card, and so on.\nThis gives the user the impression that the website is faster because they already know what type of content is loading before it appears. This is referred to as perceived performance.\nHere are some examples of skeleton screens from Facebook and LinkedIn:\nLinkedIn home feed loading stateFacebook home feed loading stateDifferent types of Skeleton ScreensThere are 2 main types of skeleton screens:Content PlaceholdersColor PlaceholdersContent Placeholders are typically light grey boxes and circles that simulate the appearance of the page, as shown in the images above for Facebook and LinkedIn.Color Placeholders are more difficult to create because they simulate not only the UI layout but also the dominant color. It is most commonly found on image-focused websites such as Pinterest and Unsplash.Color Placeholder example from PinterestWhy Use Skeleton Screens?\n\nThey appear to be faster and are more user friendly. Improved perceived performance provides both good UX and helps in increasing conversion rate.\nThe issue with spinners/loaders is that we have no idea what is loading or how long it will take.\nThe use of spinners/loaders creates a period of uncertainty for the user since the load time is unknown.\nSkeleton screens draw the user's attention to progress rather than waiting time.\nIt creates an illusion of speed and short load time\n\nWhen to use them\n\nUse to notify the user that something is loading when more than one element is loading at the same time.\nUse when loading data takes more than 3 seconds.\nUse on websites with a lot of traffic.\nUse for a background or long-running process.\n\nThings to keep in mind\nWhile implementing skeleton screens, we should keep in mind the goal we are trying achieve with the website or app, and prioritize loading the content.\nUse of skeleton loading screens is no excuse to skip actual performance optimization, and if you can cache meaningful content and display that, that'll be good.\nBuilding A Daily Dev Skeleton Loading UI\nIn this section, we will dive into the implementation of the skeleton loading screen following a step-by-step process so it's easier to understand.\nWe'll build one like daily.dev's feed section.\nStep 1: Set up the project\nFirst, to code along with me, clone or download the starter code for the layout here. You can download the files by using DownGit.\nThe code contains the card layout, so we will continue from here in the next steps.\nTo begin, start the development server in the IDE and open up your browser.\nStarter Card LayoutStep 2: Design the Skeleton elements\nThere are 5 elements that we want to build for the skeleton loading: the logo image, title, details, cover image and footer section.\nDaily Dev's Skeleton ElementsNow, we will add skeleton classes to the locations of the above elements.\nFor the logo,\n<img class=\"card__header header__img skeleton\" />\n\nFor the title, there will be 2 divs to represent the two lines that we have in the picture above.\n<div class=\"skeleton skeleton-text\"></div>\n<div class=\"skeleton skeleton-text\"></div>\n\nFor the details, add the following code inside the div of class body__text:\n<div class=\"skeleton skeleton-text skeleton-text__body\"></div>\n\nInside the body__img div, add the following code:\n<img class=\"skeleton\" alt=\"\" id=\"cover-img\" />\n\nFor the footer, add this code:\n<div class=\"skeleton skeleton-text skeleton-footer\"></div>\n\nNow, the complete HTML code for the card:\n<a class=\"card\" id=\"card-link\" target=\"_blank\">\n  <div class=\"card__header\">\n    <div>\n      <img class=\"card__header header__img skeleton\" id=\"logo-img\" alt=\"\" />\n    </div>\n    <h3 class=\"card__header header__title\" id=\"card-title\">\n      <div class=\"skeleton skeleton-text\"></div>\n      <div class=\"skeleton skeleton-text\"></div>\n    </h3>\n  </div>\n\n  <div class=\"card__body\">\n    <div class=\"card__body body__text\" id=\"card-details\">\n      <div class=\"skeleton skeleton-text skeleton-text__body\"></div>\n    </div>\n\n    <div class=\"card__body body__img\">\n      <img class=\"skeleton\" alt=\"\" id=\"cover-img\" />\n    </div>\n  </div>\n\n  <div class=\"card__footer\" id=\"card-footer\">\n    <div class=\"skeleton skeleton-text skeleton-footer\"></div>\n  </div>\n</a>\n\nNow, let's add some styling to make the skeleton components:\n.skeleton {\n  animation: skeleton-loading 1s linear infinite alternate;\n}\n\n@keyframes skeleton-loading {\n  0% {\n    background-color: hsl(200, 20%, 80%);\n  }\n  100% {\n    background-color: hsl(200, 20%, 95%);\n  }\n}\n\n.skeleton-text {\n  width: 100%;\n  height: 0.7rem;\n  margin-bottom: 0.5rem;\n  border-radius: 0.25rem;\n}\n\n.skeleton-text__body {\n  width: 75%;\n}\n\n.skeleton-footer {\n  width: 30%;\n}\n\nThis is the resulting layout:\nCard component loadingStep 3: Clone the card template\nInsert a template tag between the container and the card element in the index.html file.\nIn the image above there's a template tag that I commented out, and yes, its a valid HTML element ;). It is used to declare fragments of HTML that can be cloned and inserted in the document by script.\n<template id=\"card-template\">\n\nAs a result, make sure to add the closing tag </template> after the closing tag of the card div.\nNow let's look at the JavasScript code that we'll use to clone the card template.\nCreate a script tag just before the end of the body tag, and add the following code:\nconst container = document.querySelector(\".container\");\nconst cardTemplate = document.getElementById(\"card-template\");\nfor (let i = 0; i < 10; i++) {\n  container.append(cardTemplate.content.cloneNode(true));\n}\n\nThe code above grabs the page container and the card template, and then creates 9 clones/copies of the card (making 10 in total). Then it appends/inserts the cards into the container.\nCloned card skeleton UIStep 4: Create JSON file\nWe need some data before we can add content to the page. Normally, you would need to get data with an external website, but we'll be using one that I've set up specifically for this project.\nTo begin, create a file called data.json in the project folder.\nAdd the following code to the JSON file.\n[\n  {\n    \"id\": 1,\n    \"logoImage\": \"https://res.cloudinary.com/daily-now/image/upload/t_logo,f_auto/v1/logos/4a287b2e7cb5499bae863f8e7137cdb4\",\n    \"title\": \"Writing Cleaner CSS Using BEM \",\n    \"details\": \"Mar 12, 2022 \u00b7 4m read time\",\n    \"coverImage\": \"https://res.cloudinary.com/daily-now/image/upload/f_auto,q_auto/v1/posts/dd19e7a56475f39ab1c38167c02c7b58\",\n    \"link\": \"https://israelmitolu.hashnode.dev/writing-cleaner-css-using-bem-methodology\"\n  },\n  {\n    \"id\": 2,\n    \"logoImage\": \"https://daily-now-res.cloudinary.com/image/upload/t_logo,f_auto/v1628412854/logos/freecodecamp\",\n    \"title\": \"The Beginner's Guide to Sass\",\n    \"details\": \"Apr 05, 2022 \u00b7 8m read time\",\n    \"coverImage\": \"https://res.cloudinary.com/daily-now/image/upload/f_auto,q_auto/v1/posts/bec6719be210973098293a32dc732d1e\",\n    \"link\": \"https://www.freecodecamp.org/news/the-beginners-guide-to-sass/\"\n  },\n  {\n    \"id\": 3,\n    \"logoImage\": \"https://res.cloudinary.com/daily-now/image/upload/t_logo,f_auto/v1/logos/devto\",\n    \"title\": \"I made Squid Game with Javascript\",\n    \"details\": \"Oct 25, 2021 \u00b7 3m read time\",\n    \"coverImage\": \"https://res.cloudinary.com/daily-now/image/upload/f_auto,q_auto/v1/posts/1f947033365381cbe322ddf294ad7169\",\n    \"link\": \"https://dev.to/0shuvo0/i-made-squid-game-with-javascript-10j9\"\n  },\n  {\n    \"id\": 4,\n    \"logoImage\": \"https://res.cloudinary.com/daily-now/image/upload/t_logo,f_auto/v1/logos/4a287b2e7cb5499bae863f8e7137cdb4\",\n    \"title\": \"Using Custom Cursors with Javascript for a Better User Experience\",\n    \"details\": \"Feb 12, 2022 \u00b7 9m read time\",\n    \"coverImage\": \"https://res.cloudinary.com/daily-now/image/upload/f_auto,q_auto/v1/posts/3d056b99c95b37cd35ae5cfc6a8b38be\",\n    \"link\": \"https://israelmitolu.hashnode.dev/using-custom-cursors-with-javascript-for-a-better-user-experience\"\n  },\n  {\n    \"id\": 5,\n    \"logoImage\": \"https://daily-now-res.cloudinary.com/image/upload/t_logo,f_auto/v1628412854/logos/freecodecamp\",\n    \"title\": \"React Best Practices - Tips for Writing Better React Code in 2022\",\n    \"details\": \"Feb 03, 2022 \u00b7 31m read time\",\n    \"coverImage\": \"https://res.cloudinary.com/daily-now/image/upload/f_auto,q_auto/v1/posts/5a629fff5583f9ab5f0931d14736b299\",\n    \"link\": \"https://www.freecodecamp.org/news/best-practices-for-react/\"\n  },\n  {\n    \"id\": 6,\n    \"logoImage\": \"https://res.cloudinary.com/daily-now/image/upload/t_logo,f_auto/v1/logos/tnw\",\n    \"title\": \"You suck at Googling: 5 tips to improve your search skills\",\n    \"details\": \"Mar 31, 2022 \u00b7 4m read time\",\n    \"coverImage\": \"https://res.cloudinary.com/daily-now/image/upload/f_auto,q_auto/v1/posts/e318150ae67c2083ff3585a96f366f7b\",\n    \"link\": \"https://thenextweb.com/news/5-tips-to-improve-your-google-search-skills\"\n  },\n  {\n    \"id\": 7,\n    \"logoImage\": \"https://res.cloudinary.com/daily-now/image/upload/t_logo,f_auto/v1/logos/logrocket\",\n    \"title\": \"A better way of solving prop drilling in React apps\",\n    \"details\": \"Jan 14, 2022 \u00b7 13m read time\",\n    \"coverImage\": \"https://res.cloudinary.com/daily-now/image/upload/f_auto,q_auto/v1/posts/6fe4c4060bca638b419d8b2c63d8eaf7\",\n    \"link\": \"https://blog.logrocket.com/solving-prop-drilling-react-apps/\"\n  },\n  {\n    \"id\": 8,\n    \"logoImage\": \"https://res.cloudinary.com/daily-now/image/upload/t_logo,f_auto/v1/logos/dz\",\n    \"title\": \"Golang and Event-Driven Architecture\",\n    \"details\": \"Apr 18, 2022 \u00b7 6m read time\",\n    \"coverImage\": \"https://res.cloudinary.com/daily-now/image/upload/f_auto,q_auto/v1/posts/d06eddd82c62288df6e2600bcda61579\",\n    \"link\": \"https://dzone.com/articles/golang-and-event-driven-architecture\"\n  },\n  {\n    \"id\": 9,\n    \"logoImage\": \"https://res.cloudinary.com/daily-now/image/upload/t_logo,f_auto/v1/logos/4a287b2e7cb5499bae863f8e7137cdb4\",\n    \"title\": \"Introduction to Git In 16 Minutes\",\n    \"details\": \"Mar 18, 2021 \u00b7 8m read time\",\n    \"coverImage\": \"https://res.cloudinary.com/daily-now/image/upload/f_auto,q_auto/v1/posts/3c02111a8f242f607551500432e17a78\",\n    \"link\": \"https://vickyikechukwu.hashnode.dev/introduction-to-git-in-16-minutes\"\n  },\n  {\n    \"id\": 10,\n    \"logoImage\": \"https://res.cloudinary.com/daily-now/image/upload/t_logo,f_auto/v1/logos/4a287b2e7cb5499bae863f8e7137cdb4\",\n    \"title\": \"How to Create a Sleek Preloader Animation Using GSAP Timeline\",\n    \"details\": \"Jan 25, 2022 \u00b7 7m read time\",\n    \"coverImage\": \"https://res.cloudinary.com/daily-now/image/upload/f_auto,q_auto/v1/posts/e238c35cb9d41dd9a5475602aef00119\",\n    \"link\": \"https://israelmitolu.hashnode.dev/how-to-create-a-sleek-preloader-animation-using-gsap-timeline\"\n  }\n]\n\n\nTo replicate Daily Dev's feed section, we have created some data that has an array of objects with properties such as id, logo image, title, details and cover image.\nStep 5: Populate HTML Elements with appropriate content\nAdd the following code to the script tag that houses your JavaScript:\nfetch(\"data.json\")\n  .then((response) => response.json())\n  .then((posts) => {\n    container.innerHTML = \"\";\n    posts.forEach((post) => {\n      const div = cardTemplate.content.cloneNode(true);\n      div.getElementById(\"card-link\").href = post.link;\n      div.getElementById(\"logo-img\").src = post.logoImage;\n      div.getElementById(\"card-title\").textContent = post.title;\n      div.getElementById(\"card-details\").textContent = post.details;\n      div.getElementById(\"cover-img\").src = post.coverImage;\n      div.getElementById(\n        \"card-footer\"\n      ).innerHTML = ` <ion-icon name=\"arrow-up\"></ion-icon>\n          <ion-icon name=\"chatbox-ellipses\"></ion-icon>\n          <ion-icon name=\"bookmark\"></ion-icon>`;\n      container.append(div);\n    });\n  });\n\nThe code above is what we will use to add content to the cards once they are done loading.\nNow, let me explain the code bit by bit:\nfetch(\"data.json\")\n  .then((response) => response.json())\n\nHere, we have a basic fetch request, where we set the path to the resource. In this case, the data.json file. If it were an external API, you would use the endpoint URL as the argument:\nThe fetch() method does not directly return the JSON response body but instead returns a promise that resolves with a Response object.\nTo learn more, check out the MDN docs.\n.then((posts) => {\n    container.innerHTML = \"\";\n    posts.forEach((post) => {\n      const div = cardTemplate.content.cloneNode(true);\n      div.getElementById(\"logo-img\").src = post.logoImage;\n      div.getElementById(\"card-title\").textContent = post.title;\n      div.getElementById(\"card-details\").textContent = post.details;\n      div.getElementById(\"cover-img\").src = post.coverImage;\n      div.getElementById(\n        \"card-footer\"\n      ).innerHTML = `<ion-icon name=\"arrow-up\"></ion-icon>\n          <ion-icon name=\"chatbox-ellipses\"></ion-icon>\n          <ion-icon name=\"bookmark\"></ion-icon>`;\n      container.append(div);\n    });\n  });\n\n\nHere, we define what should happen after fetching the data.\nThe code first clears the page, and then runs a forEach() method which extracts the properties from the JSON file, and then inputs it into the card elements (logo image, card title,...) using .textContent property.\nFinally, for the footer, we used .innerHTML to insert the icons as HTML content.\nIf you added everything correctly, there shouldn't be any errors, and this is our fully functional skeleton loading UI.\nOur finished Daily Dev skeleton UICheck out the live demo and the source code repository on Github.\nNetwork Throttling in Chrome DevTools\nIt's important to note that we didn't set a timeout because this skeleton screen is dependent on the user's network speed.\nIf you want to simulate it at different network speeds, go into the network tab in your browser Devtools.\nHere's how to do it in Chrome v100:\nThrottle Network in Chrome DevTools\nOpen DevTools (Ctrl+Shift+i).\nNavigate to the \"Network\" tab.\nSelect the type of connection you want\nReload the page to see assets downloading at the specified connection speed.\n\nIf the default options don't suit you, you can create a custom Network Throttling Profile by selecting the option at the very top of the dropdown menu.\nConclusion\nYou made it all the way to the end! You've learned about skeleton loading, and how it contributes to user experience by creating the illusion of speed when loading data, and you've implemented your own.\nI hope you found this tutorial useful and that it serves as a good starting point for creating various skeleton loading screens.\nIf you found this article insightful, do share it with your friends and network. Also, feel free to connect with me on Twitter and my blog where I share resources and articles to make you a better dev.\nThanks for reading, and happy coding!\nBefore you go, here are some skeleton loading packages for React, Angular and Vue.\n\n\n                        \n                    \n                    \n                        \n                        \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 16780, "excerpt": "Content loaders, skeleton screens, ghost elements, and content placeholders.\nThese are the names given to the effect we'll be exploring today.\n\nMany companies, such as Linkedin, Facebook, Youtube and Slack, use this effect\nin their apps and websites, as you may have noticed.\n\nAs much as we developers want our websites to load as quickly as possible, there\nare times when a lot of data needs to be rendered on the page, so Skeleton\nscreens are a great option.\n\nIn this article, we'll cover:\n\n * What", "siteName": "freeCodeCamp.org", "publishedTime": "2022-04-25T13:49:34.000Z", "id": "862c1da7ce564499d13ee235810e6ad0ae1fba64", "url": "https://www.freecodecamp.org/news/how-to-build-skeleton-screens-using-css-for-better-user-experience/", "domain": "freecodecamp.org", "date": "2023-12-27T18:05:31.729855", "resultUri": "http://localhost:3000/result/862c1da7ce564499d13ee235810e6ad0ae1fba64", "query": {"url": ["https://www.freecodecamp.org/news/how-to-build-skeleton-screens-using-css-for-better-user-experience/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "Skeleton Loader Example \u2013 How to Build a Skeleton Screen with CSS for Better UX", "description": "Content loaders, skeleton screens, ghost elements, and content placeholders. These are the names given to the effect we'll be exploring today. Many companies, such as Linkedin, Facebook, Youtube and Slack, use this effect in their apps and websites, as you may have noticed. As much as we developers want our", "url": "https://www.freecodecamp.org/news/how-to-build-skeleton-screens-using-css-for-better-user-experience/", "image": "https://www.freecodecamp.org/news/content/images/2022/04/Build-Skeleton-Screens-for-Better-UX.png", "image:width": "1600", "image:height": "840"}, "twitter": {"card": "summary_large_image", "title": "Skeleton Loader Example \u2013 How to Build a Skeleton Screen with CSS for Better UX", "description": "Content loaders, skeleton screens, ghost elements, and content placeholders. These are the names given to the effect we'll be exploring today. Many companies, such as Linkedin, Facebook, Youtube and Slack, use this effect in their apps and websites, as you may have noticed. As much as we developers want our", "url": "https://www.freecodecamp.org/news/how-to-build-skeleton-screens-using-css-for-better-user-experience/", "image": "https://www.freecodecamp.org/news/content/images/2022/04/Build-Skeleton-Screens-for-Better-UX.png", "label1": "Written by", "data1": "Israel Mitolu", "label2": "Filed under", "data2": "User Experience, JavaScript, CSS, Web Development, Programming", "site": "@freecodecamp", "creator": "@israelmitolu"}}}