{"title": "Git Stash Explained: How to Temporarily Store Local Changes in Git", "byline": "freeCodeCamp.org", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>Git Stash Explained: How to Temporarily Store Local Changes in Git</h1>\n<section>\n<section data-test-label=\"post-content\">\n<p>Git has an area called the stash where you can temporarily store a snapshot of your changes without committing them to the repository. It\u2019s separate from the working directory, the staging area, or the repository.</p><p>This functionality is useful when you\u2019ve made changes to a branch that you aren\u2019t ready to commit, but you need to switch to another branch.</p><h3 id=\"stash-changes\">Stash Changes</h3><p>To save your changes in the stash, run the command:</p><pre tabindex=\"0\"><code>git stash save \"optional message for yourself\"</code></pre><p>This saves your changes and reverts the working directory to what it looked like for the latest commit. Stashed changes are available from any branch in that repository.</p><p>Note that changes you want to stash need to be on tracked files. If you created a new file and try to stash your changes, you may get the error <code>No local changes to save</code>.</p><h3 id=\"view-stashed-changes\">View Stashed Changes</h3><p>To see what is in your stash, run the command:</p><pre tabindex=\"0\"><code>git stash list</code></pre><p>This returns a list of your saved snapshots in the format <code>stash@{0}: BRANCH-STASHED-CHANGES-ARE-FOR: MESSAGE</code>. The <code>stash@{0}</code> part is the name of the stash, and the number in the curly braces (<code>{ }</code>) is the index of that stash. If you have multiple change sets stashed, each one will have a different index.</p><p>If you forgot what changes were made in the stash, you can see a summary of them with <code>git stash show NAME-OF-STASH</code>. If you want to see the typical diff-style patch layout (with the +\u2018s and -\u2018s for line-by-line changes), you can include the <code>-p</code> (for patch) option. Here\u2019s an example:</p><pre tabindex=\"0\"><code>git stash show -p stash@{0}\n\n# Example result:\ndiff --git a/PathToFile/fileA b/PathToFile/fileA\nindex 2417dd9..b2c9092 100644\n--- a/PathToFile/fileA\n+++ b/PathToFile/fileA\n@@ -1,4 +1,4 @@\n-What this line looks like on branch\n+What this line looks like with stashed changes</code></pre><h3 id=\"retrieve-stashed-changes\">Retrieve Stashed Changes</h3><p>To retrieve changes out of the stash and apply them to the current branch you\u2019re on, you have two options:</p><ol><li><code>git stash apply STASH-NAME</code> applies the changes and leaves a copy in the stash</li><li><code>git stash pop STASH-NAME</code> applies the changes and removes the files from the stash</li></ol><p>There may be conflicts when you apply changes. You can resolve the conflicts similar to a merge (<a href=\"https://www.freecodecamp.org/news/the-ultimate-guide-to-git-merge-and-git-rebase/\">see <code>git merge</code> for details</a>).</p><h3 id=\"delete-stashed-changes\">Delete Stashed Changes</h3><p>If you want to remove stashed changes without applying them, run the command:</p><pre tabindex=\"0\"><code>git stash drop STASH-NAME</code></pre><p>To clear the entire stash, run the command:</p><pre tabindex=\"0\"><code>git stash clear</code></pre>\n</section>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nGit has an area called the stash where you can temporarily store a snapshot of your changes without committing them to the repository. It\u2019s separate from the working directory, the staging area, or the repository.This functionality is useful when you\u2019ve made changes to a branch that you aren\u2019t ready to commit, but you need to switch to another branch.Stash ChangesTo save your changes in the stash, run the command:git stash save \"optional message for yourself\"This saves your changes and reverts the working directory to what it looked like for the latest commit. Stashed changes are available from any branch in that repository.Note that changes you want to stash need to be on tracked files. If you created a new file and try to stash your changes, you may get the error No local changes to save.View Stashed ChangesTo see what is in your stash, run the command:git stash listThis returns a list of your saved snapshots in the format stash@{0}: BRANCH-STASHED-CHANGES-ARE-FOR: MESSAGE. The stash@{0} part is the name of the stash, and the number in the curly braces ({ }) is the index of that stash. If you have multiple change sets stashed, each one will have a different index.If you forgot what changes were made in the stash, you can see a summary of them with git stash show NAME-OF-STASH. If you want to see the typical diff-style patch layout (with the +\u2018s and -\u2018s for line-by-line changes), you can include the -p (for patch) option. Here\u2019s an example:git stash show -p stash@{0}\n\n# Example result:\ndiff --git a/PathToFile/fileA b/PathToFile/fileA\nindex 2417dd9..b2c9092 100644\n--- a/PathToFile/fileA\n+++ b/PathToFile/fileA\n@@ -1,4 +1,4 @@\n-What this line looks like on branch\n+What this line looks like with stashed changesRetrieve Stashed ChangesTo retrieve changes out of the stash and apply them to the current branch you\u2019re on, you have two options:git stash apply STASH-NAME applies the changes and leaves a copy in the stashgit stash pop STASH-NAME applies the changes and removes the files from the stashThere may be conflicts when you apply changes. You can resolve the conflicts similar to a merge (see git merge for details).Delete Stashed ChangesIf you want to remove stashed changes without applying them, run the command:git stash drop STASH-NAMETo clear the entire stash, run the command:git stash clear\n\n                        \n                    \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 2948, "excerpt": "Git has an area called the stash where you can temporarily store a snapshot of\nyour changes without committing them to the repository. It\u2019s separate from the\nworking directory, the staging area, or the repository.\n\nThis functionality is useful when you\u2019ve made changes to a branch that you\naren\u2019t ready to commit, but you need to switch to another branch.\n\nStash Changes\nTo save your changes in the stash, run the command:\n\ngit stash save \"optional message for yourself\"\n\nThis saves your changes and", "siteName": "freeCodeCamp.org", "publishedTime": "2020-01-27T07:23:00.000Z", "id": "b29a67f963efb0aea3cfcb23ff83f7c7c589ace9", "url": "https://www.freecodecamp.org/news/git-stash-explained/", "domain": "freecodecamp.org", "date": "2023-12-27T18:06:59.122750", "resultUri": "http://localhost:3000/result/b29a67f963efb0aea3cfcb23ff83f7c7c589ace9", "query": {"url": ["https://www.freecodecamp.org/news/git-stash-explained/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "Git Stash Explained: How to Temporarily Store Local Changes in Git", "description": "Git has an area called the stash where you can temporarily store a snapshot of your changes without committing them to the repository. It\u2019s separate from the working directory, the staging area, or the repository. This functionality is useful when you\u2019ve made changes to a branch that you aren\u2019t ready", "url": "https://www.freecodecamp.org/news/git-stash-explained/", "image": "https://cdn-media-2.freecodecamp.org/w1280/5f9c9d6f740569d1a4ca37bf.jpg", "image:width": "1280", "image:height": "888"}, "twitter": {"card": "summary_large_image", "title": "Git Stash Explained: How to Temporarily Store Local Changes in Git", "description": "Git has an area called the stash where you can temporarily store a snapshot of your changes without committing them to the repository. It\u2019s separate from the working directory, the staging area, or the repository. This functionality is useful when you\u2019ve made changes to a branch that you aren\u2019t ready", "url": "https://www.freecodecamp.org/news/git-stash-explained/", "image": "https://cdn-media-2.freecodecamp.org/w1280/5f9c9d6f740569d1a4ca37bf.jpg", "label1": "Written by", "data1": "freeCodeCamp.org", "label2": "Filed under", "data2": "Git, Version Control, Programming", "site": "@freecodecamp"}}}