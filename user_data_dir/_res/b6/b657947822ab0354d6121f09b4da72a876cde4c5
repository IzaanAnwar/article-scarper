{"title": "A zen manifesto for effective code reviews", "byline": "freeCodeCamp.org", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>A zen manifesto for effective code reviews</h1>\n<section>\n<section data-test-label=\"post-content\">\n<p>by Jean-Charles Fabre</p><p>When you are coding, interruptions <strong>really</strong> suck.</p><p>You are in the zone, flying high, killing it. And BAM\u2026 meeting, standup, *insert interruption*\u2026 Great!</p><p>In that context, code reviews can be perceived as another hurdle to productivity.</p><p>And frankly I can relate to that.</p><h4 id=\"code-reviews-are-hard-\">Code reviews are hard.</h4><p>Not only do you need to stop what you are currently doing, you also need to immerse yourself into somebody else\u2019s code. It takes <em>a lot </em>of energy just to switch your focus.</p><h4 id=\"code-reviews-are-time-consuming-\">Code reviews are time consuming.</h4><p>According to <a href=\"https://insights.stackoverflow.com/survey/2019#development-practices\" rel=\"noopener\">Slack Overflow\u2019s 2019 survey</a>, 56.4% of developers spend 4 hours or more per week performing code reviews. And it can represent up to 20% of a developer\u2019s week!</p><h4 id=\"code-reviews-are-frustrating-\">Code reviews are frustrating.</h4><p>As a submitter, it can be frustrating to get your pull request rejected, to wait hours if not days for a review. As a reviewer, code reviews can feel like an obstacle to a good productive day.</p><p>Yes, code reviews can sometimes be hard, time consuming and frustrating.</p><p>But they\u2019re also a good way to <strong>share knowledge, prevent bugs, and reinforce your company\u2019s culture </strong>among other things.</p><p>What follows is a manifesto for submitters and reviewers to bring back peace of mind into code reviews. ?</p><h3 id=\"a-submitter-s-manifesto\">A Submitter\u2019s Manifesto</h3><p>As a submitter, here\u2019s what you can do to increase your chances of getting your pull requests approved in a timely manner.</p><h4 id=\"submit-when-you-re-done-\">Submit when you\u2019re done.</h4><p>It sounds obvious, I know. But the thing is \u2014 most of the time if the machine doesn\u2019t work, it\u2019s not because it\u2019s broken\u2026 it\u2019s because it\u2019s not plugged in!</p><p>Very small details can make a big difference on how your work is perceived. And you don\u2019t want your colleagues to feel they are investing time and effort into reviewing work in progress code.</p><blockquote>Me: \u201cIt was just a missing &lt;/div&gt;!\u201d</blockquote><blockquote>You: \u201cYeah I know, but the whole thing didn\u2019t work and it took me 20 minutes to spot it.\u201d</blockquote><p>So here\u2019s what you can do:</p><ul><li><strong>Self-test your code.</strong> Include WIP in title or label if you\u2019re not done yet.</li><li><strong>Self-review your code.</strong> Use the diff report of your code editor or versioning tool to catch mistakes.</li><li><strong>Make sure the tests of your CI are green </strong>before assigning a reviewer, this will save them time.</li></ul><figure><img alt=\"5O1kil0Dxt4qNqUrwFEx6sfPRoyjWHqdD7df\" height=\"300\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/5O1kil0Dxt4qNqUrwFEx6sfPRoyjWHqdD7df\" width=\"400\"/><figcaption><em>Don\u2019t be this guy, obviously </em>? (G<a href=\"https://giphy.com/\" rel=\"noopener\" target=\"_blank\" title=\"\">iphy)</a> </figcaption></figure><h4 id=\"make-smaller-pull-requests\">Make smaller pull requests</h4><p>I get it, it\u2019s a big, important and complex feature and you might be tempted to submit a long pull request. Yet, most of the time, you are better off submitting smaller pull requests.</p><p>Code reviews take energy. Big code reviews even more. Don\u2019t impose on your team a<strong> developer vs food </strong>challenge every time they review your code.</p><p>Be nice, cut it in smaller chunks. You are also doing yourself a favor:</p><ul><li><strong>You\u2019ll get more qualitative feedback.</strong> The longer a pull requests the fewer qualitative feedback per line of code you\u2019ll receive. Keep your pull request small (not too small either) and you\u2019ll increase your chances of getting great feedback on it.</li><li><strong>You\u2019ll get them approved faster. </strong>It\u2019s a win-win, by breaking down your work into smaller pull requests, you increase your chances of getting them approved faster.</li></ul><figure><img alt=\"irUe6ZKsZwrWHJwrIqGsymee1oo2cq0mMEBs\" height=\"340\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/irUe6ZKsZwrWHJwrIqGsymee1oo2cq0mMEBs\" width=\"622\"/><figcaption><em>LGTM </em>? </figcaption></figure><p><em>For the nerds out there, here\u2019s a <a href=\"https://smartbear.com/learn/code-review/best-practices-for-peer-code-review/\" rel=\"noopener\">study</a> conducted on a Cisco programming team. It shows that after 400 LoC the ability to find defects diminishes pretty dramatically. </em>?</p><p>The next principle helps with keeping pull requests size under control.</p><h4 id=\"narrow-the-scope\">Narrow the scope</h4><p>The scope of your pull request should be <strong>simple, unique and well-defined. </strong>That might be a feature, a user-story or a bug fix.</p><figure><img alt=\"hVle2Ce9EvgyfDMvplMuSbg3FpXTF9CN55-j\" height=\"253\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/hVle2Ce9EvgyfDMvplMuSbg3FpXTF9CN55-j\" width=\"800\"/><figcaption><em>Making the world a better place, one LoC at a time </em>? </figcaption></figure><p>One way to think about it is that reviewers have a <strong>limited number of \u201cattention credits\u201d </strong>(like everybody). Every time they focus on something, they use 1 credit. What happens when they have 0 left?</p><blockquote>LGTM ?</blockquote><p>Do what you can to reduce the noise around your work. Be mindful of the reviewer\u2019s attention span.</p><p>For instance, <strong>avoid void changes</strong> (like skipping lines). They don\u2019t add any value and complicate the code review.</p><p>Similarly, if your pull request changes the <em>behavior</em>, don\u2019t include changes to <em>formatting</em>. Conversely, if your pull request changes <em>formatting</em>, don\u2019t include changes that affect the <em>behavior</em>. They might be overlooked by the reviewer.</p><h4 id=\"give-context\">Give context</h4><p>Think about your pull request as documentation for new comers. Guide the reader with context.</p><p>Start with a <strong>self-explanatory title.</strong></p><figure><img alt=\"-rZMLs8GynJOJMIB2C1ZTf1sa22RdiccZaw2\" height=\"203\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/-rZMLs8GynJOJMIB2C1ZTf1sa22RdiccZaw2\" width=\"800\"/><figcaption><em>Good title taken from the xg2xg repo </em>? </figcaption></figure><p>Then<strong>, write a clear description </strong>to explain what you are doing and why are you doing it. What is the purpose of this pull request? Why is this change necessary? How did you approach this problem?</p><figure><img alt=\"QfB-BL9MLi1SnpFMByRDtEoGcLsnhYqAbtUZ\" height=\"250\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/QfB-BL9MLi1SnpFMByRDtEoGcLsnhYqAbtUZ\" width=\"800\"/><figcaption><em>Good example of explaining why the change is necessary taken from react repo</em></figcaption></figure><p>The description is also is great place to <strong>point out unresolved issues and open questions. </strong>Reviewers might have suggestions to unblock you.</p><p>Are you working on a visible part of the product? <strong>Screenshots</strong> can help get your point across faster.</p><ul><li>Show before/after differences.</li><li>Use colored arrows.</li><li>Add screen recordings if you feel like it :)</li></ul><figure><img alt=\"BMOl9N0I3lUy6RFHW6koF-AHvUaS3zj8ZJzz\" height=\"772\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/BMOl9N0I3lUy6RFHW6koF-AHvUaS3zj8ZJzz\" width=\"800\"/><figcaption><em>From react repository</em></figcaption></figure><p>Finally, write <strong>information signs</strong> along the way to guide the reviewer through your reasoning.</p><p>Keep a clean commit history<strong> </strong>to make it easier for the reviewer to follow your step. Use comments to point out alternatives you explored.</p><figure><img alt=\"parB1wMVMrNCIoUjqixRqCHHJ08HMuE2FEb8\" height=\"185\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/parB1wMVMrNCIoUjqixRqCHHJ08HMuE2FEb8\" width=\"442\"/><figcaption><em>Good comment example from Lodash</em></figcaption></figure><h4 id=\"welcome-feedback\">Welcome feedback ?</h4><p>Rejection hurts.</p><p>Truth be told, <strong>code rejection hurts even more.</strong></p><figure><img alt=\"Hw2grLkrNu8rHBcUJxqHt9v71eUAPRVwiBnn\" height=\"167\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/Hw2grLkrNu8rHBcUJxqHt9v71eUAPRVwiBnn\" width=\"776\"/><figcaption>I\u2019m seeing this a lot!</figcaption></figure><p>It\u2019s alright. Don\u2019t take it personally.</p><p>Comments and suggestions are an opportunity to learn and become a better software engineer ?</p><h3 id=\"a-reviewer-s-manifesto\">A Reviewer\u2019s Manifesto</h3><p>Congrats on making it this far! Now let\u2019s look at a few principles that might help you become a better reviewer ?</p><h4 id=\"adopt-the-right-mindset\">Adopt the right mindset</h4><p>There is no scenario where a team can benefit from a reviewer being mean or patronising.<strong> Be</strong> <strong>kind</strong>. Period.</p><figure><img alt=\"xLy0yeaSYmd9HAUIDvcN892VA7ehvPvD4b5p\" height=\"291\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/xLy0yeaSYmd9HAUIDvcN892VA7ehvPvD4b5p\" width=\"544\"/><figcaption><em>What are you trying to say my friend? </em>(<a href=\"https://giphy.com/\" rel=\"noopener\" target=\"_blank\" title=\"\">Giphy</a>)</figcaption></figure><p>Want to make code reviews more exciting?</p><p>Look for something you can <strong>learn</strong> from this review. A new library, a new method, a new concept, a simpler way to do things. What piece of knowledge will you extract from it?</p><p>If you are the more experienced developer, is there something you can <strong>share</strong>? How can you use this review to transfer knowledge to the submitter? How can you help them become a better software engineer?</p><figure><img alt=\"CA98J-KCq3p77rFiVmv4W5ojoQnUnBEvgNOn\" height=\"425\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/CA98J-KCq3p77rFiVmv4W5ojoQnUnBEvgNOn\" width=\"669\"/><figcaption><em>Thanks for the tip mate! </em>? </figcaption></figure><h3 id=\"how-to-actually-do-a-code-review\">How to actually do a code review</h3><h4 id=\"what-to-review\"><strong>What to review</strong></h4><p>What am I even supposed to look for? Without clear guidance on what and how to review, it\u2019s easy to get lost. Here is what you can do.</p><p>First off, <strong>check the purpose</strong>. Is this code accomplishing what it is meant to do? Are there parts of the new code that are not clear to you? Ask clarifying questions. The code is easily testable? Test it. There\u2019s no need to go beyond if this square is not checked.</p><p>Ok now that the code works, time to focus on the <strong>implementation</strong>.</p><p>Think about how you would have approached this problem. Would you have done it differently? Is there potential for refactoring or abstraction? Is this re-inventing the wheel? Is this using standard code patterns?</p><h4 id=\"what-to-not-review\"><strong>What to not review</strong></h4><p>Because a piece of code has room for improvement, it doesn\u2019t always mean it needs to be improved.</p><p>At the end of the day, code reviews are a tradeoff between <strong>quality</strong> and <strong>velocity </strong>and depending on the scope and stage of the project it might make sense to let a few things behind.</p><p>Similarly, you shouldn\u2019t be doing things that can be automated. Let your favorite linter hunt for the missing semicolons and extra indentation. No need for an endless debate on tabs vs spaces.</p><p>Finally, don\u2019t increase the scope of the pull request. If you think of new things that need to be done,<strong> </strong>create a new pull request /task for that matter.</p><h4 id=\"review-in-a-timely-manner\">Review in a timely manner</h4><p>There are at least 3 good reasons to review pull requests in <strong>hours rather than days.</strong></p><ul><li>The submitter can move to the next task quicker</li><li>It reduces context switching cost</li><li>It reduces the risk of merge conflicts between branches.</li></ul><figure><img alt=\"XVktldbIDiDVoWG2GCGSIo4ppuEMv49qFU5m\" height=\"53\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/XVktldbIDiDVoWG2GCGSIo4ppuEMv49qFU5m\" width=\"800\"/><figcaption><em>Opened 6 years ago. Be right back </em>? </figcaption></figure><p><strong>Disclaimer:</strong> I just released <a href=\"https://www.gitrise.com/\" rel=\"noopener\">GitRise</a>, a tool that helps teams using GitHub &amp; Slack review pull requests faster. I do think it can help with this one :)</p><h3 id=\"how-to-give-feedback-in-a-code-review\">How to give feedback in a code review?</h3><p>When giving a feedback, the form matters as much as the substance.</p><p>Did you know that in written communication, <strong>neutral content looks more negative than it actually is?</strong> Beware of this bias and include emojis when needed to get the tone right in your comments.</p><p>Also, most of the time, even if you are pretty sure that there is a better way to do something, you are better off <strong>asking a question rather than requesting a change</strong>. Plus, questions sound less aggressive.</p><figure><img alt=\"YDgB2aLyBwOvo21kVLfvYdlKdlTioV1UUP4a\" height=\"517\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/YDgB2aLyBwOvo21kVLfvYdlKdlTioV1UUP4a\" width=\"799\"/><figcaption><em>Example from ember.js repo</em></figcaption></figure><p><strong>Finally, reward when things are done right. </strong>Code reviews are also a great place to give kudos to colleagues for doing a good job. Be creative and fun :)</p><p>? Congrats on reaching the end of this blog post!</p><p>? Thanks a lot for reading and let me know if you have any comments!</p><p>? I<strong> just released G<a href=\"https://www.gitrise.com/\" rel=\"noopener\">itRise,</a> a tool that creates pull requests reminders for teams using Slack &amp; GitHub. G</strong>ive it a try if you want. Looking forward to your feedback.</p>\n</section>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nby Jean-Charles FabreWhen you are coding, interruptions really suck.You are in the zone, flying high, killing it. And BAM\u2026 meeting, standup, *insert interruption*\u2026 Great!In that context, code reviews can be perceived as another hurdle to productivity.And frankly I can relate to that.Code reviews are hard.Not only do you need to stop what you are currently doing, you also need to immerse yourself into somebody else\u2019s code. It takes a lot of energy just to switch your focus.Code reviews are time consuming.According to Slack Overflow\u2019s 2019 survey, 56.4% of developers spend 4 hours or more per week performing code reviews. And it can represent up to 20% of a developer\u2019s week!Code reviews are frustrating.As a submitter, it can be frustrating to get your pull request rejected, to wait hours if not days for a review. As a reviewer, code reviews can feel like an obstacle to a good productive day.Yes, code reviews can sometimes be hard, time consuming and frustrating.But they\u2019re also a good way to share knowledge, prevent bugs, and reinforce your company\u2019s culture among other things.What follows is a manifesto for submitters and reviewers to bring back peace of mind into code reviews. ?A Submitter\u2019s ManifestoAs a submitter, here\u2019s what you can do to increase your chances of getting your pull requests approved in a timely manner.Submit when you\u2019re done.It sounds obvious, I know. But the thing is \u2014 most of the time if the machine doesn\u2019t work, it\u2019s not because it\u2019s broken\u2026 it\u2019s because it\u2019s not plugged in!Very small details can make a big difference on how your work is perceived. And you don\u2019t want your colleagues to feel they are investing time and effort into reviewing work in progress code.Me: \u201cIt was just a missing </div>!\u201dYou: \u201cYeah I know, but the whole thing didn\u2019t work and it took me 20 minutes to spot it.\u201dSo here\u2019s what you can do:Self-test your code. Include WIP in title or label if you\u2019re not done yet.Self-review your code. Use the diff report of your code editor or versioning tool to catch mistakes.Make sure the tests of your CI are green before assigning a reviewer, this will save them time.Don\u2019t be this guy, obviously ? (Giphy) Make smaller pull requestsI get it, it\u2019s a big, important and complex feature and you might be tempted to submit a long pull request. Yet, most of the time, you are better off submitting smaller pull requests.Code reviews take energy. Big code reviews even more. Don\u2019t impose on your team a developer vs food challenge every time they review your code.Be nice, cut it in smaller chunks. You are also doing yourself a favor:You\u2019ll get more qualitative feedback. The longer a pull requests the fewer qualitative feedback per line of code you\u2019ll receive. Keep your pull request small (not too small either) and you\u2019ll increase your chances of getting great feedback on it.You\u2019ll get them approved faster. It\u2019s a win-win, by breaking down your work into smaller pull requests, you increase your chances of getting them approved faster.LGTM ? For the nerds out there, here\u2019s a study conducted on a Cisco programming team. It shows that after 400 LoC the ability to find defects diminishes pretty dramatically. ?The next principle helps with keeping pull requests size under control.Narrow the scopeThe scope of your pull request should be simple, unique and well-defined. That might be a feature, a user-story or a bug fix.Making the world a better place, one LoC at a time ? One way to think about it is that reviewers have a limited number of \u201cattention credits\u201d (like everybody). Every time they focus on something, they use 1 credit. What happens when they have 0 left?LGTM ?Do what you can to reduce the noise around your work. Be mindful of the reviewer\u2019s attention span.For instance, avoid void changes (like skipping lines). They don\u2019t add any value and complicate the code review.Similarly, if your pull request changes the behavior, don\u2019t include changes to formatting. Conversely, if your pull request changes formatting, don\u2019t include changes that affect the behavior. They might be overlooked by the reviewer.Give contextThink about your pull request as documentation for new comers. Guide the reader with context.Start with a self-explanatory title.Good title taken from the xg2xg repo ? Then, write a clear description to explain what you are doing and why are you doing it. What is the purpose of this pull request? Why is this change necessary? How did you approach this problem?Good example of explaining why the change is necessary taken from react repoThe description is also is great place to point out unresolved issues and open questions. Reviewers might have suggestions to unblock you.Are you working on a visible part of the product? Screenshots can help get your point across faster.Show before/after differences.Use colored arrows.Add screen recordings if you feel like it :)From react repositoryFinally, write information signs along the way to guide the reviewer through your reasoning.Keep a clean commit history to make it easier for the reviewer to follow your step. Use comments to point out alternatives you explored.Good comment example from LodashWelcome feedback ?Rejection hurts.Truth be told, code rejection hurts even more.I\u2019m seeing this a lot!It\u2019s alright. Don\u2019t take it personally.Comments and suggestions are an opportunity to learn and become a better software engineer ?A Reviewer\u2019s ManifestoCongrats on making it this far! Now let\u2019s look at a few principles that might help you become a better reviewer ?Adopt the right mindsetThere is no scenario where a team can benefit from a reviewer being mean or patronising. Be kind. Period.What are you trying to say my friend? (Giphy)Want to make code reviews more exciting?Look for something you can learn from this review. A new library, a new method, a new concept, a simpler way to do things. What piece of knowledge will you extract from it?If you are the more experienced developer, is there something you can share? How can you use this review to transfer knowledge to the submitter? How can you help them become a better software engineer?Thanks for the tip mate! ? How to actually do a code reviewWhat to reviewWhat am I even supposed to look for? Without clear guidance on what and how to review, it\u2019s easy to get lost. Here is what you can do.First off, check the purpose. Is this code accomplishing what it is meant to do? Are there parts of the new code that are not clear to you? Ask clarifying questions. The code is easily testable? Test it. There\u2019s no need to go beyond if this square is not checked.Ok now that the code works, time to focus on the implementation.Think about how you would have approached this problem. Would you have done it differently? Is there potential for refactoring or abstraction? Is this re-inventing the wheel? Is this using standard code patterns?What to not reviewBecause a piece of code has room for improvement, it doesn\u2019t always mean it needs to be improved.At the end of the day, code reviews are a tradeoff between quality and velocity and depending on the scope and stage of the project it might make sense to let a few things behind.Similarly, you shouldn\u2019t be doing things that can be automated. Let your favorite linter hunt for the missing semicolons and extra indentation. No need for an endless debate on tabs vs spaces.Finally, don\u2019t increase the scope of the pull request. If you think of new things that need to be done, create a new pull request /task for that matter.Review in a timely mannerThere are at least 3 good reasons to review pull requests in hours rather than days.The submitter can move to the next task quickerIt reduces context switching costIt reduces the risk of merge conflicts between branches.Opened 6 years ago. Be right back ? Disclaimer: I just released GitRise, a tool that helps teams using GitHub & Slack review pull requests faster. I do think it can help with this one :)How to give feedback in a code review?When giving a feedback, the form matters as much as the substance.Did you know that in written communication, neutral content looks more negative than it actually is? Beware of this bias and include emojis when needed to get the tone right in your comments.Also, most of the time, even if you are pretty sure that there is a better way to do something, you are better off asking a question rather than requesting a change. Plus, questions sound less aggressive.Example from ember.js repoFinally, reward when things are done right. Code reviews are also a great place to give kudos to colleagues for doing a good job. Be creative and fun :)? Congrats on reaching the end of this blog post!? Thanks a lot for reading and let me know if you have any comments!? I just released GitRise, a tool that creates pull requests reminders for teams using Slack & GitHub. Give it a try if you want. Looking forward to your feedback.\n\n                        \n                    \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 9492, "excerpt": "by Jean-Charles Fabre\n\nA zen manifesto for effective code reviews\nPhoto by [http://twitter.com/yogimadhav]@yogimadhav\n[http://twitter.com/yogimadhav] on Unsplash [https://unsplash.com/@yogimadhav]\nWhen you are coding, interruptions really suck.\n\nYou are in the zone, flying high, killing it. And BAM\u2026 meeting, standup, *insert\ninterruption*\u2026 Great!\n\nIn that context, code reviews can be perceived as another hurdle to\nproductivity.\n\nAnd frankly I can relate to that.\n\nCode reviews are hard.\nNot only", "siteName": "freeCodeCamp.org", "publishedTime": "2019-05-02T20:30:34.000Z", "id": "b657947822ab0354d6121f09b4da72a876cde4c5", "url": "https://www.freecodecamp.org/news/a-zen-manifesto-for-effective-code-reviews-e30b5c95204a/", "domain": "freecodecamp.org", "date": "2023-12-27T18:10:43.252642", "resultUri": "http://localhost:3000/result/b657947822ab0354d6121f09b4da72a876cde4c5", "query": {"url": ["https://www.freecodecamp.org/news/a-zen-manifesto-for-effective-code-reviews-e30b5c95204a/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "A zen manifesto for effective code reviews", "description": "by Jean-Charles Fabre A zen manifesto for effective code reviews Photo by [http://twitter.com/yogimadhav]@yogimadhav [http://twitter.com/yogimadhav] on Unsplash [https://unsplash.com/@yogimadhav] When you are coding, interruptions really suck. You are in the zone, flying high, killing it. And BAM\u2026 meeting, standup, *insert interruption*\u2026 Great! In that context, code reviews can be perceived as another", "url": "https://www.freecodecamp.org/news/a-zen-manifesto-for-effective-code-reviews-e30b5c95204a/", "image": "https://cdn-media-1.freecodecamp.org/images/0*Pt73-k3YNsgjnOP8", "image:width": "800", "image:height": "533"}, "twitter": {"card": "summary_large_image", "title": "A zen manifesto for effective code reviews", "description": "by Jean-Charles Fabre A zen manifesto for effective code reviews Photo by [http://twitter.com/yogimadhav]@yogimadhav [http://twitter.com/yogimadhav] on Unsplash [https://unsplash.com/@yogimadhav] When you are coding, interruptions really suck. You are in the zone, flying high, killing it. And BAM\u2026 meeting, standup, *insert interruption*\u2026 Great! In that context, code reviews can be perceived as another", "url": "https://www.freecodecamp.org/news/a-zen-manifesto-for-effective-code-reviews-e30b5c95204a/", "image": "https://cdn-media-1.freecodecamp.org/images/0*Pt73-k3YNsgjnOP8", "label1": "Written by", "data1": "freeCodeCamp.org", "label2": "Filed under", "data2": "Code Review, Programming, Productivity, Teamwork, Tech", "site": "@freecodecamp"}}}