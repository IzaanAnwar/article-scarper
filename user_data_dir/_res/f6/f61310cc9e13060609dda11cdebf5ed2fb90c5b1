{"title": "Automatic Website Performance Regression Testing", "byline": "freeCodeCamp.org", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>Automatic Website Performance Regression Testing</h1>\n<section>\n<section data-test-label=\"post-content\">\n<p>by Adam Henson</p><h4 id=\"using-a-post-deploy-step-to-automate-performance-regression-testing-in-a-continuous-delivery-workflow\">Using a post deploy step to automate performance regression testing in a continuous delivery workflow</h4><p>In another post I went over <a href=\"https://medium.freecodecamp.org/three-ways-to-analyze-website-performance-with-lighthouse-8d100966c04b\" rel=\"noopener\">how to analyze website performance using Lighthouse</a>, and specifically how we can automate performance monitoring with Foo. In this post I\u2019m going to demonstrate how we can step it up a notch by regression testing performance\u2026 automagically ?.</p><h3 id=\"what-is-regression-testing\">What is Regression Testing?</h3><p>Regression Testing is a type of software testing to confirm that a recent program or code change has not adversely affected existing features. Adhering to best practice could include the below.</p><ul><li><strong>Maintain a Strict Testing Schedule</strong>: Always maintain a continual testing schedule throughout the entire software development life cycle. Not only will this quickly force the team to adapt to a frequent testing regimen, it will also ensure the finished product is as well-tested as possible.</li><li><strong>Use Test Management Software</strong>: Unless your current software project is a simple self-developed side project, chances are you\u2019ll have such an abundance of tests that tracking each will be well beyond the capabilities of a single individual or a spreadsheet. Thankfully, there are many different test management tools on the market designed to simplify the process of creating, managing, tracking, and reporting on all the tests in your entire testing suite.</li><li><strong>Categorize Your Tests</strong>: Imagine a test suite of hundreds or thousands of tests that are merely identified by a single <code>name</code> or <code>id</code> field. How on Earth would anyone ever sort through that massive list in order to identify tests that are related? The solution is to categorize tests into smaller groups based on whatever criteria is appropriate for your team. Most test management tools will provide the means of categorizing or tagging tests, which will make it easier for everyone on the team to identify and reference a certain <em>type</em> of test.</li><li><strong>Prioritize Tests Based on Customer Needs</strong>: One useful way to prioritize tests is to consider the needs of the customer or user. Consider how a given test case impacts the end user\u2019s experience or the customer\u2019s business requirements.</li></ul><p>Check out this article for more info: \u201c<a href=\"https://airbrake.io/blog/what-is/regression-testing\" rel=\"noopener\">Regression Testing: What It Is and How to Use It</a>\u201d</p><h3 id=\"what-does-website-performance-actually-mean\">What Does \u201cWebsite Performance\u201d Actually Mean?</h3><blockquote>Load times vary dramatically from user to user, depending on their device capabilities and network conditions. <strong>Traditional</strong> performance metrics like load time or DOMContentLoaded time are extremely unreliable since when they occur may or may not correspond to when the user thinks the app is loaded.</blockquote><blockquote>~ <a href=\"https://developers.google.com/web/fundamentals/performance/user-centric-performance-metrics\" rel=\"noopener\">User-centric Performance Metrics | Web Fundamentals | Google Developers</a></blockquote><p>Nowadays, life cycle of a web page load can be thought of more granularly. We can think of website performance metrics as being \u201cuser-centric\u201d. When a user goes to a web page, they\u2019re typically looking for visual feedback to reassure them everything is working as expected.</p><p>The metrics below represent important points of the page load life cycle. Each answers questions about the user experience.</p><ul><li><strong>First Contentful Paint</strong>: Is it happening? Did the navigation start successfully? Has the server responded?</li><li><strong>First Meaningful Paint</strong>: Is it useful? Has enough content rendered that users can engage with it?</li><li><strong>Time to Interactive</strong>: Is it usable? Can users interact with the page, or is it still busy loading?</li><li><strong>Long Tasks (absence of)</strong>: Is it delightful? Are the interactions smooth and natural, free of lag and jank?</li></ul><p>We can run performance audits manually or programmatically using tools like <a href=\"https://developers.google.com/web/tools/lighthouse/\" rel=\"noopener\">Lighthouse to provide values to metrics</a> similar to the above. We can use a <a href=\"https://github.com/GoogleChrome/lighthouse#lighthouse-integrations\" rel=\"noopener\">Lighthouse integration</a> like <a href=\"https://www.foo.software/\" rel=\"noopener\">Foo to automatically monitor website performance</a> over time. In the example below you can see Twitter\u2019s performance degrade and correlate it to an exact day and time! What if we could pinpoint this to an exact release? In the next section I explain how to do this.</p><figure><img alt=\"XGra1-Mms-pMto7BezMFT6et1dqdoe1DaWv4\" height=\"252\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/XGra1-Mms-pMto7BezMFT6et1dqdoe1DaWv4\" width=\"800\"/><figcaption>Twitter Performance Degradation</figcaption></figure><h3 id=\"how-can-we-regression-test-performance-automatically\">How Can we Regression Test Performance Automatically?</h3><p>We can accomplish automatic performance tests integrated as a post deploy step in a continuous delivery pipeline. We can do this by creating a <strong>free</strong> account with Foo and utilizing its public REST API. Follow the steps below.</p><ol><li><a href=\"https://www.foo.software/register\" rel=\"noopener\">Create a free account with Foo</a>. Verify your email by clicking on the link sent.</li><li><a href=\"https://www.foo.software/account/pages\" rel=\"noopener\">Create a page on Foo</a> where you can add the URL to the page you want to performance test.</li><li>Click on the list item for your page from the screen above. This will direct you to the dashboard reflecting your page.</li><li>Obtain the page API token by scrolling to the bottom of the page above.</li><li>Trigger a test run by requesting the endpoint as detailed in <a href=\"https://www.foo.software/docs/api/Methods.html#additems\" rel=\"noopener\">Foo\u2019s API documentation</a>. A curl command would look something like <code>curl -X POST \"https://www.foo.software/api/v1/queue/items\" -H \"accept: application/json\" -H \"Content-Type: application/json\" -d \"{ \\\"pages\\\": \\\"pagetoken1,pagetoken2\\\", \\\"tag\\\": \\\"My Tag\\\" }\"</code>.</li><li>Add the above command as a post deploy step in your CD pipeline. You can find a <a href=\"https://github.com/foo-software/website-performance-monitoring/blob/master/.circleci/config.yml\" rel=\"noopener\">full example in GitHub</a>. Below a <a href=\"https://circleci.com/\" rel=\"noopener\">circleci</a> snippet that actually defines this step.</li></ol><p>From the example linked above our pipeline steps run on every commit to our <code>master</code> branch.</p><figure><img alt=\"oXvAl0fsY-qFQvP95SU1r0KSuPtiqSTOIPaw\" height=\"95\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/oXvAl0fsY-qFQvP95SU1r0KSuPtiqSTOIPaw\" width=\"800\"/><figcaption>Continuous Delivery Steps</figcaption></figure><p>And voil\u00e0 we are now deploying a release on every commit to <code>master</code> and running a performance audit on it automatically \u2b50!</p><figure><img alt=\"uBhpSn6stxtkC8hr5RPVmIXkSNyelsU8CAcz\" height=\"519\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/uBhpSn6stxtkC8hr5RPVmIXkSNyelsU8CAcz\" width=\"800\"/><figcaption>Foo CD Example Automatic Performance Regression Results</figcaption></figure><h3 id=\"conclusion\">Conclusion</h3><p><a href=\"https://www.foo.software/features\" rel=\"noopener\">Foo provides many features to monitor and analyze performance</a>. In this post we took a look into how we can utilize it to run Lighthouse performance regression testing automatically. Below are other features \u2014 most of which are <strong>free</strong>!</p><ul><li>Automatic performance audits, a timeline visualization and detailed views of results.</li><li>Email, Slack, an PagerDuty notifications when performance has dropped, improved or become \u201cback to normal\u201d.</li><li>Automatic health check pings and notifications.</li></ul>\n</section>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nby Adam HensonUsing a post deploy step to automate performance regression testing in a continuous delivery workflowIn another post I went over how to analyze website performance using Lighthouse, and specifically how we can automate performance monitoring with Foo. In this post I\u2019m going to demonstrate how we can step it up a notch by regression testing performance\u2026 automagically ?.What is Regression Testing?Regression Testing is a type of software testing to confirm that a recent program or code change has not adversely affected existing features. Adhering to best practice could include the below.Maintain a Strict Testing Schedule: Always maintain a continual testing schedule throughout the entire software development life cycle. Not only will this quickly force the team to adapt to a frequent testing regimen, it will also ensure the finished product is as well-tested as possible.Use Test Management Software: Unless your current software project is a simple self-developed side project, chances are you\u2019ll have such an abundance of tests that tracking each will be well beyond the capabilities of a single individual or a spreadsheet. Thankfully, there are many different test management tools on the market designed to simplify the process of creating, managing, tracking, and reporting on all the tests in your entire testing suite.Categorize Your Tests: Imagine a test suite of hundreds or thousands of tests that are merely identified by a single name or id field. How on Earth would anyone ever sort through that massive list in order to identify tests that are related? The solution is to categorize tests into smaller groups based on whatever criteria is appropriate for your team. Most test management tools will provide the means of categorizing or tagging tests, which will make it easier for everyone on the team to identify and reference a certain type of test.Prioritize Tests Based on Customer Needs: One useful way to prioritize tests is to consider the needs of the customer or user. Consider how a given test case impacts the end user\u2019s experience or the customer\u2019s business requirements.Check out this article for more info: \u201cRegression Testing: What It Is and How to Use It\u201dWhat Does \u201cWebsite Performance\u201d Actually Mean?Load times vary dramatically from user to user, depending on their device capabilities and network conditions. Traditional performance metrics like load time or DOMContentLoaded time are extremely unreliable since when they occur may or may not correspond to when the user thinks the app is loaded.~ User-centric Performance Metrics | Web Fundamentals | Google DevelopersNowadays, life cycle of a web page load can be thought of more granularly. We can think of website performance metrics as being \u201cuser-centric\u201d. When a user goes to a web page, they\u2019re typically looking for visual feedback to reassure them everything is working as expected.The metrics below represent important points of the page load life cycle. Each answers questions about the user experience.First Contentful Paint: Is it happening? Did the navigation start successfully? Has the server responded?First Meaningful Paint: Is it useful? Has enough content rendered that users can engage with it?Time to Interactive: Is it usable? Can users interact with the page, or is it still busy loading?Long Tasks (absence of): Is it delightful? Are the interactions smooth and natural, free of lag and jank?We can run performance audits manually or programmatically using tools like Lighthouse to provide values to metrics similar to the above. We can use a Lighthouse integration like Foo to automatically monitor website performance over time. In the example below you can see Twitter\u2019s performance degrade and correlate it to an exact day and time! What if we could pinpoint this to an exact release? In the next section I explain how to do this.Twitter Performance DegradationHow Can we Regression Test Performance Automatically?We can accomplish automatic performance tests integrated as a post deploy step in a continuous delivery pipeline. We can do this by creating a free account with Foo and utilizing its public REST API. Follow the steps below.Create a free account with Foo. Verify your email by clicking on the link sent.Create a page on Foo where you can add the URL to the page you want to performance test.Click on the list item for your page from the screen above. This will direct you to the dashboard reflecting your page.Obtain the page API token by scrolling to the bottom of the page above.Trigger a test run by requesting the endpoint as detailed in Foo\u2019s API documentation. A curl command would look something like curl -X POST \"https://www.foo.software/api/v1/queue/items\" -H \"accept: application/json\" -H \"Content-Type: application/json\" -d \"{ \\\"pages\\\": \\\"pagetoken1,pagetoken2\\\", \\\"tag\\\": \\\"My Tag\\\" }\".Add the above command as a post deploy step in your CD pipeline. You can find a full example in GitHub. Below a circleci snippet that actually defines this step.From the example linked above our pipeline steps run on every commit to our master branch.Continuous Delivery StepsAnd voil\u00e0 we are now deploying a release on every commit to master and running a performance audit on it automatically \u2b50!Foo CD Example Automatic Performance Regression ResultsConclusionFoo provides many features to monitor and analyze performance. In this post we took a look into how we can utilize it to run Lighthouse performance regression testing automatically. Below are other features \u2014 most of which are free!Automatic performance audits, a timeline visualization and detailed views of results.Email, Slack, an PagerDuty notifications when performance has dropped, improved or become \u201cback to normal\u201d.Automatic health check pings and notifications.\n\n                        \n                    \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 6399, "excerpt": "by Adam Henson\n\nHow to automate website performance regression testing with Foo\nUsing a post deploy step to automate performance regression testing in a\ncontinuous delivery workflow\nIn another post I went over how to analyze website performance using Lighthouse\n[https://medium.freecodecamp.org/three-ways-to-analyze-website-performance-with-lighthouse-8d100966c04b]\n, and specifically how we can automate performance monitoring with Foo. In this\npost I\u2019m going to demonstrate how we can step it up a", "siteName": "freeCodeCamp.org", "publishedTime": "2019-05-12T17:26:43.000Z", "id": "f61310cc9e13060609dda11cdebf5ed2fb90c5b1", "url": "https://www.freecodecamp.org/news/automatic-website-performance-regression-testing-4e30e6bf5cd/", "domain": "freecodecamp.org", "date": "2023-12-27T18:10:04.162223", "resultUri": "http://localhost:3000/result/f61310cc9e13060609dda11cdebf5ed2fb90c5b1", "query": {"url": ["https://www.freecodecamp.org/news/automatic-website-performance-regression-testing-4e30e6bf5cd/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "Automatic Website Performance Regression Testing", "description": "by Adam Henson How to automate website performance regression testing with Foo Using a post deploy step to automate performance regression testing in a continuous delivery workflow In another post I went over how to analyze website performance using Lighthouse [https://medium.freecodecamp.org/three-ways-to-analyze-website-performance-with-lighthouse-8d100966c04b] , and specifically how we can automate performance monitoring", "url": "https://www.freecodecamp.org/news/automatic-website-performance-regression-testing-4e30e6bf5cd/", "image": "https://cdn-media-1.freecodecamp.org/images/1*fQwuGPiTj7IpbUE2ddk0hA.jpeg", "image:width": "800", "image:height": "400"}, "twitter": {"card": "summary_large_image", "title": "Automatic Website Performance Regression Testing", "description": "by Adam Henson How to automate website performance regression testing with Foo Using a post deploy step to automate performance regression testing in a continuous delivery workflow In another post I went over how to analyze website performance using Lighthouse [https://medium.freecodecamp.org/three-ways-to-analyze-website-performance-with-lighthouse-8d100966c04b] , and specifically how we can automate performance monitoring", "url": "https://www.freecodecamp.org/news/automatic-website-performance-regression-testing-4e30e6bf5cd/", "image": "https://cdn-media-1.freecodecamp.org/images/1*fQwuGPiTj7IpbUE2ddk0hA.jpeg", "label1": "Written by", "data1": "freeCodeCamp.org", "label2": "Filed under", "data2": "Software Development, Technology, Performance, Software Testing, Programming", "site": "@freecodecamp"}}}