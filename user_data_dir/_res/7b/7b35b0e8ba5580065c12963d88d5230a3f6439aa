{"title": "How to Use JavaScript Collections \u2013 Map and Set", "byline": "TAPAS ADHIKARY", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>How to Use JavaScript Collections \u2013 Map and Set</h1>\n<section>\n<section data-test-label=\"post-content\">\n<p>In JavaScript, <code>objects</code> are used to store multiple values as a complex data structure.</p><p>An object is created with curly braces <code>{\u2026}</code> and a list of properties. A property is a key-value pair where the <code>key</code> must be a string and the <code>value</code> can be of any type.</p><p>On the other hand, <code>arrays</code> are an ordered collection that can hold data of any type. In JavaScript, arrays are created with square brackets <code>[...]</code> and allow duplicate elements.</p><p>Until ES6 (ECMAScript 2015), JavaScript <code>objects</code> and <code>arrays</code> were the most important data structures to handle collections of data. The developer community didn't have many choices outside of that. Even so, a combination of objects and arrays was able to handle data in many scenarios.</p><p>However, there were a few shortcomings,</p><ul><li>Object keys can only be of type <code>string</code>.</li><li>Objects don't maintain the order of the elements inserted into them.</li><li>Objects lack some useful methods, which makes them difficult to use in some situations. For example, you can't compute the size (<code>length</code>) of an object easily. Also, enumerating an object is not that straightforward.</li><li>Arrays are collections of elements that allow duplicates. Supporting arrays that only have distinct elements requires extra logic and code.</li></ul><p>With the introduction of ES6, we got two new data structures that address the shortcomings mentioned above: <code>Map</code> and <code>Set</code>. In this article, we will look at both closely and understand how to use them in different situations.</p><p><code>Map</code> is a collection of key-value pairs where the key can be of any type. <code>Map</code> remembers the original order in which the elements were added to it, which means data can be retrieved in the same order it was inserted in.</p><p>In other words, <code>Map</code> has characteristics of both <code>Object</code> and <code>Array</code>:</p><ul><li>Like an object, it supports the key-value pair structure.</li><li>Like an array, it remembers the insertion order.</li></ul><h3 id=\"how-to-create-and-initialize-a-map-in-javascript\"><strong>How to Create and Initialize a Map in JavaScript</strong></h3><p>A new <code>Map</code> can be created like this:</p><pre tabindex=\"0\"><code>const map = new Map();</code></pre><p>Which returns an empty <code>Map</code>:</p><pre tabindex=\"0\"><code>Map(0) {}</code></pre><p>Another way of creating a <code>Map</code> is with initial values. Here's how to create a <code>Map</code> with three key-value pairs:</p><pre tabindex=\"0\"><code>const freeCodeCampBlog = new Map([\n  ['name', 'freeCodeCamp'],\n  ['type', 'blog'],\n  ['writer', 'Tapas Adhikary'],\n]);</code></pre><p>Which returns a <code>Map</code> with three elements:</p><pre tabindex=\"0\"><code>Map(3) {\"name\" =&gt; \"freeCodeCamp\", \"type\" =&gt; \"blog\", \"writer\" =&gt; \"Tapas Adhikary\"}</code></pre><h3 id=\"how-to-add-values-to-a-map-in-javascript\"><strong>How to Add values to a Map in JavaScript</strong></h3><p>To add value to a Map, use the <code>set(key, value)</code> method.</p><p>The <code>set(key, value)</code> method takes two parameters, <code>key</code> and <code>value</code>, where the key and value can be of any type, a primitive (<code>boolean</code>, <code>string</code>, <code>number</code>, etc.) or an object:</p><pre tabindex=\"0\"><code>// create a map\nconst map = new Map();\n\n// Add values to the map\nmap.set('name', 'freeCodeCamp');\nmap.set('type', 'blog');\nmap.set('writer', 'Tapas Adhikary');</code></pre><pre tabindex=\"0\"><code>Map(3) {\"name\" =&gt; \"freeCodeCamp\", \"type\" =&gt; \"blog\", \"writer\" =&gt; \"Tapas Adhikary\"}</code></pre><p>Please note, if you use the same key to add a value to a <code>Map</code> multiple times, it'll always replace the previous value:</p><pre tabindex=\"0\"><code>// Add a different writer\nmap.set('writer', 'Someone else!');</code></pre><p>So the output would be:</p><pre tabindex=\"0\"><code>Map(3) \n{\"name\" =&gt; \"freeCodeCamp\", \"type\" =&gt; \"blog\", \"writer\" =&gt; \"Someone else!\"}</code></pre><h3 id=\"how-to-get-values-from-a-map-in-javascript\"><strong>How to Get values from a Map in JavaScript</strong></h3><p>To get a value from a <code>Map</code>, use the <code>get(key)</code> method:</p><pre tabindex=\"0\"><code>map.get('name'); // returns freeCodeCamp</code></pre><h3 id=\"all-about-map-keys-in-javascript\"><strong>All About Map Keys in JavaScript</strong></h3><p><code>Map</code> keys can be of any type, a primitive, or an object. This is one of the major differences between <code>Map</code> and regular JavaScript objects where the key can only be a string:</p><pre tabindex=\"0\"><code>// create a Map\nconst funMap = new Map();\n\nfunMap.set(360, 'My House Number'); // number as key\nfunMap.set(true, 'I write blogs!'); // boolean as key\n\nlet obj = {'name': 'tapas'}\nfunMap.set(obj, true); // object as key\n\nconsole.log(funMap);</code></pre><p>Here is the output:</p><pre tabindex=\"0\"><code>Map(3) \n{\n  360 =&gt; \"My House Number\", \n  true =&gt; \"I write blogs!\", \n  {\u2026} =&gt; true\n}</code></pre><p>A regular JavaScript object always treats the key as a string. Even when you pass it a primitive or object, it internally converts the key into a string:</p><pre tabindex=\"0\"><code>// Create an empty object\nconst funObj = {};\n\n// add a property. Note, passing the key as a number.\nfunObj[360] = 'My House Number';\n\n// It returns true because the number 360 got converted into the string '360' internally!\nconsole.log(funObj[360] === funObj['360']);</code></pre><h3 id=\"map-properties-and-methods-in-javascript\"><strong>Map Properties and Methods in JavaScript</strong></h3><p>JavaScript's <code>Map</code> has in-built properties and methods that make it easy to use. Here are some of the common ones:</p><ul><li>Use the <code>size</code> property to know how many elements are in a <code>Map</code>:</li><li>Search an element with the <code>has(key)</code> method:</li><li>Remove an element with the <code>delete(key)</code> method:</li><li>Use the <code>clear()</code> method to remove all the elements from the <code>Map</code> at once:</li></ul><pre tabindex=\"0\"><code>console.log('size of the map is', map.size);</code></pre><pre tabindex=\"0\"><code>// returns true, if map has an element with the key, 'John'\nconsole.log(map.has('John')); \n\n\n// returns false, if map doesn't have an element with the key, 'Tapas'\nconsole.log(map.has('Tapas')); </code></pre><pre tabindex=\"0\"><code>map.delete('Sam'); // removes the element with key, 'Sam'.</code></pre><pre tabindex=\"0\"><code>// Clear the map by removing all the elements\nmap.clear(); \n\nmap.size // It will return, 0\n</code></pre><h3 id=\"mapiterator-keys-values-and-entries-in-javascript\"><strong>MapIterator: keys(), values(), and entries() in JavaScript</strong></h3><p>The methods <code>keys()</code>, <code>values()</code> and <code>entries()</code> methods return a <code>MapIterator</code>, which is excellent because you can use a <code>for-of</code> or <code>forEach</code> loop directly on it.</p><p>First, create a simple <code>Map</code>:</p><pre tabindex=\"0\"><code>const ageMap = new Map([\n  ['Jack', 20],\n  ['Alan', 34],\n  ['Bill', 10],\n  ['Sam', 9]\n]);</code></pre><ul><li>Get all the keys:</li><li>Get all the values:</li><li>Get all the entries (key-value pairs):</li></ul><pre tabindex=\"0\"><code>console.log(ageMap.keys());\n\n// Output:\n\n// MapIterator {\"Jack\", \"Alan\", \"Bill\", \"Sam\"}</code></pre><pre tabindex=\"0\"><code>console.log(ageMap.values());\n\n// Output\n\n// MapIterator {20, 34, 10, 9}</code></pre><pre tabindex=\"0\"><code>console.log(ageMap.entries());\n\n// Output\n\n// MapIterator {\"Jack\" =&gt; 20, \"Alan\" =&gt; 34, \"Bill\" =&gt; 10, \"Sam\" =&gt; 9}</code></pre><h3 id=\"how-to-iterate-over-a-map-in-javascript\"><strong>How to Iterate Over a Map in JavaScript</strong></h3><p>You can use either the <code>forEach</code> or <code>for-of</code> loop to iterate over a <code>Map</code>:</p><pre tabindex=\"0\"><code>// with forEach\nageMap.forEach((value, key) =&gt; {\n   console.log(`${key} is ${value} years old!`);\n});\n\n// with for-of\nfor(const [key, value] of ageMap) {\n  console.log(`${key} is ${value} years old!`);\n}</code></pre><p>The output is going to be the same in both cases:</p><pre tabindex=\"0\"><code>Jack is 20 years old!\nAlan is 34 years old!\nBill is 10 years old!\nSam is 9 years old!</code></pre><h3 id=\"how-to-convert-an-object-into-a-map-in-javascript\"><strong>How to Convert an Object into a Map in JavaScript</strong></h3><p>You may encounter a situation where you need to convert an <code>object</code> to a <code>Map</code>-like structure. You can use the method <code>entries</code> of <code>Object</code> to do that:</p><pre tabindex=\"0\"><code>const address = {\n  'Tapas': 'Bangalore',\n  'James': 'Huston',\n  'Selva': 'Srilanka'\n};\n\nconst addressMap = new Map(Object.entries(address));</code></pre><h3 id=\"how-to-convert-a-map-into-an-object-in-javascript\"><strong>How to Convert a Map into an Object in JavaScript</strong></h3><p>If you want to do the reverse, you can use the <code>fromEntries</code> method:</p><pre tabindex=\"0\"><code>Object.fromEntries(map)</code></pre><h3 id=\"how-to-convert-a-map-into-an-array-in-javascript\"><strong>How to Convert a Map into an Array in JavaScript</strong></h3><p>There are a couple of ways to convert a map into an array:</p><ul><li>Using <code>Array.from(map)</code>:</li><li>Using the spread operator:</li></ul><pre tabindex=\"0\"><code>const map = new Map();\nmap.set('milk', 200);\nmap.set(\"tea\", 300);\nmap.set('coffee', 500);\n\nconsole.log(Array.from(map));</code></pre><pre tabindex=\"0\"><code>console.log([...map]);</code></pre><h3 id=\"map-vs-object-when-should-you-use-them\"><strong>Map vs. Object: When should you use them?</strong></h3><p><code>Map</code> has characteristics of both <code>object</code> and <code>array</code>. However, <code>Map</code> is more like an <code>object</code> than <code>array</code> due to the nature of storing data in the <code>key-value</code> format.</p><p>The similarity with objects ends here though. As you've seen, <code>Map</code> is different in a lot of ways. So, which one should you use, and when? How do you decide?</p><ul><li>Your needs are not that simple. You may want to create keys that are non-strings. Storing an object as a key is a very powerful approach. <code>Map</code> gives you this ability by default.</li><li>You need a data structure where elements can be ordered. Regular objects do not maintain the order of their entries.</li><li>You are looking for flexibility without relying on an external library like lodash. You may end up using a library like lodash because we do not find methods like has(), values(), delete(), or a property like size with a regular object. Map makes this easy for you by providing all these methods by default.</li></ul><p>Use an object when:</p><ul><li>You do not have any of the needs listed above.</li><li>You rely on <code>JSON.parse()</code> as a <code>Map</code> cannot be parsed with it.</li></ul><h2 id=\"set-in-javascript\">Set in JavaScript</h2><p>A <code>Set</code> is a collection of unique elements that can be of any type. <code>Set</code> is also an ordered collection of elements, which means that elements will be retrieved in the same order that they were inserted in.</p><p>A <code>Set</code> in JavaScript behaves the same way as a mathematical set.</p><h3 id=\"how-to-create-and-initialize-a-set-in-javascript\">How to Create and Initialize a Set in JavaScript</h3><p>A new <code>Set</code> can be created like this:</p><pre tabindex=\"0\"><code>const set = new Set();\nconsole.log(set);</code></pre><p>And the output will be an empty <code>Set</code>:</p><pre tabindex=\"0\"><code>Set(0) {}</code></pre><p>Here's how to create a <code>Set</code> with some initial values:</p><pre tabindex=\"0\"><code>const fruteSet = new Set(['\ud83c\udf49', '\ud83c\udf4e', '\ud83c\udf48', '\ud83c\udf4f']);\nconsole.log(fruteSet);</code></pre><pre tabindex=\"0\"><code>Set(4) {\"\ud83c\udf49\", \"\ud83c\udf4e\", \"\ud83c\udf48\", \"\ud83c\udf4f\"}</code></pre><h3 id=\"set-properties-and-methods-in-javascript\"><strong>Set Properties and Methods in JavaScript</strong></h3><p><code>Set</code> has methods to add an element to it, delete elements from it, check if an element exists in it, and to clear it completely:</p><ul><li>Use the <code>size</code> property to know the size of the <code>Set</code>. It returns the number of elements in it:</li><li>Use the <code>add(element)</code> method to add an element to the <code>Set</code>:</li></ul><pre tabindex=\"0\"><code>set.size</code></pre><pre tabindex=\"0\"><code>// Create a set - saladSet\nconst saladSet = new Set();\n\n// Add some vegetables to it\nsaladSet.add('\ud83c\udf45'); // tomato\nsaladSet.add('\ud83e\udd51'); // avocado\nsaladSet.add('\ud83e\udd55'); // carrot\nsaladSet.add('\ud83e\udd52'); // cucumber\n\nconsole.log(saladSet);\n\n\n// Output\n\n// Set(4) {\"\ud83c\udf45\", \"\ud83e\udd51\", \"\ud83e\udd55\", \"\ud83e\udd52\"}</code></pre><p>I love cucumbers! How about adding one more?</p><p>Oh no, I can't \u2013 <code>Set</code> is a collection of <em><em>unique</em></em> elements:</p><pre tabindex=\"0\"><code>saladSet.add('\ud83e\udd52');\nconsole.log(saladSet);</code></pre><p>The output is the same as before \u2013 nothing got added to the <code>saladSet</code>.</p><ul><li>Use the <code>has(element)</code> method to search if we have a carrot (\ud83e\udd55) or broccoli (\ud83e\udd66) in the <code>Set</code>:</li><li>Use the <code>delete(element)</code> method to remove the avocado(\ud83e\udd51) from the <code>Set</code>:</li></ul><pre tabindex=\"0\"><code>// The salad has a\ud83e\udd55, so returns true\nconsole.log('Does the salad have a carrot?', saladSet.has('\ud83e\udd55'));\n\n// The salad doesn't have a\ud83e\udd66, so returns false\nconsole.log('Does the salad have broccoli?', saladSet.has('\ud83e\udd66'));</code></pre><pre tabindex=\"0\"><code>saladSet.delete('\ud83e\udd51');\nconsole.log('I do not like \ud83e\udd51, remove from the salad:', saladSet);</code></pre><p>Now our salad <code>Set</code> is as follows:</p><pre tabindex=\"0\"><code>Set(3) {\"\ud83c\udf45\", \"\ud83e\udd55\", \"\ud83e\udd52\"}</code></pre><ul><li>Use the <code>clear()</code> method to remove all elements from a <code>Set</code>:</li></ul><pre tabindex=\"0\"><code>saladSet.clear();</code></pre><h3 id=\"how-to-iterate-over-a-set-in-javascript\"><strong><strong><strong>How to Iterate Over a Set</strong></strong> in JavaScript</strong></h3><p><code>Set</code> has a method called <code>values()</code> which returns a <code>SetIterator</code> to get all its values:</p><pre tabindex=\"0\"><code>// Create a Set\nconst houseNos = new Set([360, 567, 101]);\n\n// Get the SetIterator using the `values()` method\nconsole.log(houseNos.values());</code></pre><pre tabindex=\"0\"><code>SetIterator {360, 567, 101}</code></pre><p>We can use a <code>forEach</code> or <code>for-of</code> loop on this to retrieve the values.</p><p>Interestingly, JavaScript tries to make <code>Set</code> compatible with <code>Map</code>. That's why we find two of the same methods as <code>Map</code>, <code>keys()</code> and <code>entries()</code>.</p><p>As <code>Set</code> doesn't have keys, the <code>keys()</code> method returns a <code>SetIterator</code> to retrieve its values:</p><pre tabindex=\"0\"><code>console.log(houseNos.keys());\n\n// Output\n\n// console.log(houseNos.keys());</code></pre><p>With <code>Map</code>, the <code>entries()</code> method returns an iterator to retrieve key-value pairs. Again there are no keys in a <code>Set</code>, so <code>entries()</code> returns a <code>SetIterator</code> to retrieve the value-value pairs:</p><pre tabindex=\"0\"><code>console.log(houseNos.entries());\n\n// Output\n\n// SetIterator {360 =&gt; 360, 567 =&gt; 567, 101 =&gt; 101}</code></pre><h3 id=\"how-to-enumerate-over-a-set-in-javascript\"><strong>How to Enumerate over a Set in JavaScript</strong></h3><p>We can enumerate over a Set using <code>forEach</code> and <code>for-of</code> loops:</p><pre tabindex=\"0\"><code>// with forEach\n\nhouseNos.forEach((value) =&gt; {\n   console.log(value);\n});\n\n\n// with for-of\n\nfor(const value of houseNos) {\n   console.log(value);\n }</code></pre><p>The output of both is:</p><pre tabindex=\"0\"><code>360\n567\n101</code></pre><h3 id=\"sets-and-arrays-in-javascript\"><strong>Sets and Arrays in JavaScript</strong></h3><p>An array, like a <code>Set</code>, allows you to add and remove elements. But <code>Set</code> is quite different, and is not meant to replace arrays.</p><p>The major difference between an array and a <code>Set</code> is that arrays allow you to have duplicate elements. Also, some of the <code>Set</code> operations like <code>delete()</code> are faster than array operations like <code>shift()</code> or <code>splice()</code>.</p><p>Think of <code>Set</code> as an extension of a regular array, just with more muscles. The <code>Set</code> data structure is not a replacement of the <code>array</code>. Both can solve interesting problems.</p><h3 id=\"how-to-convert-a-set-into-an-array-in-javascript\"><strong>How to Convert a Set into an array in JavaScript</strong></h3><p>Converting a <code>Set</code> into an array is simple:</p><pre tabindex=\"0\"><code>const arr = [...houseNos];\nconsole.log(arr);</code></pre><h3 id=\"unique-values-from-an-array-using-the-set-in-javascript\"><strong>Unique values from an array using the Set in JavaScript</strong></h3><p>Creating a <code>Set</code> is a really easy way to remove duplicate values from an array:</p><pre tabindex=\"0\"><code>// Create a mixedFruit array with a few duplicate fruits\nconst mixedFruit = ['\ud83c\udf49', '\ud83c\udf4e', '\ud83c\udf49', '\ud83c\udf48', '\ud83c\udf4f', '\ud83c\udf4e', '\ud83c\udf48'];\n\n// Pass the array to create a set of unique fruits\nconst mixedFruitSet = new Set(mixedFruit);\n\nconsole.log(mixedFruitSet);</code></pre><pre tabindex=\"0\"><code>Set(4) {\"\ud83c\udf49\", \"\ud83c\udf4e\", \"\ud83c\udf48\", \"\ud83c\udf4f\"}</code></pre><h3 id=\"set-and-object-in-javascript\"><strong>Set and Object in JavaScript</strong></h3><p>A <code>Set</code> can have elements of any type, even objects:</p><pre tabindex=\"0\"><code>// Create a person object\nconst person = {\n   'name': 'Alex',\n   'age': 32\n };\n\n// Create a set and add the object to it\nconst pSet = new Set();\npSet.add(person);\nconsole.log(pSet);</code></pre><figure><img alt=\"image-113\" height=\"182\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2020/09/image-113.png\" width=\"563\"/></figure><p>No surprise here \u2013 the <code>Set</code> contains one element that is an object.</p><p>Let's change a property of the object and add it to the set again:</p><pre tabindex=\"0\"><code>// Change the name of the person\nperson.name = 'Bob';\n\n// Add the person object to the set again\npSet.add(person);\nconsole.log(pSet);</code></pre><p>What do you think the output will be? Two <code>person</code> objects or just one?</p><p>Here is the output:</p><figure><img alt=\"image-114\" height=\"184\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2020/09/image-114.png\" width=\"622\"/></figure><p><code>Set</code> is a collection of unique elements. By changing the property of the object, we haven't changed the object itself. Hence <code>Set</code> will not allow duplicate elements.</p><p><code>Set</code> is a great data structure to use in addition to JavaScript arrays. It doesn't have a huge advantage over regular arrays, though.</p><p>Use <code>Set</code> when you need to maintain a distinct set of data to perform set operations on like <code>union</code>, <code>intersection</code>, <code>difference</code>, and so on.</p><h2 id=\"in-summary\"><strong>In Summary</strong></h2><p>Here is a GitHub repository to find all the source code used in this article. If you found it helpful, please show your support by giving it a star: <a href=\"https://github.com/atapas/js-collections-map-set\">https://github.com/atapas/js-collections-map-set</a></p><p>You may also like some of my other articles:</p><ul><li><a href=\"https://blog.greenroots.info/my-favorite-javascript-tips-and-tricks-ckd60i4cq011em8s16uobcelc\">My Favorite JavaScript Tips and Tricks</a></li><li><a href=\"https://blog.greenroots.info/javascript-equality-comparison-with-and-objectis-ckdpt2ryk01vel9s186ft8cwl\">JavaScript equality and similarity with ==, === and Object.is()</a></li></ul><p>If this article was useful, please share it so others can read it as well. You can @ me on Twitter (<a href=\"https://twitter.com/tapasadhikary\">@tapasadhikary</a>) with comments, or feel free to follow me.</p>\n</section>\n<hr/>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nIn JavaScript, objects are used to store multiple values as a complex data structure.An object is created with curly braces {\u2026} and a list of properties. A property is a key-value pair where the key must be a string and the value can be of any type.On the other hand, arrays are an ordered collection that can hold data of any type. In JavaScript, arrays are created with square brackets [...] and allow duplicate elements.Until ES6 (ECMAScript 2015), JavaScript objects and arrays were the most important data structures to handle collections of data. The developer community didn't have many choices outside of that. Even so, a combination of objects and arrays was able to handle data in many scenarios.However, there were a few shortcomings,Object keys can only be of type string.Objects don't maintain the order of the elements inserted into them.Objects lack some useful methods, which makes them difficult to use in some situations. For example, you can't compute the size (length) of an object easily. Also, enumerating an object is not that straightforward.Arrays are collections of elements that allow duplicates. Supporting arrays that only have distinct elements requires extra logic and code.With the introduction of ES6, we got two new data structures that address the shortcomings mentioned above: Map and Set. In this article, we will look at both closely and understand how to use them in different situations.Map is a collection of key-value pairs where the key can be of any type. Map remembers the original order in which the elements were added to it, which means data can be retrieved in the same order it was inserted in.In other words, Map has characteristics of both Object and Array:Like an object, it supports the key-value pair structure.Like an array, it remembers the insertion order.How to Create and Initialize a Map in JavaScriptA new Map can be created like this:const map = new Map();Which returns an empty Map:Map(0) {}Another way of creating a Map is with initial values. Here's how to create a Map with three key-value pairs:const freeCodeCampBlog = new Map([\n  ['name', 'freeCodeCamp'],\n  ['type', 'blog'],\n  ['writer', 'Tapas Adhikary'],\n]);Which returns a Map with three elements:Map(3) {\"name\" => \"freeCodeCamp\", \"type\" => \"blog\", \"writer\" => \"Tapas Adhikary\"}How to Add values to a Map in JavaScriptTo add value to a Map, use the set(key, value) method.The set(key, value) method takes two parameters, key and value, where the key and value can be of any type, a primitive (boolean, string, number, etc.) or an object:// create a map\nconst map = new Map();\n\n// Add values to the map\nmap.set('name', 'freeCodeCamp');\nmap.set('type', 'blog');\nmap.set('writer', 'Tapas Adhikary');Output:Map(3) {\"name\" => \"freeCodeCamp\", \"type\" => \"blog\", \"writer\" => \"Tapas Adhikary\"}Please note, if you use the same key to add a value to a Map multiple times, it'll always replace the previous value:// Add a different writer\nmap.set('writer', 'Someone else!');So the output would be:Map(3) \n{\"name\" => \"freeCodeCamp\", \"type\" => \"blog\", \"writer\" => \"Someone else!\"}How to Get values from a Map in JavaScriptTo get a value from a Map, use the get(key) method:map.get('name'); // returns freeCodeCampAll About Map Keys in JavaScriptMap keys can be of any type, a primitive, or an object. This is one of the major differences between Map and regular JavaScript objects where the key can only be a string:// create a Map\nconst funMap = new Map();\n\nfunMap.set(360, 'My House Number'); // number as key\nfunMap.set(true, 'I write blogs!'); // boolean as key\n\nlet obj = {'name': 'tapas'}\nfunMap.set(obj, true); // object as key\n\nconsole.log(funMap);Here is the output:Map(3) \n{\n  360 => \"My House Number\", \n  true => \"I write blogs!\", \n  {\u2026} => true\n}A regular JavaScript object always treats the key as a string. Even when you pass it a primitive or object, it internally converts the key into a string:// Create an empty object\nconst funObj = {};\n\n// add a property. Note, passing the key as a number.\nfunObj[360] = 'My House Number';\n\n// It returns true because the number 360 got converted into the string '360' internally!\nconsole.log(funObj[360] === funObj['360']);Map Properties and Methods in JavaScriptJavaScript's Map has in-built properties and methods that make it easy to use. Here are some of the common ones:Use the size property to know how many elements are in a Map:Search an element with the has(key) method:Remove an element with the delete(key) method:Use the clear() method to remove all the elements from the Map at once:console.log('size of the map is', map.size);// returns true, if map has an element with the key, 'John'\nconsole.log(map.has('John')); \n\n\n// returns false, if map doesn't have an element with the key, 'Tapas'\nconsole.log(map.has('Tapas')); map.delete('Sam'); // removes the element with key, 'Sam'.// Clear the map by removing all the elements\nmap.clear(); \n\nmap.size // It will return, 0\nMapIterator: keys(), values(), and entries() in JavaScriptThe methods keys(), values() and entries() methods return a MapIterator, which is excellent because you can use a for-of or forEach loop directly on it.First, create a simple Map:const ageMap = new Map([\n  ['Jack', 20],\n  ['Alan', 34],\n  ['Bill', 10],\n  ['Sam', 9]\n]);Get all the keys:Get all the values:Get all the entries (key-value pairs):console.log(ageMap.keys());\n\n// Output:\n\n// MapIterator {\"Jack\", \"Alan\", \"Bill\", \"Sam\"}console.log(ageMap.values());\n\n// Output\n\n// MapIterator {20, 34, 10, 9}console.log(ageMap.entries());\n\n// Output\n\n// MapIterator {\"Jack\" => 20, \"Alan\" => 34, \"Bill\" => 10, \"Sam\" => 9}How to Iterate Over a Map in JavaScriptYou can use either the forEach or for-of loop to iterate over a Map:// with forEach\nageMap.forEach((value, key) => {\n   console.log(`${key} is ${value} years old!`);\n});\n\n// with for-of\nfor(const [key, value] of ageMap) {\n  console.log(`${key} is ${value} years old!`);\n}The output is going to be the same in both cases:Jack is 20 years old!\nAlan is 34 years old!\nBill is 10 years old!\nSam is 9 years old!How to Convert an Object into a Map in JavaScriptYou may encounter a situation where you need to convert an object to a Map-like structure. You can use the method entries of Object to do that:const address = {\n  'Tapas': 'Bangalore',\n  'James': 'Huston',\n  'Selva': 'Srilanka'\n};\n\nconst addressMap = new Map(Object.entries(address));How to Convert a Map into an Object in JavaScriptIf you want to do the reverse, you can use the fromEntries method:Object.fromEntries(map)How to Convert a Map into an Array in JavaScriptThere are a couple of ways to convert a map into an array:Using Array.from(map):Using the spread operator:const map = new Map();\nmap.set('milk', 200);\nmap.set(\"tea\", 300);\nmap.set('coffee', 500);\n\nconsole.log(Array.from(map));console.log([...map]);Map vs. Object: When should you use them?Map has characteristics of both object and array. However, Map is more like an object than array due to the nature of storing data in the key-value format.The similarity with objects ends here though. As you've seen, Map is different in a lot of ways. So, which one should you use, and when? How do you decide?Use Map when:Your needs are not that simple. You may want to create keys that are non-strings. Storing an object as a key is a very powerful approach. Map gives you this ability by default.You need a data structure where elements can be ordered. Regular objects do not maintain the order of their entries.You are looking for flexibility without relying on an external library like lodash. You may end up using a library like lodash because we do not find methods like has(), values(), delete(), or a property like size with a regular object. Map makes this easy for you by providing all these methods by default.Use an object when:You do not have any of the needs listed above.You rely on JSON.parse() as a Map cannot be parsed with it.Set in JavaScriptA Set is a collection of unique elements that can be of any type. Set is also an ordered collection of elements, which means that elements will be retrieved in the same order that they were inserted in.A Set in JavaScript behaves the same way as a mathematical set.How to Create and Initialize a Set in JavaScriptA new Set can be created like this:const set = new Set();\nconsole.log(set);And the output will be an empty Set:Set(0) {}Here's how to create a Set with some initial values:const fruteSet = new Set(['\ud83c\udf49', '\ud83c\udf4e', '\ud83c\udf48', '\ud83c\udf4f']);\nconsole.log(fruteSet);Output:Set(4) {\"\ud83c\udf49\", \"\ud83c\udf4e\", \"\ud83c\udf48\", \"\ud83c\udf4f\"}Set Properties and Methods in JavaScriptSet has methods to add an element to it, delete elements from it, check if an element exists in it, and to clear it completely:Use the size property to know the size of the Set. It returns the number of elements in it:Use the add(element) method to add an element to the Set:set.size// Create a set - saladSet\nconst saladSet = new Set();\n\n// Add some vegetables to it\nsaladSet.add('\ud83c\udf45'); // tomato\nsaladSet.add('\ud83e\udd51'); // avocado\nsaladSet.add('\ud83e\udd55'); // carrot\nsaladSet.add('\ud83e\udd52'); // cucumber\n\nconsole.log(saladSet);\n\n\n// Output\n\n// Set(4) {\"\ud83c\udf45\", \"\ud83e\udd51\", \"\ud83e\udd55\", \"\ud83e\udd52\"}I love cucumbers! How about adding one more?Oh no, I can't \u2013 Set is a collection of unique elements:saladSet.add('\ud83e\udd52');\nconsole.log(saladSet);The output is the same as before \u2013 nothing got added to the saladSet.Use the has(element) method to search if we have a carrot (\ud83e\udd55) or broccoli (\ud83e\udd66) in the Set:Use the delete(element) method to remove the avocado(\ud83e\udd51) from the Set:// The salad has a\ud83e\udd55, so returns true\nconsole.log('Does the salad have a carrot?', saladSet.has('\ud83e\udd55'));\n\n// The salad doesn't have a\ud83e\udd66, so returns false\nconsole.log('Does the salad have broccoli?', saladSet.has('\ud83e\udd66'));saladSet.delete('\ud83e\udd51');\nconsole.log('I do not like \ud83e\udd51, remove from the salad:', saladSet);Now our salad Set is as follows:Set(3) {\"\ud83c\udf45\", \"\ud83e\udd55\", \"\ud83e\udd52\"}Use the clear() method to remove all elements from a Set:saladSet.clear();How to Iterate Over a Set in JavaScriptSet has a method called values() which returns a SetIterator to get all its values:// Create a Set\nconst houseNos = new Set([360, 567, 101]);\n\n// Get the SetIterator using the `values()` method\nconsole.log(houseNos.values());Output:SetIterator {360, 567, 101}We can use a forEach or for-of loop on this to retrieve the values.Interestingly, JavaScript tries to make Set compatible with Map. That's why we find two of the same methods as Map, keys() and entries().As Set doesn't have keys, the keys() method returns a SetIterator to retrieve its values:console.log(houseNos.keys());\n\n// Output\n\n// console.log(houseNos.keys());With Map, the entries() method returns an iterator to retrieve key-value pairs. Again there are no keys in a Set, so entries() returns a SetIterator to retrieve the value-value pairs:console.log(houseNos.entries());\n\n// Output\n\n// SetIterator {360 => 360, 567 => 567, 101 => 101}How to Enumerate over a Set in JavaScriptWe can enumerate over a Set using forEach and for-of loops:// with forEach\n\nhouseNos.forEach((value) => {\n   console.log(value);\n});\n\n\n// with for-of\n\nfor(const value of houseNos) {\n   console.log(value);\n }The output of both is:360\n567\n101Sets and Arrays in JavaScriptAn array, like a Set, allows you to add and remove elements. But Set is quite different, and is not meant to replace arrays.The major difference between an array and a Set is that arrays allow you to have duplicate elements. Also, some of the Set operations like delete() are faster than array operations like shift() or splice().Think of Set as an extension of a regular array, just with more muscles. The Set data structure is not a replacement of the array. Both can solve interesting problems.How to Convert a Set into an array in JavaScriptConverting a Set into an array is simple:const arr = [...houseNos];\nconsole.log(arr);Unique values from an array using the Set in JavaScriptCreating a Set is a really easy way to remove duplicate values from an array:// Create a mixedFruit array with a few duplicate fruits\nconst mixedFruit = ['\ud83c\udf49', '\ud83c\udf4e', '\ud83c\udf49', '\ud83c\udf48', '\ud83c\udf4f', '\ud83c\udf4e', '\ud83c\udf48'];\n\n// Pass the array to create a set of unique fruits\nconst mixedFruitSet = new Set(mixedFruit);\n\nconsole.log(mixedFruitSet);Output:Set(4) {\"\ud83c\udf49\", \"\ud83c\udf4e\", \"\ud83c\udf48\", \"\ud83c\udf4f\"}Set and Object in JavaScriptA Set can have elements of any type, even objects:// Create a person object\nconst person = {\n   'name': 'Alex',\n   'age': 32\n };\n\n// Create a set and add the object to it\nconst pSet = new Set();\npSet.add(person);\nconsole.log(pSet);Output:No surprise here \u2013 the Set contains one element that is an object.Let's change a property of the object and add it to the set again:// Change the name of the person\nperson.name = 'Bob';\n\n// Add the person object to the set again\npSet.add(person);\nconsole.log(pSet);What do you think the output will be? Two person objects or just one?Here is the output:Set is a collection of unique elements. By changing the property of the object, we haven't changed the object itself. Hence Set will not allow duplicate elements.Set is a great data structure to use in addition to JavaScript arrays. It doesn't have a huge advantage over regular arrays, though.Use Set when you need to maintain a distinct set of data to perform set operations on like union, intersection, difference, and so on.In SummaryHere is a GitHub repository to find all the source code used in this article. If you found it helpful, please show your support by giving it a star: https://github.com/atapas/js-collections-map-setYou may also like some of my other articles:My Favorite JavaScript Tips and TricksJavaScript equality and similarity with ==, === and Object.is()If this article was useful, please share it so others can read it as well. You can @ me on Twitter (@tapasadhikary) with comments, or feel free to follow me.\n\n                        \n                    \n                    \n                        \n                        \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 14485, "excerpt": "In JavaScript, objects are used to store multiple values as a complex data\nstructure.\n\nAn object is created with curly braces {\u2026} and a list of properties. A property\nis a key-value pair where the key must be a string and the value can be of any\ntype.\n\nOn the other hand, arrays are an ordered collection that can hold data of any\ntype. In JavaScript, arrays are created with square brackets [...] and allow\nduplicate elements.\n\nUntil ES6 (ECMAScript 2015), JavaScript objects and arrays were the mos", "siteName": "freeCodeCamp.org", "publishedTime": "2020-10-05T16:59:05.000Z", "id": "7b35b0e8ba5580065c12963d88d5230a3f6439aa", "url": "https://www.freecodecamp.org/news/how-to-use-javascript-collections-map-and-set/", "domain": "freecodecamp.org", "date": "2023-12-27T18:06:30.914961", "resultUri": "http://localhost:3000/result/7b35b0e8ba5580065c12963d88d5230a3f6439aa", "query": {"url": ["https://www.freecodecamp.org/news/how-to-use-javascript-collections-map-and-set/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "How to Use JavaScript Collections \u2013 Map and Set", "description": "In JavaScript, objects are used to store multiple values as a complex data structure. An object is created with curly braces {\u2026} and a list of properties. A property is a key-value pair where the key must be a string and the value can be of any type. On the", "url": "https://www.freecodecamp.org/news/how-to-use-javascript-collections-map-and-set/", "image": "https://www.freecodecamp.org/news/content/images/2020/09/cover-5.png", "image:width": "1000", "image:height": "420"}, "twitter": {"card": "summary_large_image", "title": "How to Use JavaScript Collections \u2013 Map and Set", "description": "In JavaScript, objects are used to store multiple values as a complex data structure. An object is created with curly braces {\u2026} and a list of properties. A property is a key-value pair where the key must be a string and the value can be of any type. On the", "url": "https://www.freecodecamp.org/news/how-to-use-javascript-collections-map-and-set/", "image": "https://www.freecodecamp.org/news/content/images/2020/09/cover-5.png", "label1": "Written by", "data1": "TAPAS ADHIKARY", "label2": "Filed under", "data2": "JavaScript, Data Structures, Programming, Web Development", "site": "@freecodecamp", "creator": "@tapasadhikary"}}}