{"title": "Proven Code Review Best Practices", "byline": "Michaela Greiler", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>Proven Code Review Best Practices</h1>\n<section>\n<section data-test-label=\"post-content\">\n<p>What are the code review best practices companies such as Microsoft follow to \u00a0ensure <a href=\"https://www.michaelagreiler.com/great-code-review-feedback/\">great code review feedback</a>? How do you <a href=\"https://www.michaelagreiler.com/developer-productivity/\">stay productive</a> while doing code reviews? Learn proven code review best practices from Microsoft in this article.</p><p>The benefits of code reviews rise and fall with the value of the code review feedback. If done correctly, code reviews can help to ensure a high-quality code base. However, if teams are not aware of and do not follow code review best practices, developers may experience several <a href=\"https://www.michaelagreiler.com/code-review-pitfalls-slow-down/\">code review pitfalls</a>. In the worst case, <a href=\"https://www.michaelagreiler.com/wp-content/uploads/2019/02/Code-Reviews-Do-Not-Find-Bugs.-How-the-Current-Code-Review-Best-Practice-Slows-Us-Down.pdf\">reviewing code can slow your team down</a>.</p><p>I have been researching and working with teams at Microsoft for several years. Through <a href=\"https://www.michaelagreiler.com/publications/\">several large scale-studies</a>, we discovered a number of code review best practices that help teams stay productive and <a href=\"https://www.michaelagreiler.com/great-code-review-feedback/\">boost their code review value</a>. But first, let\u2019s start at the beginning. What does code review look like?</p><h3 id=\"a-typical-code-review-process\">A typical code review process</h3><p>A <a href=\"https://www.michaelagreiler.com/code-reviews-at-microsoft-how-to-code-review-at-a-large-software-company/\">typical tool-based code review process</a> starts when the engineer prepares the code for review. Then, she selects relevant reviewers for the code change. The reviewers are notified and give feedback on the code. The code review author works on the feedback until all parties are satisfied. Then, the code is checked into the common code base.</p><figure><img alt=\"0*ZOAaTZc1Z6XEK3Ri\" height=\"656\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/0*ZOAaTZc1Z6XEK3Ri\" width=\"414\"/></figure><p><em>A typical tool-based code review</em></p><p>To ensure that this process is smooth and does not become a nightmare, it is important to <a href=\"https://www.michaelagreiler.com/code-review-pitfalls-slow-down/\">understand code review pitfalls</a> and which code review best practices you can follow to overcome those.</p><p>The main code review pitfalls are:</p><ul><li>not getting useful feedback,</li><li>not having enough time to do code reviews,</li><li>code reviews taking too long causing long waiting times.</li></ul><p>The code review best practices I present below help counteract those pitfalls, by making the job of the reviewers as easy as possible. They also help the reviewer to focus on providing valuable feedback.</p><h3 id=\"code-review-best-practices-for-code-authors\">Code review best practices for code authors</h3><p>In a code review, there are two different stakeholders: the code author who asks for feedback and the code reviewers, who look through the code change and provide the feedback. As a code review starts with the author, I explain the code review best practices for code authors first.</p><p>For my e-mail subscribers, I prepared an <strong>exclusive code review e-book</strong> including a checklist with all code review best practices. I also added additional bonus insights. You can request the <a href=\"https://www.michaelagreiler.com/code-review-e-book/\">Code Review e-Book here</a>.</p><h3 id=\"read-through-the-change-carefully\">Read through the change carefully</h3><p>The first code review best practice is to read carefully through the code change before submitting the code for review. There is nothing worse than asking several developers to look through the code and give feedback on issues you could have fixed yourself.</p><p>This wastes everyone\u2019s time and it might make you look bad. For future code reviews, developers may also be reluctant to review your code.</p><p>So, ensure you use a code review tool or a diff tool that can highlight what changed between this and the previous version. Because the code is presented in a different way and changed code passages are highlighted, it makes it easier for you to review your code yourself before sending it out.</p><p>Often you will see changes that you actually forgot you made or missing issues highlighted you should fix before asking somebody to review.</p><p><a href=\"https://twitter.com/intent/tweet?url=https://www.michaelagreiler.com/code-review-pitfalls-slow-down/&amp;text=The%20best%20time%20to%20fix%20issues%20is%20before%20the%20code%20is%20sent%20out%20for%20review.%20&amp;via=mgreiler&amp;related=mgreiler\">The best time to fix issues is before the code is sent out for review. (Click to tweet).</a></p><figure><img alt=\"1*dvvMg-MkjhWYFzbM-Rpekw\" height=\"615\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/1*dvvMg-MkjhWYFzbM-Rpekw.jpeg\" width=\"922\"/></figure><p><em>Thoroughly look through your code before submitting for review (Photo by <a href=\"https://unsplash.com/photos/uAFjFsMS3YY?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Marten Newhall</a> on <a href=\"https://unsplash.com/search/photos/magnifier?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a>)</em></p><h3 id=\"aim-for-small-incremental-changes\">Aim for small, incremental changes</h3><p>As a developer, you should always strive for small, incremental and coherent changes. This best practice helps when working with code revision tools, such as git or SVN.</p><p>Small, incremental code changes are also a crucial code review best practice as other developers must be able to understand your code change in a small amount of time.</p><p><em>10 lines of code = 10 issues.</em></p><p><em>500 lines of code = \u201clooks fine.\u201d</em></p><p><em>Code reviews.</em></p><p><em>- I Am Devloper (@iamdevloper)</em> <a href=\"https://twitter.com/iamdevloper/status/397664295875805184?ref_src=twsrc%5Etfw\"><em>November 5, 2013</em></a></p><p>If several changes with different purpose happen within one code review <a href=\"https://www.michaelagreiler.com/code-review-pitfalls-slow-down/\">the task of code reviewing becomes more difficult</a>. This also decreases the ability of code reviewers to spot problems with the code. In several studies, we see that the value of the code review feedback decreases with the size of the change under review.</p><p>On the other hand, you also want to make sure the changes are coherent. Rarely code changes are too small to be sent out. It happens, but, not that often.</p><p><a href=\"https://twitter.com/intent/tweet?url=https://www.michaelagreiler.com/code-review-best-practices/&amp;text=The%20quality%20and%20value%20of%20code%20review%20feedback%20decrease%20with%20the%20size%20of%20the%20change.%20&amp;via=mgreiler&amp;related=mgreiler\">The quality and value of code review feedback decrease with the size of the change. (Click to tweet).</a></p><p>Another code review best practice is to cluster related code changed. Imagine you plan to add some new functionality, fix a bug in another function, and refactor a class. Then, each of those changes should be a separate code review. This way, you ensure the purpose of the code change is clear to the reviewers. A clear purpose makes the reviewing job much easier and increases the feedback value.</p><h3 id=\"describe-the-purpose-and-motivation-of-the-change\">Describe the purpose and motivation of the change</h3><p>One way to make sure you invest your time right during code review preparation is to write a description of what this code change is all about. With a small note, you help the code reviewers to understand the purpose of the code change and also why you changed it. This code review best practice speeds up code review time, increases the quality and value of the feedback, and improves code review participation rates.</p><figure><img alt=\"0*f-R3JWukTtkMA20T\" height=\"534\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/0*f-R3JWukTtkMA20T\" width=\"800\"/></figure><p><em>Code reviewing isn\u2019t a puzzle. Help reviewers focus on key issues by describing the code change. (Photo by <a href=\"https://unsplash.com/photos/3y1zF4hIPCg?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Hans-Peter Gauster</a> on <a href=\"https://unsplash.com/search/photos/puzzle?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a>)</em></p><p>Code reviewing isn\u2019t a puzzle. Help reviewers focus on key issues by describing the code change. (Click to tweet).</p><p>Interestingly, in our studies, we observed that developers really appreciate code change description. They actually wish that more people would write descriptions. On the other hand, we saw that the same developers did not always include descriptions themselves.</p><p>One reason for this is that when you write the code yourself, you are so involved with the code that you think it is self-explanatory. Fact is, it is not.</p><p>And if you do not help the reviewers to understand the code, <a href=\"https://www.michaelagreiler.com/code-review-pitfalls-slow-down/\">they will not be able to provide valuable feedback</a>.</p><p>So, write the note, even if it just says: \u201cUpdated the API endpoint to be compliant with security regulations\u201d.</p><p>How much easier did the job of reviewing the code just get with this note? Remember, code reviewing isn\u2019t a puzzle!</p><p><a href=\"https://twitter.com/intent/tweet?url=https://www.michaelagreiler.com/code-review-best-practices/&amp;text=Even%20if%20the%20code%20change%20seems%20trivial%20to%20you%2C%20add%20a%20description%2C%20so%20reviewers%20know%20what%20to%20expect.&amp;via=mgreiler&amp;related=mgreiler\">Even if the code change seems trivial to you, add a description, so reviewers know what to expect (Click to tweet).</a></p><h3 id=\"run-tests-before-submitting-a-code-review\">Run tests before submitting a code review</h3><p>Yes, take the time to run the tests for your code change. Testing isn\u2019t only a best engineering practice, but it\u2019s also a code review best practice. Because testing your code ensures that the code actually works before you ask for feedback.</p><p>In addition, it shows that you respect the time of the code reviewers. It is not only embarrassing to send out code that obviously (as the tests show) is not working as expected, it also kills everyone\u2019s productivity. So, run the tests first!</p><h3 id=\"automate-what-can-be-automated\">Automate what can be automated</h3><p>As one of the main pitfalls for code reviews is taking too long, you better follow the code review practices of automating what can be automated.</p><p>Use style checkers, syntax checkers and other automated tools like static analysis tools to help improve the code. This way, you make sure that code reviewers can really concentrate on giving valuable feedback and do not need to use their time to comment on issues that can be found automatically.</p><h3 id=\"skip-unnecessary-reviews\">Skip unnecessary reviews</h3><p>You read that right. Some reviews can be skipped. Obviously, it depends on your organizational policies, but if they permit it, you might consider skipping code reviews.</p><p>But stop before heading out and telling your team you need no code reviews anymore. Skipping code reviews is only advisable for trivial changes that do not change the logic such as commenting, formatting issues, renaming of local variable or stylistic fixes.</p><p><a href=\"https://twitter.com/intent/tweet?url=https://www.michaelagreiler.com/code-review-best-practices/&amp;text=Skipping%20unnecessary%20code%20reviews%20boosts%20your%20productivity.&amp;via=mgreiler&amp;related=mgreiler\">Skipping unnecessary code reviews boosts your productivity. Click to tweet.</a></p><h3 id=\"do-not-select-too-many-reviewers\">Do not select too many reviewers</h3><p>You should select the right number of reviewers for your code change. If now numbers above 4 people come to your mind, I\u2019d like you to stop right there. Because adding too many developers on code reviews does more harm than good.</p><p>One problem is that if you add too many developers, each one of them feels less responsible to give feedback. Another issue is that adding more people than necessary decreases your team\u2019s productivity.</p><p>Some studies suggest the code review best practice of adding only two active reviewers.</p><p>For some code changes, you want additional experts like security experts or developers from other teams to look through the code. But, more often than not, two active reviewers are just fine.</p><p>Many code review tools allow notifying developers without making them mandatory reviewers. This ensures that they stay in the loop and are aware of what is happening, but removes the obligation for them to comment on your code.</p><h3 id=\"add-experienced-reviewers-to-get-insightful-feedback\">Add experienced reviewers to get insightful feedback</h3><p>Studies have shown that the most insightful feedback comes from reviewers that have worked on the code you are going to change before. They are the ones that give the most insightful feedback.</p><p>How often a reviewer has already reviewed code influences the ability to give useful feedback. Similar, experienced and senior developers tend to give better code review feedback.</p><p>But, be mindful about the workload of senior engineers, as they tend to be added as reviewers a lot.</p><p><a href=\"https://twitter.com/intent/tweet?url=https://www.michaelagreiler.com/code-review-best-practices/&amp;text=Developers%20that%20changed%20or%20reviewed%20pieces%20of%20the%20code%20before%2C%20give%20the%20most%20valuable%20code%20review%20feedback.&amp;via=mgreiler&amp;related=mgreiler\">Developers that changed or reviewed pieces of the code before, give the most valuable code review feedback. (Click to tweet).</a></p><h3 id=\"add-junior-developers-to-let-them-learn\">Add junior developers to let them learn</h3><p>One of the code review goals is training and learning, so do not forget to include junior developers. Consider adding reviewers that are not familiar with the code base, but that would benefit from the knowledge to allow knowledge dissemination.</p><h3 id=\"notify-people-that-benefit-from-this-review\">Notify people that benefit from this review</h3><p>For some people, like project managers or team leads, receiving notification about code reviews (without being actually required to do the code review) is beneficial. But, you have to take a conscious decision on whom you gonna notify. Not everybody really cares or should care about your code review.</p><h3 id=\"don-t-notify-too-many-people\">Don\u2019t notify too many people</h3><p>Do not add everybody on the notification list. Only add people who actually benefit from the information that a code review is in the process.</p><p>I have seen teams, where each team member was added to each of the code review of the extended team by default (+70 people). This practice is like adding nobody to the list. Or in the worst case, you have several of your engineers spending their time looking through hundreds of code reviews to figure out if it\u2019s relevant for them.</p><h3 id=\"give-reviewers-a-heads-up-before-the-review\">Give reviewers a heads-up before the review</h3><p>A really effective code review best practice is to let your co-workers know ahead of time that they will receive a code review soon. This code review best practice reduces turn-around times substantially.</p><p>So, let them know a code review is coming their way as soon as possible.</p><p><a href=\"https://twitter.com/intent/tweet?url=https://www.michaelagreiler.com/code-review-best-practices/&amp;text=Giving%20people%20a%20heads-up%20that%20a%20code%20review%20is%20on%20its%20way%20can%20speed%20up%20review%20time.%20&amp;via=mgreiler&amp;related=mgreiler\">Giving people a heads-up that a code review is on its way can speed up review time. (Click to tweet).</a></p><h3 id=\"be-open-to-suggested-changes\">Be open to suggested changes</h3><p>Receiving unexpected comments or feedback might make you tense and defensive. Try to prepare yourself mentally and work on your ability to be open to suggestions and different viewpoints. Always start with the assumption that the reviewer had the best intention.</p><p>If some feedback made you uncomfortable try to sort things out as soon as possible. Sometimes it is a good idea to have more personal face-to-face conversations to resolve some issues.</p><figure><img alt=\"1*oWg1z_ShPb7yfPB1G7VzSg\" height=\"703\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/1*oWg1z_ShPb7yfPB1G7VzSg.jpeg\" width=\"1054\"/></figure><p><em>Don\u2019t be defensive if confronted with unexpected feedback. (Photo by <a href=\"https://unsplash.com/photos/2VwP6rUzZQ0?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Sweet Ice Cream Photography</a> on <a href=\"https://unsplash.com/search/photos/danger?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a>)</em></p><h3 id=\"show-respect-and-gratitude-to-the-reviewers\">Show respect and gratitude to the reviewers</h3><p>Code reviews rise and fall with the team\u2019s feedback culture. As a code author, show gratitude and value the received feedback. Make sure to carefully consider the reviewers\u2019 feedback and communicate throughout the feedback cycle.</p><p>Tell the reviewers which actions you took and which decisions you made because of the received feedback in a respectful manner.</p><p><a href=\"https://twitter.com/intent/tweet?url=https://www.michaelagreiler.com/code-review-best-practices/&amp;text=Code%20review%20rises%20and%20falls%20with%20the%20quality%20of%20the%20team%27s%20feedback%20culture.&amp;via=mgreiler&amp;related=mgreiler\">Code review rises and falls with the quality of the team\u2019s feedback culture. (Click to tweet).</a></p><p>But, creating a great feedback culture is a two-way street. Naturally, code reviewers influence the culture a lot. So let us look closely at the code review best practices for code reviewers.</p><h3 id=\"code-review-best-practices-for-code-reviewers\">Code Review Best Practices for Code Reviewers</h3><p>Being asked to give feedback on a code review is an honor, so you want to make sure you know <a href=\"https://www.michaelagreiler.com/great-code-review-feedback/\">how to give valuable code review feedback</a>.</p><p>During code reviews, you can not only demonstrate your skills and knowledge but also mentor other developers and contribute to the team\u2019s success. Nothing worth than investing time in <a href=\"https://www.michaelagreiler.com/code-review-pitfalls-slow-down/\">code reviews and not getting valuable feedback</a>.</p><h3 id=\"give-respectful-and-constructive-feedback\">Give respectful and constructive feedback</h3><p>Even though it reads like a no-brainer, code reviews do put the code author in a vulnerable position, so you must be considerate of that. <br/>Your job is it to give constructive and valuable feedback but also to do so in a respectful manner.</p><p>Especially using code review tooling, please reflect on how and what kind of feedback you give. It is just so easy to hurt someone feelings\u200a\u2014\u200aespecially in written form. Too often time pressure might make you give a sloppy answer that can be misinterpreted.</p><h3 id=\"go-and-talk-in-person-if-necessary\">Go and talk in person if necessary</h3><p>Code review tools and chat-tools allow us to communicate with our peers in an asynchronous and effortless way. But, there are quite a few situations where a proper human interaction, either face to face or via voice/video cannot be bet.</p><p>Complex issues, for example, can be much more efficient and positively resolved once you hop over to your colleague or call her and discuss it personally. The same holds true for contentious issues or sensitive matters.</p><p>Maybe it is a better strategy to write a private email or seek a personal discussion with the code author if you think you might hurt some feelings are make the engineer lose the face. So, whenever you face a complex issue or might hurt some feelings, rethink your communication channels and act accordingly.</p><h3 id=\"ensure-traceability-for-decisions\">Ensure traceability for decisions</h3><p>Even though less traceable conversations, such as face to face or video calls can make a big difference for team dynamics, it is important to document the discussion. Especially the code review outcome should be tracked for future reference by using traceable tools such as the code review tool.</p><p>The code review tool is the right communication channel for all simple matters, as it allows the whole team to follow along, and enables to look-up decisions and understand code development after the fact.</p><figure><img alt=\"1*b9Y7gwaQTuwuJHHn0WnitQ\" height=\"768\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/1*b9Y7gwaQTuwuJHHn0WnitQ.jpeg\" width=\"1152\"/></figure><p><em>Leaving traces about your decisions and changes helps to understand code evolvement (Photo by <a href=\"https://unsplash.com/photos/GM9Xpgb0g98?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Marten Bjork</a> on <a href=\"https://unsplash.com/search/photos/trace?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a>)</em></p><h3 id=\"always-explain-why-you-rejected-a-change\">Always explain why you rejected a change</h3><p>Let\u2019s be honest. Having a code change rejected isn\u2019t something the code author will enjoy. So, it is important that you are thoughtful and explain your rejection in a polite, constructive and friendly way.</p><p>Explaining the reasons behind your decision does not only help the code author to learn and grow but also helps the author to understand your viewpoint. It also promotes an ongoing dialog with the author.</p><p>Tell the code author exactly what she has to do to get the change accepted.</p><p><a href=\"https://twitter.com/intent/tweet?url=https://www.michaelagreiler.com/code-review-best-practices/&amp;text=If%20you%20have%20to%20reject%20a%20code%20change%2C%20explain%20exactly%20what%20has%20to%20happen%20that%20the%20change%20can%20be%20approved.&amp;via=mgreiler&amp;related=mgreiler\">If you have to reject a code change, explain exactly what has to happen that the change can be approved. (Click to tweet).</a></p><h3 id=\"code-review-best-practices-for-boosting-productivity\">Code review best practices for boosting productivity</h3><p>Some of the biggest challenges during code reviews, for both the code author and the code reviewer are time constraints.</p><p>As a reviewer, you might find it challenging to take time out of your daily tasks to review the code of your peers. But, code reviews can be very beneficial to you and the team if done in the right way.</p><h3 id=\"integrate-code-review-into-your-daily-routine\">Integrate code review into your daily routine</h3><p>Structure your day-to-day business in a way that you set dedicated time aside just for doing code reviews. For example, plan to work on code reviews every day from 11 to 12 AM.</p><p>This way you make sure you can account the time for code reviews, and also make it an anticipated activity for you and your team. This schedule will come in handy every time you have a reflection on your work progress or an evaluation of your work.</p><h3 id=\"reduce-task-switching-as-it-kills-productivity\">Reduce task switching as it kills productivity</h3><p><a href=\"https://www.michaelagreiler.com/developer-productivity/\">Switching from one task to another is costly</a>. Knowing you do not stop whatever you do every time a code review comes along your way ensures you can work more focused.</p><p>Which time slots work depends on your workload, the number of code reviews you have to perform as well as on the time those reviews normally come in. In some settings, your team benefits from two (shorter) scheduled reviewing times, such as in the morning and before you leave the office. This way, your peers do not have to wait for your feedback too long.</p><figure><img alt=\"1*WQJJWck316aARPb0jFk97w\" height=\"512\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/1*WQJJWck316aARPb0jFk97w.png\" width=\"1024\"/></figure><p><em>Task switching kills productivity (Photo by <a href=\"https://unsplash.com/photos/1K9T5YiZ2WU?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Tim Gouw</a> on <a href=\"https://unsplash.com/search/photos/problem?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a>)</em></p><p><a href=\"https://twitter.com/intent/tweet?url=https://www.michaelagreiler.com/code-review-best-practices/&amp;text=%20Task%20switching%20kills%20productivity.%20So%20have%20dedicated%20code%20review%20times.%20%23codereview%20&amp;via=mgreiler&amp;related=mgreiler\">Task switching kills productivity. So have dedicated code review times.</a> <a href=\"https://twitter.com/intent/tweet?url=https://www.michaelagreiler.com/code-review-best-practices/&amp;text=%20Task%20switching%20kills%20productivity.%20So%20have%20dedicated%20code%20review%20times.%20%23codereview%20&amp;via=mgreiler&amp;related=mgreiler\">#codereview</a> <a href=\"https://twitter.com/intent/tweet?url=https://www.michaelagreiler.com/code-review-best-practices/&amp;text=%20Task%20switching%20kills%20productivity.%20So%20have%20dedicated%20code%20review%20times.%20%23codereview%20&amp;via=mgreiler&amp;related=mgreiler\">(Click to tweet)</a></p><h3 id=\"give-feedback-in-a-timely-manner\">Give feedback in a timely manner</h3><p>It is not advisable to jump right into a code review, whenever the notifications pop up, because of context switching costs. Still, it has several advantages for you and the code author to review the code in a timely matter.</p><p>Giving feedback as soon as possible ensures that the code author is not blocked by waiting for feedback. Also, if the author has to wait too long, it becomes harder for her or him to remember the changes and incorporate the feedback. Remember long waiting times are a number one <a href=\"https://www.michaelagreiler.com/code-review-pitfalls-slow-down/\">code review pitfall</a>.</p><p>Being one of the first reviewers (especially if there are quite a few) also ensures your effort looking through the code <a href=\"https://www.michaelagreiler.com/great-code-review-feedback/\">actually adds value</a>. If you are the fifth person inspecting the code, chances are you are not going to add new insights anymore. If that happens frequently, you should implement the code review best practice for selecting fewer reviewers.</p><h3 id=\"review-frequently-not-in-a-big-bang-fashion\">Review frequently not in a big bang fashion</h3><p>Research shows that you can give better quality feedback if you review frequently and therefore less changes at a time. That means that you do not wait until several code reviews pile up to look through them in one go. Instead, you stick to your schedule and review one code review (or even parts of one if it is a larger code review) at a time.</p><p>If code reviews are generally too large and take too long, you can suggest the code review best practices for small, incremental and coherent changes to the code review authors.</p><p><a href=\"https://twitter.com/intent/tweet?url=https://www.michaelagreiler.com/code-review-best-practices/&amp;text=Give%20better%20quality%20feedback%20to%20code%20reviews%20by%20not%20letting%20them%20pile%20up.&amp;via=mgreiler&amp;related=mgreiler\">Give better quality feedback to code reviews by not letting them pile up. (Click to tweet).</a></p><h3 id=\"focus-on-core-issues-less-nit-picking\">Focus on core issues, less nit-picking</h3><p>Your goal as a reviewer should be to help with core issues, such as bugs, architectural problems, structural problems or problems that will lead to maintainability issues.</p><p>Obviously, if you see typos, badly named variables or styling issues, you might also point that out. Still, this is not your main tasks and, understandably, over <a href=\"https://www.michaelagreiler.com/code-review-pitfalls-slow-down/\">discussing minor issues isn\u2019t valuable to code authors.</a></p><h3 id=\"use-a-review-checklists\">Use a review checklists</h3><p>Another code review best practice is to use a systematic approach for code reviews. A code review checklist can speed-up and improve your code review performance. Instead of making one from scratch, download a ready-made list and customize it to fit your team\u2019s practices and your needs. Be sure to look for a checklist that is tailored towards your technology stack. </p><h3 id=\"code-review-best-practices-checklist\">Code review best practices checklist</h3><p>Now you know all the code review best practices to make the most out of code reviews. If you enjoyed this post, consider subscribing to my email list.</p><p>I prepared an exclusive <a href=\"https://www.michaelagreiler.com/code-review-e-book/\">Code Review e-Book</a> for my e-mail subscribers to help you remember the code review best practices. I also added other great insights and summaries about code reviews. Get the 12 page insights to code reviews now. Not a subscriber yet? Just sign-up.</p><figure><img alt=\"1*HBwTGSldWHSf2u7yZ-8X1A\" height=\"561\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/1*HBwTGSldWHSf2u7yZ-8X1A.jpeg\" width=\"860\"/></figure><h2 id=\"want-more-on-code-reviews\">Want more on Code Reviews?</h2><p>Check out <a href=\"https://www.michaelagreiler.com/code-review-best-practices/\">proven code review best practices</a>, learn about which <a href=\"https://www.michaelagreiler.com/code-review-pitfalls-slow-down/\">code review pitfalls</a> you should avoid, and also how to <a href=\"https://www.michaelagreiler.com/great-code-review-feedback/\">boost your code review value with great feedback</a>.</p><p>To <strong>stay in the loop</strong> and never miss a blog post, <strong>sign-up</strong> to my email list and get the <strong>exclusive code review e-book.</strong> You can request the <a href=\"https://www.michaelagreiler.com/code-review-e-book/\">Code Review e-Book here</a>.</p><h3 id=\"you-find-me-on-twitter\">You find me on Twitter</h3><p><a href=\"https://twitter.com/mgreiler\">Let's connect on Twitter</a> to discuss software engineering topics and code reviews there.</p><hr/><p><em>Originally published at</em> <a href=\"https://www.michaelagreiler.com/code-review-best-practices/\"><em>https://www.michaelagreiler.com</em></a> <em>on May 2, 2019.</em></p>\n</section>\n<hr/>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nWhat are the code review best practices companies such as Microsoft follow to \u00a0ensure great code review feedback? How do you stay productive while doing code reviews? Learn proven code review best practices from Microsoft in this article.The benefits of code reviews rise and fall with the value of the code review feedback. If done correctly, code reviews can help to ensure a high-quality code base. However, if teams are not aware of and do not follow code review best practices, developers may experience several code review pitfalls. In the worst case, reviewing code can slow your team down.I have been researching and working with teams at Microsoft for several years. Through several large scale-studies, we discovered a number of code review best practices that help teams stay productive and boost their code review value. But first, let\u2019s start at the beginning. What does code review look like?A typical code review processA typical tool-based code review process starts when the engineer prepares the code for review. Then, she selects relevant reviewers for the code change. The reviewers are notified and give feedback on the code. The code review author works on the feedback until all parties are satisfied. Then, the code is checked into the common code base.A typical tool-based code reviewTo ensure that this process is smooth and does not become a nightmare, it is important to understand code review pitfalls and which code review best practices you can follow to overcome those.The main code review pitfalls are:not getting useful feedback,not having enough time to do code reviews,code reviews taking too long causing long waiting times.The code review best practices I present below help counteract those pitfalls, by making the job of the reviewers as easy as possible. They also help the reviewer to focus on providing valuable feedback.Code review best practices for code authorsIn a code review, there are two different stakeholders: the code author who asks for feedback and the code reviewers, who look through the code change and provide the feedback. As a code review starts with the author, I explain the code review best practices for code authors first.For my e-mail subscribers, I prepared an exclusive code review e-book including a checklist with all code review best practices. I also added additional bonus insights. You can request the Code Review e-Book here.Read through the change carefullyThe first code review best practice is to read carefully through the code change before submitting the code for review. There is nothing worse than asking several developers to look through the code and give feedback on issues you could have fixed yourself.This wastes everyone\u2019s time and it might make you look bad. For future code reviews, developers may also be reluctant to review your code.So, ensure you use a code review tool or a diff tool that can highlight what changed between this and the previous version. Because the code is presented in a different way and changed code passages are highlighted, it makes it easier for you to review your code yourself before sending it out.Often you will see changes that you actually forgot you made or missing issues highlighted you should fix before asking somebody to review.The best time to fix issues is before the code is sent out for review. (Click to tweet).Thoroughly look through your code before submitting for review (Photo by Marten Newhall on Unsplash)Aim for small, incremental changesAs a developer, you should always strive for small, incremental and coherent changes. This best practice helps when working with code revision tools, such as git or SVN.Small, incremental code changes are also a crucial code review best practice as other developers must be able to understand your code change in a small amount of time.10 lines of code = 10 issues.500 lines of code = \u201clooks fine.\u201dCode reviews.- I Am Devloper (@iamdevloper) November 5, 2013If several changes with different purpose happen within one code review the task of code reviewing becomes more difficult. This also decreases the ability of code reviewers to spot problems with the code. In several studies, we see that the value of the code review feedback decreases with the size of the change under review.On the other hand, you also want to make sure the changes are coherent. Rarely code changes are too small to be sent out. It happens, but, not that often.The quality and value of code review feedback decrease with the size of the change. (Click to tweet).Another code review best practice is to cluster related code changed. Imagine you plan to add some new functionality, fix a bug in another function, and refactor a class. Then, each of those changes should be a separate code review. This way, you ensure the purpose of the code change is clear to the reviewers. A clear purpose makes the reviewing job much easier and increases the feedback value.Describe the purpose and motivation of the changeOne way to make sure you invest your time right during code review preparation is to write a description of what this code change is all about. With a small note, you help the code reviewers to understand the purpose of the code change and also why you changed it. This code review best practice speeds up code review time, increases the quality and value of the feedback, and improves code review participation rates.Code reviewing isn\u2019t a puzzle. Help reviewers focus on key issues by describing the code change. (Photo by Hans-Peter Gauster on Unsplash)Code reviewing isn\u2019t a puzzle. Help reviewers focus on key issues by describing the code change. (Click to tweet).Interestingly, in our studies, we observed that developers really appreciate code change description. They actually wish that more people would write descriptions. On the other hand, we saw that the same developers did not always include descriptions themselves.One reason for this is that when you write the code yourself, you are so involved with the code that you think it is self-explanatory. Fact is, it is not.And if you do not help the reviewers to understand the code, they will not be able to provide valuable feedback.So, write the note, even if it just says: \u201cUpdated the API endpoint to be compliant with security regulations\u201d.How much easier did the job of reviewing the code just get with this note? Remember, code reviewing isn\u2019t a puzzle!Even if the code change seems trivial to you, add a description, so reviewers know what to expect (Click to tweet).Run tests before submitting a code reviewYes, take the time to run the tests for your code change. Testing isn\u2019t only a best engineering practice, but it\u2019s also a code review best practice. Because testing your code ensures that the code actually works before you ask for feedback.In addition, it shows that you respect the time of the code reviewers. It is not only embarrassing to send out code that obviously (as the tests show) is not working as expected, it also kills everyone\u2019s productivity. So, run the tests first!Automate what can be automatedAs one of the main pitfalls for code reviews is taking too long, you better follow the code review practices of automating what can be automated.Use style checkers, syntax checkers and other automated tools like static analysis tools to help improve the code. This way, you make sure that code reviewers can really concentrate on giving valuable feedback and do not need to use their time to comment on issues that can be found automatically.Skip unnecessary reviewsYou read that right. Some reviews can be skipped. Obviously, it depends on your organizational policies, but if they permit it, you might consider skipping code reviews.But stop before heading out and telling your team you need no code reviews anymore. Skipping code reviews is only advisable for trivial changes that do not change the logic such as commenting, formatting issues, renaming of local variable or stylistic fixes.Skipping unnecessary code reviews boosts your productivity. Click to tweet.Do not select too many reviewersYou should select the right number of reviewers for your code change. If now numbers above 4 people come to your mind, I\u2019d like you to stop right there. Because adding too many developers on code reviews does more harm than good.One problem is that if you add too many developers, each one of them feels less responsible to give feedback. Another issue is that adding more people than necessary decreases your team\u2019s productivity.Some studies suggest the code review best practice of adding only two active reviewers.For some code changes, you want additional experts like security experts or developers from other teams to look through the code. But, more often than not, two active reviewers are just fine.Many code review tools allow notifying developers without making them mandatory reviewers. This ensures that they stay in the loop and are aware of what is happening, but removes the obligation for them to comment on your code.Add experienced reviewers to get insightful feedbackStudies have shown that the most insightful feedback comes from reviewers that have worked on the code you are going to change before. They are the ones that give the most insightful feedback.How often a reviewer has already reviewed code influences the ability to give useful feedback. Similar, experienced and senior developers tend to give better code review feedback.But, be mindful about the workload of senior engineers, as they tend to be added as reviewers a lot.Developers that changed or reviewed pieces of the code before, give the most valuable code review feedback. (Click to tweet).Add junior developers to let them learnOne of the code review goals is training and learning, so do not forget to include junior developers. Consider adding reviewers that are not familiar with the code base, but that would benefit from the knowledge to allow knowledge dissemination.Notify people that benefit from this reviewFor some people, like project managers or team leads, receiving notification about code reviews (without being actually required to do the code review) is beneficial. But, you have to take a conscious decision on whom you gonna notify. Not everybody really cares or should care about your code review.Don\u2019t notify too many peopleDo not add everybody on the notification list. Only add people who actually benefit from the information that a code review is in the process.I have seen teams, where each team member was added to each of the code review of the extended team by default (+70 people). This practice is like adding nobody to the list. Or in the worst case, you have several of your engineers spending their time looking through hundreds of code reviews to figure out if it\u2019s relevant for them.Give reviewers a heads-up before the reviewA really effective code review best practice is to let your co-workers know ahead of time that they will receive a code review soon. This code review best practice reduces turn-around times substantially.So, let them know a code review is coming their way as soon as possible.Giving people a heads-up that a code review is on its way can speed up review time. (Click to tweet).Be open to suggested changesReceiving unexpected comments or feedback might make you tense and defensive. Try to prepare yourself mentally and work on your ability to be open to suggestions and different viewpoints. Always start with the assumption that the reviewer had the best intention.If some feedback made you uncomfortable try to sort things out as soon as possible. Sometimes it is a good idea to have more personal face-to-face conversations to resolve some issues.Don\u2019t be defensive if confronted with unexpected feedback. (Photo by Sweet Ice Cream Photography on Unsplash)Show respect and gratitude to the reviewersCode reviews rise and fall with the team\u2019s feedback culture. As a code author, show gratitude and value the received feedback. Make sure to carefully consider the reviewers\u2019 feedback and communicate throughout the feedback cycle.Tell the reviewers which actions you took and which decisions you made because of the received feedback in a respectful manner.Code review rises and falls with the quality of the team\u2019s feedback culture. (Click to tweet).But, creating a great feedback culture is a two-way street. Naturally, code reviewers influence the culture a lot. So let us look closely at the code review best practices for code reviewers.Code Review Best Practices for Code ReviewersBeing asked to give feedback on a code review is an honor, so you want to make sure you know how to give valuable code review feedback.During code reviews, you can not only demonstrate your skills and knowledge but also mentor other developers and contribute to the team\u2019s success. Nothing worth than investing time in code reviews and not getting valuable feedback.Give respectful and constructive feedbackEven though it reads like a no-brainer, code reviews do put the code author in a vulnerable position, so you must be considerate of that. Your job is it to give constructive and valuable feedback but also to do so in a respectful manner.Especially using code review tooling, please reflect on how and what kind of feedback you give. It is just so easy to hurt someone feelings\u200a\u2014\u200aespecially in written form. Too often time pressure might make you give a sloppy answer that can be misinterpreted.Go and talk in person if necessaryCode review tools and chat-tools allow us to communicate with our peers in an asynchronous and effortless way. But, there are quite a few situations where a proper human interaction, either face to face or via voice/video cannot be bet.Complex issues, for example, can be much more efficient and positively resolved once you hop over to your colleague or call her and discuss it personally. The same holds true for contentious issues or sensitive matters.Maybe it is a better strategy to write a private email or seek a personal discussion with the code author if you think you might hurt some feelings are make the engineer lose the face. So, whenever you face a complex issue or might hurt some feelings, rethink your communication channels and act accordingly.Ensure traceability for decisionsEven though less traceable conversations, such as face to face or video calls can make a big difference for team dynamics, it is important to document the discussion. Especially the code review outcome should be tracked for future reference by using traceable tools such as the code review tool.The code review tool is the right communication channel for all simple matters, as it allows the whole team to follow along, and enables to look-up decisions and understand code development after the fact.Leaving traces about your decisions and changes helps to understand code evolvement (Photo by Marten Bjork on Unsplash)Always explain why you rejected a changeLet\u2019s be honest. Having a code change rejected isn\u2019t something the code author will enjoy. So, it is important that you are thoughtful and explain your rejection in a polite, constructive and friendly way.Explaining the reasons behind your decision does not only help the code author to learn and grow but also helps the author to understand your viewpoint. It also promotes an ongoing dialog with the author.Tell the code author exactly what she has to do to get the change accepted.If you have to reject a code change, explain exactly what has to happen that the change can be approved. (Click to tweet).Code review best practices for boosting productivitySome of the biggest challenges during code reviews, for both the code author and the code reviewer are time constraints.As a reviewer, you might find it challenging to take time out of your daily tasks to review the code of your peers. But, code reviews can be very beneficial to you and the team if done in the right way.Integrate code review into your daily routineStructure your day-to-day business in a way that you set dedicated time aside just for doing code reviews. For example, plan to work on code reviews every day from 11 to 12 AM.This way you make sure you can account the time for code reviews, and also make it an anticipated activity for you and your team. This schedule will come in handy every time you have a reflection on your work progress or an evaluation of your work.Reduce task switching as it kills productivitySwitching from one task to another is costly. Knowing you do not stop whatever you do every time a code review comes along your way ensures you can work more focused.Which time slots work depends on your workload, the number of code reviews you have to perform as well as on the time those reviews normally come in. In some settings, your team benefits from two (shorter) scheduled reviewing times, such as in the morning and before you leave the office. This way, your peers do not have to wait for your feedback too long.Task switching kills productivity (Photo by Tim Gouw on Unsplash)Task switching kills productivity. So have dedicated code review times. #codereview (Click to tweet)Give feedback in a timely mannerIt is not advisable to jump right into a code review, whenever the notifications pop up, because of context switching costs. Still, it has several advantages for you and the code author to review the code in a timely matter.Giving feedback as soon as possible ensures that the code author is not blocked by waiting for feedback. Also, if the author has to wait too long, it becomes harder for her or him to remember the changes and incorporate the feedback. Remember long waiting times are a number one code review pitfall.Being one of the first reviewers (especially if there are quite a few) also ensures your effort looking through the code actually adds value. If you are the fifth person inspecting the code, chances are you are not going to add new insights anymore. If that happens frequently, you should implement the code review best practice for selecting fewer reviewers.Review frequently not in a big bang fashionResearch shows that you can give better quality feedback if you review frequently and therefore less changes at a time. That means that you do not wait until several code reviews pile up to look through them in one go. Instead, you stick to your schedule and review one code review (or even parts of one if it is a larger code review) at a time.If code reviews are generally too large and take too long, you can suggest the code review best practices for small, incremental and coherent changes to the code review authors.Give better quality feedback to code reviews by not letting them pile up. (Click to tweet).Focus on core issues, less nit-pickingYour goal as a reviewer should be to help with core issues, such as bugs, architectural problems, structural problems or problems that will lead to maintainability issues.Obviously, if you see typos, badly named variables or styling issues, you might also point that out. Still, this is not your main tasks and, understandably, over discussing minor issues isn\u2019t valuable to code authors.Use a review checklistsAnother code review best practice is to use a systematic approach for code reviews. A code review checklist can speed-up and improve your code review performance. Instead of making one from scratch, download a ready-made list and customize it to fit your team\u2019s practices and your needs. Be sure to look for a checklist that is tailored towards your technology stack. Code review best practices checklistNow you know all the code review best practices to make the most out of code reviews. If you enjoyed this post, consider subscribing to my email list.I prepared an exclusive Code Review e-Book for my e-mail subscribers to help you remember the code review best practices. I also added other great insights and summaries about code reviews. Get the 12 page insights to code reviews now. Not a subscriber yet? Just sign-up.Want more on Code Reviews?Check out proven code review best practices, learn about which code review pitfalls you should avoid, and also how to boost your code review value with great feedback.To stay in the loop and never miss a blog post, sign-up to my email list and get the exclusive code review e-book. You can request the Code Review e-Book here.You find me on TwitterLet's connect on Twitter to discuss software engineering topics and code reviews there.Originally published at https://www.michaelagreiler.com on May 2, 2019.\n\n                        \n                    \n                    \n                        \n                        \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 21144, "excerpt": "What are the code review best practices companies such as Microsoft follow to\n\u00a0ensure great code review feedback\n[https://www.michaelagreiler.com/great-code-review-feedback/]? How do you stay\nproductive [https://www.michaelagreiler.com/developer-productivity/] while doing\ncode reviews? Learn proven code review best practices from Microsoft in this\narticle.\n\nThe benefits of code reviews rise and fall with the value of the code review\nfeedback. If done correctly, code reviews can help to ensure a", "siteName": "freeCodeCamp.org", "publishedTime": "2019-06-24T07:39:00.000Z", "id": "530c582be4084ef37e2036ee63f11693a1d4263e", "url": "https://www.freecodecamp.org/news/proven-code-review-best-practices/", "domain": "freecodecamp.org", "date": "2023-12-27T18:09:05.761418", "resultUri": "http://localhost:3000/result/530c582be4084ef37e2036ee63f11693a1d4263e", "query": {"url": ["https://www.freecodecamp.org/news/proven-code-review-best-practices/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "Proven Code Review Best Practices", "description": "What are the code review best practices companies such as Microsoft follow to \u00a0ensure great code review feedback [https://www.michaelagreiler.com/great-code-review-feedback/]? How do you stay productive [https://www.michaelagreiler.com/developer-productivity/] while doing code reviews? Learn proven code review best practices from Microsoft in this article. The benefits of code reviews rise and fall with the", "url": "https://www.freecodecamp.org/news/proven-code-review-best-practices/", "image": "https://www.freecodecamp.org/news/content/images/2019/06/Code-Review-Best-Practice-2.png", "image:width": "1024", "image:height": "512"}, "twitter": {"card": "summary_large_image", "title": "Proven Code Review Best Practices", "description": "What are the code review best practices companies such as Microsoft follow to \u00a0ensure great code review feedback [https://www.michaelagreiler.com/great-code-review-feedback/]? How do you stay productive [https://www.michaelagreiler.com/developer-productivity/] while doing code reviews? Learn proven code review best practices from Microsoft in this article. The benefits of code reviews rise and fall with the", "url": "https://www.freecodecamp.org/news/proven-code-review-best-practices/", "image": "https://www.freecodecamp.org/news/content/images/2019/06/Code-Review-Best-Practice-2.png", "label1": "Written by", "data1": "Michaela Greiler", "label2": "Filed under", "data2": "Software Development, Code Review, Software Engineering, Programming, Technology", "site": "@freecodecamp", "creator": "@mgreiler"}}}