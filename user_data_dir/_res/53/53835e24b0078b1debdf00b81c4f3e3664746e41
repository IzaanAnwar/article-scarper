{"title": "How to survive and thrive in your first junior developer job", "byline": "Khalil Stemmler", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>How to survive and thrive in your first junior developer job</h1>\n<section>\n<section data-test-label=\"post-content\">\n<p>Landing your first junior developer job is an <strong>amazing</strong> accomplishment. You\u2019ve worked really hard towards getting the skills to pay the bills and now you\u2019re ready to prove yourself in your new job.</p><p>You\u2019re definitely excited. And you should be. Being a developer is awesome. But with that excitement, it\u2019s also normal to be feeling a bit nervous. My first week as a developer was pretty hectic. My first day, I was given a 200 line SQL query to try to make sense of\u2026 I still have flashbacks from that. Generally speaking, you\u2019re going to feel like there\u2019s so much you don\u2019t quite know or understand, but it\u2019s all a part of the experience.</p><p>In order to make your transition into the working world as a developer as smooth as possible and really bring value to your team, here are my professional recommendations.</p><h3 id=\"really-understand-git-and-semantic-versioning\">Really Understand Git and Semantic Versioning</h3><p>Git is the most popular tool for managing source code. If you\u2019ve graduated from school or completed a boot camp, you\u2019re probably at least <em>familiar</em> with what Git is.</p><p>Working knowledge of Git will only take you so far.</p><p>When you start working on a team, you\u2019ll be introduced to concepts strategies like:</p><ul><li><strong>Pull Requests (or PRs as they\u2019re known on GitHub)</strong></li><li><strong>Merge Requests (this is what GitLab calls PRs)</strong></li><li><strong>Merging</strong></li><li><strong>Rebasing</strong></li><li><strong>squashing commits</strong> and</li><li><strong>Semver (semantic versioning)</strong></li></ul><p>My first week as a developer, I actually couldn\u2019t stop sweating. I was so nervous thinking that I was going to <strong>delete the entire company by accident</strong> when presented with options in Git I wasn\u2019t familiar with or didn\u2019t know how to deal with.</p><figure><img alt=\"4ZYiwTmPvqQ-F5tUXNC4KDpVauuWq34GBN5B\" height=\"400\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/4ZYiwTmPvqQ-F5tUXNC4KDpVauuWq34GBN5B\" width=\"600\"/><figcaption>The coaster I never knew I needed.</figcaption></figure><p>In my experience, a lot of teams like to use <strong>Git Flow</strong> in order to manage how code gets developed, versioned, tagged and released into production builds.</p><p>For new developers, some of the common questions and confusions I see are:</p><ul><li>the difference between <strong>merging</strong> and <strong>rebasing</strong></li><li>when should I <strong>rebase</strong>?</li><li>how do version numbers work?</li></ul><p>If you look into understanding each of these terms, I think you\u2019ll be <em>really well off</em> for how to contribute within a team and release features.</p><h3 id=\"come-prepared-to-your-standup-meetings\">Come prepared to your standup meetings</h3><p>If your team practices agile, you\u2019ll be expected to report:</p><ul><li>what you accomplished the previous day</li><li>what you\u2019re working on today</li><li>what\u2019s blocking you</li></ul><p>This can be slightly different from company to company. Sometimes you might not even be asked to do this. But regardless, I think it\u2019s useful for you as a developer to know what you\u2019re going to work on the next day ahead of time. Sometimes it can be easy to get trapped into the mode of just responding to things that come up, and that can lead to burnout and losing focus.</p><p>Try coming prepared to your standup meetings by preparing ahead of time. Spend 3 minutes every morning before work or before you go to bed to lay out what you\u2019ve accomplished the day before, what you\u2019re going to work on for the day, and what\u2019s blocking you.</p><p>You\u2019ll not only impress your team lead by coming prepared, but you\u2019ll appear a lot more professional and credible, even if you get stuck and aren\u2019t able to accomplish what you wanted to that day.</p><h3 id=\"learn-how-to-ask-for-help\">Learn how to ask for help</h3><p>Knowing <strong>how</strong> and <strong>when</strong> to ask for help as a new developer is <em>so</em> important. What might take you 5 hours to figure out could take another more experienced developer 5 minutes (or seconds).</p><p>It truly is in your best interest (and the company\u2019s) to ask for help when you need it.</p><p>However, it\u2019s <strong>not</strong> a good idea to ask for help on every single challenge you\u2019re presented with <em>without attempting to solve it yourself first</em>.</p><p>So, before you ask for help on something, make sure that you:</p><ul><li>try to figure it out yourself</li><li>search Google for answers on how to solve the problem (paste logs or error messages)</li></ul><p>If no dice, then it\u2019s definitely time to ask for help. Here\u2019s how you properly ask for help:</p><h4 id=\"asking-for-help-in-person\">Asking for help in person</h4><p>Look out for the other person\u2019s body language. If they seem like they\u2019re annoyed, stressed out, or in the zone, it might be better to ping them first and ask them if it\u2019s a good time for you to come over to ask them a question.</p><p>Be wary of people doing the \u2018ol <strong>George Costanza: Looking Busy</strong> trick.</p><h4 id=\"asking-for-help-over-instant-messenger\">Asking for help over instant messenger</h4><p>When you\u2019re thinking of pinging another developer over IM for help, there are a couple of ways that you can increase your success in getting a positive and speedy message back.</p><p>Here\u2019s a <strong>bad example</strong> on how to ask for help:</p><blockquote><em>\u201cHey, can you help me? I can\u2019t install node.js on my computer, it\u2019s not working.\u201d</em></blockquote><p>This isn\u2019t a good way to ask for help. Here\u2019s how it could be improved:</p><ul><li>Introduce yourself first if you\u2019ve never talked to this person before</li><li>Be sure to include <strong>what you tried</strong> to solve the problem. Give the other person context as to what the problem might be by providing things that it\u2019s <em>not</em>.</li></ul><p>Here\u2019s a better way to ask for help.</p><p><strong>Good example</strong></p><blockquote><em>\u201cHey John, I\u2019m Khalil \u2014 the new developer here. Nice to meet you. I heard that you might be able to help me with a particular problem I\u2019m facing. Basically, I\u2019m trying to get Node.js installed on my computer. I tried this link (paste link) and followed the instructions, but when I ran this command (insert command), I got this error message (insert error message). I\u2019m using one of the new Macbooks. Any idea what\u2019s going on?</em></blockquote><p>There\u2019s a reason why this is <strong>so much better</strong>.</p><p>This way of asking for help provides the other person with so much context as to what you\u2019ve probably already tried so that they can hone down on what the problem might be more quickly.</p><p>When you don\u2019t include this information, it\u2019s putting a burden on the other person to ask you relevant questions in order to get to the root of the problem.</p><p>Imagine how much time you save by giving the other person all the information right up front. It takes time to ask questions. That other person might be busy with a lot of other things at the moment, so think about it like this:</p><blockquote><em>Try to help the other person save as much time as possible by giving them as much information about the problem as you can upfront.</em></blockquote><h3 id=\"when-receiving-help\">When receiving help</h3><p><strong>Do not have an ego</strong>. I repeat, <strong>do not have an ego</strong>.</p><p>When someone takes the time to help you out, you should not aim to make it known to the other person that you knew how to fix it all along.</p><p>When your issue is resolved, don't say:</p><blockquote><em>\u201cyeah, that\u2019s what I was going to try next\u201d</em></blockquote><p>Do say:</p><blockquote><em>\u201cGot it working, thanks!\u201d</em></blockquote><p>Be careful to not blame something not working on someone else. Don\u2019t say:</p><blockquote><em>\u201cThe backend team messed it up and that\u2019s why it wasn\u2019t working.\u201d</em></blockquote><p>Instead, say:</p><blockquote><em>\u201cI\u2019m thinking that it may have had something to do with the recent changes on the backend.\u201d</em></blockquote><p>Always make sure that when you finally get your problem solved, let the other person know. They might still be thinking about ways to help you solve your problem when you\u2019ve already fixed it and moved onto the next thing.</p><h3 id=\"make-sure-that-you-manually-test-your-code\">Make sure that you manually test your code</h3><p>I\u2019ll never forget the one moment that at my first dev job that I neglected to test my code and just assumed that it would work in production.</p><p>That code made it\u2019s way out to the client and broke as soon as they tried it out.</p><p>Boy, did I ever get an earful that day\u2026</p><p>Don\u2019t be like me, make sure that you manually test that your features work! Test the <strong>happy paths</strong> and even more importantly, test the <strong>non-happy paths</strong>.</p><p><em>Maliciously</em> try to break your own code. If there\u2019s something I\u2019ve learned by putting code into production, it\u2019s that if you\u2019ve written bugs, your users will eventually find them.</p><p>Even if you have a QA team, aim for QA to find <strong>nothing</strong>.</p><h3 id=\"learn-to-write-testable-code-and-how-to-write-tests-for-them\">Learn to write testable code and how to write tests for them</h3><p>Writing testable code isn\u2019t normally something that\u2019s taught in school, but it is easily learned by applying the <strong>SOLID</strong> design principles.</p><p>Also, ask the other lead developers on how to write tests for something that you\u2019ve written. They\u2019ll appreciate that you asked. They might be able to sit down with you and teach you a thing or two. If they\u2019re unable, or you don\u2019t notice that there are many tests in the codebase anyways, the next best thing is to ensure that you tested the code manually.</p><h3 id=\"constantly-be-learning\">Constantly be learning</h3><p>Even if you\u2019re a front-end developer, learn about backend development and DevOps.</p><p>If you\u2019re a backend developer, research HCI (human and computer interaction) and UX.</p><p>Master a tool that you use on a daily basis.</p><p>In this career as a professional in technology, the amount of learning and growing that you do will ultimately determine your success.</p><h3 id=\"wrapping-up\">Wrapping up</h3><p>We\u2019ve just gone over some of the <strong>best ways</strong> to make your first developer job a success, no matter if you\u2019re a jr web developer, jr backend developer, front-end or whatever. If you practice some of these things, you\u2019ll impress your boss and quickly figure out how to become productive working with your team.</p><p>If you\u2019re still looking for a Developer job, you should consider <a href=\"https://univjobs.ca/?utm_source=medium&amp;utm_medium=link&amp;utm_campaign=surviving-developer-job\" rel=\"noopener\">joining Univjobs</a>. We have hundreds of employers looking for students and recent-grads in technology. It truly is a great time to be a developer.</p><p><em>Originally published at <a href=\"https://univjobs.ca/blog/developer-guides/ultimate-guide-for-first-junior-developer-job-success/\" rel=\"noopener\">https://univjobs.ca</a> on May 9, 2019.</em></p>\n</section>\n<hr/>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nLanding your first junior developer job is an amazing accomplishment. You\u2019ve worked really hard towards getting the skills to pay the bills and now you\u2019re ready to prove yourself in your new job.You\u2019re definitely excited. And you should be. Being a developer is awesome. But with that excitement, it\u2019s also normal to be feeling a bit nervous. My first week as a developer was pretty hectic. My first day, I was given a 200 line SQL query to try to make sense of\u2026 I still have flashbacks from that. Generally speaking, you\u2019re going to feel like there\u2019s so much you don\u2019t quite know or understand, but it\u2019s all a part of the experience.In order to make your transition into the working world as a developer as smooth as possible and really bring value to your team, here are my professional recommendations.Really Understand Git and Semantic VersioningGit is the most popular tool for managing source code. If you\u2019ve graduated from school or completed a boot camp, you\u2019re probably at least familiar with what Git is.Working knowledge of Git will only take you so far.When you start working on a team, you\u2019ll be introduced to concepts strategies like:Pull Requests (or PRs as they\u2019re known on GitHub)Merge Requests (this is what GitLab calls PRs)MergingRebasingsquashing commits andSemver (semantic versioning)My first week as a developer, I actually couldn\u2019t stop sweating. I was so nervous thinking that I was going to delete the entire company by accident when presented with options in Git I wasn\u2019t familiar with or didn\u2019t know how to deal with.The coaster I never knew I needed.In my experience, a lot of teams like to use Git Flow in order to manage how code gets developed, versioned, tagged and released into production builds.For new developers, some of the common questions and confusions I see are:the difference between merging and rebasingwhen should I rebase?how do version numbers work?If you look into understanding each of these terms, I think you\u2019ll be really well off for how to contribute within a team and release features.Come prepared to your standup meetingsIf your team practices agile, you\u2019ll be expected to report:what you accomplished the previous daywhat you\u2019re working on todaywhat\u2019s blocking youThis can be slightly different from company to company. Sometimes you might not even be asked to do this. But regardless, I think it\u2019s useful for you as a developer to know what you\u2019re going to work on the next day ahead of time. Sometimes it can be easy to get trapped into the mode of just responding to things that come up, and that can lead to burnout and losing focus.Try coming prepared to your standup meetings by preparing ahead of time. Spend 3 minutes every morning before work or before you go to bed to lay out what you\u2019ve accomplished the day before, what you\u2019re going to work on for the day, and what\u2019s blocking you.You\u2019ll not only impress your team lead by coming prepared, but you\u2019ll appear a lot more professional and credible, even if you get stuck and aren\u2019t able to accomplish what you wanted to that day.Learn how to ask for helpKnowing how and when to ask for help as a new developer is so important. What might take you 5 hours to figure out could take another more experienced developer 5 minutes (or seconds).It truly is in your best interest (and the company\u2019s) to ask for help when you need it.However, it\u2019s not a good idea to ask for help on every single challenge you\u2019re presented with without attempting to solve it yourself first.So, before you ask for help on something, make sure that you:try to figure it out yourselfsearch Google for answers on how to solve the problem (paste logs or error messages)If no dice, then it\u2019s definitely time to ask for help. Here\u2019s how you properly ask for help:Asking for help in personLook out for the other person\u2019s body language. If they seem like they\u2019re annoyed, stressed out, or in the zone, it might be better to ping them first and ask them if it\u2019s a good time for you to come over to ask them a question.Be wary of people doing the \u2018ol George Costanza: Looking Busy trick.Asking for help over instant messengerWhen you\u2019re thinking of pinging another developer over IM for help, there are a couple of ways that you can increase your success in getting a positive and speedy message back.Here\u2019s a bad example on how to ask for help:\u201cHey, can you help me? I can\u2019t install node.js on my computer, it\u2019s not working.\u201dThis isn\u2019t a good way to ask for help. Here\u2019s how it could be improved:Introduce yourself first if you\u2019ve never talked to this person beforeBe sure to include what you tried to solve the problem. Give the other person context as to what the problem might be by providing things that it\u2019s not.Here\u2019s a better way to ask for help.Good example\u201cHey John, I\u2019m Khalil \u2014 the new developer here. Nice to meet you. I heard that you might be able to help me with a particular problem I\u2019m facing. Basically, I\u2019m trying to get Node.js installed on my computer. I tried this link (paste link) and followed the instructions, but when I ran this command (insert command), I got this error message (insert error message). I\u2019m using one of the new Macbooks. Any idea what\u2019s going on?There\u2019s a reason why this is so much better.This way of asking for help provides the other person with so much context as to what you\u2019ve probably already tried so that they can hone down on what the problem might be more quickly.When you don\u2019t include this information, it\u2019s putting a burden on the other person to ask you relevant questions in order to get to the root of the problem.Imagine how much time you save by giving the other person all the information right up front. It takes time to ask questions. That other person might be busy with a lot of other things at the moment, so think about it like this:Try to help the other person save as much time as possible by giving them as much information about the problem as you can upfront.When receiving helpDo not have an ego. I repeat, do not have an ego.When someone takes the time to help you out, you should not aim to make it known to the other person that you knew how to fix it all along.When your issue is resolved, don't say:\u201cyeah, that\u2019s what I was going to try next\u201dDo say:\u201cGot it working, thanks!\u201dBe careful to not blame something not working on someone else. Don\u2019t say:\u201cThe backend team messed it up and that\u2019s why it wasn\u2019t working.\u201dInstead, say:\u201cI\u2019m thinking that it may have had something to do with the recent changes on the backend.\u201dAlways make sure that when you finally get your problem solved, let the other person know. They might still be thinking about ways to help you solve your problem when you\u2019ve already fixed it and moved onto the next thing.Make sure that you manually test your codeI\u2019ll never forget the one moment that at my first dev job that I neglected to test my code and just assumed that it would work in production.That code made it\u2019s way out to the client and broke as soon as they tried it out.Boy, did I ever get an earful that day\u2026Don\u2019t be like me, make sure that you manually test that your features work! Test the happy paths and even more importantly, test the non-happy paths.Maliciously try to break your own code. If there\u2019s something I\u2019ve learned by putting code into production, it\u2019s that if you\u2019ve written bugs, your users will eventually find them.Even if you have a QA team, aim for QA to find nothing.Learn to write testable code and how to write tests for themWriting testable code isn\u2019t normally something that\u2019s taught in school, but it is easily learned by applying the SOLID design principles.Also, ask the other lead developers on how to write tests for something that you\u2019ve written. They\u2019ll appreciate that you asked. They might be able to sit down with you and teach you a thing or two. If they\u2019re unable, or you don\u2019t notice that there are many tests in the codebase anyways, the next best thing is to ensure that you tested the code manually.Constantly be learningEven if you\u2019re a front-end developer, learn about backend development and DevOps.If you\u2019re a backend developer, research HCI (human and computer interaction) and UX.Master a tool that you use on a daily basis.In this career as a professional in technology, the amount of learning and growing that you do will ultimately determine your success.Wrapping upWe\u2019ve just gone over some of the best ways to make your first developer job a success, no matter if you\u2019re a jr web developer, jr backend developer, front-end or whatever. If you practice some of these things, you\u2019ll impress your boss and quickly figure out how to become productive working with your team.If you\u2019re still looking for a Developer job, you should consider joining Univjobs. We have hundreds of employers looking for students and recent-grads in technology. It truly is a great time to be a developer.Originally published at https://univjobs.ca on May 9, 2019.\n\n                        \n                    \n                    \n                        \n                        \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 9578, "excerpt": "Landing your first junior developer job is an amazing accomplishment. You\u2019ve\nworked really hard towards getting the skills to pay the bills and now you\u2019re\nready to prove yourself in your new job.\n\nYou\u2019re definitely excited. And you should be. Being a developer is awesome. But\nwith that excitement, it\u2019s also normal to be feeling a bit nervous. My first\nweek as a developer was pretty hectic. My first day, I was given a 200 line SQL\nquery to try to make sense of\u2026 I still have flashbacks from that.", "siteName": "freeCodeCamp.org", "publishedTime": "2019-05-09T00:00:00.000Z", "id": "53835e24b0078b1debdf00b81c4f3e3664746e41", "url": "https://www.freecodecamp.org/news/how-to-survive-and-thrive-in-your-first-junior-developer-job-52deffddbe9c/", "domain": "freecodecamp.org", "date": "2023-12-27T18:10:15.911896", "resultUri": "http://localhost:3000/result/53835e24b0078b1debdf00b81c4f3e3664746e41", "query": {"url": ["https://www.freecodecamp.org/news/how-to-survive-and-thrive-in-your-first-junior-developer-job-52deffddbe9c/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "How to survive and thrive in your first junior developer job", "description": "Landing your first junior developer job is an amazing accomplishment. You\u2019ve worked really hard towards getting the skills to pay the bills and now you\u2019re ready to prove yourself in your new job. You\u2019re definitely excited. And you should be. Being a developer is awesome. But with that excitement, it\u2019s", "url": "https://www.freecodecamp.org/news/how-to-survive-and-thrive-in-your-first-junior-developer-job-52deffddbe9c/", "image": "https://cdn-media-1.freecodecamp.org/images/0*H3Z9nw0u0cDNckEf.png", "image:width": "800", "image:height": "419"}, "twitter": {"card": "summary_large_image", "title": "How to survive and thrive in your first junior developer job", "description": "Landing your first junior developer job is an amazing accomplishment. You\u2019ve worked really hard towards getting the skills to pay the bills and now you\u2019re ready to prove yourself in your new job. You\u2019re definitely excited. And you should be. Being a developer is awesome. But with that excitement, it\u2019s", "url": "https://www.freecodecamp.org/news/how-to-survive-and-thrive-in-your-first-junior-developer-job-52deffddbe9c/", "image": "https://cdn-media-1.freecodecamp.org/images/0*H3Z9nw0u0cDNckEf.png", "label1": "Written by", "data1": "Khalil Stemmler", "label2": "Filed under", "data2": "Professional Development, Junior Developer, Tech, Programming, Self Improvement", "site": "@freecodecamp", "creator": "@khalilstemmler"}}}