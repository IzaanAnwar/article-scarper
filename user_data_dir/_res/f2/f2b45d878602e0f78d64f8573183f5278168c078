{"title": "State in JavaScript explained by cooking a simple meal", "byline": "freeCodeCamp.org", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>State in JavaScript explained by cooking a simple meal</h1>\n<section>\n<section data-test-label=\"post-content\">\n<p>by Kevin Kononenko</p><p><em>If you have ever cooked a meal at home, then you can understand how to write stateful code using object-oriented programming methods in JavaScript.</em></p><p>When you start writing simple JavaScript programs, you don\u2019t need to worry about the number of variables you are using, or how different functions and objects work together.</p><p>For example, most people start out by using a lot of global variables, or variables that are scoped at the top level of the file. They are not part of any individual class, object or function.</p><p>For example, this is a global variable called <em>state</em>:</p><pre><code>let state = \"global\";</code></pre><p>But once your program starts to involve many different functions and/or objects, you will need to create a more rigorous set of rules for your code.</p><p>This is where the concept of <a href=\"https://en.wikipedia.org/wiki/State_(computer_science)\" rel=\"noopener\">state</a> comes into play. State describes the status of the entire program or an individual object. It could be text, a number, a boolean, or another data type.</p><p>It\u2019s a common tool for coordinating code. For example, once you update state, a bunch of different functions can instantly react to that change.</p><p><a href=\"https://blog.codeanalogies.com/2016/10/04/react-props-state-explained-through-darth-vaders-hunt-for-the-rebels/\" rel=\"noopener\">This article describes state in the context of React</a>, a popular JavaScript library.</p><p>But guess what? Even state can give you headaches once your code gets complicated! Changing state can cause unintended consequences.</p><p>Let\u2019s stop right there. State is a popular tool in object-oriented programming, or OOP. But many programmers prefer functional programming, which discourages state changes. JavaScript supports both paradigms.</p><p>Okay, that\u2019s a lot of terminology at once. I wanted to find a way to show how OOP and functional programming can accomplish the same goals, even if functional programming does not use state.</p><p>This tutorial will show how you might cook a meal of spaghetti and sauce from an OOP and a functional perspective.</p><p>Here\u2019s a quick preview of the two different approaches:</p><figure><img alt=\"oTkNmmVjtCJc5aYh4VHa5JX4KVRCqQBVyCN5\" height=\"643\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/oTkNmmVjtCJc5aYh4VHa5JX4KVRCqQBVyCN5\" width=\"730\"/></figure><p>Let\u2019s jump into it. In order to understand this tutorial, you just need to understand functions and objects in JavaScript.</p><h3 id=\"object-oriented-method-using-state-\">Object-Oriented Method (Using State)</h3><p>In the graphic above, we showed two different approaches to making this pasta dinner:</p><ol><li>A method that is focused on the state of the different tools, like the stove, the pot and the pasta.</li><li>A method that is focused on the progression of the food itself, with no mention of state of the individual tools (pots, stoves etc.)</li></ol><p>The object-oriented approach focuses on updating state, so our code will have state at two different levels:</p><ol><li>Global, or the state of this entire meal.</li><li>Local for each object.</li></ol><p>We are going to use ES6 syntax in this tutorial to create objects. Here\u2019s an example of global state and the \u201cPot\u201d prototype.</p><pre><code>let stoveTemp = 500;</code></pre><pre><code>function Pot(){  this.boilStatus = '';  this.startBoiling = function(){    if( stoveTemp &gt; 400)      this.boilStatus = \"boiling\";  }}</code></pre><pre><code>let pastaPot = new Pot();pastaPot.startBoiling();</code></pre><pre><code>console.log(pastaPot);// Pot { boilStatus = 'boiling'; }</code></pre><p><strong>Note:</strong> I simplified the <code>console.log</code> statement to focus on the state update.</p><p>Here\u2019s a visual representation of that logic:</p><figure><img alt=\"jCElYWldFL5A51IYYRw6aI5I-5WbADmRQdz5\" height=\"554\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/jCElYWldFL5A51IYYRw6aI5I-5WbADmRQdz5\" width=\"800\"/></figure><figure><img alt=\"hpCl6rpFZPboXnYk8GMTzh06g8bQxOOl451a\" height=\"554\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/hpCl6rpFZPboXnYk8GMTzh06g8bQxOOl451a\" width=\"800\"/></figure><p>There are two states, and when the <code>pastaPot</code> is created via the <code>Pot</code> prototype, it initially has an empty <code>boilStatus</code>. But then, there is a state change.</p><p>We run <code>pastaPot.startBoiling()</code>, and now the <code>boilStatus</code> (local state) is \u201cboiling\u201d, since the global state of <code>stoveTemp</code> is over 400.</p><p>Now let\u2019s go one step further. We will allow the pasta to become boiled due to the state of <code>pastaPot</code>.</p><p>Here\u2019s the code we will add to the snippet above:</p><pre><code>function Pasta (){  this.cookedStatus = false;  this.addToPot = function (boilStatus){    if(boilStatus == \"boiling\")      this.cookedStatus = true;  }}</code></pre><pre><code>let myMeal = new Pasta();myMeal.addToPot(pastaPot.boilStatus);</code></pre><pre><code>console.log(myMeal.cookedStatus);// true</code></pre><p>Woah! That\u2019s a lot at once. Here\u2019s what happened.</p><ol><li>We created a new prototype of \u201cPasta\u201d, where every object will have a local state called <code>cookedStatus</code></li><li>We created a new instance of Pasta called <code>myMeal</code></li><li>We used the state from the <code>pastaPot</code> object that we created in the last snippet to determine if we should update the state called <code>cookedStatus</code> in <code>myMeal</code> to cooked.</li><li>Since the state of <code>boilStatus</code> in <code>pastaPot</code> was \u201cboiling\u201d, our pasta is now cooked!</li></ol><p>Here\u2019s that process visually:</p><figure><img alt=\"G2kKUbpleDg1N7uQt5EYBtgevLfbSjJcc-qK\" height=\"618\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/G2kKUbpleDg1N7uQt5EYBtgevLfbSjJcc-qK\" width=\"800\"/></figure><figure><img alt=\"CUwOXRurvC2FtZPpD7hbufQzgiaeRrT7YIzv\" height=\"618\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/CUwOXRurvC2FtZPpD7hbufQzgiaeRrT7YIzv\" width=\"800\"/></figure><p>So, we now have the local state of one object, that depends on the local state of another object. And that local state depended on some global state! You can see how this can be challenging. But, it is at least easy to follow for now, since states are updated explicitly.</p><h3 id=\"functional-method-without-state-\">Functional Method (without state)</h3><p>In order to fully understand state, you should be able to find a way to accomplish the same outcome as the code above without actually modifying state. This is where functional programming helps!</p><p>Functional programming has two core values that separate it from OOP: immutability and pure functions.</p><p>I am not going to go into too much depth on those topics, but if you want to learn more, I encourage you to <a href=\"https://opensource.com/article/17/6/functional-javascript\" rel=\"noopener\">check out this guide to functional programming</a> in JavaScript.</p><p>Both of these principles discourage the use of state modification in your code. That means that we can\u2019t use local or global state.</p><p>Functional programming instead encourages us to pass in parameters to individual functions. We can use outside variables, but we can\u2019t use them as state.</p><p>Here\u2019s an example of a function that will boil the pasta:</p><pre><code>const stoveTemp = 500;</code></pre><pre><code>const cookPasta = (temp) =&gt; {  if(temp &gt; 400)    return 'cooked';}</code></pre><pre><code>console.log(cookPasta(stoveTemp));// 'cooked'</code></pre><p>This code will successfully return a string of \u2018cooked\u2019. But notice \u2014 there is no object that we are updating. The function simply returns the value that will be used in the next step.</p><p>Instead, we are focused on the inputs and outputs of one function: <code>cookPasta</code>.</p><p>This perspective looks at the transformation of the food itself, rather than the tools that are used to cook it. It\u2019s a little harder to visualize, but we don\u2019t need to have the function depend on external state.</p><p>Here\u2019s what it looks like:</p><figure><img alt=\"tQ95faSj05pk6NEAxkI9X3UjU8H3ZtSu9cUz\" height=\"256\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/tQ95faSj05pk6NEAxkI9X3UjU8H3ZtSu9cUz\" width=\"729\"/></figure><p>Think of it as a \u201ctimeline view\u201d for the progress of the meal \u2014 this particular function just covers the first part, the transition from dry pasta to cooked pasta.</p><p>Now let\u2019s cover the second part as the food is served. Here\u2019s the code that will serve the meal. It will come after the code block above:</p><pre><code>const serveMeal = (pasta) =&gt; { if (pasta == 'cooked')   return 'Dinner is ready.'}</code></pre><pre><code>console.log( serveMeal(cookPasta(stoveTemp)) );// 'Dinner is ready.'</code></pre><p>Now, we are delivering the results of the <code>cookPasta</code> function directly into the <code>serveMeal</code> function. Again, we are able to do this without changing state, or changing data structures.</p><p>Here\u2019s a diagram that uses the \u201ctimeline view\u201d to show how these two functions work together:</p><figure><img alt=\"Jle5IaajEswG3c0QFU2-d9uXv4TT6PWao8ay\" height=\"146\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/Jle5IaajEswG3c0QFU2-d9uXv4TT6PWao8ay\" width=\"730\"/></figure><h3 id=\"interested-in-more-visual-tutorials\">Interested In More Visual Tutorials?</h3><p>If you enjoyed this guide, give it a \u201cclap\u201d!</p><p>And, if you would like to read more visual tutorials about HTML, CSS and JavaScript, check out the <a href=\"http://codeanalogies.com/\" rel=\"noopener\">main CodeAnalogies site</a> for 50+ tutorials.</p>\n</section>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nby Kevin KononenkoIf you have ever cooked a meal at home, then you can understand how to write stateful code using object-oriented programming methods in JavaScript.When you start writing simple JavaScript programs, you don\u2019t need to worry about the number of variables you are using, or how different functions and objects work together.For example, most people start out by using a lot of global variables, or variables that are scoped at the top level of the file. They are not part of any individual class, object or function.For example, this is a global variable called state:let state = \"global\";But once your program starts to involve many different functions and/or objects, you will need to create a more rigorous set of rules for your code.This is where the concept of state comes into play. State describes the status of the entire program or an individual object. It could be text, a number, a boolean, or another data type.It\u2019s a common tool for coordinating code. For example, once you update state, a bunch of different functions can instantly react to that change.This article describes state in the context of React, a popular JavaScript library.But guess what? Even state can give you headaches once your code gets complicated! Changing state can cause unintended consequences.Let\u2019s stop right there. State is a popular tool in object-oriented programming, or OOP. But many programmers prefer functional programming, which discourages state changes. JavaScript supports both paradigms.Okay, that\u2019s a lot of terminology at once. I wanted to find a way to show how OOP and functional programming can accomplish the same goals, even if functional programming does not use state.This tutorial will show how you might cook a meal of spaghetti and sauce from an OOP and a functional perspective.Here\u2019s a quick preview of the two different approaches:Let\u2019s jump into it. In order to understand this tutorial, you just need to understand functions and objects in JavaScript.Object-Oriented Method (Using State)In the graphic above, we showed two different approaches to making this pasta dinner:A method that is focused on the state of the different tools, like the stove, the pot and the pasta.A method that is focused on the progression of the food itself, with no mention of state of the individual tools (pots, stoves etc.)The object-oriented approach focuses on updating state, so our code will have state at two different levels:Global, or the state of this entire meal.Local for each object.We are going to use ES6 syntax in this tutorial to create objects. Here\u2019s an example of global state and the \u201cPot\u201d prototype.let stoveTemp = 500;function Pot(){  this.boilStatus = '';  this.startBoiling = function(){    if( stoveTemp > 400)      this.boilStatus = \"boiling\";  }}let pastaPot = new Pot();pastaPot.startBoiling();console.log(pastaPot);// Pot { boilStatus = 'boiling'; }Note: I simplified the console.log statement to focus on the state update.Here\u2019s a visual representation of that logic:BeforeAfterThere are two states, and when the pastaPot is created via the Pot prototype, it initially has an empty boilStatus. But then, there is a state change.We run pastaPot.startBoiling(), and now the boilStatus (local state) is \u201cboiling\u201d, since the global state of stoveTemp is over 400.Now let\u2019s go one step further. We will allow the pasta to become boiled due to the state of pastaPot.Here\u2019s the code we will add to the snippet above:function Pasta (){  this.cookedStatus = false;  this.addToPot = function (boilStatus){    if(boilStatus == \"boiling\")      this.cookedStatus = true;  }}let myMeal = new Pasta();myMeal.addToPot(pastaPot.boilStatus);console.log(myMeal.cookedStatus);// trueWoah! That\u2019s a lot at once. Here\u2019s what happened.We created a new prototype of \u201cPasta\u201d, where every object will have a local state called cookedStatusWe created a new instance of Pasta called myMealWe used the state from the pastaPot object that we created in the last snippet to determine if we should update the state called cookedStatus in myMeal to cooked.Since the state of boilStatus in pastaPot was \u201cboiling\u201d, our pasta is now cooked!Here\u2019s that process visually:BeforeAfterSo, we now have the local state of one object, that depends on the local state of another object. And that local state depended on some global state! You can see how this can be challenging. But, it is at least easy to follow for now, since states are updated explicitly.Functional Method (without state)In order to fully understand state, you should be able to find a way to accomplish the same outcome as the code above without actually modifying state. This is where functional programming helps!Functional programming has two core values that separate it from OOP: immutability and pure functions.I am not going to go into too much depth on those topics, but if you want to learn more, I encourage you to check out this guide to functional programming in JavaScript.Both of these principles discourage the use of state modification in your code. That means that we can\u2019t use local or global state.Functional programming instead encourages us to pass in parameters to individual functions. We can use outside variables, but we can\u2019t use them as state.Here\u2019s an example of a function that will boil the pasta:const stoveTemp = 500;const cookPasta = (temp) => {  if(temp > 400)    return 'cooked';}console.log(cookPasta(stoveTemp));// 'cooked'This code will successfully return a string of \u2018cooked\u2019. But notice \u2014 there is no object that we are updating. The function simply returns the value that will be used in the next step.Instead, we are focused on the inputs and outputs of one function: cookPasta.This perspective looks at the transformation of the food itself, rather than the tools that are used to cook it. It\u2019s a little harder to visualize, but we don\u2019t need to have the function depend on external state.Here\u2019s what it looks like:Think of it as a \u201ctimeline view\u201d for the progress of the meal \u2014 this particular function just covers the first part, the transition from dry pasta to cooked pasta.Now let\u2019s cover the second part as the food is served. Here\u2019s the code that will serve the meal. It will come after the code block above:const serveMeal = (pasta) => { if (pasta == 'cooked')   return 'Dinner is ready.'}console.log( serveMeal(cookPasta(stoveTemp)) );// 'Dinner is ready.'Now, we are delivering the results of the cookPasta function directly into the serveMeal function. Again, we are able to do this without changing state, or changing data structures.Here\u2019s a diagram that uses the \u201ctimeline view\u201d to show how these two functions work together:Interested In More Visual Tutorials?If you enjoyed this guide, give it a \u201cclap\u201d!And, if you would like to read more visual tutorials about HTML, CSS and JavaScript, check out the main CodeAnalogies site for 50+ tutorials.\n\n                        \n                    \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 7493, "excerpt": "by Kevin Kononenko\n\nState in JavaScript explained by cooking a simple meal\nIf you have ever cooked a meal at home, then you can understand how to write\nstateful code using object-oriented programming methods in JavaScript.\n\nWhen you start writing simple JavaScript programs, you don\u2019t need to worry about\nthe number of variables you are using, or how different functions and objects\nwork together.\n\nFor example, most people start out by using a lot of global variables, or\nvariables that are scoped a", "siteName": "freeCodeCamp.org", "publishedTime": "2019-04-29T17:37:57.000Z", "id": "f2b45d878602e0f78d64f8573183f5278168c078", "url": "https://www.freecodecamp.org/news/state-in-javascript-explained-by-cooking-a-simple-meal-2baf10a787ee/", "domain": "freecodecamp.org", "date": "2023-12-27T18:11:07.368228", "resultUri": "http://localhost:3000/result/f2b45d878602e0f78d64f8573183f5278168c078", "query": {"url": ["https://www.freecodecamp.org/news/state-in-javascript-explained-by-cooking-a-simple-meal-2baf10a787ee/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "State in JavaScript explained by cooking a simple meal", "description": "by Kevin Kononenko State in JavaScript explained by cooking a simple meal If you have ever cooked a meal at home, then you can understand how to write stateful code using object-oriented programming methods in JavaScript. When you start writing simple JavaScript programs, you don\u2019t need to worry about the", "url": "https://www.freecodecamp.org/news/state-in-javascript-explained-by-cooking-a-simple-meal-2baf10a787ee/", "image": "https://cdn-media-1.freecodecamp.org/images/1*aZkorGpX907Zio5hZwkqUw.jpeg", "image:width": "800", "image:height": "637"}, "twitter": {"card": "summary_large_image", "title": "State in JavaScript explained by cooking a simple meal", "description": "by Kevin Kononenko State in JavaScript explained by cooking a simple meal If you have ever cooked a meal at home, then you can understand how to write stateful code using object-oriented programming methods in JavaScript. When you start writing simple JavaScript programs, you don\u2019t need to worry about the", "url": "https://www.freecodecamp.org/news/state-in-javascript-explained-by-cooking-a-simple-meal-2baf10a787ee/", "image": "https://cdn-media-1.freecodecamp.org/images/1*aZkorGpX907Zio5hZwkqUw.jpeg", "label1": "Written by", "data1": "freeCodeCamp.org", "label2": "Filed under", "data2": "JavaScript, Web Development, Computer Science, Tech, Programming", "site": "@freecodecamp"}}}