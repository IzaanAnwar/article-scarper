{"title": "Git vs GitHub \u2013 What is Version Control and How Does it Work?", "byline": "Oluwatobi Sofela", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>Git vs GitHub \u2013 What is Version Control and How Does it Work?</h1>\n<section>\n<section data-test-label=\"post-content\">\n<p>Have you ever been confused by how Git and GitHub work? Don\u2019t fret \u2014 you are not alone. Git and GitHub can be tricky sometimes, but by the end of this post you will have a good grasp of the two.</p><p>At first, it may be tempting to believe Git and GitHub are the same thing. But in reality they are not. Indeed, it is possible to use Git without GitHub! And ultimately, the two exist for different purposes.</p><p>This post will begin by taking a good look at the purposes of Git and GitHub. Afterward, we will learn about the main differences between these two vital technologies.</p><p>Without any further ado, let\u2019s get it started with Git.</p><p>Git is a Distributed Version Control System (DVCS) used to save different versions of a file (or set of files) so that any version is retrievable at will.</p><p>Git also makes it easy to record and compare different file versions. This means that the details about what changed, who changed what, or who initiated an issue are reviewable anytime.</p><p>But if Git is a Distributed Version Control System, what exactly do those terms mean?</p><h3 id=\"what-does-distributed-mean\">What does \u201cdistributed\u201d mean?</h3><p>The term \u201cdistributed\u201d means that whenever you instruct Git to share a project\u2019s directory, Git does not only share the latest file version. Instead, it distributes every version it has recorded for that project.</p><p>This \"distributed\" system is in sharp contrast to other version control systems. They only share whatever single version a user has explicitly checked out from the central/local database.</p><p>Okay, so \u201cdistributed\u201d means distribute <em>all</em> \u2014 not just selected few \u2014 versions of a project\u2019s files that Git has recorded. But what exactly is a version control system?</p><h3 id=\"what-is-a-version-control-system\">What is a Version Control System?</h3><p>A Version Control System (VCS) refers to <em>the method</em> used to save a file's versions for future reference.</p><p>Intuitively, many people already version control their projects by renaming different versions of the same file in various ways like <code>blogScript.js</code>, <code>blogScript_v2.js</code>, <code>blogScript_v3.js</code>, <code>blogScript_final.js</code>, <code>blogScript_definite_final.js</code>, and so on. But this approach is error-prone and ineffective for team projects.</p><p>Also, tracking what changed, who changed it, and why it was changed is a tedious endeavor with this traditional approach. This illuminates the importance of a reliable and collaborative version control system like Git.</p><p>However, to get the best of Git, it is essential to understand how Git handles your files.</p><h2 id=\"files-states-in-git\">Files states in Git</h2><p>In Git, there are three primary states (conditions) in which a file can be: <strong>modified state</strong>, <strong>staged state</strong>, or <strong>committed state</strong>.</p><h3 id=\"modified-state\">Modified state</h3><p>A file in the modified state is a revised \u2014 but uncommitted (unrecorded) \u2014 file.</p><p>In other words, files in the modified state are files you have modified but have not explicitly instructed Git to monitor.</p><h3 id=\"staged-state\">Staged state</h3><p>Files in the staged state are modified files that have been selected \u2014 in their current state (version) \u2014 and are being prepared to be saved (committed) into the <code>.git</code> repository during the next commit snapshot.</p><p>Once a file gets staged, it implies that you have explicitly authorized Git to monitor that file\u2019s version.</p><h3 id=\"committed-state\">Committed state</h3><p>Files in the committed state are files successfully stored into the <code>.git</code> repository.</p><p>Thus, a committed file is a file in which you have recorded its staged version into the Git directory (folder).</p><p><strong>Note: </strong>The state of a file determines the location where Git will place it.</p><h2 id=\"file-locations\">File locations</h2><p>There are three key places versions of a file may reside while version controlling with Git: the <strong>working directory</strong>, the <strong>staging area</strong>, or the <strong>Git directory</strong>.</p><h3 id=\"working-directory\">Working directory</h3><p>The working directory is a local folder for a project's files. This means that any folder created anywhere on a system is a working directory.</p><ul><li>Files in the modified state reside in the working directory.</li><li>The working directory is different from the <code>.git</code> directory. That is, you create a working directory while Git creates a <code>.git</code> directory.</li><li>Check out <a href=\"https://www.codesweetly.com/git-vs-working-directory/\">this comparison article</a> for more differences between the two repositories.</li></ul><h3 id=\"staging-area\">Staging area</h3><p>The staging area \u2014 technically called \u201cindex\u201d in Git parlance \u2014 is a file, usually located in the <code>.git</code> directory, that stores information about files next-in-line to be committed into the <code>.git</code> directory.</p><ul><li>Files in the staged state reside in the staging area.</li></ul><h3 id=\"git-directory\">Git directory</h3><p>The <code>.git</code> directory is the folder (also called \u201crepository\u201d) that Git creates inside the working directory you have instructed it to track.</p><p>Also, the <code>.git</code> folder is where Git stores the object databases and metadata of the file(s) you have instructed it to monitor.</p><ul><li>The <code>.git</code> directory is the life of Git \u2014 it is the item copied when you clone a repository from another computer (or from an online platform like GitHub).</li><li>Files in the committed state reside in the Git directory.</li></ul><h2 id=\"the-basic-git-workflow\">The basic Git workflow</h2><p>Working with the Git Version Control System looks something like this:</p><figure><img alt=\"Git basic workflow diagram\" height=\"624\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2020/08/git-basic-workflow-codesweetly.png\" width=\"1920\"/></figure><ol><li>Modify files in the working directory.<br/>Note that any file you alter becomes a file in the <em>modified state</em>.</li><li>Selectively stage the files you want to commit to the <code>.git</code> directory.<br/>Note that any file you stage (add) into the staging area becomes a file in the <em>staged state</em>.<br/>Also, be aware that staged files are not yet in the <code>.git</code> database.<br/>Staging means information about the staged file gets included in a file (called \"index\") in the <code>.git</code> repository.</li><li>Commit the file(s) you have staged into the .git directory. That is, permanently store a snapshot of the staged file(s) into the .git database.<br/>Note that any file version you commit to the .git directory becomes a file in the committed state.</li></ol><h3 id=\"the-gist-thus-far\">The gist thus far</h3><p>The long and short of all the discussion thus far is that Git is a brilliant version control system for competent versioning, management, and distribution of files. Check out <a href=\"https://www.codesweetly.com/how-to-use-git/\">this simple guide</a> to learn how to use Git efficiently.</p><p>But, hang on a sec, if Git helps to effectively manage and distribute different versions of a project's file, what is GitHub's purpose?</p><h2 id=\"github-demystified\">GitHub Demystified</h2><p>GitHub is a web-based platform where users can host Git repositories. It helps you facilitate easy sharing and collaboration on projects with anyone at any time.</p><p>GitHub also encourages broader participation in open-source projects by providing a secure way to edit files in another user's repository.</p><p>To host (or share) a Git repository on GitHub, follow the steps below:</p><h3 id=\"step-1-signup-for-a-github-account\">Step 1: Signup for a GitHub account</h3><p>The first step to begin hosting on GitHub is to create a personal account. Visit the <a href=\"https://github.com/join\">official registration page</a> to sign up.</p><h3 id=\"step-2-create-a-remote-repository-in-github\">Step 2: Create a remote repository in GitHub</h3><p>After signing up for an account, <a href=\"https://docs.github.com/en/github/getting-started-with-github/create-a-repo\">create a home (a repository) in GitHub</a> for the Git repository you want to share.</p><h3 id=\"step-3-connect-the-project-s-git-directory-to-the-remote-repository\">Step 3: Connect the project\u2019s Git directory to the remote repository</h3><p>Once you've created a remote repository for your project, link the project\u2019s <code>.git</code> directory \u2014 located locally on your system \u2014 with the remote repository on GitHub.</p><p>To connect to the remote repository, <strong>go inside the root directory</strong> of the project you want to share via your local terminal, and run:</p><pre><code>git remote add origin https://github.com/yourusername/yourreponame.git</code></pre><ul><li>Replace <code>yourusername</code> in the code above with your GitHub username.<br/>Likewise, replace <code>yourreponame</code> with the name of the remote repository you want to connect to.</li><li>The command above implies that <em>git</em> should <em>add</em> the specified <em>URL</em> to the local project as a remote reference with which the local <code>.git</code> directory can interact.</li><li>The <code>origin</code> option in the command above is the default name (a short name) Git gives to the server hosting your remote repository.<br/>That is, instead of the server's URL, Git uses the short name <code>origin</code>.</li><li>It is not compulsory to stick with the server\u2019s default name. If you prefer another name rather than <code>origin</code>, simply substitute the <code>origin</code> name in the <code>git remote add</code> command above with any name you prefer.</li><li>Always remember that a server\u2019s short name (for example, \u00a0<code>origin</code>) is nothing special! It only exists \u2014 locally \u2014 to help you easily reference the server\u2019s URL. So feel to change it to a short name you can easily reference.</li><li>To rename any existing remote URL, use the <code>git remote rename</code> command like so:</li></ul><pre><code>git remote rename theCurrentURLName yourNewURLName</code></pre><ul><li>Whenever you clone (download) any remote repo, Git automatically names that repo\u2019s URL <code>origin</code>. However, you can specify a different name with the <code>git clone -o yourPreferredName</code> command.</li><li>To see the exact URL stored for nicknames like <code>origin</code>, run <code>git remote -v</code> command.</li></ul><h3 id=\"step-4-confirm-the-connection\">Step 4: Confirm the connection</h3><p>Once you\u2019ve connected your Git directory to the remote repository, check whether the connection was successful by running <code>git remote -v</code> on the command line.</p><p>Afterward, check the output to confirm that the <em>displayed URL</em> is the same as the <em>remote URL</em> you intend to connect to.</p><ul><li>See the \u201c<a href=\"https://help.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh\">Connecting with SSH</a>\u201d article if you wish to connect using the SSH URL instead of the HTTPS URL.</li><li>However, if you are not sure of the remote URL to use, check out the \u201c<a href=\"https://help.github.com/en/github/using-git/which-remote-url-should-i-use\">Which remote URL should I use?</a>\u201d article.</li><li>Do you wish to change your remote URL? <a href=\"https://help.github.com/en/github/using-git/changing-a-remotes-url\">Changing a remote's URL</a> is an excellent guide.</li></ul><h3 id=\"step-5-push-a-local-git-repo-to-the-remote-repo\">Step 5: Push a local Git repo to the remote repo</h3><p>After successfully connecting your local directory to the remote repository, you can then begin to push (upload) your local project upstream.</p><p>Whenever you are ready to share your project elsewhere, on any remote repo, simply instruct Git to push all your commits, branches, and files in your local <code>.git</code> directory to the remote repository.</p><p>The code syntax used to upload (push) a local Git directory to a remote repository is <code>git push -u remoteName branchName</code>.</p><p>That is, to push your local <code>.git</code> directory, and assuming the remote URL\u2019s short name is \u201corigin\u201d, run:</p><pre><code>git push -u origin master</code></pre><ul><li>The command above implies that <em>git</em> should <em>push</em> your local <em>master</em> branch to the remote <em>master</em> branch located at the URL named <em>origin</em>.</li><li>Technically, you can substitute the <code>origin</code> option with the remote repository\u2019s URL. Remember, the <code>origin</code> option is only a nickname of the URL you\u2019ve registered into your local <code>.git</code> directory.</li><li>The <code>-u</code> flag (upstream/tracking reference flag) automatically links the <code>.git</code> directory's local branch with the remote branch. This allows you to use <code>git pull</code> without any arguments.</li></ul><h3 id=\"step-6-confirm-the-upload\">Step 6: Confirm the upload</h3><p>Lastly, go back to your GitHub repository page to confirm that Git has successfully pushed your local Git directory to the remote repository.</p><ul><li>You may need to refresh the remote repository's page for the changes to reflect.</li><li>GitHub also has a free optional facility to convert your remote repository into a functional website. Let see \u201chow\u201d below.</li></ul><h2 id=\"publish-your-website-with-github-pages\">Publish your website with GitHub pages</h2><p>After pushing your project to your remote repository, you can easily publish it on the web by following these steps:</p><h3 id=\"step-1-html-file-name\">Step 1: HTML File Name</h3><p>Make sure that the name of the main HTML file of your project is <code>index.html</code>.</p><figure><img alt=\"step1-html-file-name-codesweetly\" height=\"400\" loading=\"lazy\" sizes=\"(min-width: 720px) 720px\" src=\"https://www.freecodecamp.org/news/content/images/2021/08/step1-html-file-name-codesweetly.jpg\" srcset=\"https://www.freecodecamp.org/news/content/images/size/w600/2021/08/step1-html-file-name-codesweetly.jpg 600w, https://www.freecodecamp.org/news/content/images/2021/08/step1-html-file-name-codesweetly.jpg 800w\" width=\"800\"/></figure><h3 id=\"step-2-go-to-the-settings-tab\">Step 2: Go to the Settings Tab</h3><p>On GitHub\u2019s website platform, go into the repository of the project you want to publish and click the repository\u2019s <strong>settings tab</strong>.</p><figure><img alt=\"step2-settings-tab-codesweetly\" height=\"555\" loading=\"lazy\" sizes=\"(min-width: 720px) 720px\" src=\"https://www.freecodecamp.org/news/content/images/2021/08/step2-settings-tab-codesweetly.jpg\" srcset=\"https://www.freecodecamp.org/news/content/images/size/w600/2021/08/step2-settings-tab-codesweetly.jpg 600w, https://www.freecodecamp.org/news/content/images/size/w1000/2021/08/step2-settings-tab-codesweetly.jpg 1000w, https://www.freecodecamp.org/news/content/images/size/w1600/2021/08/step2-settings-tab-codesweetly.jpg 1600w, https://www.freecodecamp.org/news/content/images/2021/08/step2-settings-tab-codesweetly.jpg 1894w\" width=\"1894\"/></figure><h3 id=\"step-3-go-to-the-pages-tab\">Step 3: Go to the Pages Tab</h3><p>Scroll down to the <strong>GitHub Pages</strong> section. </p><figure><img alt=\"step3-pages-tab-codesweetly\" height=\"876\" loading=\"lazy\" sizes=\"(min-width: 720px) 720px\" src=\"https://www.freecodecamp.org/news/content/images/2021/08/step3-pages-tab-codesweetly.jpg\" srcset=\"https://www.freecodecamp.org/news/content/images/size/w600/2021/08/step3-pages-tab-codesweetly.jpg 600w, https://www.freecodecamp.org/news/content/images/size/w1000/2021/08/step3-pages-tab-codesweetly.jpg 1000w, https://www.freecodecamp.org/news/content/images/size/w1600/2021/08/step3-pages-tab-codesweetly.jpg 1600w, https://www.freecodecamp.org/news/content/images/2021/08/step3-pages-tab-codesweetly.jpg 1892w\" width=\"1892\"/></figure><h3 id=\"step-4-change-the-source\">Step 4: Change the Source</h3><p>There, change the <strong>Source</strong> branch from <strong>none</strong> to <strong>master</strong>.</p><figure><img alt=\"step4-source-codesweetly\" height=\"877\" loading=\"lazy\" sizes=\"(min-width: 720px) 720px\" src=\"https://www.freecodecamp.org/news/content/images/2021/08/step4-source-codesweetly.jpg\" srcset=\"https://www.freecodecamp.org/news/content/images/size/w600/2021/08/step4-source-codesweetly.jpg 600w, https://www.freecodecamp.org/news/content/images/size/w1000/2021/08/step4-source-codesweetly.jpg 1000w, https://www.freecodecamp.org/news/content/images/size/w1600/2021/08/step4-source-codesweetly.jpg 1600w, https://www.freecodecamp.org/news/content/images/2021/08/step4-source-codesweetly.jpg 1892w\" width=\"1892\"/></figure><h3 id=\"step-5-see-your-site-live-\">Step 5: See Your Site Live!</h3><p>Afterward, a notification saying, \u201cYour site is published at <em>https://your-username.github.io/your-github-repo-name/</em>\u201d will display.</p><figure><img alt=\"step5-see-your-site-live-codesweetly\" height=\"859\" loading=\"lazy\" sizes=\"(min-width: 720px) 720px\" src=\"https://www.freecodecamp.org/news/content/images/2021/08/step5-see-your-site-live-codesweetly.jpg\" srcset=\"https://www.freecodecamp.org/news/content/images/size/w600/2021/08/step5-see-your-site-live-codesweetly.jpg 600w, https://www.freecodecamp.org/news/content/images/size/w1000/2021/08/step5-see-your-site-live-codesweetly.jpg 1000w, https://www.freecodecamp.org/news/content/images/size/w1600/2021/08/step5-see-your-site-live-codesweetly.jpg 1600w, https://www.freecodecamp.org/news/content/images/2021/08/step5-see-your-site-live-codesweetly.jpg 1893w\" width=\"1893\"/></figure><p>Now you can view \u2014 and publicize \u2014 your project at the specified URL.</p><p>This section has merely scratched the surface of publishing your project with GitHub. To learn more about GitHub pages, check out this \u201c<a href=\"https://docs.github.com/en/github/working-with-github-pages\">Working with GitHub Pages</a>\u201d documentation.</p><h3 id=\"in-short\">In short</h3><p>GitHub is an online platform for hosting (or sharing) Git repositories. It helps you create an avenue to collaborate easily on projects with anyone, at any place, at any time.</p><h2 id=\"still-in-doubt\">Still in doubt?</h2><p>Are you still perplexed about the fine line between Git and GitHub? Don\u2019t worry \u2014 I have you covered. Below are five key differences between Git and GitHub.</p><h3 id=\"difference-1-git-vs-github-primary-function\">Difference 1: Git vs. GitHub \u2014 Primary function</h3><p><strong>Git</strong> is a distributed version control system that records different versions of a file (or set of files). It lets users access, compare, update, and distribute any of the recorded version(s) at any time.</p><p>However, <strong>GitHub</strong> is mainly a hosting platform for hosting Git repositories online. It lets users keep their <a href=\"https://www.codesweetly.com/git-basic-introduction/#what-is-a-remote-repository\">remote repository</a> private or open for collaborative endeavors.</p><h3 id=\"difference-2-git-vs-github-operation-platform\">Difference 2: Git vs. GitHub \u2014 Operation platform</h3><p>Users install and operate Git on their local machines. This means that most of Git's operations are achievable without the internet.</p><p>GitHub, however, is a web-based service that operates solely online. This means that you need the internet to do anything on GitHub.</p><h3 id=\"difference-3-git-vs-github-inventors\">Difference 3: Git vs. GitHub \u2014 Inventors</h3><p>Linus Torvalds began the development of Git in April, 2005.</p><p>Chris Wanstrath, P. J. Hyett, Tom Preston-Werner, and Scott Chacon founded GitHub.com in February, 2008.</p><h3 id=\"difference-4-git-vs-github-maintainers\">Difference 4: Git vs. GitHub \u2014 Maintainers</h3><p>In July 2005, Linus Torvalds turned over Git's maintenance to Junio C. Hamano \u2014 who has been the chief maintainer since then.</p><p>And Microsoft acquired GitHub in October, 2018.</p><h3 id=\"difference-5-git-vs-github-competitors\">Difference 5: Git vs. GitHub \u2014 Competitors</h3><p>Popular alternatives to Git are Mercurial, Team Foundation Version Control (TFVC), Perforce Helix Core, Apache Subversion, and IBM Rational ClearCase.</p><p>GitHub\u2019s closest competitors are GitLab, Bitbucket, SourceForge, Cloud Source Repositories, and AWS CodeCommit.</p><h2 id=\"all-in-all\">All in all</h2><p>Git and GitHub are two different entities that help you manage and host files. In other words, Git serves to control file versions while GitHub is a platform for hosting Git repositories.</p><h2 id=\"useful-resource\">Useful resource</h2><ul><li><a href=\"https://www.codesweetly.com/how-to-use-git/\">How to use Git \u2013 A stunning guide with awesome tips</a></li></ul>\n</section>\n<hr/>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nHave you ever been confused by how Git and GitHub work? Don\u2019t fret \u2014 you are not alone. Git and GitHub can be tricky sometimes, but by the end of this post you will have a good grasp of the two.At first, it may be tempting to believe Git and GitHub are the same thing. But in reality they are not. Indeed, it is possible to use Git without GitHub! And ultimately, the two exist for different purposes.This post will begin by taking a good look at the purposes of Git and GitHub. Afterward, we will learn about the main differences between these two vital technologies.Without any further ado, let\u2019s get it started with Git.Git is a Distributed Version Control System (DVCS) used to save different versions of a file (or set of files) so that any version is retrievable at will.Git also makes it easy to record and compare different file versions. This means that the details about what changed, who changed what, or who initiated an issue are reviewable anytime.But if Git is a Distributed Version Control System, what exactly do those terms mean?What does \u201cdistributed\u201d mean?The term \u201cdistributed\u201d means that whenever you instruct Git to share a project\u2019s directory, Git does not only share the latest file version. Instead, it distributes every version it has recorded for that project.This \"distributed\" system is in sharp contrast to other version control systems. They only share whatever single version a user has explicitly checked out from the central/local database.Okay, so \u201cdistributed\u201d means distribute all \u2014 not just selected few \u2014 versions of a project\u2019s files that Git has recorded. But what exactly is a version control system?What is a Version Control System?A Version Control System (VCS) refers to the method used to save a file's versions for future reference.Intuitively, many people already version control their projects by renaming different versions of the same file in various ways like blogScript.js, blogScript_v2.js, blogScript_v3.js, blogScript_final.js, blogScript_definite_final.js, and so on. But this approach is error-prone and ineffective for team projects.Also, tracking what changed, who changed it, and why it was changed is a tedious endeavor with this traditional approach. This illuminates the importance of a reliable and collaborative version control system like Git.However, to get the best of Git, it is essential to understand how Git handles your files.Files states in GitIn Git, there are three primary states (conditions) in which a file can be: modified state, staged state, or committed state.Modified stateA file in the modified state is a revised \u2014 but uncommitted (unrecorded) \u2014 file.In other words, files in the modified state are files you have modified but have not explicitly instructed Git to monitor.Staged stateFiles in the staged state are modified files that have been selected \u2014 in their current state (version) \u2014 and are being prepared to be saved (committed) into the .git repository during the next commit snapshot.Once a file gets staged, it implies that you have explicitly authorized Git to monitor that file\u2019s version.Committed stateFiles in the committed state are files successfully stored into the .git repository.Thus, a committed file is a file in which you have recorded its staged version into the Git directory (folder).Note: The state of a file determines the location where Git will place it.File locationsThere are three key places versions of a file may reside while version controlling with Git: the working directory, the staging area, or the Git directory.Working directoryThe working directory is a local folder for a project's files. This means that any folder created anywhere on a system is a working directory.Note:Files in the modified state reside in the working directory.The working directory is different from the .git directory. That is, you create a working directory while Git creates a .git directory.Check out this comparison article for more differences between the two repositories.Staging areaThe staging area \u2014 technically called \u201cindex\u201d in Git parlance \u2014 is a file, usually located in the .git directory, that stores information about files next-in-line to be committed into the .git directory.Note:Files in the staged state reside in the staging area.Git directoryThe .git directory is the folder (also called \u201crepository\u201d) that Git creates inside the working directory you have instructed it to track.Also, the .git folder is where Git stores the object databases and metadata of the file(s) you have instructed it to monitor.Note:The .git directory is the life of Git \u2014 it is the item copied when you clone a repository from another computer (or from an online platform like GitHub).Files in the committed state reside in the Git directory.The basic Git workflowWorking with the Git Version Control System looks something like this:Modify files in the working directory.Note that any file you alter becomes a file in the modified state.Selectively stage the files you want to commit to the .git directory.Note that any file you stage (add) into the staging area becomes a file in the staged state.Also, be aware that staged files are not yet in the .git database.Staging means information about the staged file gets included in a file (called \"index\") in the .git repository.Commit the file(s) you have staged into the .git directory. That is, permanently store a snapshot of the staged file(s) into the .git database.Note that any file version you commit to the .git directory becomes a file in the committed state.The gist thus farThe long and short of all the discussion thus far is that Git is a brilliant version control system for competent versioning, management, and distribution of files. Check out this simple guide to learn how to use Git efficiently.But, hang on a sec, if Git helps to effectively manage and distribute different versions of a project's file, what is GitHub's purpose?GitHub DemystifiedGitHub is a web-based platform where users can host Git repositories. It helps you facilitate easy sharing and collaboration on projects with anyone at any time.GitHub also encourages broader participation in open-source projects by providing a secure way to edit files in another user's repository.To host (or share) a Git repository on GitHub, follow the steps below:Step 1: Signup for a GitHub accountThe first step to begin hosting on GitHub is to create a personal account. Visit the official registration page to sign up.Step 2: Create a remote repository in GitHubAfter signing up for an account, create a home (a repository) in GitHub for the Git repository you want to share.Step 3: Connect the project\u2019s Git directory to the remote repositoryOnce you've created a remote repository for your project, link the project\u2019s .git directory \u2014 located locally on your system \u2014 with the remote repository on GitHub.To connect to the remote repository, go inside the root directory of the project you want to share via your local terminal, and run:git remote add origin https://github.com/yourusername/yourreponame.gitNote:Replace yourusername in the code above with your GitHub username.Likewise, replace yourreponame with the name of the remote repository you want to connect to.The command above implies that git should add the specified URL to the local project as a remote reference with which the local .git directory can interact.The origin option in the command above is the default name (a short name) Git gives to the server hosting your remote repository.That is, instead of the server's URL, Git uses the short name origin.It is not compulsory to stick with the server\u2019s default name. If you prefer another name rather than origin, simply substitute the origin name in the git remote add command above with any name you prefer.Always remember that a server\u2019s short name (for example, \u00a0origin) is nothing special! It only exists \u2014 locally \u2014 to help you easily reference the server\u2019s URL. So feel to change it to a short name you can easily reference.To rename any existing remote URL, use the git remote rename command like so:git remote rename theCurrentURLName yourNewURLNameWhenever you clone (download) any remote repo, Git automatically names that repo\u2019s URL origin. However, you can specify a different name with the git clone -o yourPreferredName command.To see the exact URL stored for nicknames like origin, run git remote -v command.Step 4: Confirm the connectionOnce you\u2019ve connected your Git directory to the remote repository, check whether the connection was successful by running git remote -v on the command line.Afterward, check the output to confirm that the displayed URL is the same as the remote URL you intend to connect to.Note:See the \u201cConnecting with SSH\u201d article if you wish to connect using the SSH URL instead of the HTTPS URL.However, if you are not sure of the remote URL to use, check out the \u201cWhich remote URL should I use?\u201d article.Do you wish to change your remote URL? Changing a remote's URL is an excellent guide.Step 5: Push a local Git repo to the remote repoAfter successfully connecting your local directory to the remote repository, you can then begin to push (upload) your local project upstream.Whenever you are ready to share your project elsewhere, on any remote repo, simply instruct Git to push all your commits, branches, and files in your local .git directory to the remote repository.The code syntax used to upload (push) a local Git directory to a remote repository is git push -u remoteName branchName.That is, to push your local .git directory, and assuming the remote URL\u2019s short name is \u201corigin\u201d, run:git push -u origin masterNote:The command above implies that git should push your local master branch to the remote master branch located at the URL named origin.Technically, you can substitute the origin option with the remote repository\u2019s URL. Remember, the origin option is only a nickname of the URL you\u2019ve registered into your local .git directory.The -u flag (upstream/tracking reference flag) automatically links the .git directory's local branch with the remote branch. This allows you to use git pull without any arguments.Step 6: Confirm the uploadLastly, go back to your GitHub repository page to confirm that Git has successfully pushed your local Git directory to the remote repository.Note:You may need to refresh the remote repository's page for the changes to reflect.GitHub also has a free optional facility to convert your remote repository into a functional website. Let see \u201chow\u201d below.Publish your website with GitHub pagesAfter pushing your project to your remote repository, you can easily publish it on the web by following these steps:Step 1: HTML File NameMake sure that the name of the main HTML file of your project is index.html.Step 2: Go to the Settings TabOn GitHub\u2019s website platform, go into the repository of the project you want to publish and click the repository\u2019s settings tab.Step 3: Go to the Pages TabScroll down to the GitHub Pages section. Step 4: Change the SourceThere, change the Source branch from none to master.Step 5: See Your Site Live!Afterward, a notification saying, \u201cYour site is published at https://your-username.github.io/your-github-repo-name/\u201d will display.Now you can view \u2014 and publicize \u2014 your project at the specified URL.This section has merely scratched the surface of publishing your project with GitHub. To learn more about GitHub pages, check out this \u201cWorking with GitHub Pages\u201d documentation.In shortGitHub is an online platform for hosting (or sharing) Git repositories. It helps you create an avenue to collaborate easily on projects with anyone, at any place, at any time.Still in doubt?Are you still perplexed about the fine line between Git and GitHub? Don\u2019t worry \u2014 I have you covered. Below are five key differences between Git and GitHub.Difference 1: Git vs. GitHub \u2014 Primary functionGit is a distributed version control system that records different versions of a file (or set of files). It lets users access, compare, update, and distribute any of the recorded version(s) at any time.However, GitHub is mainly a hosting platform for hosting Git repositories online. It lets users keep their remote repository private or open for collaborative endeavors.Difference 2: Git vs. GitHub \u2014 Operation platformUsers install and operate Git on their local machines. This means that most of Git's operations are achievable without the internet.GitHub, however, is a web-based service that operates solely online. This means that you need the internet to do anything on GitHub.Difference 3: Git vs. GitHub \u2014 InventorsLinus Torvalds began the development of Git in April, 2005.Chris Wanstrath, P. J. Hyett, Tom Preston-Werner, and Scott Chacon founded GitHub.com in February, 2008.Difference 4: Git vs. GitHub \u2014 MaintainersIn July 2005, Linus Torvalds turned over Git's maintenance to Junio C. Hamano \u2014 who has been the chief maintainer since then.And Microsoft acquired GitHub in October, 2018.Difference 5: Git vs. GitHub \u2014 CompetitorsPopular alternatives to Git are Mercurial, Team Foundation Version Control (TFVC), Perforce Helix Core, Apache Subversion, and IBM Rational ClearCase.GitHub\u2019s closest competitors are GitLab, Bitbucket, SourceForge, Cloud Source Repositories, and AWS CodeCommit.All in allGit and GitHub are two different entities that help you manage and host files. In other words, Git serves to control file versions while GitHub is a platform for hosting Git repositories.Useful resourceHow to use Git \u2013 A stunning guide with awesome tips\n\n                        \n                    \n                    \n                        \n                        \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 14213, "excerpt": "Have you ever been confused by how Git and GitHub work? Don\u2019t fret \u2014 you are not\nalone. Git and GitHub can be tricky sometimes, but by the end of this post you\nwill have a good grasp of the two.\n\nAt first, it may be tempting to believe Git and GitHub are the same thing. But\nin reality they are not. Indeed, it is possible to use Git without GitHub! And\nultimately, the two exist for different purposes.\n\nThis post will begin by taking a good look at the purposes of Git and GitHub.\nAfterward, we wil", "siteName": "freeCodeCamp.org", "publishedTime": "2020-08-19T16:06:01.000Z", "id": "047f26fd6614278fd54259c144d07d091f0fd799", "url": "https://www.freecodecamp.org/news/git-and-github-overview/", "domain": "freecodecamp.org", "date": "2023-12-27T18:06:38.511567", "resultUri": "http://localhost:3000/result/047f26fd6614278fd54259c144d07d091f0fd799", "query": {"url": ["https://www.freecodecamp.org/news/git-and-github-overview/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "Git vs GitHub \u2013 What is Version Control and How Does it Work?", "description": "Have you ever been confused by how Git and GitHub work? Don\u2019t fret \u2014 you are not alone. Git and GitHub can be tricky sometimes, but by the end of this post you will have a good grasp of the two. At first, it may be tempting to believe Git", "url": "https://www.freecodecamp.org/news/git-and-github-overview/", "image": "https://cdn-media-2.freecodecamp.org/w1280/5f9c9928740569d1a4ca1e25.jpg", "image:width": "1280", "image:height": "853"}, "twitter": {"card": "summary_large_image", "title": "Git vs GitHub \u2013 What is Version Control and How Does it Work?", "description": "Have you ever been confused by how Git and GitHub work? Don\u2019t fret \u2014 you are not alone. Git and GitHub can be tricky sometimes, but by the end of this post you will have a good grasp of the two. At first, it may be tempting to believe Git", "url": "https://www.freecodecamp.org/news/git-and-github-overview/", "image": "https://cdn-media-2.freecodecamp.org/w1280/5f9c9928740569d1a4ca1e25.jpg", "label1": "Written by", "data1": "Oluwatobi Sofela", "label2": "Filed under", "data2": "Git, Github, Version Control, Web Development, Programming, Coding", "site": "@freecodecamp", "creator": "@oluwatobiss"}}}