{"title": "How to find the index where a number belongs in an array in JavaScript", "byline": "Dylan Attal", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>How to find the index where a number belongs in an array in JavaScript</h1>\n<section>\n<section data-test-label=\"post-content\">\n<p>Sorting is a very important concept when writing algorithms. There are all kinds of sorts: bubble sort, shell sort, block sort, comb sort, cocktail sort, gnome sort \u2014 <a href=\"https://en.wikipedia.org/wiki/Sorting_algorithm\" rel=\"noopener\">I\u2019m not making these up</a>!</p><p>This challenge gives us a glimpse into the wonderful world of sorts. We have to sort an array of numbers from least to greatest and find out where a given number would belong in that array.</p><h4 id=\"algorithm-instructions\">Algorithm instructions</h4><blockquote>Return the lowest index at which a value (second argument) should be inserted into an array (first argument) once it has been sorted. The returned value should be a number.</blockquote><blockquote>For example, <code><em>getIndexToIns([1,2,3,4], 1.5)</em></code> should return <code><em>1</em></code>because it is greater than <code><em>1</em></code> (index 0), but less than <code><em>2</em></code> (index 1).</blockquote><blockquote>Likewise, <code><em>getIndexToIns([20,3,5], 19)</em></code> should return <code><em>2</em></code>because once the array has been sorted it will look like <code><em>[3,5,20]</em></code> and <code><em>19</em></code> is less than <code><em>20</em></code> (index 2) and greater than <code><em>5</em></code> (index 1).</blockquote><pre tabindex=\"0\"><code>function getIndexToIns(arr, num) {\n  return num;\n}\n\ngetIndexToIns([40, 60], 50);</code></pre><h4 id=\"provided-test-cases\">Provided Test Cases</h4><ul><li><code>getIndexToIns([10, 20, 30, 40, 50], 35)</code> should return <code>3</code>.</li><li><code>getIndexToIns([10, 20, 30, 40, 50], 35)</code> should return a number.</li><li><code>getIndexToIns([10, 20, 30, 40, 50], 30)</code> should return <code>2</code>.</li><li><code>getIndexToIns([10, 20, 30, 40, 50], 30)</code> should return a number.</li><li><code>getIndexToIns([40, 60], 50)</code> should return <code>1</code>.</li><li><code>getIndexToIns([40, 60], 50)</code> should return a number.</li><li><code>getIndexToIns([3, 10, 5], 3)</code> should return <code>0</code>.</li><li><code>getIndexToIns([3, 10, 5], 3)</code> should return a number.</li><li><code>getIndexToIns([5, 3, 20, 3], 5)</code> should return <code>2</code>.</li><li><code>getIndexToIns([5, 3, 20, 3], 5)</code> should return a number.</li><li><code>getIndexToIns([2, 20, 10], 19)</code> should return <code>2</code>.</li><li><code>getIndexToIns([2, 20, 10], 19)</code> should return a number.</li><li><code>getIndexToIns([2, 5, 10], 15)</code> should return <code>3</code>.</li><li><code>getIndexToIns([2, 5, 10], 15)</code> should return a number.</li><li><code>getIndexToIns([], 1)</code> should return <code>0</code>.</li><li><code>getIndexToIns([], 1)</code> should return a number.</li></ul><h3 id=\"solution-1-sort-indexof-\">Solution #1: .sort( ), .indexOf( )</h3><h4 id=\"pedac\">PEDAC</h4><p><strong>Understanding the Problem</strong>: We have two inputs, an array, and a number. Our goal is to return the index of our input number after it is sorted into the input array.</p><p><strong>Examples/Test Cases</strong>: The good people at freeCodeCamp don\u2019t tell us in which way the input array should be sorted, but the provided test cases make it clear that the input array should be sorted from least to greatest.</p><p>Notice that there is an edge case on the last two provided test cases where the input array is an empty array.</p><p><strong>Data Structure</strong>: Since we\u2019re ultimately returning an index, sticking with arrays is going to work for us.</p><p>We\u2019re going to utilize a nifty method named <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\" rel=\"noopener\">.indexOf()</a></code>:</p><p><code>.indexOf()</code> returns the first index at which an element is present in an array, or a <code>-1</code> if the element is not present at all. For example:</p><pre><code>let food = ['pizza', 'ice cream', 'chips', 'hot dog', 'cake']</code></pre><pre><code>food.indexOf('chips')// returns 2food.indexOf('spaghetti')// returns -1</code></pre><p>We\u2019re also going to be using <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\" rel=\"noopener\">.concat()</a></code> here instead of <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push\" rel=\"noopener\">.push()</a></code>. Why? Because when you add an element to an array using <code>.push()</code>, it returns the length of the new array. When you add an element to an array using <code>.concat()</code>, it returns the new array itself. For example:</p><pre><code>let array = [4, 10, 20, 37, 45]</code></pre><pre><code>array.push(98)// returns 6array.concat(98)// returns [4, 10, 20, 37, 45, 98]</code></pre><ol><li>Insert <code>num</code> into <code>arr</code>.</li><li>Sort <code>arr</code> from least to greatest.</li><li>Return the index of <code>num</code>.</li></ol><p><strong>Code</strong>: See below!</p><pre tabindex=\"0\"><code>function getIndexToIns(arr, num) {\n  // Insert num into arr, creating a new array.\n     let newArray = arr.concat(num)\n  //             [40, 60].concat(50)\n  //             [40, 60, 50]\n\n  // Sort the new array from least to greatest.\n     newArray.sort((a, b) =&gt; a - b)\n  // [40, 60, 50].sort((a, b) =&gt; a - b)\n  // [40, 50, 60]\n\n  // Return the index of num which is now\n  // in the correct place in the new array.\n     return newArray.indexOf(num);\n  // return [40, 50, 60].indexOf(50)\n  // 1\n}\n\ngetIndexToIns([40, 60], 50);</code></pre><p>Without local variables and comments:</p><pre tabindex=\"0\"><code>function getIndexToIns(arr, num) {\n  return arr.concat(num).sort((a, b) =&gt; a - b).indexOf(num);\n}\n\ngetIndexToIns([40, 60], 50);</code></pre><h3 id=\"solution-2-sort-findindex-\">Solution #2: .sort( ), .findIndex( )</h3><h4 id=\"pedac-1\">PEDAC</h4><p><strong>Understanding the Problem</strong>: We have two inputs, an array, and a number. Our goal is to return the index of our input number after it is sorted into the input array.</p><p><strong>Examples/Test Cases</strong>: The good people at freeCodeCamp don\u2019t tell us in which way the input array should be sorted, but the provided test cases make it clear that the input array should be sorted from least to greatest.</p><p>There are two edge cases to take into account with this solution:</p><ol><li>If the input array is empty then we need to return <code>0</code> because <code>num</code> would be the <em>only</em> element in that array, therefore at index <code>0</code>.</li><li>If <code>num</code> would belong at the very end of <code>arr</code> sorted from least to greatest, then we need to return the length of <code>arr</code>.</li></ol><p><strong>Data Structure</strong>: Since we\u2019re ultimately returning an index, sticking with arrays is going to work for us.</p><p>Let\u2019s checkout <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex\" rel=\"noopener\">.findIndex()</a></code> to see how it\u2019s going to help solve this challenge:</p><p><code>.findIndex()</code> returns the index of the first element in the array that satisfies the provided testing function. Otherwise, it returns -1, indicating no element passed the test. For example:</p><pre tabindex=\"0\"><code>let numbers = [3, 17, 94, 15, 20]\nnumbers.findIndex((currentNum) =&gt; currentNum % 2 == 0)\n// returns 2\nnumbers.findIndex((currentNum) =&gt; currentNum &gt; 100)\n// returns -1</code></pre><p>This is useful for us because we can use <code>.findIndex()</code> to compare our input <code>num</code> to every number in our input <code>arr</code> and figure out where it would fit in order from least to greatest.</p><ol><li>If <code>arr</code> is an empty array, return <code>0</code>.</li><li>If <code>num</code> belongs at the end of the sorted array, return the length of <code>arr</code>.</li><li>Otherwise, return the index <code>num</code> would be if <code>arr</code> was sorted from least to greatest.</li></ol><p><strong>Code</strong>: See below!</p><pre tabindex=\"0\"><code>function getIndexToIns(arr, num) {\n  // Sort arr from least to greatest.\n    let sortedArray = arr.sort((a, b) =&gt; a - b)\n  //                  [40, 60].sort((a, b) =&gt; a - b)\n  //                  [40, 60]\n\n  // Compare num to each number in sortedArray\n  // and find the index where num is less than or equal to \n  // a number in sortedArray.\n    let index = sortedArray.findIndex((currentNum) =&gt; num &lt;= currentNum)\n  //            [40, 60].findIndex(40 =&gt; 50 &lt;= 40) --&gt; falsy\n  //            [40, 60].findIndex(60 =&gt; 50 &lt;= 60) --&gt; truthy\n  //            returns 1 because num would fit like so [40, 50, 60]\n\n  // Return the correct index of num.\n  // If num belongs at the end of sortedArray or if arr is empty \n  // return the length of arr.\n    return index === -1 ? arr.length : index\n}\n\ngetIndexToIns([40, 60], 50);</code></pre><p>Without local variables and comments:</p><pre tabindex=\"0\"><code>function getIndexToIns(arr, num) {\n  let index = arr.sort((a, b) =&gt; a - b).findIndex((currentNum) =&gt; num &lt;= currentNum)\n  return index === -1 ? arr.length : index\n}\n\ngetIndexToIns([40, 60], 50);</code></pre><p>If you have other solutions and/or suggestions, please share in the comments!</p><h4 id=\"this-article-is-a-part-of-the-series-freecodecamp-algorithm-scripting-\">This article is a part of the series <a href=\"https://medium.com/@DylanAttal/freecodecamp-algorithm-scripting-b96227b7f837\" rel=\"noopener\">freeCodeCamp Algorithm Scripting</a>.</h4><h4 id=\"this-article-references-freecodecamp-basic-algorithm-scripting-where-do-i-belong-\">This article references<a href=\"https://learn.freecodecamp.org/javascript-algorithms-and-data-structures/basic-algorithm-scripting/where-do-i-belong\" rel=\"noopener\"> freeCodeCamp Basic Algorithm Scripting: Where do I Belong</a>.</h4><p>You can follow me on <a href=\"https://medium.com/@DylanAttal\" rel=\"noopener\">Medium</a>, <a href=\"https://www.linkedin.com/in/dylanattal/\" rel=\"noopener\">LinkedIn</a>, and <a href=\"https://github.com/DylanAttal\" rel=\"noopener\">GitHub</a>!</p>\n</section>\n<hr/>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nSorting is a very important concept when writing algorithms. There are all kinds of sorts: bubble sort, shell sort, block sort, comb sort, cocktail sort, gnome sort \u2014 I\u2019m not making these up!This challenge gives us a glimpse into the wonderful world of sorts. We have to sort an array of numbers from least to greatest and find out where a given number would belong in that array.Algorithm instructionsReturn the lowest index at which a value (second argument) should be inserted into an array (first argument) once it has been sorted. The returned value should be a number.For example, getIndexToIns([1,2,3,4], 1.5) should return 1because it is greater than 1 (index 0), but less than 2 (index 1).Likewise, getIndexToIns([20,3,5], 19) should return 2because once the array has been sorted it will look like [3,5,20] and 19 is less than 20 (index 2) and greater than 5 (index 1).function getIndexToIns(arr, num) {\n  return num;\n}\n\ngetIndexToIns([40, 60], 50);Provided Test CasesgetIndexToIns([10, 20, 30, 40, 50], 35) should return 3.getIndexToIns([10, 20, 30, 40, 50], 35) should return a number.getIndexToIns([10, 20, 30, 40, 50], 30) should return 2.getIndexToIns([10, 20, 30, 40, 50], 30) should return a number.getIndexToIns([40, 60], 50) should return 1.getIndexToIns([40, 60], 50) should return a number.getIndexToIns([3, 10, 5], 3) should return 0.getIndexToIns([3, 10, 5], 3) should return a number.getIndexToIns([5, 3, 20, 3], 5) should return 2.getIndexToIns([5, 3, 20, 3], 5) should return a number.getIndexToIns([2, 20, 10], 19) should return 2.getIndexToIns([2, 20, 10], 19) should return a number.getIndexToIns([2, 5, 10], 15) should return 3.getIndexToIns([2, 5, 10], 15) should return a number.getIndexToIns([], 1) should return 0.getIndexToIns([], 1) should return a number.Solution #1: .sort( ), .indexOf( )PEDACUnderstanding the Problem: We have two inputs, an array, and a number. Our goal is to return the index of our input number after it is sorted into the input array.Examples/Test Cases: The good people at freeCodeCamp don\u2019t tell us in which way the input array should be sorted, but the provided test cases make it clear that the input array should be sorted from least to greatest.Notice that there is an edge case on the last two provided test cases where the input array is an empty array.Data Structure: Since we\u2019re ultimately returning an index, sticking with arrays is going to work for us.We\u2019re going to utilize a nifty method named .indexOf():.indexOf() returns the first index at which an element is present in an array, or a -1 if the element is not present at all. For example:let food = ['pizza', 'ice cream', 'chips', 'hot dog', 'cake']food.indexOf('chips')// returns 2food.indexOf('spaghetti')// returns -1We\u2019re also going to be using .concat() here instead of .push(). Why? Because when you add an element to an array using .push(), it returns the length of the new array. When you add an element to an array using .concat(), it returns the new array itself. For example:let array = [4, 10, 20, 37, 45]array.push(98)// returns 6array.concat(98)// returns [4, 10, 20, 37, 45, 98]Algorithm:Insert num into arr.Sort arr from least to greatest.Return the index of num.Code: See below!function getIndexToIns(arr, num) {\n  // Insert num into arr, creating a new array.\n     let newArray = arr.concat(num)\n  //             [40, 60].concat(50)\n  //             [40, 60, 50]\n\n  // Sort the new array from least to greatest.\n     newArray.sort((a, b) => a - b)\n  // [40, 60, 50].sort((a, b) => a - b)\n  // [40, 50, 60]\n\n  // Return the index of num which is now\n  // in the correct place in the new array.\n     return newArray.indexOf(num);\n  // return [40, 50, 60].indexOf(50)\n  // 1\n}\n\ngetIndexToIns([40, 60], 50);Without local variables and comments:function getIndexToIns(arr, num) {\n  return arr.concat(num).sort((a, b) => a - b).indexOf(num);\n}\n\ngetIndexToIns([40, 60], 50);Solution #2: .sort( ), .findIndex( )PEDACUnderstanding the Problem: We have two inputs, an array, and a number. Our goal is to return the index of our input number after it is sorted into the input array.Examples/Test Cases: The good people at freeCodeCamp don\u2019t tell us in which way the input array should be sorted, but the provided test cases make it clear that the input array should be sorted from least to greatest.There are two edge cases to take into account with this solution:If the input array is empty then we need to return 0 because num would be the only element in that array, therefore at index 0.If num would belong at the very end of arr sorted from least to greatest, then we need to return the length of arr.Data Structure: Since we\u2019re ultimately returning an index, sticking with arrays is going to work for us.Let\u2019s checkout .findIndex() to see how it\u2019s going to help solve this challenge:.findIndex() returns the index of the first element in the array that satisfies the provided testing function. Otherwise, it returns -1, indicating no element passed the test. For example:let numbers = [3, 17, 94, 15, 20]\nnumbers.findIndex((currentNum) => currentNum % 2 == 0)\n// returns 2\nnumbers.findIndex((currentNum) => currentNum > 100)\n// returns -1This is useful for us because we can use .findIndex() to compare our input num to every number in our input arr and figure out where it would fit in order from least to greatest.Algorithm:If arr is an empty array, return 0.If num belongs at the end of the sorted array, return the length of arr.Otherwise, return the index num would be if arr was sorted from least to greatest.Code: See below!function getIndexToIns(arr, num) {\n  // Sort arr from least to greatest.\n    let sortedArray = arr.sort((a, b) => a - b)\n  //                  [40, 60].sort((a, b) => a - b)\n  //                  [40, 60]\n\n  // Compare num to each number in sortedArray\n  // and find the index where num is less than or equal to \n  // a number in sortedArray.\n    let index = sortedArray.findIndex((currentNum) => num <= currentNum)\n  //            [40, 60].findIndex(40 => 50 <= 40) --> falsy\n  //            [40, 60].findIndex(60 => 50 <= 60) --> truthy\n  //            returns 1 because num would fit like so [40, 50, 60]\n\n  // Return the correct index of num.\n  // If num belongs at the end of sortedArray or if arr is empty \n  // return the length of arr.\n    return index === -1 ? arr.length : index\n}\n\ngetIndexToIns([40, 60], 50);Without local variables and comments:function getIndexToIns(arr, num) {\n  let index = arr.sort((a, b) => a - b).findIndex((currentNum) => num <= currentNum)\n  return index === -1 ? arr.length : index\n}\n\ngetIndexToIns([40, 60], 50);If you have other solutions and/or suggestions, please share in the comments!This article is a part of the series freeCodeCamp Algorithm Scripting.This article references freeCodeCamp Basic Algorithm Scripting: Where do I Belong.You can follow me on Medium, LinkedIn, and GitHub!\n\n                        \n                    \n                    \n                        \n                        \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 7591, "excerpt": "Sorting is a very important concept when writing algorithms. There are all kinds\nof sorts: bubble sort, shell sort, block sort, comb sort, cocktail sort, gnome\nsort \u2014 I\u2019m not making these up [https://en.wikipedia.org/wiki/Sorting_algorithm]\n!\n\nThis challenge gives us a glimpse into the wonderful world of sorts. We have to\nsort an array of numbers from least to greatest and find out where a given\nnumber would belong in that array.\n\nAlgorithm instructions\n> Return the lowest index at which a value", "siteName": "freeCodeCamp.org", "publishedTime": "2019-05-13T20:07:48.000Z", "id": "1914fa8427cb701b889bce31a928264b64fea40b", "url": "https://www.freecodecamp.org/news/how-to-find-the-index-where-a-number-belongs-in-an-array-in-javascript-9af8453a39a8/", "domain": "freecodecamp.org", "date": "2023-12-27T18:09:58.556374", "resultUri": "http://localhost:3000/result/1914fa8427cb701b889bce31a928264b64fea40b", "query": {"url": ["https://www.freecodecamp.org/news/how-to-find-the-index-where-a-number-belongs-in-an-array-in-javascript-9af8453a39a8/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "How to find the index where a number belongs in an array in JavaScript", "description": "Sorting is a very important concept when writing algorithms. There are all kinds of sorts: bubble sort, shell sort, block sort, comb sort, cocktail sort, gnome sort \u2014 I\u2019m not making these up [https://en.wikipedia.org/wiki/Sorting_algorithm] ! This challenge gives us a glimpse into the wonderful world of sorts. We have to", "url": "https://www.freecodecamp.org/news/how-to-find-the-index-where-a-number-belongs-in-an-array-in-javascript-9af8453a39a8/", "image": "https://cdn-media-1.freecodecamp.org/images/1*XdBvGuY3oLB3E3Iv0CD-SA.jpeg", "image:width": "800", "image:height": "533"}, "twitter": {"card": "summary_large_image", "title": "How to find the index where a number belongs in an array in JavaScript", "description": "Sorting is a very important concept when writing algorithms. There are all kinds of sorts: bubble sort, shell sort, block sort, comb sort, cocktail sort, gnome sort \u2014 I\u2019m not making these up [https://en.wikipedia.org/wiki/Sorting_algorithm] ! This challenge gives us a glimpse into the wonderful world of sorts. We have to", "url": "https://www.freecodecamp.org/news/how-to-find-the-index-where-a-number-belongs-in-an-array-in-javascript-9af8453a39a8/", "image": "https://cdn-media-1.freecodecamp.org/images/1*XdBvGuY3oLB3E3Iv0CD-SA.jpeg", "label1": "Written by", "data1": "Dylan Attal", "label2": "Filed under", "data2": "Tech, Programming, Coding, JavaScript, Algorithms", "site": "@freecodecamp"}}}