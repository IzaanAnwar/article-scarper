{"title": "11 do\u2019s and don\u2019ts for your first programming job", "byline": "Eden Adler", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>11 do\u2019s and don\u2019ts for your first programming job</h1>\n<section>\n<section data-test-label=\"post-content\">\n<p>Firsts are exciting but can also be overwhelming. When I started my first programming job, I knew there\u2019s a lot I needed to learn tech-wise. But what I didn\u2019t realize is that there\u2019s many other skills you need to be a good developer besides coding. Mastering each of these is essential in accelerating your career growth. The earlier you learn them, the faster you\u2019ll ditch that \u201cjunior\u201d title.</p><h3 id=\"do-find-a-mentor\">Do: Find a mentor ?</h3><p>Find someone (or multiple people) outside of your company who you can ask questions and get advice from. Mentors within your company are great, and important too, but I\u2019d recommend finding at least one person outside of work who you can learn from. They\u2019ll have an unbiased opinion, and you don\u2019t have to worry about any conflict of interest, so you can truly feel comfortable asking anything.</p><p>How to find a mentor? This could be a whole post in and of itself. But the quick version is: go to meetups, attend tech events and introduce yourself to people, follow up with them, and let people know you\u2019re new in the industry and looking for a mentor. You\u2019d be surprised how much strangers are willing to help.</p><h3 id=\"don-t-be-afraid-to-ask-questions-\">Don\u2019t: Be afraid to ask questions \u2753</h3><p>I used to think that asking questions was a sign of weakness. That it would reveal my lack of experience. Now, I realize that asking questions is a core part of being a programmer. Let me explain.</p><p>There\u2019s <a href=\"http://bit.ly/2VVHOg0\" rel=\"noopener\">thousands of buzzwords</a>, and more are added every day. Even people who are in this industry for years are constantly learning new things. It\u2019s impossible to know absolutely everything. So asking questions is an essential part of programming.</p><p>Being good at asking questions is a skill. The earlier you develop it, the faster you\u2019ll gain confidence as a programmer.</p><p><strong>Here\u2019s a tip on knowing when to ask a question</strong>:</p><p>Gather enough research to effectively communicate: what works, what doesn\u2019t work, what you\u2019ve tried so far, and what information you\u2019re missing to solve the problem.</p><p>Example of a \u201cbad\u201d question: \u201cI have no idea what\u2019s going on here, but something isn\u2019t working...\u201d</p><p>Example of a \u201cgood\u201d question: \u201cI\u2019ve checked the logs, and was able to reproduce it locally. It looks like the problem is somewhere between X and Y. I\u2019m thinking it's either an issue with the API version we\u2019re using, or some unexpected value being sent. Is there anything else you think I might be missing?\u201d</p><p>Not every success. But if there\u2019s something you\u2019re really proud of, share it with your team. Whether it\u2019s an email or Slack, write up a summary of what you did, how you solved the issue, what you learned, and what value it provides.</p><p>If you have a great manager, they should encourage you to present about it at a dev team meeting, or maybe even encourage you to speak about it at a meetup or even a conference. If not, you should take the initiative and find meetups to present at, get a dev team meeting together to talk about it, or even write a blog post about it.</p><p>It might feel awkward to toot your own horn, but believe me, visibility is important and helps you gain respect and recognition at work. No one will know how amazing you are until you show them.</p><h3 id=\"don-t-panic\">Don\u2019t: Panic ?</h3><p>Problems will inevitably happen. Whether you caused them directly or not. It\u2019s not a matter of <em>if</em>, it\u2019s a matter of <em>when</em>. So when the problem does arise, let the relevant stakeholders (product manager, tech lead, teammates) know ASAP and then discuss with your tech lead or manager what you plan to do to fix it. The more calm and collected you are, the more confident you\u2019ll appear. It happens to the best of us, and no one\u2019s life is on the line. The only way to guarantee no bugs is to not write any code\u2026 It comes with the territory.</p><h3 id=\"do-speak-up-in-meetings\">Do: Speak up in meetings ?</h3><p>It may feel intimidating at first to be in a meeting with teammates who are all much more senior than you (believe me, I\u2019ve been there). But don\u2019t let it get to you. You\u2019re a fresh pair of eyes, so something that seems weird or confusing to you, probably is exactly that: weird and confusing.</p><p>If you know the topic being discussed ahead of time, try Googling and doing some preliminary research prior to the meeting. If not, and they\u2019re discussing a topic you aren\u2019t familiar with, ask for a high-level explanation or some context. Do this at the beginning of the meeting. It\u2019ll show you\u2019re engaged, and that you care. If you wait until \u201cquestion time\u201d at the end, it won\u2019t reflect well on you that you sat through an entire meeting confused and clueless.</p><h3 id=\"don-t-continuously-try-to-prove-yourself\">Don\u2019t: Continuously try to prove yourself ?</h3><p>When you\u2019re just starting out, don\u2019t put so much pressure on yourself to do big, crazy, impressive things that will get you noticed by your team. You\u2019ll waste a lot of energy, and won\u2019t get the response you\u2019re hoping for.</p><p>The truth is that everyone\u2019s busy and focused on their own tasks and responsibilities. No one will notice or care that you completed a feature in record time or took on 8 extra features on top of your workload or never had QA find a bug in any of your features. So don\u2019t kill yourself. It\u2019s not worth it. Trust me.</p><p><strong>What does help earn your teammates respect</strong> is being reliable, passionate, curious, and thoughtful. Show your team that you are on top of things by: thinking holistically about how your feature will impact other areas of the product, raising potential issues, thoroughly testing your feature (and asking others for testing ideas), bringing up potential edge-cases to the product manager, asking questions whenever you\u2019re not sure about something, etc.</p><p><strong>Bonus tip</strong>: If you really want to go above and beyond, choose to do a mini project that helps everyone on your team\u2019s workflow. Pay attention and find pain points in your work and create a small shell script to automate it. Or if your team uses Slack, create or find an integration that will help. Make sure that there\u2019s really a need and that this would be a convenient way to solve it. Ask a teammate what they think and if they can review the code with you. You\u2019ll get double points for taking initiative and creating something that helps everyone in their everyday work.</p><p>I initially had the mindset of \u201cjust put your head down and work\u201d. If the designer made changes, teammate changed the API unexpectedly, or you encountered a big bug that you need to take care of first, I thought I was supposed to accept it as is and keep working. I thought that saying something would come off as complaining or making excuses. No. It\u2019s really important to communicate these things with the product manager and tech lead.</p><p>It is their job to prioritize features and delegate tasks according to everyone\u2019s time schedules. If things come up that impact the estimated time allotted for the project, they need to know about it ASAP so they can adjust.</p><p>Additionally, it\u2019s important for them to know why things are taking longer. Otherwise they might assume it\u2019s because you are slow or not performing. That is NOT the case, and it\u2019s important for them to understand that.</p><p>You won\u2019t get complaints for over-communicating. But you will cause problems if you under-communicate.</p><h3 id=\"don-t-seek-acknowledgement-from-others\">Don\u2019t: Seek acknowledgement from others ?</h3><p>You just had an \u201cah, ha!\u201d moment with the feature you\u2019re working on. You\u2019re thinking to yourself, \u201cWow, I can\u2019t believe I just did that!\u201d You impressed yourself and that should be enough. Your teammates might not even remember what it felt like to deploy their first feature, implement some recursive function, or do their first database migration. It\u2019s exciting to you, and it should be. Find those people at work who you can share things with and who will be genuinely happy for you.</p><h3 id=\"do-make-an-effort-to-learn-keyboard-shortcuts-\">Do: Make an effort to learn keyboard shortcuts \u2328</h3><p>Pay attention to your coworkers. You\u2019ll notice they barely touch their mouse or trackpad. They can switch apps, jump around their text editor, and search and replace in their sleep. Learning these simple shortcuts will make you more efficient in your work and is another way you can \u201clevel up\u201d as a developer. But don\u2019t try to learn them all at once. There are even some great command line tools you can download. Ask your teammates for some tips and tricks.</p><h3 id=\"don-t-say-yes-to-everything\">Don\u2019t: Say \u2018yes\u2019 to everything ?</h3><p>Initially I said \u2018yes\u2019 to everything because I wanted to be a team player and show that people can count on me. But, I was wrong, that\u2019s not the way to do it. The only thing that resulted from that was me feeling overwhelmed, overworked, under appreciated, and caused me to lose focus.</p><blockquote>\u201cFocusing is about saying no.\u201d\u200a\u2014\u200aSteve Jobs</blockquote><p>There needs to be a balance. As the junior, you\u2019ll often get the tasks that no one else wants to do. That\u2019s okay. You want to get your hands on all kinds of work and no matter how \u201cboring\u201d the task, you\u2019ll still be learning. But, that task shouldn\u2019t overwhelm you or make you regret saying \u2018yes\u2019 when another opportunity comes around that you now have to say \u2018no\u2019 to.</p><h3 id=\"do-get-involved-in-things-outside-of-work\">Do: Get involved in things outside of work ?</h3><p>Figure out what you\u2019re passionate about and then seek out opportunities to volunteer, find meetups to attend, get involved in groups/organizations, work on side projects, write blog posts, etc. Being a developer means being part of a community and sharing things with that community. So put yourself out there!</p><h3 id=\"to-be-honest\">To be honest</h3><p>It\u2019ll take some time before you feel comfortable doing all 11 of these. It\u2019s hard to master them all. Honestly, I\u2019m still working on a few of these myself ?. But these are all things that I\u2019ve learned from experience, and wish someone had told me when I was just starting out.</p><p>Try working on each of these one at a time. The key takeaways here are:</p><ol><li>Advocate for yourself</li><li>Be confident</li><li>Ask questions</li><li>Surround yourself with supportive, encouraging people</li></ol><p>Thanks for reading ?! Would love to hear your thoughts, feel free to connect with me on <a href=\"https://www.instagram.com/edenadler\" rel=\"noopener\">Instagram</a> &amp;&amp; check out my <a href=\"https://edenadler.com/\" rel=\"noopener\">website</a> \u2728</p>\n</section>\n<hr/>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nFirsts are exciting but can also be overwhelming. When I started my first programming job, I knew there\u2019s a lot I needed to learn tech-wise. But what I didn\u2019t realize is that there\u2019s many other skills you need to be a good developer besides coding. Mastering each of these is essential in accelerating your career growth. The earlier you learn them, the faster you\u2019ll ditch that \u201cjunior\u201d title.Do: Find a mentor ?Find someone (or multiple people) outside of your company who you can ask questions and get advice from. Mentors within your company are great, and important too, but I\u2019d recommend finding at least one person outside of work who you can learn from. They\u2019ll have an unbiased opinion, and you don\u2019t have to worry about any conflict of interest, so you can truly feel comfortable asking anything.How to find a mentor? This could be a whole post in and of itself. But the quick version is: go to meetups, attend tech events and introduce yourself to people, follow up with them, and let people know you\u2019re new in the industry and looking for a mentor. You\u2019d be surprised how much strangers are willing to help.Don\u2019t: Be afraid to ask questions \u2753I used to think that asking questions was a sign of weakness. That it would reveal my lack of experience. Now, I realize that asking questions is a core part of being a programmer. Let me explain.There\u2019s thousands of buzzwords, and more are added every day. Even people who are in this industry for years are constantly learning new things. It\u2019s impossible to know absolutely everything. So asking questions is an essential part of programming.Being good at asking questions is a skill. The earlier you develop it, the faster you\u2019ll gain confidence as a programmer.Here\u2019s a tip on knowing when to ask a question:Gather enough research to effectively communicate: what works, what doesn\u2019t work, what you\u2019ve tried so far, and what information you\u2019re missing to solve the problem.Example of a \u201cbad\u201d question: \u201cI have no idea what\u2019s going on here, but something isn\u2019t working...\u201dExample of a \u201cgood\u201d question: \u201cI\u2019ve checked the logs, and was able to reproduce it locally. It looks like the problem is somewhere between X and Y. I\u2019m thinking it's either an issue with the API version we\u2019re using, or some unexpected value being sent. Is there anything else you think I might be missing?\u201dNot every success. But if there\u2019s something you\u2019re really proud of, share it with your team. Whether it\u2019s an email or Slack, write up a summary of what you did, how you solved the issue, what you learned, and what value it provides.If you have a great manager, they should encourage you to present about it at a dev team meeting, or maybe even encourage you to speak about it at a meetup or even a conference. If not, you should take the initiative and find meetups to present at, get a dev team meeting together to talk about it, or even write a blog post about it.It might feel awkward to toot your own horn, but believe me, visibility is important and helps you gain respect and recognition at work. No one will know how amazing you are until you show them.Don\u2019t: Panic ?Problems will inevitably happen. Whether you caused them directly or not. It\u2019s not a matter of if, it\u2019s a matter of when. So when the problem does arise, let the relevant stakeholders (product manager, tech lead, teammates) know ASAP and then discuss with your tech lead or manager what you plan to do to fix it. The more calm and collected you are, the more confident you\u2019ll appear. It happens to the best of us, and no one\u2019s life is on the line. The only way to guarantee no bugs is to not write any code\u2026 It comes with the territory.Do: Speak up in meetings ?It may feel intimidating at first to be in a meeting with teammates who are all much more senior than you (believe me, I\u2019ve been there). But don\u2019t let it get to you. You\u2019re a fresh pair of eyes, so something that seems weird or confusing to you, probably is exactly that: weird and confusing.If you know the topic being discussed ahead of time, try Googling and doing some preliminary research prior to the meeting. If not, and they\u2019re discussing a topic you aren\u2019t familiar with, ask for a high-level explanation or some context. Do this at the beginning of the meeting. It\u2019ll show you\u2019re engaged, and that you care. If you wait until \u201cquestion time\u201d at the end, it won\u2019t reflect well on you that you sat through an entire meeting confused and clueless.Don\u2019t: Continuously try to prove yourself ?When you\u2019re just starting out, don\u2019t put so much pressure on yourself to do big, crazy, impressive things that will get you noticed by your team. You\u2019ll waste a lot of energy, and won\u2019t get the response you\u2019re hoping for.The truth is that everyone\u2019s busy and focused on their own tasks and responsibilities. No one will notice or care that you completed a feature in record time or took on 8 extra features on top of your workload or never had QA find a bug in any of your features. So don\u2019t kill yourself. It\u2019s not worth it. Trust me.What does help earn your teammates respect is being reliable, passionate, curious, and thoughtful. Show your team that you are on top of things by: thinking holistically about how your feature will impact other areas of the product, raising potential issues, thoroughly testing your feature (and asking others for testing ideas), bringing up potential edge-cases to the product manager, asking questions whenever you\u2019re not sure about something, etc.Bonus tip: If you really want to go above and beyond, choose to do a mini project that helps everyone on your team\u2019s workflow. Pay attention and find pain points in your work and create a small shell script to automate it. Or if your team uses Slack, create or find an integration that will help. Make sure that there\u2019s really a need and that this would be a convenient way to solve it. Ask a teammate what they think and if they can review the code with you. You\u2019ll get double points for taking initiative and creating something that helps everyone in their everyday work.I initially had the mindset of \u201cjust put your head down and work\u201d. If the designer made changes, teammate changed the API unexpectedly, or you encountered a big bug that you need to take care of first, I thought I was supposed to accept it as is and keep working. I thought that saying something would come off as complaining or making excuses. No. It\u2019s really important to communicate these things with the product manager and tech lead.It is their job to prioritize features and delegate tasks according to everyone\u2019s time schedules. If things come up that impact the estimated time allotted for the project, they need to know about it ASAP so they can adjust.Additionally, it\u2019s important for them to know why things are taking longer. Otherwise they might assume it\u2019s because you are slow or not performing. That is NOT the case, and it\u2019s important for them to understand that.You won\u2019t get complaints for over-communicating. But you will cause problems if you under-communicate.Don\u2019t: Seek acknowledgement from others ?You just had an \u201cah, ha!\u201d moment with the feature you\u2019re working on. You\u2019re thinking to yourself, \u201cWow, I can\u2019t believe I just did that!\u201d You impressed yourself and that should be enough. Your teammates might not even remember what it felt like to deploy their first feature, implement some recursive function, or do their first database migration. It\u2019s exciting to you, and it should be. Find those people at work who you can share things with and who will be genuinely happy for you.Do: Make an effort to learn keyboard shortcuts \u2328Pay attention to your coworkers. You\u2019ll notice they barely touch their mouse or trackpad. They can switch apps, jump around their text editor, and search and replace in their sleep. Learning these simple shortcuts will make you more efficient in your work and is another way you can \u201clevel up\u201d as a developer. But don\u2019t try to learn them all at once. There are even some great command line tools you can download. Ask your teammates for some tips and tricks.Don\u2019t: Say \u2018yes\u2019 to everything ?Initially I said \u2018yes\u2019 to everything because I wanted to be a team player and show that people can count on me. But, I was wrong, that\u2019s not the way to do it. The only thing that resulted from that was me feeling overwhelmed, overworked, under appreciated, and caused me to lose focus.\u201cFocusing is about saying no.\u201d\u200a\u2014\u200aSteve JobsThere needs to be a balance. As the junior, you\u2019ll often get the tasks that no one else wants to do. That\u2019s okay. You want to get your hands on all kinds of work and no matter how \u201cboring\u201d the task, you\u2019ll still be learning. But, that task shouldn\u2019t overwhelm you or make you regret saying \u2018yes\u2019 when another opportunity comes around that you now have to say \u2018no\u2019 to.Do: Get involved in things outside of work ?Figure out what you\u2019re passionate about and then seek out opportunities to volunteer, find meetups to attend, get involved in groups/organizations, work on side projects, write blog posts, etc. Being a developer means being part of a community and sharing things with that community. So put yourself out there!To be honestIt\u2019ll take some time before you feel comfortable doing all 11 of these. It\u2019s hard to master them all. Honestly, I\u2019m still working on a few of these myself ?. But these are all things that I\u2019ve learned from experience, and wish someone had told me when I was just starting out.Try working on each of these one at a time. The key takeaways here are:Advocate for yourselfBe confidentAsk questionsSurround yourself with supportive, encouraging peopleThanks for reading ?! Would love to hear your thoughts, feel free to connect with me on Instagram && check out my website \u2728\n\n                        \n                    \n                    \n                        \n                        \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 10390, "excerpt": "Firsts are exciting but can also be overwhelming. When I started my first\nprogramming job, I knew there\u2019s a lot I needed to learn tech-wise. But what I\ndidn\u2019t realize is that there\u2019s many other skills you need to be a good developer\nbesides coding. Mastering each of these is essential in accelerating your career\ngrowth. The earlier you learn them, the faster you\u2019ll ditch that \u201cjunior\u201d title.\n\nDo: Find a mentor ?\nFind someone (or multiple people) outside of your company who you can ask\nquestions", "siteName": "freeCodeCamp.org", "publishedTime": "2019-06-17T07:47:00.000Z", "id": "3f800a71232f992b7138b578e6e902f47b9c3800", "url": "https://www.freecodecamp.org/news/11-dos-and-donts-for-your-first-programming-job/", "domain": "freecodecamp.org", "date": "2023-12-27T18:09:07.425743", "resultUri": "http://localhost:3000/result/3f800a71232f992b7138b578e6e902f47b9c3800", "query": {"url": ["https://www.freecodecamp.org/news/11-dos-and-donts-for-your-first-programming-job/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "11 do\u2019s and don\u2019ts for your first programming job", "description": "Firsts are exciting but can also be overwhelming. When I started my first programming job, I knew there\u2019s a lot I needed to learn tech-wise. But what I didn\u2019t realize is that there\u2019s many other skills you need to be a good developer besides coding. Mastering each of these is", "url": "https://www.freecodecamp.org/news/11-dos-and-donts-for-your-first-programming-job/", "image": "https://www.freecodecamp.org/news/content/images/2019/06/jeshoots-com-523925-unsplash.jpg", "image:width": "2000", "image:height": "1333"}, "twitter": {"card": "summary_large_image", "title": "11 do\u2019s and don\u2019ts for your first programming job", "description": "Firsts are exciting but can also be overwhelming. When I started my first programming job, I knew there\u2019s a lot I needed to learn tech-wise. But what I didn\u2019t realize is that there\u2019s many other skills you need to be a good developer besides coding. Mastering each of these is", "url": "https://www.freecodecamp.org/news/11-dos-and-donts-for-your-first-programming-job/", "image": "https://www.freecodecamp.org/news/content/images/2019/06/jeshoots-com-523925-unsplash.jpg", "label1": "Written by", "data1": "Eden Adler", "label2": "Filed under", "data2": "Career Advice, Jobs, Programming, Software Development, Junior Developer", "site": "@freecodecamp", "creator": "@edenadler"}}}