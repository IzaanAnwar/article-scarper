{"title": "How to optimize React applications with Lazy Loading ?", "byline": "freeCodeCamp.org", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>How to optimize React applications with Lazy Loading ?</h1>\n<section>\n<section data-test-label=\"post-content\">\n<p>by Al-amin Nowshad</p><h4 id=\"for-your-components-images-and-what-not\">For your components, images, and what not</h4><p>Lazy loading is an old technique to optimize web applications as well as on mobile apps. The thing is pretty straight forward - do not render things if they are not viewed or required at that moment. So, for example, if we have a list of posts to show, we should initially only render what\u2019s on the viewport. That means the rest of the elements will be rendered later on demand (when they\u2019re in the viewport or about to be on the viewport).</p><h3 id=\"why-lazy-loading\">Why Lazy Loading?</h3><p>Most of the times our users don\u2019t see the whole web page, at least in the beginning. No matter how our application UI has been structured, there are certain components the user might not need initially or ever!</p><p>In these cases, rendering those components not only harms our application\u2019s performance but also wastes a lot of resources (especially when they have images or similar data hungry contents).</p><p>So, loading or rendering those components on demand seems to be a more efficient decision. It can improve the application\u2019s performance, and at the same time can save us a lot of resources.</p><h3 id=\"how\">How?</h3><p>We\u2019re going to make a sample application where we can apply lazy loading. First, we need to initialize our React application using <code>create-react-app</code> with the commands below:</p><pre><code>create-react-app lazydemocd lazydemonpm run start</code></pre><p>This might take a few minutes to initialize and open our react application in browser\u2019s <code>3000</code> port by default.</p><blockquote>If you don\u2019t have <code>create-react-app</code> installed on your pc, you can install with the command: <code>npm install -g create-react-app</code></blockquote><p>Now, we\u2019re gonna make a list that\u2019ll show some random posts. So, let\u2019s get some dummy data first. Create a file named <code>data.js</code> inside <code>src</code> folder of our project. I\u2019ve just copy-pasted the <code>json</code> response from this <code>JSON</code> placeholder endpoint <a href=\"https://jsonplaceholder.typicode.com/posts\" rel=\"noopener\">https://jsonplaceholder.typicode.com/posts</a>. You can create your own dummy data too. Following the format below should be sufficient for this tutorial:</p><figure><img alt=\"nYsUwBXnStTJouo42YP5z4dXoK7dCp-XY6tk\" height=\"260\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/nYsUwBXnStTJouo42YP5z4dXoK7dCp-XY6tk\" width=\"800\"/><figcaption>data.js format</figcaption></figure><p>Let\u2019s replace <code>App.js</code> file\u2019s content with the code below:</p><figure><img alt=\"70Q5LEimL51EiG1d0FA-RZZRVuDxVyIrSzbU\" height=\"1392\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/70Q5LEimL51EiG1d0FA-RZZRVuDxVyIrSzbU\" width=\"800\"/></figure><figure><img alt=\"N3MLdKVosCniJCyyJ1LUx480I7Di4xdbWxCq\" height=\"690\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/N3MLdKVosCniJCyyJ1LUx480I7Di4xdbWxCq\" width=\"671\"/></figure><p>Here, we are simply making a list of <code>posts</code> with their <code>title</code> and <code>body</code>. And with some simple <code>CSS</code> modifications we get the view on the right. Here\u2019s the full list renders at once. Now, if we don\u2019t wanna render everything initially, we should apply <code>lazy loading</code>. Let\u2019s install it in our project:</p><pre><code>npm install \u2014-save react-lazyload</code></pre><p>Now, let\u2019s update <code>App.js</code> file by importing and applying <code>lazyload</code>.</p><figure><img alt=\"w663tm74X4xB8g8SV8XWm0KxAIjBZ0kMAV6R\" height=\"772\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/w663tm74X4xB8g8SV8XWm0KxAIjBZ0kMAV6R\" width=\"800\"/></figure><p>Using <code>react-lazyload</code> is pretty straight forward, just wrap the component with <code>&lt;LazyLoad \u2026&gt; \u2026 &lt;/</code>LazyLoad&gt;. Here we are using a placeholde<code>r component</code> &lt;Loading /<code>&gt; tha</code>t\u2019ll show Loading\u2026 till the component has loaded. We can also <code>set th</code>e eff<code>ective</code> height <code>and offs</code>et of the LazyLoad component. You can find more details on t<a href=\"https://github.com/twobin/react-lazyload#height\" rel=\"noopener\">he documentation: https://github.com/twobin/rea</a>ct-lazyload#height</p><p>Now, all of the posts are not being rendered initially. Only a few will be rendered initially depending on the viewport. But, as the contents are textual till now, the effect can be hardly realized unless we inspect and see the DOM\u2019s changing when they move from <code>loading</code> to <code>loaded</code>.</p><p>To make our lazy loading more effective let\u2019s incorporate images inside posts. We\u2019ll use <a href=\"https://picsum.photos/\" rel=\"noopener\">Lorem Picsum</a> for our photos. Our updated <code>Post</code> component should look like below:</p><figure><img alt=\"Hxs73x97zu9teR7f2SIwbr6VmmrKVegHz2qe\" height=\"285\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/Hxs73x97zu9teR7f2SIwbr6VmmrKVegHz2qe\" width=\"800\"/></figure><blockquote>Lorem Picsum url format<br/>https://picsum.photos/id/[image_id]/[width]/[height]</blockquote><figure><img alt=\"ge5QAy8G1wGFa7jAiFSlQrAQj3AyQVK4FPsC\" height=\"478\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/ge5QAy8G1wGFa7jAiFSlQrAQj3AyQVK4FPsC\" width=\"800\"/><figcaption>The result after inserting images with posts</figcaption></figure><p>Now, as I said earlier, images are data hungry components of a webpage and here we are loading images for each post. Though the whole component is lazy loaded and image also gets loaded with the component, the image loads a bit late and not so smoothly. So, we can make a better image loading experience for our user\u2019s using LazyLoad for individual images.</p><p>The technique is to load a very low-quality image as a placeholder and then the original image gets loaded. So, the final <code>App.js</code> would look like \u2014</p><figure><img alt=\"mSb4ic759dFRZMUv90WFKHA73C1rTei-yn89\" height=\"941\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/mSb4ic759dFRZMUv90WFKHA73C1rTei-yn89\" width=\"800\"/></figure><p>Now we can <code>scroll</code> the list with our <code>inspect element open</code> to see how these components change when they come near to the viewport then gets rendered and the placeholder gets replaced by actual contents.</p><p>And we are done, for now, our LazyLoad is working with all its grace. That was pretty easy!!!</p><figure><img alt=\"DSefnSg0oR-EoUpD0QlKsTPVc6yfX1mztNKR\" height=\"632\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/DSefnSg0oR-EoUpD0QlKsTPVc6yfX1mztNKR\" width=\"500\"/></figure><blockquote>The image LazyLoad here is not the best use case as it\u2019s already handled by the component LazyLoad. But, the technique can be very useful in other use cases where we have to show a lot of images. Try disabling the LazyLoad on Post component but keep the image LazyLoad, you can see its effect.</blockquote><p>React LazyLoad: <a href=\"https://github.com/twobin\" rel=\"noopener\">twobin</a>/<a href=\"https://github.com/twobin/react-lazyload\" rel=\"noopener\">react-lazyload</a></p>\n</section>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nby Al-amin NowshadFor your components, images, and what notLazy loading is an old technique to optimize web applications as well as on mobile apps. The thing is pretty straight forward - do not render things if they are not viewed or required at that moment. So, for example, if we have a list of posts to show, we should initially only render what\u2019s on the viewport. That means the rest of the elements will be rendered later on demand (when they\u2019re in the viewport or about to be on the viewport).Why Lazy Loading?Most of the times our users don\u2019t see the whole web page, at least in the beginning. No matter how our application UI has been structured, there are certain components the user might not need initially or ever!In these cases, rendering those components not only harms our application\u2019s performance but also wastes a lot of resources (especially when they have images or similar data hungry contents).So, loading or rendering those components on demand seems to be a more efficient decision. It can improve the application\u2019s performance, and at the same time can save us a lot of resources.How?We\u2019re going to make a sample application where we can apply lazy loading. First, we need to initialize our React application using create-react-app with the commands below:create-react-app lazydemocd lazydemonpm run startThis might take a few minutes to initialize and open our react application in browser\u2019s 3000 port by default.If you don\u2019t have create-react-app installed on your pc, you can install with the command: npm install -g create-react-appNow, we\u2019re gonna make a list that\u2019ll show some random posts. So, let\u2019s get some dummy data first. Create a file named data.js inside src folder of our project. I\u2019ve just copy-pasted the json response from this JSON placeholder endpoint https://jsonplaceholder.typicode.com/posts. You can create your own dummy data too. Following the format below should be sufficient for this tutorial:data.js formatLet\u2019s replace App.js file\u2019s content with the code below:Here, we are simply making a list of posts with their title and body. And with some simple CSS modifications we get the view on the right. Here\u2019s the full list renders at once. Now, if we don\u2019t wanna render everything initially, we should apply lazy loading. Let\u2019s install it in our project:Source: twobin/react-lazyloadnpm install \u2014-save react-lazyloadNow, let\u2019s update App.js file by importing and applying lazyload.Using react-lazyload is pretty straight forward, just wrap the component with <LazyLoad \u2026> \u2026 </LazyLoad>. Here we are using a placeholder component <Loading /> that\u2019ll show Loading\u2026 till the component has loaded. We can also set the effective height and offset of the LazyLoad component. You can find more details on the documentation: https://github.com/twobin/react-lazyload#heightNow, all of the posts are not being rendered initially. Only a few will be rendered initially depending on the viewport. But, as the contents are textual till now, the effect can be hardly realized unless we inspect and see the DOM\u2019s changing when they move from loading to loaded.To make our lazy loading more effective let\u2019s incorporate images inside posts. We\u2019ll use Lorem Picsum for our photos. Our updated Post component should look like below:Lorem Picsum url formathttps://picsum.photos/id/[image_id]/[width]/[height]The result after inserting images with postsNow, as I said earlier, images are data hungry components of a webpage and here we are loading images for each post. Though the whole component is lazy loaded and image also gets loaded with the component, the image loads a bit late and not so smoothly. So, we can make a better image loading experience for our user\u2019s using LazyLoad for individual images.The technique is to load a very low-quality image as a placeholder and then the original image gets loaded. So, the final App.js would look like \u2014Now we can scroll the list with our inspect element open to see how these components change when they come near to the viewport then gets rendered and the placeholder gets replaced by actual contents.And we are done, for now, our LazyLoad is working with all its grace. That was pretty easy!!!The image LazyLoad here is not the best use case as it\u2019s already handled by the component LazyLoad. But, the technique can be very useful in other use cases where we have to show a lot of images. Try disabling the LazyLoad on Post component but keep the image LazyLoad, you can see its effect.Github: https://github.com/nowshad-sust/lazydemoReact LazyLoad: twobin/react-lazyload\n\n                        \n                    \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 5176, "excerpt": "by Al-amin Nowshad\n\nHow to optimize React applications with Lazy Loading ?\nFor your components, images, and what not\nLazy loading is an old technique to optimize web applications as well as on\nmobile apps. The thing is pretty straight forward - do not render things if they\nare not viewed or required at that moment. So, for example, if we have a list of\nposts to show, we should initially only render what\u2019s on the viewport. That\nmeans the rest of the elements will be rendered later on demand (when", "siteName": "freeCodeCamp.org", "publishedTime": "2019-05-13T17:40:10.000Z", "id": "15116cc077ccca21c53754611bc8a38da4f0a4e2", "url": "https://www.freecodecamp.org/news/how-to-optimize-react-applications-with-lazy-loading-232183e02768/", "domain": "freecodecamp.org", "date": "2023-12-27T18:09:59.893102", "resultUri": "http://localhost:3000/result/15116cc077ccca21c53754611bc8a38da4f0a4e2", "query": {"url": ["https://www.freecodecamp.org/news/how-to-optimize-react-applications-with-lazy-loading-232183e02768/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "How to optimize React applications with Lazy Loading ?", "description": "by Al-amin Nowshad How to optimize React applications with Lazy Loading ? For your components, images, and what not Lazy loading is an old technique to optimize web applications as well as on mobile apps. The thing is pretty straight forward - do not render things if they are not", "url": "https://www.freecodecamp.org/news/how-to-optimize-react-applications-with-lazy-loading-232183e02768/", "image": "https://cdn-media-1.freecodecamp.org/images/1*q_x1W90t0HLSSGGfngWqUA.png", "image:width": "671", "image:height": "690"}, "twitter": {"card": "summary_large_image", "title": "How to optimize React applications with Lazy Loading ?", "description": "by Al-amin Nowshad How to optimize React applications with Lazy Loading ? For your components, images, and what not Lazy loading is an old technique to optimize web applications as well as on mobile apps. The thing is pretty straight forward - do not render things if they are not", "url": "https://www.freecodecamp.org/news/how-to-optimize-react-applications-with-lazy-loading-232183e02768/", "image": "https://cdn-media-1.freecodecamp.org/images/1*q_x1W90t0HLSSGGfngWqUA.png", "label1": "Written by", "data1": "freeCodeCamp.org", "label2": "Filed under", "data2": "JavaScript, React, Programming, Web Development, Tech", "site": "@freecodecamp"}}}