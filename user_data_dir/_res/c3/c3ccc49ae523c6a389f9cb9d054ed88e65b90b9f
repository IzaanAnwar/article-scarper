{"title": "The Essential Git Handbook \u2013 Learn Git for Beginners", "byline": "Sanjula Madurapperuma", "dir": null, "lang": "en", "content": "<article><h1>The Essential Git Handbook \u2013 Learn Git for Beginners</h1><div class=\"page\" id=\"readability-page-1\"><section data-test-label=\"post-content\">\n<h3 id=\"introduction\">Introduction</h3><p>Hi! I am <a href=\"https://www.linkedin.com/in/sanjula-madurapperuma/\" rel=\"noopener\">Sanjula</a>, and in this guide I hope to teach you a little bit about Git including:</p><ul><li>What Git is</li><li>Why learn Git</li><li>Setting configuration variables</li><li>Introduction to the help command in Git</li><li>How to convert an existing project into a local Git repository</li><li>Things to do before the first commit</li><li>How to add files to the staging area</li><li>How to remove files from the staging area</li><li>Making your first commit</li><li>How to clone a remote repository</li><li>View information about the remote repository</li><li>How to push your changes to the remote repository</li><li>How to create a branch for a specific feature or issue</li><li>Push the branch to the remote repository after committing</li><li>How to merge a branch</li><li>How to delete a branch</li></ul><p>Let\u2019s get started!</p><h3 id=\"what-is-git\">What is Git?</h3><p>In straightforward terms, Git is an <strong>open-source distributed version control system</strong>.</p><p>Version control systems help any software team to manage changes to source code of a product or service over time. It keeps track of all the modifications to the source code in a database. If a critical mistake has been made to the source code, then the developers on a software team can rewind the source code to a version before the erroneous change was made. As a result, version control systems protects source code from disasters, human errors and unintended consequences (when a bug fix breaks another part of the application, for example).</p><h3 id=\"so-why-learn-git\">So why learn Git?</h3><p>Git is the most widely used version control system in the world today. It is a mature and actively maintained open source project originally developed by Linus Torvalds.</p><p>An astounding amount of software projects rely on Git for version control, including both commercial and open-source projects, especially using the git repository hosting service, GitHub, which is now owned by Microsoft. Hence, the importance of learning Git.</p><h3 id=\"prerequisite-for-this-guide\">Prerequisite for this guide</h3><p>Download and install git <a href=\"http://www.git-scm.com/downloads\" rel=\"noopener\"><strong>here</strong></a></p><h3 id=\"check-version-of-git\">Check version of git</h3><pre><code>git --version</code></pre><figure><img alt=\"G81z00SqImj30aOmL1mnhLIa6tW08Xyws1z6\" height=\"138\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/G81z00SqImj30aOmL1mnhLIa6tW08Xyws1z6\" width=\"734\"/><figcaption>Figure-2: Git version</figcaption></figure><p>If the version number is returned, then it means that git is successfully installed on your computer.</p><h3 id=\"setting-config-values\">Setting config values</h3><p>Now we need to set the global configuration variables, which are very important, especially if you are working with other developers. The main advantage of this being it is easier to find out who has committed a certain code block, for example.</p><pre><code>git config --global user.name \u201cSanjula Madurapperuma\u201d</code></pre><pre><code>git config --global user.email \u201csanjula@mail.com\u201d</code></pre><pre><code>git config --list</code></pre><h3 id=\"help-command\">Help Command</h3><p>As you may notice, <em>config</em> is a verb that has been used frequently so far in this handbook and verbs can also be used as either a prefix or suffix with the help command. We can use the same example (the verb <em>config</em>) from above to explain these commands.</p><pre><code>git help config</code></pre><pre><code>git config --help</code></pre><figure><img alt=\"TpOqdmWxNM11sihKZDfCBkvpqrPyO0QVMkhj\" height=\"475\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/TpOqdmWxNM11sihKZDfCBkvpqrPyO0QVMkhj\" width=\"734\"/><figcaption>Figure-3: Help Command</figcaption></figure><p>Both of the above commands perform the same action. Show the manual page for the verb specified. This will be useful to identify more advanced capabilities of git.</p><h3 id=\"how-to-initialize-a-repository-from-existing-code\">How to initialize a repository from existing code</h3><p>If you have a local repository that you want to convert into a git project to start tracking it, then we can start by running the command below within the project directory.</p><pre><code>git init</code></pre><figure><img alt=\"X5ju5iD8xMwFsvQ5xomZtkvkGbo2GCAWLYVQ\" height=\"133\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/X5ju5iD8xMwFsvQ5xomZtkvkGbo2GCAWLYVQ\" width=\"734\"/><figcaption>Figure-4: Git init</figcaption></figure><p>Done! Just like that you have converted your project into a local git repository. If you open up the project folder you will see that a new directory called .git has been created.</p><h3 id=\"what-to-do-before-the-first-commit\">What to do before the first commit</h3><p>Enter the following command to view untracked files:</p><pre><code>git status</code></pre><figure><img alt=\"A1cKNf7PUeDJ-SI2zyrkuH-g3NvF5YfHy-T7\" height=\"239\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/A1cKNf7PUeDJ-SI2zyrkuH-g3NvF5YfHy-T7\" width=\"734\"/><figcaption>Figure-5: Git status</figcaption></figure><p>If there are files that you don\u2019t want other people to see in the repository, such as files containing personal preferences or those of the IDE, then do the following:</p><pre><code>touch .gitignore</code></pre><figure><img alt=\"AkaWuuihvkq5cE5P1r8E0QHOF6cgDzrQlJsy\" height=\"20\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/AkaWuuihvkq5cE5P1r8E0QHOF6cgDzrQlJsy\" width=\"673\"/><figcaption>Figure-6: Create .gitignore file</figcaption></figure><p>To specify which files are not to be added to the git repository, open up a text editor and view the .gitignore file, which can be edited like a normal text file. Now we can enter the following into the file, for example:</p><pre><code>.project</code></pre><pre><code>*.java</code></pre><p>Wildcard characters can also be used. In this case, it has been used to specify not to add all files ending with the .java extension to the repository.</p><figure><img alt=\"Q3wRtlkpWsPt02lPztKmqDDVfWuKovzkZGL5\" height=\"481\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/Q3wRtlkpWsPt02lPztKmqDDVfWuKovzkZGL5\" width=\"636\"/><figcaption>Figure-7: Editing in text editor</figcaption></figure><p>Now run git status again</p><figure><img alt=\"V5AwN6ykf9r1dBZ87ViMbvschLJI2iTfBJ4t\" height=\"215\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/V5AwN6ykf9r1dBZ87ViMbvschLJI2iTfBJ4t\" width=\"719\"/><figcaption>Figure-8: After updating .gitignore</figcaption></figure><p>Now you can see that the files we excluded in the .gitignore file are no longer shown in the list of untracked files. The .gitignore file should be committed to the repository in order to maintain the same exclusions in all other places.</p><h3 id=\"adding-files-to-the-staging-area\">Adding files to the staging area</h3><p>All this time we were in the working directory. The staging area is where we organize all the files that are tracked and have to be committed before pushing to the git repository. It is a file that stores what has to be included in the next commit.</p><p>If you want to add all the files that are currently untracked and you\u2019ve changed to the staging area, then use the following command:</p><pre><code>git add -A</code></pre><p>If you want to add files individually, then we can give the file name after git add. For example,</p><pre><code>git add .gitignore</code></pre><p>Now if you type in git status, you will see that the .gitignore file is now in the staging area.</p><figure><img alt=\"HaV5Fai1lvx-xPkdMRsRdCM8Gp8D8Ns6M5fX\" height=\"203\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/HaV5Fai1lvx-xPkdMRsRdCM8Gp8D8Ns6M5fX\" width=\"615\"/><figcaption>Figure-9: Staging area</figcaption></figure><h3 id=\"removing-files-from-the-staging-area\">Removing files from the staging area</h3><p>To remove files individually from the staging area, type in the following (for example):</p><pre><code>git reset simple.py</code></pre><p>This will remove the file simple.py from the staging area. To see this change, type in git status again.</p><figure><img alt=\"hbseWQzJKSluv5zAwHbsj7gi6DBAWt6YBWwM\" height=\"273\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/hbseWQzJKSluv5zAwHbsj7gi6DBAWt6YBWwM\" width=\"700\"/><figcaption>Figure-10: Removing file from staging area</figcaption></figure><p>If you want to remove all the files from the staging area, then run the following:</p><pre><code>git reset</code></pre><p>Now if we type in git status, we will see that all the files have been changed to untracked files.</p><figure><img alt=\"aUpZJl-E8YA74eLlnf6en0ojS1ohWSil09wY\" height=\"236\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/aUpZJl-E8YA74eLlnf6en0ojS1ohWSil09wY\" width=\"702\"/><figcaption>Figure-11: Reset all files</figcaption></figure><h3 id=\"making-the-first-commit\">Making the first commit</h3><p>Now run the following to add all the files to the staging area to be committed.</p><pre><code>git add -A</code></pre><p>If you want, you can run git status to see all the files that will be committed.</p><p>To commit, type in the following.</p><pre><code>git commit -m \u201cInitial Commit\u201d</code></pre><p>\u201c-m\u201d specifies a message to be passed describing the commit. Since this is our first commit, we will say Initial Commit.</p><figure><img alt=\"lAHfY5GgwQEjkE8HBcuXiDGM9yDFdqxS0AvX\" height=\"124\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/lAHfY5GgwQEjkE8HBcuXiDGM9yDFdqxS0AvX\" width=\"725\"/><figcaption>Figure-12: Initial Commit</figcaption></figure><p>As you can see, the files have been committed successfully.</p><p>If you run git status now, you will see that it says the working directory is clean because we have committed the files and haven\u2019t modified any file since.</p><figure><img alt=\"UscWoVk2VszFJowNHo8kawe9dPqmanjl717h\" height=\"55\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/UscWoVk2VszFJowNHo8kawe9dPqmanjl717h\" width=\"599\"/><figcaption>Figure-13: Working Tree after commit</figcaption></figure><p>If we run the following command:</p><pre><code>git log</code></pre><p>then we can see the commit that we just made, including the hash number of the commit.</p><figure><img alt=\"cjCho8GR69IU5ACe0ghU7TsDOKFKuP4Flbjt\" height=\"111\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/cjCho8GR69IU5ACe0ghU7TsDOKFKuP4Flbjt\" width=\"591\"/><figcaption>Figure-14: Commit hash number</figcaption></figure><p>We are now successfully tracking the local project with git!</p><h3 id=\"cloning-a-remote-repository\">Cloning a remote repository</h3><p>If we want to track an existing remote project with git, then we have to type in a command in the following format:</p><pre><code>git clone &lt;url&gt; &lt;where to clone&gt;</code></pre><p>For an example, I will be using the git repository at <a href=\"https://github.com/sanjulamadurapperuma/GitDemoMedium.git\" rel=\"noopener\">this link</a>.</p><p>I will first move into the directory that I want to clone the project in, though you can specify this as shown above as well.</p><p>Go to the repository link given above and click on the \u201cClone or Download\u201d button, then copy the link given there.</p><p>Then enter:</p><pre><code>git clone https://github.com/sanjulamadurapperuma/GitDemoMedium.git</code></pre><figure><img alt=\"lHzsIA1k-D5qeBSOciWt443gD3YClS8q8e9y\" height=\"179\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/lHzsIA1k-D5qeBSOciWt443gD3YClS8q8e9y\" width=\"726\"/><figcaption>Figure-15: Cloning remote repository</figcaption></figure><p>Now we have cloned the repository successfully.</p><p>If we enter the following command, we will see all the files that are in the local directory now.</p><pre><code>ls -la</code></pre><figure><img alt=\"2OMMDj4xttnnVsgamdc36jy5B2oopjLcSLsB\" height=\"147\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/2OMMDj4xttnnVsgamdc36jy5B2oopjLcSLsB\" width=\"714\"/><figcaption>Figure-16: List all files in directory</figcaption></figure><h3 id=\"viewing-information-about-the-remote-repository\">Viewing information about the remote repository</h3><p>If you type in the following command:</p><pre><code>git remote -v</code></pre><figure><img alt=\"qkYzprJKHXHwd4KHfzDQwF3Sjj2Nh1niZIZU\" height=\"73\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/qkYzprJKHXHwd4KHfzDQwF3Sjj2Nh1niZIZU\" width=\"724\"/><figcaption>Figure-17: Git remote -v</figcaption></figure><p>This command will list the locations where the local repository would fetch external commits from and push your commits to the remote repository.</p><p>If you were to type the command</p><pre><code>git branch -a</code></pre><figure><img alt=\"ig6sDj8Y1Gzqm2UMsvRvbwZlxnVrtKy6MBBl\" height=\"92\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/ig6sDj8Y1Gzqm2UMsvRvbwZlxnVrtKy6MBBl\" width=\"722\"/><figcaption>Figure-18: List all git branches</figcaption></figure><p>This will list all the branches which are in the repository, both locally and remotely.</p><p>In order to demonstrate updating the remote repository, we will make some changes to the files in the repository we cloned.</p><figure><img alt=\"n7tWT09vfQnKeaxoN0XyCY1r9Ql4pbwUozXw\" height=\"453\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/n7tWT09vfQnKeaxoN0XyCY1r9Ql4pbwUozXw\" width=\"564\"/><figcaption>Figure-19: Make changes to simple.py</figcaption></figure><p>Now that we\u2019ve made a change to our code, the next action we have to make is to push these changes to the remote repository</p><h3 id=\"pushing-changes-to-the-remote-repository\">Pushing changes to the remote repository</h3><p>The following command will show all the changes that have been made to the files.</p><pre><code>git diff</code></pre><figure><img alt=\"UiWSb3gZiGs5A7fBksCDIDHkt99puF551amJ\" height=\"165\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/UiWSb3gZiGs5A7fBksCDIDHkt99puF551amJ\" width=\"721\"/><figcaption>Figure-20: View changes to file</figcaption></figure><p>If we enter git status again, we can see that changes have been tracked and that simple.py has been modified.</p><figure><img alt=\"n9A8DdvhDyKjllzgS2ExFYrM4FsofyoUA0gR\" height=\"216\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/n9A8DdvhDyKjllzgS2ExFYrM4FsofyoUA0gR\" width=\"723\"/><figcaption>Figure-21: View modified files</figcaption></figure><p>Now add them to the staging area</p><pre><code>git add -A</code></pre><p>Run git status again</p><figure><img alt=\"7jaUjBjc3Y2870zUbEllhi8rWvQ1Hshgcyqx\" height=\"216\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/7jaUjBjc3Y2870zUbEllhi8rWvQ1Hshgcyqx\" width=\"725\"/><figcaption>Figure-22: Add files to staging area</figcaption></figure><p>Now we can see that simple.py is ready to be committed.</p><p>Then enter the commit command with a message</p><pre><code>git commit -m \u201cUpdated hello function\u201d</code></pre><figure><img alt=\"XU3eet4u0GXZ7QHQNz98n2nN5fEVlswPV1s2\" height=\"75\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/XU3eet4u0GXZ7QHQNz98n2nN5fEVlswPV1s2\" width=\"733\"/><figcaption>Figure-23: Commit message</figcaption></figure><p>Now we have to push the committed changes to the remote repository so other people have access to them.</p><p>Since the common case is that there are several developers working on a single project, we have to first pull any changes that have been done in the remote repository before pushing our changes to it to avoid conflicts.</p><p>Run the following command:</p><pre><code>git pull origin master</code></pre><figure><img alt=\"5TkIfVHFN2pS9akhGmgjHVxHRoR6SrgwJEYc\" height=\"89\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/5TkIfVHFN2pS9akhGmgjHVxHRoR6SrgwJEYc\" width=\"733\"/><figcaption>Figure-24: Pull changes from remote repository</figcaption></figure><p>Since we are already up-to-date, we can now push our changes to the remote repository.</p><p>Now run the following:</p><pre><code>git push origin master</code></pre><figure><img alt=\"t7wVKea6PcQGihQzTeoz3WdS66L8IGjPdpqE\" height=\"197\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/t7wVKea6PcQGihQzTeoz3WdS66L8IGjPdpqE\" width=\"733\"/><figcaption>Figure-25: Push changes to remote repository</figcaption></figure><p>We have successfully pushed our changes to the master branch of the remote repository!</p><h3 id=\"creating-a-branch-for-a-feature-or-issue\">Creating a branch for a feature or issue</h3><p>So far we have been working on our master branch, but this is not how you should be working in git as a developer because the master branch should be a stable release of the project that you are working on. So for every feature or issue, it is usually the norm to create your own branch and then work off that branch.</p><p>The command to create a new branch called simple-greeting is as follows:</p><pre><code>git branch simple-greeting</code></pre><p>Now if you run</p><pre><code>git branch</code></pre><p>then you will see all the branches in the repository, and the current branch that you are in is highlighted with an asterisk on the left side.</p><figure><img alt=\"XlYSPXjn7qFPNQiLTIywhgNdYKjxD9MFzip4\" height=\"92\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/XlYSPXjn7qFPNQiLTIywhgNdYKjxD9MFzip4\" width=\"738\"/><figcaption>Figure-26: git branch</figcaption></figure><p>If you want to switch to the branch that you just created, then type the following:</p><pre><code>git checkout simple-greeting</code></pre><p>Now if you type git branch you will see that you are now on the simple-greeting branch.</p><p>Now we have to make the changes in the project. We\u2019ll switch to the project and define the greeting function.</p><figure><img alt=\"VLWULRA1hRT85jSYBs1d4JH90JBUQP2kDrrc\" height=\"453\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/VLWULRA1hRT85jSYBs1d4JH90JBUQP2kDrrc\" width=\"564\"/><figcaption>Figure-27: Define the greeting function</figcaption></figure><p>Now we will repeat the process of committing these changes:</p><pre><code>git status</code></pre><figure><img alt=\"lFNjI8aQZ7CZFUUnNMieYovVJ218kg9MO3Lf\" height=\"161\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/lFNjI8aQZ7CZFUUnNMieYovVJ218kg9MO3Lf\" width=\"734\"/><figcaption>Figure-28: See changes that are not staged</figcaption></figure><pre><code>git add -A</code></pre><pre><code>git commit -m \u201cGreeting Function\u201d</code></pre><figure><img alt=\"vsigz7NjuUVcgaaPetiERCN1La5W8F5BoOFd\" height=\"92\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/vsigz7NjuUVcgaaPetiERCN1La5W8F5BoOFd\" width=\"733\"/><figcaption>Figure-29: Commit message for Greeting function</figcaption></figure><p>This commit will only change the files in the local branch simple-greeting and it has had no effect on the local master branch or remote repository yet.</p><h3 id=\"pushing-branch-to-remote-repository-after-committing\">Pushing branch to remote repository after committing</h3><p>Enter the following command:</p><pre><code>git push -u origin simple-greeting</code></pre><p>where origin is the name of the repository and simple-greeting is the branch that we want to push to.</p><figure><img alt=\"M3mB0GiO80v-Jk56yKQKuIgnUVaXQvDfGnM-\" height=\"325\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/M3mB0GiO80v-Jk56yKQKuIgnUVaXQvDfGnM-\" width=\"735\"/><figcaption>Figure-30: Push branch to remote repository</figcaption></figure><p>Now we have pushed the simple-greeting branch to the remote repository. If you type:</p><pre><code>git branch -a</code></pre><figure><img alt=\"GrUXJqmZJmFgb3jHf8B3PlxT7yxVwOCncuIB\" height=\"122\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/GrUXJqmZJmFgb3jHf8B3PlxT7yxVwOCncuIB\" width=\"734\"/><figcaption>Figure-31: simple-greeting Branch in remote repository</figcaption></figure><p>We can see that, in our remote repository we now have the simple-greeting branch. Why do we need to push the branch to the remote repository? Because in some companies that\u2019s where they run their unit testing and various others to make sure the code runs well before it\u2019s merged with the master branch.</p><p>Given that all the testing has come out well (we won\u2019t go into detail here), we can now merge the branch simple-greeting with master branch.</p><h3 id=\"merging-a-branch\">Merging a branch</h3><p>First, we have to checkout into the local master branch</p><pre><code>git checkout master</code></pre><figure><img alt=\"OvI0f0CpYa3xrFvKv-HQ5LB20HxbgOEHxT9I\" height=\"75\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/OvI0f0CpYa3xrFvKv-HQ5LB20HxbgOEHxT9I\" width=\"733\"/><figcaption>Figure-32: Checkout to master branch</figcaption></figure><p>Pull all the changes in the remote master branch:</p><pre><code>git pull origin master</code></pre><figure><img alt=\"S1bz0eJjDY1avLSy4Gl7Et33gwDw2uGVeih3\" height=\"89\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/S1bz0eJjDY1avLSy4Gl7Et33gwDw2uGVeih3\" width=\"735\"/><figcaption>Figure-33: Pull changes from remote repository</figcaption></figure><p>We\u2019ll now see the branches we have merged in so far:</p><pre><code>git branch \u2014-merged</code></pre><figure><img alt=\"v9PBL7dVbIsb3aIz61PRypR6qorrAcw6nahW\" height=\"56\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/v9PBL7dVbIsb3aIz61PRypR6qorrAcw6nahW\" width=\"734\"/><figcaption>Figure-34: Display merged branches</figcaption></figure><p>simple-greeting branch will not appear here because we haven\u2019t merged it yet.</p><p>To merge simple-greeting with master, enter:</p><pre><code>git merge simple-greeting</code></pre><p>(Keep note that we are in the master branch right now)</p><figure><img alt=\"4G84bB5YgbwdfH8XkDHUxUZwGfi8mMw0ZHKa\" height=\"109\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/4G84bB5YgbwdfH8XkDHUxUZwGfi8mMw0ZHKa\" width=\"726\"/><figcaption>Figure-35: Merge simple-greeting branch</figcaption></figure><p>Now that it\u2019s been merged, we can push the changes to the remote repository master branch.</p><pre><code>git push origin master</code></pre><figure><img alt=\"bQjuJUw584OprdvxUzmNs1yxOh8Ijd3WLQwK\" height=\"125\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/bQjuJUw584OprdvxUzmNs1yxOh8Ijd3WLQwK\" width=\"734\"/><figcaption>Figure-36: Push to remote master branch</figcaption></figure><p>Now the changes have been pushed to the master branch in the remote repository.</p><h3 id=\"deleting-a-branch\">Deleting a branch</h3><p>Since the feature has now been deployed, we can delete the simple-greeting branch. To double check the merge done in the previous section, we can run:</p><pre><code>git branch --merged</code></pre><figure><img alt=\"C-XMNUIumKsfPaPVDD5BFyvDBzo8rrJCTTEl\" height=\"75\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/C-XMNUIumKsfPaPVDD5BFyvDBzo8rrJCTTEl\" width=\"735\"/><figcaption>Figure-37: Display merged branches</figcaption></figure><p>If simple-greeting shows up here, then that means that we have merged all the changes and that the branch can now be discarded.</p><pre><code>git branch -d simple-greeting</code></pre><figure><img alt=\"hd10e8Mc246riKYeTEvv0hL1xz7k7b7njSHf\" height=\"53\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/hd10e8Mc246riKYeTEvv0hL1xz7k7b7njSHf\" width=\"733\"/><figcaption>Figure-38: Delete local branch simple-greeting</figcaption></figure><p>Now the branch has been deleted locally.</p><p>But since we pushed the branch to the remote repository it is still there in the remote repository. This can be seen by running:</p><pre><code>git branch -a</code></pre><figure><img alt=\"gHdlHkbjv1QhmID0PkoWM35qMagnJ9B-qIkx\" height=\"109\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/gHdlHkbjv1QhmID0PkoWM35qMagnJ9B-qIkx\" width=\"735\"/><figcaption>Figure-39: Display all branches</figcaption></figure><p>To remove the branch from the remote repository, enter:</p><pre><code>git push origin --delete simple-greeting</code></pre><figure><img alt=\"5-equM6f4mL9prXhxNiet0JC4lqhn4uzn84v\" height=\"108\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/5-equM6f4mL9prXhxNiet0JC4lqhn4uzn84v\" width=\"735\"/><figcaption>Figure-40: Delete remote branch simple-greeting</figcaption></figure><p>If we re-run</p><pre><code>git branch -a</code></pre><figure><img alt=\"33hTj4HTBLKO5Eg345weOEBa4yNE2uXglp5Z\" height=\"89\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/33hTj4HTBLKO5Eg345weOEBa4yNE2uXglp5Z\" width=\"733\"/><figcaption>Figure-41: Display all branches</figcaption></figure><p>we can see that the branch has now been deleted from the remote repository as well.</p><p>Congratulations!!! You are now a master in basic but critical Git commands!</p><p>For reference or use of this tutorial, here is the public GitHub Repository <a href=\"https://github.com/sanjulamadurapperuma/GitDemoMedium\" rel=\"noopener\">Link</a></p><p><strong>In the meantime, give as many claps as you like to this article if you liked it, comment down below for any concerns. Also please checkout my profile at <a href=\"https://www.linkedin.com/in/sanjula-madurapperuma/\" rel=\"noopener\">LinkedIn</a> and follow me on Twitter!</strong></p>\n</section><p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p></div></article>", "textContent": "\n                            \nIntroductionHi! I am Sanjula, and in this guide I hope to teach you a little bit about Git including:What Git isWhy learn GitSetting configuration variablesIntroduction to the help command in GitHow to convert an existing project into a local Git repositoryThings to do before the first commitHow to add files to the staging areaHow to remove files from the staging areaMaking your first commitHow to clone a remote repositoryView information about the remote repositoryHow to push your changes to the remote repositoryHow to create a branch for a specific feature or issuePush the branch to the remote repository after committingHow to merge a branchHow to delete a branchLet\u2019s get started!What is Git?In straightforward terms, Git is an open-source distributed version control system.Version control systems help any software team to manage changes to source code of a product or service over time. It keeps track of all the modifications to the source code in a database. If a critical mistake has been made to the source code, then the developers on a software team can rewind the source code to a version before the erroneous change was made. As a result, version control systems protects source code from disasters, human errors and unintended consequences (when a bug fix breaks another part of the application, for example).So why learn Git?Git is the most widely used version control system in the world today. It is a mature and actively maintained open source project originally developed by Linus Torvalds.An astounding amount of software projects rely on Git for version control, including both commercial and open-source projects, especially using the git repository hosting service, GitHub, which is now owned by Microsoft. Hence, the importance of learning Git.Prerequisite for this guideDownload and install git hereCheck version of gitgit --versionFigure-2: Git versionIf the version number is returned, then it means that git is successfully installed on your computer.Setting config valuesNow we need to set the global configuration variables, which are very important, especially if you are working with other developers. The main advantage of this being it is easier to find out who has committed a certain code block, for example.git config --global user.name \u201cSanjula Madurapperuma\u201dgit config --global user.email \u201csanjula@mail.com\u201dgit config --listHelp CommandAs you may notice, config is a verb that has been used frequently so far in this handbook and verbs can also be used as either a prefix or suffix with the help command. We can use the same example (the verb config) from above to explain these commands.git help configgit config --helpFigure-3: Help CommandBoth of the above commands perform the same action. Show the manual page for the verb specified. This will be useful to identify more advanced capabilities of git.How to initialize a repository from existing codeIf you have a local repository that you want to convert into a git project to start tracking it, then we can start by running the command below within the project directory.git initFigure-4: Git initDone! Just like that you have converted your project into a local git repository. If you open up the project folder you will see that a new directory called .git has been created.What to do before the first commitEnter the following command to view untracked files:git statusFigure-5: Git statusIf there are files that you don\u2019t want other people to see in the repository, such as files containing personal preferences or those of the IDE, then do the following:touch .gitignoreFigure-6: Create .gitignore fileTo specify which files are not to be added to the git repository, open up a text editor and view the .gitignore file, which can be edited like a normal text file. Now we can enter the following into the file, for example:.project*.javaWildcard characters can also be used. In this case, it has been used to specify not to add all files ending with the .java extension to the repository.Figure-7: Editing in text editorNow run git status againFigure-8: After updating .gitignoreNow you can see that the files we excluded in the .gitignore file are no longer shown in the list of untracked files. The .gitignore file should be committed to the repository in order to maintain the same exclusions in all other places.Adding files to the staging areaAll this time we were in the working directory. The staging area is where we organize all the files that are tracked and have to be committed before pushing to the git repository. It is a file that stores what has to be included in the next commit.If you want to add all the files that are currently untracked and you\u2019ve changed to the staging area, then use the following command:git add -AIf you want to add files individually, then we can give the file name after git add. For example,git add .gitignoreNow if you type in git status, you will see that the .gitignore file is now in the staging area.Figure-9: Staging areaRemoving files from the staging areaTo remove files individually from the staging area, type in the following (for example):git reset simple.pyThis will remove the file simple.py from the staging area. To see this change, type in git status again.Figure-10: Removing file from staging areaIf you want to remove all the files from the staging area, then run the following:git resetNow if we type in git status, we will see that all the files have been changed to untracked files.Figure-11: Reset all filesMaking the first commitNow run the following to add all the files to the staging area to be committed.git add -AIf you want, you can run git status to see all the files that will be committed.To commit, type in the following.git commit -m \u201cInitial Commit\u201d\u201c-m\u201d specifies a message to be passed describing the commit. Since this is our first commit, we will say Initial Commit.Figure-12: Initial CommitAs you can see, the files have been committed successfully.If you run git status now, you will see that it says the working directory is clean because we have committed the files and haven\u2019t modified any file since.Figure-13: Working Tree after commitIf we run the following command:git logthen we can see the commit that we just made, including the hash number of the commit.Figure-14: Commit hash numberWe are now successfully tracking the local project with git!Cloning a remote repositoryIf we want to track an existing remote project with git, then we have to type in a command in the following format:git clone <url> <where to clone>For an example, I will be using the git repository at this link.I will first move into the directory that I want to clone the project in, though you can specify this as shown above as well.Go to the repository link given above and click on the \u201cClone or Download\u201d button, then copy the link given there.Then enter:git clone https://github.com/sanjulamadurapperuma/GitDemoMedium.gitFigure-15: Cloning remote repositoryNow we have cloned the repository successfully.If we enter the following command, we will see all the files that are in the local directory now.ls -laFigure-16: List all files in directoryViewing information about the remote repositoryIf you type in the following command:git remote -vFigure-17: Git remote -vThis command will list the locations where the local repository would fetch external commits from and push your commits to the remote repository.If you were to type the commandgit branch -aFigure-18: List all git branchesThis will list all the branches which are in the repository, both locally and remotely.In order to demonstrate updating the remote repository, we will make some changes to the files in the repository we cloned.Figure-19: Make changes to simple.pyNow that we\u2019ve made a change to our code, the next action we have to make is to push these changes to the remote repositoryPushing changes to the remote repositoryThe following command will show all the changes that have been made to the files.git diffFigure-20: View changes to fileIf we enter git status again, we can see that changes have been tracked and that simple.py has been modified.Figure-21: View modified filesNow add them to the staging areagit add -ARun git status againFigure-22: Add files to staging areaNow we can see that simple.py is ready to be committed.Then enter the commit command with a messagegit commit -m \u201cUpdated hello function\u201dFigure-23: Commit messageNow we have to push the committed changes to the remote repository so other people have access to them.Since the common case is that there are several developers working on a single project, we have to first pull any changes that have been done in the remote repository before pushing our changes to it to avoid conflicts.Run the following command:git pull origin masterFigure-24: Pull changes from remote repositorySince we are already up-to-date, we can now push our changes to the remote repository.Now run the following:git push origin masterFigure-25: Push changes to remote repositoryWe have successfully pushed our changes to the master branch of the remote repository!Creating a branch for a feature or issueSo far we have been working on our master branch, but this is not how you should be working in git as a developer because the master branch should be a stable release of the project that you are working on. So for every feature or issue, it is usually the norm to create your own branch and then work off that branch.The command to create a new branch called simple-greeting is as follows:git branch simple-greetingNow if you rungit branchthen you will see all the branches in the repository, and the current branch that you are in is highlighted with an asterisk on the left side.Figure-26: git branchIf you want to switch to the branch that you just created, then type the following:git checkout simple-greetingNow if you type git branch you will see that you are now on the simple-greeting branch.Now we have to make the changes in the project. We\u2019ll switch to the project and define the greeting function.Figure-27: Define the greeting functionNow we will repeat the process of committing these changes:git statusFigure-28: See changes that are not stagedgit add -Agit commit -m \u201cGreeting Function\u201dFigure-29: Commit message for Greeting functionThis commit will only change the files in the local branch simple-greeting and it has had no effect on the local master branch or remote repository yet.Pushing branch to remote repository after committingEnter the following command:git push -u origin simple-greetingwhere origin is the name of the repository and simple-greeting is the branch that we want to push to.Figure-30: Push branch to remote repositoryNow we have pushed the simple-greeting branch to the remote repository. If you type:git branch -aFigure-31: simple-greeting Branch in remote repositoryWe can see that, in our remote repository we now have the simple-greeting branch. Why do we need to push the branch to the remote repository? Because in some companies that\u2019s where they run their unit testing and various others to make sure the code runs well before it\u2019s merged with the master branch.Given that all the testing has come out well (we won\u2019t go into detail here), we can now merge the branch simple-greeting with master branch.Merging a branchFirst, we have to checkout into the local master branchgit checkout masterFigure-32: Checkout to master branchPull all the changes in the remote master branch:git pull origin masterFigure-33: Pull changes from remote repositoryWe\u2019ll now see the branches we have merged in so far:git branch \u2014-mergedFigure-34: Display merged branchessimple-greeting branch will not appear here because we haven\u2019t merged it yet.To merge simple-greeting with master, enter:git merge simple-greeting(Keep note that we are in the master branch right now)Figure-35: Merge simple-greeting branchNow that it\u2019s been merged, we can push the changes to the remote repository master branch.git push origin masterFigure-36: Push to remote master branchNow the changes have been pushed to the master branch in the remote repository.Deleting a branchSince the feature has now been deployed, we can delete the simple-greeting branch. To double check the merge done in the previous section, we can run:git branch --mergedFigure-37: Display merged branchesIf simple-greeting shows up here, then that means that we have merged all the changes and that the branch can now be discarded.git branch -d simple-greetingFigure-38: Delete local branch simple-greetingNow the branch has been deleted locally.But since we pushed the branch to the remote repository it is still there in the remote repository. This can be seen by running:git branch -aFigure-39: Display all branchesTo remove the branch from the remote repository, enter:git push origin --delete simple-greetingFigure-40: Delete remote branch simple-greetingIf we re-rungit branch -aFigure-41: Display all brancheswe can see that the branch has now been deleted from the remote repository as well.Congratulations!!! You are now a master in basic but critical Git commands!For reference or use of this tutorial, here is the public GitHub Repository LinkIn the meantime, give as many claps as you like to this article if you liked it, comment down below for any concerns. Also please checkout my profile at LinkedIn and follow me on Twitter!\n\n                        \n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    ", "length": 13543, "excerpt": "Introduction\nHi! I am Sanjula [https://www.linkedin.com/in/sanjula-madurapperuma/], and in\nthis guide I hope to teach you a little bit about Git including:\n\n * What Git is\n * Why learn Git\n * Setting configuration variables\n * Introduction to the help command in Git\n * How to convert an existing project into a local Git repository\n * Things to do before the first commit\n * How to add files to the staging area\n * How to remove files from the staging area\n * Making your first commit\n * How to clon", "siteName": "freeCodeCamp.org", "publishedTime": "2019-04-30T17:16:29.000Z", "id": "c3ccc49ae523c6a389f9cb9d054ed88e65b90b9f", "url": "https://www.freecodecamp.org/news/the-essential-git-handbook-a1cf77ed11b5/", "domain": "freecodecamp.org", "date": "2023-12-27T18:10:59.681986", "resultUri": "http://localhost:3000/result/c3ccc49ae523c6a389f9cb9d054ed88e65b90b9f", "query": {"url": ["https://www.freecodecamp.org/news/the-essential-git-handbook-a1cf77ed11b5/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "The Essential Git Handbook \u2013 Learn Git for Beginners", "description": "Introduction Hi! I am Sanjula [https://www.linkedin.com/in/sanjula-madurapperuma/], and in this guide I hope to teach you a little bit about Git including:  * What Git is  * Why learn Git  * Setting configuration variables  * Introduction to the help command in Git  * How to convert", "url": "https://www.freecodecamp.org/news/the-essential-git-handbook-a1cf77ed11b5/", "image": "https://cdn-media-1.freecodecamp.org/images/1*AhGSZ1spetb37qk_bZd9XA.png", "image:width": "800", "image:height": "534"}, "twitter": {"card": "summary_large_image", "title": "The Essential Git Handbook \u2013 Learn Git for Beginners", "description": "Introduction Hi! I am Sanjula [https://www.linkedin.com/in/sanjula-madurapperuma/], and in this guide I hope to teach you a little bit about Git including:  * What Git is  * Why learn Git  * Setting configuration variables  * Introduction to the help command in Git  * How to convert", "url": "https://www.freecodecamp.org/news/the-essential-git-handbook-a1cf77ed11b5/", "image": "https://cdn-media-1.freecodecamp.org/images/1*AhGSZ1spetb37qk_bZd9XA.png", "label1": "Written by", "data1": "Sanjula Madurapperuma", "label2": "Filed under", "data2": "Git, Technology, Coding, Tech, Programming", "site": "@freecodecamp", "creator": "@s_arachchige"}}}