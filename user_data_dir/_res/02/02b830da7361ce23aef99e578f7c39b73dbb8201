{"title": "How to build a state-based router using React and MobX State Tree", "byline": "freeCodeCamp.org", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>How to build a state-based router using React and MobX State Tree</h1>\n<section>\n<section data-test-label=\"post-content\">\n<p>by Miles Till</p><p><em>If you want to skip ahead to the finished example you can check it out at <a href=\"https://github.com/miles-till/mobx-state-tree-router-demo\" rel=\"noopener\">mobx-state-tree-router-demo</a>.</em></p><p>I wrote a library that makes it easy to configure state-based routing in MobX State Tree powered React apps, and I want to share it with you. To do this I will demonstrate how to build a very simple Todo app.</p><p><a href=\"https://www.freecodecamp.org/news/how-to-build-a-state-based-router-using-react-and-mobx-state-tree-e91b2b8e8d79/undefined\" rel=\"noopener\">Michel Weststrate</a>, the creator of MobX, wrote a great article titled <a href=\"https://hackernoon.com/how-to-decouple-state-and-ui-a-k-a-you-dont-need-componentwillmount-cc90b787aa37\" rel=\"noopener\">How to decouple state and UI (a.k.a. you don\u2019t need componentWillMount)</a>. I recommend reading it to understand the philosophy that inspired me to write mobx-state-tree-router. The key idea is that the application UI should be a function of the state.</p><blockquote>\u201cThis approach has better decoupling of state and UI. This has a few advantages:</blockquote><blockquote>1. The complete application flow can be tested without ever needing to instantiate a component.</blockquote><blockquote>2. More components can be dumb; they don\u2019t have to fetch data or process routing.</blockquote><blockquote>3. Our stores become more like a state machine, making it easy to follow the transitions of our application.\u201d</blockquote><blockquote>- Michel Weststrate</blockquote><h3 id=\"prerequisites\">Prerequisites</h3><p>These will need to be installed to follow this tutorial:</p><ul><li><a href=\"https://nodejs.org/en/\" rel=\"noopener\">Node.js</a> \u2014 used for running the dev server</li><li><a href=\"https://yarnpkg.com/en/\" rel=\"noopener\">Yarn</a> \u2014 used for package management</li></ul><p><em>Note: NPM can be used instead of Yarn but some commands may be different.</em></p><h3 id=\"create-a-basic-react-app\">Create a basic React app</h3><h4 id=\"use-create-react-app-to-get-started-quickly\">Use create-react-app to get started quickly</h4><p>If you haven\u2019t used it before, the easiest way to get started with a React app is to use a scaffolding tool by the developers of React called <a href=\"https://github.com/facebook/create-react-app\" rel=\"noopener\">Create React App</a>. This tool configures <a href=\"https://webpack.js.org/\" rel=\"noopener\">Webpack</a> and <a href=\"https://babeljs.io/\" rel=\"noopener\">Babel</a> for you with the most common requirements met.</p><p>In your terminal run the following commands:</p><pre><code>npx create-react-app state-router-democd state-router-demoyarn start</code></pre><p>You will now have a fully functioning basic React app to play with.</p><h4 id=\"remove-create-react-app-stuff-not-needed-for-this-example\">Remove create-react-app stuff not needed for this example</h4><p>For the purposes of this tutorial we don\u2019t need a lot of the stuff that create-react-app generates so go ahead and delete:</p><pre><code>src/App.csssrc/App.test.jssrc/index.csssrc/logo.svgsrc/serviceWorker.js</code></pre><p><em>Note: Feel free to keep the css files and add your own styling.</em></p><p>To keep things organised, create a <code>components</code> directory in our <code>src</code> and move <code>src/App.js</code> to <code>src/components/App.js</code>.</p><p>Now update the following files to remove references to the files we deleted:</p><p>If you still have the app running you will notice your browser has updated to show you the following:</p><figure><img alt=\"HmmOo0FbypGJUW0fxqIAjxU-Vpv3ApchARCJ\" height=\"400\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/HmmOo0FbypGJUW0fxqIAjxU-Vpv3ApchARCJ\" width=\"600\"/></figure><h4 id=\"create-a-home-page-component\">Create a Home page component</h4><p>In the <code>components</code> directory, create a file for our Home page component:</p><p>Update the App component to render our new Home page component:</p><figure><img alt=\"NCx1sB4ZwpZrNUG4giyv6GWhjB1VQSf5cMMZ\" height=\"400\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/NCx1sB4ZwpZrNUG4giyv6GWhjB1VQSf5cMMZ\" width=\"600\"/></figure><h3 id=\"add-mobx-state-tree-models\">Add MobX State Tree models</h3><h4 id=\"install-mobx-and-mobx-state-tree\">Install MobX and MobX State Tree</h4><p><a href=\"https://github.com/mobxjs/mobx\" rel=\"noopener\">MobX</a> is a library for state management, and it works great with React as our renderer. <a href=\"https://github.com/mobxjs/mobx-state-tree\" rel=\"noopener\">MobX State Tree</a> is a tree shaped state container built on top of MobX.</p><p>In your terminal run:</p><pre><code>yarn add mobx mobx-react mobx-state-tree</code></pre><p>Like our we did for our components, create a <code>models</code> directory to keep our MobX State Tree models organised.</p><h4 id=\"create-a-rootstore-model\">Create a RootStore model</h4><p>In our state tree we\u2019ll have a <code>RootStore</code> which holds our data stores (in this case a <code>TodoStore</code>) and our <code>RouterStore</code>, but we\u2019ll get to that later.</p><h4 id=\"create-todostore-and-todo-models\">Create TodoStore and Todo models</h4><p>Our <code>TodoStore</code> contains <code>Todo</code> objects which are able to be created, removed, and updated. We also need to be able to find a <code>Todo</code> object by its <code>id</code>.</p><h4 id=\"initialize-the-rootstore\">Initialize the RootStore</h4><p>When our app loads, we want to initialize the <code>RootStore</code> with a known state. For this trivial example we won\u2019t be concerned about persisting our data to storage in any way. We then want to make sure the <code>RootStore</code> is available to be injected into our components, so we use the MobX React component <code>Provider</code> to do this.</p><h4 id=\"create-a-todolist-page-component\">Create a TodoList page component</h4><p>Now that we have a <code>RootStore</code> for our state tree, we need some components to view and change the data.</p><p>Update the <code>App</code> component to display our new <code>TodoList</code> component.</p><p>At this point the app should have a list of <code>Todo</code> objects which you can add to and remove from.</p><figure><img alt=\"R2JwZQj-xFt2LdACX-zYQHZtZVNtujhZn5Oj\" height=\"400\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/R2JwZQj-xFt2LdACX-zYQHZtZVNtujhZn5Oj\" width=\"600\"/></figure><h4 id=\"create-a-todo-page-component\">Create a Todo page component</h4><p>Now we want to create a new component to display and edit a <code>Todo</code> object. Note that we are using <code>inject</code> to make the <code>RootStore</code> available in the component\u2019s props.</p><p>Update the <code>App</code> component to display our new <code>Todo</code> component.</p><p>Now our updated app allows us to edit the data of the <code>Todo</code> whose id we pass to the Todo page component in <code>&lt;Todo todoId={0}</code> /&gt;.</p><figure><img alt=\"NMq1Crdl8b1XeXy-3L95whd2bp7j1VV7LnoN\" height=\"292\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/NMq1Crdl8b1XeXy-3L95whd2bp7j1VV7LnoN\" width=\"800\"/></figure><h3 id=\"add-state-based-routing\">Add state-based routing</h3><p>At this point we should have a React app with our data stored in a MobX State Tree container. The data container is then being injected into the components that need access to the data. Now we want to connect together our page components in our app. A common approach would be to use a component based router such as <a href=\"https://github.com/ReactTraining/react-router\" rel=\"noopener\">React Router</a>. Often the components become cluttered with route definitions and mount event handlers. This doesn\u2019t suit our state-first philosophy.</p><p>I will now show you how to add mobx-state-tree-router to your app.</p><h4 id=\"install-mobx-state-tree-router\">Install mobx-state-tree-router</h4><p>In your terminal run:</p><pre><code>yarn add mobx-state-tree-router</code></pre><h4 id=\"add-the-router-to-the-rootstore\">Add the router to the RootStore</h4><h4 id=\"create-views\">Create views</h4><p>The router needs to be configured with a map of view models which define the route paths to match against and the page components to display. Hooks into the page change cycle can be defined on a view to perform data fetching, route change cancelling, redirection, and other tasks. These hooks can be synchronous or asynchronous.</p><p>These hooks are:</p><ul><li><code>beforeExit(self, params)</code></li><li><code>beforeEnter(self, params)</code></li><li><code>onExit(self, params)</code></li><li><code>onEnter(self, params)</code></li></ul><p>If either of the before hooks return <code>false</code> the route change will be cancelled.</p><p>Create a <code>views</code> file:</p><h4 id=\"initialize-the-router-when-our-app-starts\">Initialize the router when our app starts</h4><p>The router can be started by calling <code>startRouter(router)</code>. This function connects the router to the browser\u2019s history and configures the routing based on router\u2019s views.</p><h4 id=\"render-the-staterouter\">Render the StateRouter</h4><p>Update the <code>App</code> component to include the <code>StateRouter</code> component, which renders the appropriate component for the router\u2019s current view.</p><p>Now our app will respond to changes in the url path, for example <code>/todos</code> will show our <code>TodoList</code> component and <code>/todos/0</code> will show our <code>Todo</code> component as configured in <code>views.js</code>.</p><figure><img alt=\"OAPfHYOwTqQ494DZyUiiC3th5XHaP8ffaC9w\" height=\"400\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/OAPfHYOwTqQ494DZyUiiC3th5XHaP8ffaC9w\" width=\"600\"/></figure><figure><img alt=\"K3rVKI18B-2Belhpaqe2B1r4EoMMHEFFx5pG\" height=\"400\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/K3rVKI18B-2Belhpaqe2B1r4EoMMHEFFx5pG\" width=\"600\"/></figure><h4 id=\"add-navigation-links\">Add navigation links</h4><p>Currently our app doesn\u2019t have any way to navigate around other than changing the url directly. This doesn\u2019t work particularly well in this simple example as the data in our <code>RootStore</code> will get reset to the initial state as defined in <code>index.js</code> every time the page loads.</p><p>There are 2 other ways to change the route using mobx-state-tree-router:</p><ul><li><code>Link</code> components</li><li>Calling <code>router.setView(view, params)</code> directly</li></ul><p>I recommend using <code>Link</code> components where possible, but in some cases (like redirects) setting the view directly may be unavoidable. Let\u2019s update our <code>App</code> and <code>TodoList</code> components to add some navigation links using both methods:</p><p>You will now be able to add a <code>Todo</code> item on the <code>todos</code> view, then click the open button to go the <code>todo</code> view for the new item:</p><figure><img alt=\"8eH6t6vmnyuG3xWb0zVME9Rg7-d4VKj2GouY\" height=\"364\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/8eH6t6vmnyuG3xWb0zVME9Rg7-d4VKj2GouY\" width=\"800\"/></figure><h3 id=\"conclusion\">Conclusion</h3><p>I created mobx-state-tree-router because I found that there was a gap in the landscape for a state-based routing library to use with MobX State Tree. I have found it to be useful for me, so I hope it can also be useful to the wider community.</p><p>If you haven\u2019t already please read <a href=\"https://hackernoon.com/how-to-decouple-state-and-ui-a-k-a-you-dont-need-componentwillmount-cc90b787aa37\" rel=\"noopener\">Michel Weststrate\u2019s article</a> for some background on state-based routing.</p><p>If you have any issues to raise or contributions to make, please head over to <a href=\"https://github.com/miles-till/mobx-state-tree-router\" rel=\"noopener\">mobx-state-tree-router on Github</a>.</p>\n</section>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nby Miles TillIntroducing mobx-state-tree-routerIf you want to skip ahead to the finished example you can check it out at mobx-state-tree-router-demo.I wrote a library that makes it easy to configure state-based routing in MobX State Tree powered React apps, and I want to share it with you. To do this I will demonstrate how to build a very simple Todo app.Michel Weststrate, the creator of MobX, wrote a great article titled How to decouple state and UI (a.k.a. you don\u2019t need componentWillMount). I recommend reading it to understand the philosophy that inspired me to write mobx-state-tree-router. The key idea is that the application UI should be a function of the state.\u201cThis approach has better decoupling of state and UI. This has a few advantages:1. The complete application flow can be tested without ever needing to instantiate a component.2. More components can be dumb; they don\u2019t have to fetch data or process routing.3. Our stores become more like a state machine, making it easy to follow the transitions of our application.\u201d- Michel WeststratePrerequisitesThese will need to be installed to follow this tutorial:Node.js \u2014 used for running the dev serverYarn \u2014 used for package managementNote: NPM can be used instead of Yarn but some commands may be different.Create a basic React appUse create-react-app to get started quicklyIf you haven\u2019t used it before, the easiest way to get started with a React app is to use a scaffolding tool by the developers of React called Create React App. This tool configures Webpack and Babel for you with the most common requirements met.In your terminal run the following commands:npx create-react-app state-router-democd state-router-demoyarn startYou will now have a fully functioning basic React app to play with.Remove create-react-app stuff not needed for this exampleFor the purposes of this tutorial we don\u2019t need a lot of the stuff that create-react-app generates so go ahead and delete:src/App.csssrc/App.test.jssrc/index.csssrc/logo.svgsrc/serviceWorker.jsNote: Feel free to keep the css files and add your own styling.To keep things organised, create a components directory in our src and move src/App.js to src/components/App.js.Now update the following files to remove references to the files we deleted:src/components/App.jssrc/index.jsIf you still have the app running you will notice your browser has updated to show you the following:Create a Home page componentIn the components directory, create a file for our Home page component:src/components/Home.jsUpdate the App component to render our new Home page component:src/components/App.jsAdd MobX State Tree modelsInstall MobX and MobX State TreeMobX is a library for state management, and it works great with React as our renderer. MobX State Tree is a tree shaped state container built on top of MobX.In your terminal run:yarn add mobx mobx-react mobx-state-treeLike our we did for our components, create a models directory to keep our MobX State Tree models organised.Create a RootStore modelIn our state tree we\u2019ll have a RootStore which holds our data stores (in this case a TodoStore) and our RouterStore, but we\u2019ll get to that later.src/models/RootStore.jsCreate TodoStore and Todo modelsOur TodoStore contains Todo objects which are able to be created, removed, and updated. We also need to be able to find a Todo object by its id.src/models/TodoStore.jsInitialize the RootStoreWhen our app loads, we want to initialize the RootStore with a known state. For this trivial example we won\u2019t be concerned about persisting our data to storage in any way. We then want to make sure the RootStore is available to be injected into our components, so we use the MobX React component Provider to do this.src/index.jsCreate a TodoList page componentNow that we have a RootStore for our state tree, we need some components to view and change the data.src/components/TodoList.jsUpdate the App component to display our new TodoList component.src/components/App.jsAt this point the app should have a list of Todo objects which you can add to and remove from.Create a Todo page componentNow we want to create a new component to display and edit a Todo object. Note that we are using inject to make the RootStore available in the component\u2019s props.src/components/Todo.jsUpdate the App component to display our new Todo component.Now our updated app allows us to edit the data of the Todo whose id we pass to the Todo page component in <Todo todoId={0} />.Add state-based routingAt this point we should have a React app with our data stored in a MobX State Tree container. The data container is then being injected into the components that need access to the data. Now we want to connect together our page components in our app. A common approach would be to use a component based router such as React Router. Often the components become cluttered with route definitions and mount event handlers. This doesn\u2019t suit our state-first philosophy.I will now show you how to add mobx-state-tree-router to your app.Install mobx-state-tree-routerIn your terminal run:yarn add mobx-state-tree-routerAdd the router to the RootStoresrc/models/RootStore.jsCreate viewsThe router needs to be configured with a map of view models which define the route paths to match against and the page components to display. Hooks into the page change cycle can be defined on a view to perform data fetching, route change cancelling, redirection, and other tasks. These hooks can be synchronous or asynchronous.These hooks are:beforeExit(self, params)beforeEnter(self, params)onExit(self, params)onEnter(self, params)If either of the before hooks return false the route change will be cancelled.Create a views file:src/views.jsInitialize the router when our app startsThe router can be started by calling startRouter(router). This function connects the router to the browser\u2019s history and configures the routing based on router\u2019s views.src/index.jsRender the StateRouterUpdate the App component to include the StateRouter component, which renders the appropriate component for the router\u2019s current view.src/components/App.jsNow our app will respond to changes in the url path, for example /todos will show our TodoList component and /todos/0 will show our Todo component as configured in views.js.Add navigation linksCurrently our app doesn\u2019t have any way to navigate around other than changing the url directly. This doesn\u2019t work particularly well in this simple example as the data in our RootStore will get reset to the initial state as defined in index.js every time the page loads.There are 2 other ways to change the route using mobx-state-tree-router:Link componentsCalling router.setView(view, params) directlyI recommend using Link components where possible, but in some cases (like redirects) setting the view directly may be unavoidable. Let\u2019s update our App and TodoList components to add some navigation links using both methods:src/components/App.jssrc/components/TodoList.jsYou will now be able to add a Todo item on the todos view, then click the open button to go the todo view for the new item:ConclusionI created mobx-state-tree-router because I found that there was a gap in the landscape for a state-based routing library to use with MobX State Tree. I have found it to be useful for me, so I hope it can also be useful to the wider community.If you haven\u2019t already please read Michel Weststrate\u2019s article for some background on state-based routing.If you have any issues to raise or contributions to make, please head over to mobx-state-tree-router on Github.\n\n                        \n                    \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 8180, "excerpt": "by Miles Till\n\nHow to build a state-based router using React and MobX State Tree\nIntroducing mobx-state-tree-router\n[https://github.com/miles-till/mobx-state-tree-router]\n\nImage by medithIT [https://www.flickr.com/photos/medithit/] on Flickr\n[https://www.flickr.com/photos/medithit/10363854753/]If you want to skip ahead\nto the finished example you can check it out at mobx-state-tree-router-demo\n[https://github.com/miles-till/mobx-state-tree-router-demo].\n\nI wrote a library that makes it easy to c", "siteName": "freeCodeCamp.org", "publishedTime": "2019-05-03T17:31:11.000Z", "id": "02b830da7361ce23aef99e578f7c39b73dbb8201", "url": "https://www.freecodecamp.org/news/how-to-build-a-state-based-router-using-react-and-mobx-state-tree-e91b2b8e8d79/", "domain": "freecodecamp.org", "date": "2023-12-27T18:10:41.864505", "resultUri": "http://localhost:3000/result/02b830da7361ce23aef99e578f7c39b73dbb8201", "query": {"url": ["https://www.freecodecamp.org/news/how-to-build-a-state-based-router-using-react-and-mobx-state-tree-e91b2b8e8d79/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "How to build a state-based router using React and MobX State Tree", "description": "by Miles Till How to build a state-based router using React and MobX State Tree Introducing mobx-state-tree-router [https://github.com/miles-till/mobx-state-tree-router] Image by medithIT [https://www.flickr.com/photos/medithit/] on Flickr [https://www.flickr.com/photos/medithit/10363854753/]If you want to skip ahead to the finished example you can check it out at mobx-state-tree-router-demo [https://github.com/miles-till/mobx-state-tree-router-demo]. I wrote a library that makes it easy", "url": "https://www.freecodecamp.org/news/how-to-build-a-state-based-router-using-react-and-mobx-state-tree-e91b2b8e8d79/", "image": "https://cdn-media-1.freecodecamp.org/images/1*IIwgT670HJ7Ni-_UDA3-Ow.jpeg", "image:width": "786", "image:height": "611"}, "twitter": {"card": "summary_large_image", "title": "How to build a state-based router using React and MobX State Tree", "description": "by Miles Till How to build a state-based router using React and MobX State Tree Introducing mobx-state-tree-router [https://github.com/miles-till/mobx-state-tree-router] Image by medithIT [https://www.flickr.com/photos/medithit/] on Flickr [https://www.flickr.com/photos/medithit/10363854753/]If you want to skip ahead to the finished example you can check it out at mobx-state-tree-router-demo [https://github.com/miles-till/mobx-state-tree-router-demo]. I wrote a library that makes it easy", "url": "https://www.freecodecamp.org/news/how-to-build-a-state-based-router-using-react-and-mobx-state-tree-e91b2b8e8d79/", "image": "https://cdn-media-1.freecodecamp.org/images/1*IIwgT670HJ7Ni-_UDA3-Ow.jpeg", "label1": "Written by", "data1": "freeCodeCamp.org", "label2": "Filed under", "data2": "React, Routing, JavaScript, Tech, Programming", "site": "@freecodecamp"}}}