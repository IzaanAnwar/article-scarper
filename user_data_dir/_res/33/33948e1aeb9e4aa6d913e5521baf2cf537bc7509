{"title": "How to Handle Errors in Python \u2013 the try, except, else, and finally Keywords Explained", "byline": "P S Mohammed Ali", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>How to Handle Errors in Python \u2013 the try, except, else, and finally Keywords Explained</h1>\n<section>\n<section data-test-label=\"post-content\">\n<blockquote>\u201cIt\u2019s hard enough to find an error in your code when you\u2019re looking for it; it\u2019s even harder when you\u2019ve assumed your code is error-free.\u201d<br/>\u2015 Steve McConnell</blockquote><p>Errors are inevitable in a programmer's life. In fact, while writing programs, errors can be really helpful in identifying the logic bugs and syntax errors in your code.</p><p>But, if you can anticipate an error in a particular set of code lines before execution, then you can handle those errors and make the code error free. </p><h2 id=\"why-error-handling-is-important\">Why Error Handling is Important</h2><p>Handling or taking care of errors that you're aware of helps the code flow and execute smoothly without any interruptions. If errors occur in any lines of code, the error handling takes care of them and then the code resumes execution. </p><p>Let's take an example and understand why we need error handling:</p><figure><pre tabindex=\"0\"><code>a = 12\nb = 6\nresult = a/b\nprint(result)\nprint(\"I have reached the end of the line\")</code></pre><figcaption>Program with no error</figcaption></figure><p>From the above code, what do you expect ?. Well, the <code>result</code> variable prints <code>2.0</code> and on the next line, the console prints <code>I have reached the end of the line</code>. That's what we are excepting. </p><p>Let's change value of <code>b</code> from <code>b = 6</code> to <code>b = 0</code> and run.</p><figure><pre tabindex=\"0\"><code>1. a = 12\n2. b = 0\n3. result = a/b\n4. print(result)\n5. print(\"I have reached the end of the line\")</code></pre><figcaption>Program with error</figcaption></figure><p>When this code gets executed, we will get an error as below:</p><figure><img alt=\"2\" height=\"89\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2022/10/2.PNG\" width=\"291\"/><figcaption>Error message displayed when b is set to 0</figcaption></figure><p>The code didn't print the <code>result</code> value and it also didn't print <code>I have reached the end of the line</code></p><p>The above error messages displays <code>division by zero</code>, which means that if we try to divide any number by <code>0</code>, we will get this error. </p><p>The problem is in line <code>3</code>. Even though the code didn't print the <code>result</code> value, it should have printed <code>I have reached the end of the line</code>. But, it didn't \u2013 why ? </p><p>Well, because the Python interpreter stopped at line 3 when the <code>a</code> got divided by <code>0</code>. At this point, it raised an error in the console and exited the code.</p><p>One of the naive solutions to solve this problem can be hard coding the values. If the values of <code>a</code> and \u00a0<code>b</code> are hard-coded, then running the code will solve this error to some extent. </p><p>But the other major problem that may arise is when a user wants to give values of <code>a</code> and <code>b</code> at the time of execution. </p><figure><pre tabindex=\"0\"><code>a = int(input())\nb = int(input())\nresult = a/b\nprint(result)\nprint(\"I have reached the end of the line\")</code></pre><figcaption>values of a and b are taken from user</figcaption></figure><p>At this time, there's a high probability that the user will give <code>0</code> as the input to <code>b</code>. In order to handle this kind of expected error, we will use certain methods of error handling in order to avoid interrupting the execution flow (even though the user might give any invalid input like <code>0</code> as input to <code>b</code>).</p><p>Any lines of code that are more prone to errors are kept in <code>try</code> block. If any error occurs, then the <code>except</code> block will take care of those errors. </p><p>The code structure looks something like this:</p><figure><pre tabindex=\"0\"><code>try:\n   code that may/may not produce errors\nexcept:\n   when error arises, then this block of code exceutes.\n   Otherwise, this block of code doesn't exceute\n    </code></pre><figcaption>Code Structure of try/except keywords</figcaption></figure><p>Let's come back to the standard example that we have been discussing. We will handle the <code>division by zero</code> problem using <code>try/except</code> blocks.</p><p>Let's insert the lines of code that have a high probability of producing an error. In our case, lines <code>1-4</code> of our code have high potential to produce an error. So, we put these four lines in the <code>try</code> block:</p><figure><pre tabindex=\"0\"><code>try:\n  a = int(input())\n  b = int(input())\n  result = a/b\n  print(result)\nexcept:\n  print(\"We caught an error\")\n \nprint(\"I have reached the end of the line\")</code></pre><figcaption>Try and Except block to divisible problem</figcaption></figure><p>Now, when we give <code>b</code> a value of <code>0</code>, an error occurs. So, the <code>except</code> block executes and the interpreter prints <code>We caught an error</code> and comes out of the except block and resumes printing <code>I have reached the end of the line</code>. </p><p>On the other hand, when we give <code>b</code> a non-zero value, then we print the <code>result</code> value. The code comes out of the try block and resumes printing <code>I have reached the end of the line</code>.</p><p>In both cases, we are able to execute until the last line of code without any interruptions. </p><p>Apart from try and except, it's quite important to understand the <code>else</code> and <code>finally</code> keywords that come along with <code>try</code> and <code>except</code>.</p><p>The <code>else</code> block of code comes after the <code>try</code> and <code>except</code> blocks and executes when no error is raised from the <code>try</code> code block. Similarly, the <code>finally</code> code block comes after the <code>else</code> block and executes whether errors occur or not \u2013 this block will execute for sure.</p><p>Now that you understand how the <code>try</code>, <code>except</code>, <code>else</code>, and <code>finally</code> code blocks work, the order of flow will be:</p><figure><pre tabindex=\"0\"><code>try:\n   code that may/may not produce errors\n\nexcept:\n   when error arises, then this block of code exceutes\n\nelse:\n   when error doesn't arise, then this block of code exceutes\n\nfinally:\n   This block will exceute whether error occurs or not.</code></pre><figcaption>Code Structure of Error Handling keyword Blocks</figcaption></figure><p> \u00a0On applying the same structure to the number division problem, we get this:</p><figure><pre tabindex=\"0\"><code>try:\n  a = int(input())\n  b = int(input())\n  result = a/b\n  print(result)\n\nexcept:\n   print(\"We caught an error\")\n\nelse:\n   print(\"Hurray, we don't have any errors\")\n\nfinally:\n   print(\"I have reached the end of the line\")</code></pre><figcaption>Code Structure of number division problem after Error Handling keyword blocks</figcaption></figure><p>When <code>b</code> is assigned <code>0</code>, then we get an error. So, the except block executes and prints <code>We caught an Error</code> and finally the code block executes and prints <code>I have reached the end of the line</code>. </p><figure><img alt=\"55\" height=\"138\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2022/11/55.PNG\" width=\"298\"/><figcaption>Code execution flow when error occurs</figcaption></figure><p>On the other hand, if <code>b</code> gets <code>6</code> for example (or any non-zero value), then we divide the <code>a</code> value by <code>6</code> and store it in the <code>result</code> variable. The code then prints the <code>result</code> value. \u00a0</p><p>Then, the <code>else</code> block executes and prints <code>Hurray, we don't have any errors</code> and finally the code block executes and prints <code>I have reached the end of the line</code>. </p><figure><img alt=\"56\" height=\"120\" loading=\"lazy\" src=\"https://www.freecodecamp.org/news/content/images/2022/11/56.PNG\" width=\"290\"/><figcaption>Code execution flow when no error raises</figcaption></figure><h2 id=\"summary\">Summary</h2><p>Now I hope you understand how you can implement error handling in Python in order to catch potential errors with <code>try/except</code> blocks. </p><p>You've also learned how to use the <code>else</code> and <code>finally</code> code blocks that are associated with these error handling methods.</p><p>Happy Programming...</p>\n</section>\n<hr/>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \n\u201cIt\u2019s hard enough to find an error in your code when you\u2019re looking for it; it\u2019s even harder when you\u2019ve assumed your code is error-free.\u201d\u2015 Steve McConnellErrors are inevitable in a programmer's life. In fact, while writing programs, errors can be really helpful in identifying the logic bugs and syntax errors in your code.But, if you can anticipate an error in a particular set of code lines before execution, then you can handle those errors and make the code error free. Why Error Handling is ImportantHandling or taking care of errors that you're aware of helps the code flow and execute smoothly without any interruptions. If errors occur in any lines of code, the error handling takes care of them and then the code resumes execution. Let's take an example and understand why we need error handling:a = 12\nb = 6\nresult = a/b\nprint(result)\nprint(\"I have reached the end of the line\")Program with no errorFrom the above code, what do you expect ?. Well, the result variable prints 2.0 and on the next line, the console prints I have reached the end of the line. That's what we are excepting. Let's change value of b from b = 6 to b = 0 and run.1. a = 12\n2. b = 0\n3. result = a/b\n4. print(result)\n5. print(\"I have reached the end of the line\")Program with errorWhen this code gets executed, we will get an error as below:Error message displayed when b is set to 0The code didn't print the result value and it also didn't print I have reached the end of the lineThe above error messages displays division by zero, which means that if we try to divide any number by 0, we will get this error. The problem is in line 3. Even though the code didn't print the result value, it should have printed I have reached the end of the line. But, it didn't \u2013 why ? Well, because the Python interpreter stopped at line 3 when the a got divided by 0. At this point, it raised an error in the console and exited the code.One of the naive solutions to solve this problem can be hard coding the values. If the values of a and \u00a0b are hard-coded, then running the code will solve this error to some extent. But the other major problem that may arise is when a user wants to give values of a and b at the time of execution. a = int(input())\nb = int(input())\nresult = a/b\nprint(result)\nprint(\"I have reached the end of the line\")values of a and b are taken from userAt this time, there's a high probability that the user will give 0 as the input to b. In order to handle this kind of expected error, we will use certain methods of error handling in order to avoid interrupting the execution flow (even though the user might give any invalid input like 0 as input to b).Any lines of code that are more prone to errors are kept in try block. If any error occurs, then the except block will take care of those errors. The code structure looks something like this:try:\n   code that may/may not produce errors\nexcept:\n   when error arises, then this block of code exceutes.\n   Otherwise, this block of code doesn't exceute\n    Code Structure of try/except keywordsLet's come back to the standard example that we have been discussing. We will handle the division by zero problem using try/except blocks.Let's insert the lines of code that have a high probability of producing an error. In our case, lines 1-4 of our code have high potential to produce an error. So, we put these four lines in the try block:try:\n  a = int(input())\n  b = int(input())\n  result = a/b\n  print(result)\nexcept:\n  print(\"We caught an error\")\n \nprint(\"I have reached the end of the line\")Try and Except block to divisible problemNow, when we give b a value of 0, an error occurs. So, the except block executes and the interpreter prints We caught an error and comes out of the except block and resumes printing I have reached the end of the line. On the other hand, when we give b a non-zero value, then we print the result value. The code comes out of the try block and resumes printing I have reached the end of the line.In both cases, we are able to execute until the last line of code without any interruptions. Apart from try and except, it's quite important to understand the else and finally keywords that come along with try and except.The else block of code comes after the try and except blocks and executes when no error is raised from the try code block. Similarly, the finally code block comes after the else block and executes whether errors occur or not \u2013 this block will execute for sure.Now that you understand how the try, except, else, and finally code blocks work, the order of flow will be:try:\n   code that may/may not produce errors\n\nexcept:\n   when error arises, then this block of code exceutes\n\nelse:\n   when error doesn't arise, then this block of code exceutes\n\nfinally:\n   This block will exceute whether error occurs or not.Code Structure of Error Handling keyword Blocks \u00a0On applying the same structure to the number division problem, we get this:try:\n  a = int(input())\n  b = int(input())\n  result = a/b\n  print(result)\n\nexcept:\n   print(\"We caught an error\")\n\nelse:\n   print(\"Hurray, we don't have any errors\")\n\nfinally:\n   print(\"I have reached the end of the line\")Code Structure of number division problem after Error Handling keyword blocksWhen b is assigned 0, then we get an error. So, the except block executes and prints We caught an Error and finally the code block executes and prints I have reached the end of the line. Code execution flow when error occursOn the other hand, if b gets 6 for example (or any non-zero value), then we divide the a value by 6 and store it in the result variable. The code then prints the result value. \u00a0Then, the else block executes and prints Hurray, we don't have any errors and finally the code block executes and prints I have reached the end of the line. Code execution flow when no error raisesSummaryNow I hope you understand how you can implement error handling in Python in order to catch potential errors with try/except blocks. You've also learned how to use the else and finally code blocks that are associated with these error handling methods.Happy Programming...\n\n                        \n                    \n                    \n                        \n                        \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 6791, "excerpt": "> \u201cIt\u2019s hard enough to find an error in your code when you\u2019re looking for it; it\u2019s\neven harder when you\u2019ve assumed your code is error-free.\u201d\n\u2015 Steve McConnell\nErrors are inevitable in a programmer's life. In fact, while writing programs,\nerrors can be really helpful in identifying the logic bugs and syntax errors in\nyour code.\n\nBut, if you can anticipate an error in a particular set of code lines before\nexecution, then you can handle those errors and make the code error free. \n\nWhy Error Handlin", "siteName": "freeCodeCamp.org", "publishedTime": "2022-11-01T14:53:34.000Z", "id": "33948e1aeb9e4aa6d913e5521baf2cf537bc7509", "url": "https://www.freecodecamp.org/news/how-to-handle-errors-in-python/", "domain": "freecodecamp.org", "date": "2023-12-27T18:05:12.556253", "resultUri": "http://localhost:3000/result/33948e1aeb9e4aa6d913e5521baf2cf537bc7509", "query": {"url": ["https://www.freecodecamp.org/news/how-to-handle-errors-in-python/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "How to Handle Errors in Python \u2013 the try, except, else, and finally Keywords Explained", "description": "> \u201cIt\u2019s hard enough to find an error in your code when you\u2019re looking for it; it\u2019s even harder when you\u2019ve assumed your code is error-free.\u201d \u2015 Steve McConnell Errors are inevitable in a programmer's life. In fact, while writing programs, errors can be really helpful in identifying the logic", "url": "https://www.freecodecamp.org/news/how-to-handle-errors-in-python/", "image": "https://www.freecodecamp.org/news/content/images/2022/10/11.jpg", "image:width": "509", "image:height": "339"}, "twitter": {"card": "summary_large_image", "title": "How to Handle Errors in Python \u2013 the try, except, else, and finally Keywords Explained", "description": "> \u201cIt\u2019s hard enough to find an error in your code when you\u2019re looking for it; it\u2019s even harder when you\u2019ve assumed your code is error-free.\u201d \u2015 Steve McConnell Errors are inevitable in a programmer's life. In fact, while writing programs, errors can be really helpful in identifying the logic", "url": "https://www.freecodecamp.org/news/how-to-handle-errors-in-python/", "image": "https://www.freecodecamp.org/news/content/images/2022/10/11.jpg", "label1": "Written by", "data1": "P S Mohammed Ali", "label2": "Filed under", "data2": "Python, Programming, Error Handling", "site": "@freecodecamp"}}}