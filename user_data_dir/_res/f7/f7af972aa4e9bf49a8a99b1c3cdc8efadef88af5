{"title": "How to create a Timeline Component with React", "byline": "Florin Pop", "dir": null, "lang": "en", "content": "<div class=\"page\" id=\"readability-page-1\"><div id=\"site-main\">\n<article><h1>How to create a Timeline Component with React</h1>\n<section>\n<section data-test-label=\"post-content\">\n<p>These days I\u2019ve been working on a new page for my website. I wanted to have a <a href=\"https://www.florin-pop.com/timeline\" rel=\"noopener\">Timeline</a> to showcase some of my professional accomplishments over the years.</p><p>I did it for a couple of reasons:</p><ol><li>My future self will look back one day and say: \u201cWow\u2026 I remember the day when I did that! How happy I was to achieve that goal!\u201d Our success is a journey, not a destination and I want to write down every goal that I achieve along the way</li><li>It might attract more clients (we\u2019ll see how this goes ?)</li><li>In my opinion it is a different kind of portfolio. A unique portfolio, maybe? ?</li></ol><p>Nevertheless\u2026 Let\u2019s build something now!</p><p>In the picture above you can see what we\u2019re going to build today using React! Before we start let\u2019s break down the steps we need to take:</p><ol><li>Create the <code>data</code> that we'll need</li><li>Create the <code>TimelineItem</code> component - each individual timeline entry</li><li>Create a <code>Timeline</code> container - it will take the <code>data</code> and pass it down to the <code>TimelineItem</code>s</li><li>Style everything</li></ol><h3 id=\"create-the-data\">Create the data</h3><p>Before we move to actually create the React components we need to know exactly how the data is going to look so we can plan out the DOM structure.</p><p>For this Timeline app we\u2019re going to need an <em>array</em> of objects. We will call this array: <code>timelineData</code>.</p><p>Let\u2019s see how it might look:</p><pre tabindex=\"0\"><code>[\n    {\n        text: 'Wrote my first blog post ever on Medium',\n        date: 'March 03 2017',\n        category: {\n            tag: 'medium',\n            color: '#018f69'\n        },\n        link: {\n            url:\n                'https://medium.com/@popflorin1705/javascript-coding-challenge-1-6d9c712963d2',\n            text: 'Read more'\n        }\n    },\n    {\n        // Another object with data\n    }\n];</code></pre><p>The properties are pretty straightforward, right? I used similar data to what I have on my timeline page, so we can say that this is production ready! ?</p><p>Next, we\u2019ll build the <code>TimelineItem</code> component. This will use the data from the object above:</p><h3 id=\"the-timelineitem-component\">The TimelineItem component</h3><pre tabindex=\"0\"><code>const TimelineItem = ({ data }) =&gt; (\n    &lt;div className=\"timeline-item\"&gt;\n        &lt;div className=\"timeline-item-content\"&gt;\n            &lt;span className=\"tag\" style={{ background: data.category.color }}&gt;\n                {data.category.tag}\n            &lt;/span&gt;\n            &lt;time&gt;{data.date}&lt;/time&gt;\n            &lt;p&gt;{data.text}&lt;/p&gt;\n            {data.link &amp;&amp; (\n                &lt;a\n                    href={data.link.url}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                &gt;\n                    {data.link.text}\n                &lt;/a&gt;\n            )}\n            &lt;span className=\"circle\" /&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n);</code></pre><p>We have the following tags:</p><ol><li><code>.timeline-item</code> div - used as a wrapper. This div will have half the width of its parent's width (<code>50%</code>) and every other <code>.timeline-item</code> div will be placed to the <strong>right</strong> side using the <code>:nth-child(odd)</code> selector</li><li><code>.timeline-item-content</code> div - another wrapper (more on why we need this in the styling section)</li><li><code>.tag</code> span - this tag will have a custom background color depending on the category</li><li>the <code>time</code>/<code>date</code> and the <code>text</code></li><li><code>link</code> - we will need to check this to see if a <code>link</code> is provided because we might not always want to have one</li><li><code>.circle</code> span - this tag will be used to place a circle on the middle line/bar</li></ol><p><strong>Note</strong>: Everything will make much more sense when we get to the <strong>CSS</strong>/styling part, but before that let\u2019s create the <code>Timeline</code> component:</p><h3 id=\"the-timeline-container\">The Timeline container</h3><p>This component will basically <code>map</code> over the array and for each object it will create a <code>TimelineItem</code> component. We also add a small check to make sure that there is at least one element in the array:</p><pre tabindex=\"0\"><code>import timelineData from '_path_to_file_';\n\nconst Timeline = () =&gt;\n    timelineData.length &gt; 0 &amp;&amp; (\n        &lt;div className=\"timeline-container\"&gt;\n            {timelineData.map((data, idx) =&gt; (\n                &lt;TimelineItem data={data} key={idx} /&gt;\n            ))}\n        &lt;/div&gt;\n    );</code></pre><p>As mentioned above, the <code>timelineData</code> is the array of objects containing all the required information. In my case I stored this array in a file and I imported it here, but you can take this from your own database or from an API endpoint, it's up to you.</p><h3 id=\"the-css\">The CSS</h3><p><strong>Note:</strong> most of the wrappers will be <code>flexbox</code> containers because we can play around easier with their positioning.</p><p>Let's start with the <code>.timeline-container</code> CSS:</p><pre tabindex=\"0\"><code>.timeline-container {\n    display: flex;\n    flex-direction: column;\n    position: relative;\n    margin: 40px 0;\n}\n\n.timeline-container::after {\n    background-color: #e17b77;\n    content: '';\n    position: absolute;\n    left: calc(50% - 2px);\n    width: 4px;\n    height: 100%;\n}</code></pre><p>We\u2019re using the <code>::after</code> selector to create that red line/bar in the middle of the <code>.timeline-container</code>. Using the <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/calc\" rel=\"noopener\">calc()</a></code> function we can position the line exactly in the middle by subtracting half of its size (<code>2px</code>) from <code>50%</code>. We need to do this because by default the <code>left</code> property positions it according to the left edge of an element and not the middle.</p><p>Now, let\u2019s move to the <code>.timeline-item</code> wrapper.</p><p>Below you can see an example of how these are positioned within their parent (the <code>.timeline-container</code>). For demonstration purposes I added a border to highlight these wrappers:</p><figure><img alt=\"5magmHaf8PAjsks68sGQsWm0CoYXoNqUZ1v6\" height=\"403\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/5magmHaf8PAjsks68sGQsWm0CoYXoNqUZ1v6\" width=\"650\"/></figure><p>As you can see, every other wrapper goes to the <strong>right</strong>, and the inner wrapper (the <code>.timeline-item-content</code>) is taking less space \u2014 space given by the <code>p</code> tag which is inside it (mostly).</p><p>Let's see the CSS for this:</p><pre tabindex=\"0\"><code>.timeline-item {\n    display: flex;\n    justify-content: flex-end;\n    padding-right: 30px;\n    position: relative;\n    margin: 10px 0;\n    width: 50%;\n}\n\n.timeline-item:nth-child(odd) {\n    align-self: flex-end;\n    justify-content: flex-start;\n    padding-left: 30px;\n    padding-right: 0;\n}</code></pre><p>The <strong>key</strong> to this is that we use the <code>:nth-child(odd)</code> selector and we set the <code>align-self</code> property to <code>flex-end</code> which means:\u201cGo to the right as much as you can\u201d!</p><p>Because these wrappers are <code>50%</code> in width, you can see that two of them take up the whole width. From now on, every time we want to style differently something in the <strong>right</strong> side, we'll have to use this approach.</p><p>Next, the <code>.timeline-item-content</code> wrapper:</p><pre tabindex=\"0\"><code>.timeline-item-content {\n    box-shadow: 0 0 5px rgba(0, 0, 0, 0.3);\n    border-radius: 5px;\n    background-color: #fff;\n    display: flex;\n    flex-direction: column;\n    align-items: flex-end;\n    padding: 15px;\n    position: relative;\n    width: 400px;\n    max-width: 70%;\n    text-align: right;\n}\n\n.timeline-item-content::after {\n    content: ' ';\n    background-color: #fff;\n    box-shadow: 1px -1px 1px rgba(0, 0, 0, 0.2);\n    position: absolute;\n    right: -7.5px;\n    top: calc(50% - 7.5px);\n    transform: rotate(45deg);\n    width: 15px;\n    height: 15px;\n}\n\n.timeline-item:nth-child(odd) .timeline-item-content {\n    text-align: left;\n    align-items: flex-start;\n}\n\n.timeline-item:nth-child(odd) .timeline-item-content::after {\n    right: auto;\n    left: -7.5px;\n    box-shadow: -1px 1px 1px rgba(0, 0, 0, 0.2);\n}</code></pre><p>We have a few things going on:</p><ol><li>This wrapper has a fixed <code>width</code> and also a <code>max-width</code>. This is because we want it to have some boundaries, meaning that if there are only a few words, we want the box to be at least <code>400px</code> wide, but if there is a lot of text, it shouldn't take up the full space (the <code>50%</code>from the <code>.timeline-item</code> wrapper) but the text should move on to the next line -&gt; this is the reason we used this second wrappe<code>r: .timeline-item-cont</code>ent</li><li>The <code>text-align</code> and <code>align-items</code> properties are used to push the inner elements to the left or to the right, depending on the parent</li><li>The small <strong>arrow</strong> that points to the middle line is given by the styles applied on the <code>::after</code> selector. Basically it is a box with a <code>box-shadow</code> applied on it that is rotated <code>45deg</code></li><li>As mentioned above, we style the <strong>right</strong> side by selecting the parent with the <code>:nth-child(odd)</code> selector</li></ol><p>Next up, all the inner elements:</p><pre tabindex=\"0\"><code>.timeline-item-content .tag {\n    color: #fff;\n    font-size: 12px;\n    font-weight: bold;\n    top: 5px;\n    left: 5px;\n    letter-spacing: 1px;\n    padding: 5px;\n    position: absolute;\n    text-transform: uppercase;\n}\n\n.timeline-item:nth-child(odd) .timeline-item-content .tag {\n    left: auto;\n    right: 5px;\n}\n\n.timeline-item-content time {\n    color: #777;\n    font-size: 12px;\n    font-weight: bold;\n}\n\n.timeline-item-content p {\n    font-size: 16px;\n    line-height: 24px;\n    margin: 15px 0;\n    max-width: 250px;\n}\n\n.timeline-item-content a {\n    font-size: 14px;\n    font-weight: bold;\n}\n\n.timeline-item-content a::after {\n    content: ' \u25ba';\n    font-size: 12px;\n}\n\n.timeline-item-content .circle {\n    background-color: #fff;\n    border: 3px solid #e17b77;\n    border-radius: 50%;\n    position: absolute;\n    top: calc(50% - 10px);\n    right: -40px;\n    width: 20px;\n    height: 20px;\n    z-index: 100;\n}\n\n.timeline-item:nth-child(odd) .timeline-item-content .circle {\n    right: auto;\n    left: -40px;\n}</code></pre><p>Few things to note here:</p><ol><li>As you might have guessed, the <code>.tag</code> is positioned <code>absolute</code> because we want to keep it in the top left (or right) corner no matter what size is the box</li><li>We want to add a small caret <em>after</em> the <code>a</code> tag to highlight that it is a link</li><li>We create a <code>.circle</code> and position it on top of the middle line/bar directly in <em>front</em> of the arrow</li></ol><p>We\u2019re almost done! ? The only thing that\u2019s left to do is to add the CSS to make everything responsive across all screen sizes:</p><pre tabindex=\"0\"><code>@media only screen and (max-width: 1023px) {\n    .timeline-item-content {\n        max-width: 100%;\n    }\n}\n\n@media only screen and (max-width: 767px) {\n    .timeline-item-content,\n    .timeline-item:nth-child(odd) .timeline-item-content {\n        padding: 15px 10px;\n        text-align: center;\n        align-items: center;\n    }\n    \n    .timeline-item-content .tag {\n        width: calc(100% - 10px);\n        text-align: center;\n    }\n    \n    .timeline-item-content time {\n        margin-top: 20px;\n    }\n    \n    .timeline-item-content a {\n        text-decoration: underline;\n    }\n    \n    .timeline-item-content a::after {\n        display: none;\n    }\n}</code></pre><p>We have two media queries:</p><p>On small laptop screen sizes \u2014 <code>max-width: 1023px</code> \u2014 we want to allow the <code>.timeline-item-content</code> to go across the entire width of its parent because the screen is smaller and otherwise it would look squeezed</p><ol><li>On phones \u2014 <code>max-width: 767px</code></li></ol><ul><li>set the <code>.tag</code> to be full <code>width</code> (and for that we don't need to forget to subtract <code>10px</code>from the total of <code>100%</code> - this is because we have it positioned at <code>left: 5px</code>, so we remove double of this amount)</li><li>center all the text and push it down from the top just a little bit</li><li>remove the caret on the link and add an underline \u2014 looks better on mobile ?</li></ul><p>Aaaand\u2026 We\u2019re done!</p><figure><img alt=\"9kXUZLC3dRFtDKKoyhjxDsH1bRYdRpd2n0lG\" height=\"354\" loading=\"lazy\" src=\"https://cdn-media-1.freecodecamp.org/images/9kXUZLC3dRFtDKKoyhjxDsH1bRYdRpd2n0lG\" width=\"480\"/></figure><h3 id=\"conclusion\">Conclusion</h3><p>As I mentioned, this component is on my <a href=\"https://www.florin-pop.com/timeline\" rel=\"noopener\">Timeline</a> page. Check it out to see it in action! ?</p><p>If there is something that you didn\u2019t understand from this article, make sure you contact me and I\u2019ll be happy to answer your questions!</p><p>Happy Coding! ?</p><p><em>Originally published at <a href=\"https://www.florin-pop.com/blog/2019/04/how-to-create-a-timeline-with-react/\" rel=\"noopener\">www.florin-pop.com</a>.</em></p>\n</section>\n<hr/>\n<hr/>\n<p>\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. <a href=\"https://www.freecodecamp.org/learn/\" id=\"learn-to-code-cta\" rel=\"noopener noreferrer\" target=\"_blank\">Get started</a>\n</p>\n</section>\n</article>\n</div></div>", "textContent": "\n            \n                \n                \n                \n                    \n                \n                \n                    \n                            \nThese days I\u2019ve been working on a new page for my website. I wanted to have a Timeline to showcase some of my professional accomplishments over the years.I did it for a couple of reasons:My future self will look back one day and say: \u201cWow\u2026 I remember the day when I did that! How happy I was to achieve that goal!\u201d Our success is a journey, not a destination and I want to write down every goal that I achieve along the wayIt might attract more clients (we\u2019ll see how this goes ?)In my opinion it is a different kind of portfolio. A unique portfolio, maybe? ?Nevertheless\u2026 Let\u2019s build something now!In the picture above you can see what we\u2019re going to build today using React! Before we start let\u2019s break down the steps we need to take:Create the data that we'll needCreate the TimelineItem component - each individual timeline entryCreate a Timeline container - it will take the data and pass it down to the TimelineItemsStyle everythingCreate the dataBefore we move to actually create the React components we need to know exactly how the data is going to look so we can plan out the DOM structure.For this Timeline app we\u2019re going to need an array of objects. We will call this array: timelineData.Let\u2019s see how it might look:[\n    {\n        text: 'Wrote my first blog post ever on Medium',\n        date: 'March 03 2017',\n        category: {\n            tag: 'medium',\n            color: '#018f69'\n        },\n        link: {\n            url:\n                'https://medium.com/@popflorin1705/javascript-coding-challenge-1-6d9c712963d2',\n            text: 'Read more'\n        }\n    },\n    {\n        // Another object with data\n    }\n];The properties are pretty straightforward, right? I used similar data to what I have on my timeline page, so we can say that this is production ready! ?Next, we\u2019ll build the TimelineItem component. This will use the data from the object above:The TimelineItem componentconst TimelineItem = ({ data }) => (\n    <div className=\"timeline-item\">\n        <div className=\"timeline-item-content\">\n            <span className=\"tag\" style={{ background: data.category.color }}>\n                {data.category.tag}\n            </span>\n            <time>{data.date}</time>\n            <p>{data.text}</p>\n            {data.link && (\n                <a\n                    href={data.link.url}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    {data.link.text}\n                </a>\n            )}\n            <span className=\"circle\" />\n        </div>\n    </div>\n);We have the following tags:.timeline-item div - used as a wrapper. This div will have half the width of its parent's width (50%) and every other .timeline-item div will be placed to the right side using the :nth-child(odd) selector.timeline-item-content div - another wrapper (more on why we need this in the styling section).tag span - this tag will have a custom background color depending on the categorythe time/date and the textlink - we will need to check this to see if a link is provided because we might not always want to have one.circle span - this tag will be used to place a circle on the middle line/barNote: Everything will make much more sense when we get to the CSS/styling part, but before that let\u2019s create the Timeline component:The Timeline containerThis component will basically map over the array and for each object it will create a TimelineItem component. We also add a small check to make sure that there is at least one element in the array:import timelineData from '_path_to_file_';\n\nconst Timeline = () =>\n    timelineData.length > 0 && (\n        <div className=\"timeline-container\">\n            {timelineData.map((data, idx) => (\n                <TimelineItem data={data} key={idx} />\n            ))}\n        </div>\n    );As mentioned above, the timelineData is the array of objects containing all the required information. In my case I stored this array in a file and I imported it here, but you can take this from your own database or from an API endpoint, it's up to you.The CSSNote: most of the wrappers will be flexbox containers because we can play around easier with their positioning.Let's start with the .timeline-container CSS:.timeline-container {\n    display: flex;\n    flex-direction: column;\n    position: relative;\n    margin: 40px 0;\n}\n\n.timeline-container::after {\n    background-color: #e17b77;\n    content: '';\n    position: absolute;\n    left: calc(50% - 2px);\n    width: 4px;\n    height: 100%;\n}We\u2019re using the ::after selector to create that red line/bar in the middle of the .timeline-container. Using the calc() function we can position the line exactly in the middle by subtracting half of its size (2px) from 50%. We need to do this because by default the left property positions it according to the left edge of an element and not the middle.Now, let\u2019s move to the .timeline-item wrapper.Below you can see an example of how these are positioned within their parent (the .timeline-container). For demonstration purposes I added a border to highlight these wrappers:As you can see, every other wrapper goes to the right, and the inner wrapper (the .timeline-item-content) is taking less space \u2014 space given by the p tag which is inside it (mostly).Let's see the CSS for this:.timeline-item {\n    display: flex;\n    justify-content: flex-end;\n    padding-right: 30px;\n    position: relative;\n    margin: 10px 0;\n    width: 50%;\n}\n\n.timeline-item:nth-child(odd) {\n    align-self: flex-end;\n    justify-content: flex-start;\n    padding-left: 30px;\n    padding-right: 0;\n}The key to this is that we use the :nth-child(odd) selector and we set the align-self property to flex-end which means:\u201cGo to the right as much as you can\u201d!Because these wrappers are 50% in width, you can see that two of them take up the whole width. From now on, every time we want to style differently something in the right side, we'll have to use this approach.Next, the .timeline-item-content wrapper:.timeline-item-content {\n    box-shadow: 0 0 5px rgba(0, 0, 0, 0.3);\n    border-radius: 5px;\n    background-color: #fff;\n    display: flex;\n    flex-direction: column;\n    align-items: flex-end;\n    padding: 15px;\n    position: relative;\n    width: 400px;\n    max-width: 70%;\n    text-align: right;\n}\n\n.timeline-item-content::after {\n    content: ' ';\n    background-color: #fff;\n    box-shadow: 1px -1px 1px rgba(0, 0, 0, 0.2);\n    position: absolute;\n    right: -7.5px;\n    top: calc(50% - 7.5px);\n    transform: rotate(45deg);\n    width: 15px;\n    height: 15px;\n}\n\n.timeline-item:nth-child(odd) .timeline-item-content {\n    text-align: left;\n    align-items: flex-start;\n}\n\n.timeline-item:nth-child(odd) .timeline-item-content::after {\n    right: auto;\n    left: -7.5px;\n    box-shadow: -1px 1px 1px rgba(0, 0, 0, 0.2);\n}We have a few things going on:This wrapper has a fixed width and also a max-width. This is because we want it to have some boundaries, meaning that if there are only a few words, we want the box to be at least 400px wide, but if there is a lot of text, it shouldn't take up the full space (the 50%from the .timeline-item wrapper) but the text should move on to the next line -> this is the reason we used this second wrapper: .timeline-item-contentThe text-align and align-items properties are used to push the inner elements to the left or to the right, depending on the parentThe small arrow that points to the middle line is given by the styles applied on the ::after selector. Basically it is a box with a box-shadow applied on it that is rotated 45degAs mentioned above, we style the right side by selecting the parent with the :nth-child(odd) selectorNext up, all the inner elements:.timeline-item-content .tag {\n    color: #fff;\n    font-size: 12px;\n    font-weight: bold;\n    top: 5px;\n    left: 5px;\n    letter-spacing: 1px;\n    padding: 5px;\n    position: absolute;\n    text-transform: uppercase;\n}\n\n.timeline-item:nth-child(odd) .timeline-item-content .tag {\n    left: auto;\n    right: 5px;\n}\n\n.timeline-item-content time {\n    color: #777;\n    font-size: 12px;\n    font-weight: bold;\n}\n\n.timeline-item-content p {\n    font-size: 16px;\n    line-height: 24px;\n    margin: 15px 0;\n    max-width: 250px;\n}\n\n.timeline-item-content a {\n    font-size: 14px;\n    font-weight: bold;\n}\n\n.timeline-item-content a::after {\n    content: ' \u25ba';\n    font-size: 12px;\n}\n\n.timeline-item-content .circle {\n    background-color: #fff;\n    border: 3px solid #e17b77;\n    border-radius: 50%;\n    position: absolute;\n    top: calc(50% - 10px);\n    right: -40px;\n    width: 20px;\n    height: 20px;\n    z-index: 100;\n}\n\n.timeline-item:nth-child(odd) .timeline-item-content .circle {\n    right: auto;\n    left: -40px;\n}Few things to note here:As you might have guessed, the .tag is positioned absolute because we want to keep it in the top left (or right) corner no matter what size is the boxWe want to add a small caret after the a tag to highlight that it is a linkWe create a .circle and position it on top of the middle line/bar directly in front of the arrowWe\u2019re almost done! ? The only thing that\u2019s left to do is to add the CSS to make everything responsive across all screen sizes:@media only screen and (max-width: 1023px) {\n    .timeline-item-content {\n        max-width: 100%;\n    }\n}\n\n@media only screen and (max-width: 767px) {\n    .timeline-item-content,\n    .timeline-item:nth-child(odd) .timeline-item-content {\n        padding: 15px 10px;\n        text-align: center;\n        align-items: center;\n    }\n    \n    .timeline-item-content .tag {\n        width: calc(100% - 10px);\n        text-align: center;\n    }\n    \n    .timeline-item-content time {\n        margin-top: 20px;\n    }\n    \n    .timeline-item-content a {\n        text-decoration: underline;\n    }\n    \n    .timeline-item-content a::after {\n        display: none;\n    }\n}We have two media queries:On small laptop screen sizes \u2014 max-width: 1023px \u2014 we want to allow the .timeline-item-content to go across the entire width of its parent because the screen is smaller and otherwise it would look squeezedOn phones \u2014 max-width: 767pxset the .tag to be full width (and for that we don't need to forget to subtract 10pxfrom the total of 100% - this is because we have it positioned at left: 5px, so we remove double of this amount)center all the text and push it down from the top just a little bitremove the caret on the link and add an underline \u2014 looks better on mobile ?Aaaand\u2026 We\u2019re done!ConclusionAs I mentioned, this component is on my Timeline page. Check it out to see it in action! ?If there is something that you didn\u2019t understand from this article, make sure you contact me and I\u2019ll be happy to answer your questions!Happy Coding! ?Originally published at www.florin-pop.com.\n\n                        \n                    \n                    \n                        \n                        \n                    \n\n                    \n                    \n                        \n    \n\n\n\n\n\n    \n    \n\n\n                        \n\n\n        Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\n    \n\n                    \n                \n                \n                    \n                \n            \n        ", "length": 11446, "excerpt": "These days I\u2019ve been working on a new page for my website. I wanted to have a \nTimeline [https://www.florin-pop.com/timeline] to showcase some of my\nprofessional accomplishments over the years.\n\nI did it for a couple of reasons:\n\n 1. My future self will look back one day and say: \u201cWow\u2026 I remember the day when\n    I did that! How happy I was to achieve that goal!\u201d Our success is a journey,\n    not a destination and I want to write down every goal that I achieve along\n    the way\n 2. It might attr", "siteName": "freeCodeCamp.org", "publishedTime": "2019-04-26T15:03:06.000Z", "id": "f7af972aa4e9bf49a8a99b1c3cdc8efadef88af5", "url": "https://www.freecodecamp.org/news/how-to-create-a-timeline-component-with-react-1b216f23d3d4/", "domain": "freecodecamp.org", "date": "2023-12-27T18:11:12.995859", "resultUri": "http://localhost:3000/result/f7af972aa4e9bf49a8a99b1c3cdc8efadef88af5", "query": {"url": ["https://www.freecodecamp.org/news/how-to-create-a-timeline-component-with-react-1b216f23d3d4/"]}, "meta": {"og": {"site_name": "freeCodeCamp.org", "type": "article", "title": "How to create a Timeline Component with React", "description": "These days I\u2019ve been working on a new page for my website. I wanted to have a  Timeline [https://www.florin-pop.com/timeline] to showcase some of my professional accomplishments over the years. I did it for a couple of reasons:  1. My future self will look back one day and say:", "url": "https://www.freecodecamp.org/news/how-to-create-a-timeline-component-with-react-1b216f23d3d4/", "image": "https://cdn-media-1.freecodecamp.org/images/0*WP3O7p7DkELIQIfs.png", "image:width": "650", "image:height": "484"}, "twitter": {"card": "summary_large_image", "title": "How to create a Timeline Component with React", "description": "These days I\u2019ve been working on a new page for my website. I wanted to have a  Timeline [https://www.florin-pop.com/timeline] to showcase some of my professional accomplishments over the years. I did it for a couple of reasons:  1. My future self will look back one day and say:", "url": "https://www.freecodecamp.org/news/how-to-create-a-timeline-component-with-react-1b216f23d3d4/", "image": "https://cdn-media-1.freecodecamp.org/images/0*WP3O7p7DkELIQIfs.png", "label1": "Written by", "data1": "Florin Pop", "label2": "Filed under", "data2": "Web Development, Programming, JavaScript, React, Technology", "site": "@freecodecamp", "creator": "@florinpop1705"}}}